declare module wDate {
   var Elapsed: string ;
   var LeapElapsed: string ;
   var LongMonths: string ;
   var GregorianVirtualOriginTo1900: string ;
   function InitwDates();
   function CurrentDate():number;
   function DateInt4(d:string):number;
   function DateString(d:number):string;
   function GetDateIntFormat():number;
   function GetDateSeparator():string;
   function IsDate(d:string):number;
   function SetDateIntFormat(f:number);
   function SetDateSeparator(f:string);
   function CurrentTime():number;
   function TimeInt4(t:string):number;
   function TimeString(t:number):string;
   function GetTimeIntFormat():number;
   function GetTimeSeparator():string;
   function IsTime(t:string):number;
   function SetTimeIntFormat(f:number);
   function SetTimeSeparator(f:string);
   function SetTimeAMPM(AM:string, PM:string);
   function GetTimeAM():string;
   function GetTimePM():string;
   function CurrentIntDay():number;
   function GetShortIntDay(d:number):string;
   function GetLongIntDay(d:number):string;
   function SetShortIntDay(d:number, e:string);
   function SetLongIntDay(d:number, e:string);
   function GetShortIntMonth(m:number):string;
   function GetLongIntMonth(m:number):string;
   function SetShortIntMonth(m:number, n:string);
   function SetLongIntMonth(m:number, n:string);
   function SetDateCompatibility(CompatibleMode:boolean):boolean;
   function SetCustomDateFormat(format:string);
   function GetCustomDateFormat(format:string);
   function SetCustomTimeFormat(format:string);
   function GetCustomTimeFormat(format:string);
   function SetDayAndMonthNamesFromOS();
   function SetDayAndMonthNamesByDefault();
   function IsLeapYear(theYear:number):boolean;
   function SinceGregorianVirtualOrigin(y:number):number;
   function DateAsInt4(theDate:string):number;
   function Int4AsTime(t:number):string;
   function TimeAsInt4(Time:string):number;
   function TimeIsValid(h:number, m:number, s:number, ss:number):boolean;
   function CurTime():string;
   function IsTimeValid(Time:string):boolean;
   function Int4AsDate(d:number):string;
   function Int4AsDay(date:number):string;
   function DateAsDay(date:string):string;
   function IsMonthLong(Month:number):boolean;
   function DateIsValid(d:number, m:number, y:number):boolean;
   function IsDateValid(date:string):boolean;
   function CurDate():string;
   function CurrentDay():string;
   function GetShortDay(d:string):string;
   function GetLongDay(d:string):string;
   function SetShortDay(d:string, e:string);
   function SetLongDay(d:string, e:string);
   function GetShortMonth(m:string):string;
   function GetLongMonth(m:string):string;
   function SetShortMonth(m:string, n:string);
   function SetLongMonth(m:string, n:string);
   function GetDateFormat():string;
   function SetDateFormat(f:string);
   function GetTimeFormat():string;
   function SetTimeFormat(f:string);
   function DaysInMonth(Month:string, Year:string):number;
   function DaysInYear(Year:string):number;
   function DateOf(theObj:aFullObject):number;
   function TimeOf(theObj:aFullObject):number;
   function FineTimeOf(theObj:aFullObject):number;
   function DateOfAsCString(theObj:aFullObject):string;
   function TimeOfAsCString(theObj:aFullObject):string;
   function FineTimeOfAsCString(theObj:aFullObject):string;
   function FineTimeString(t:number):string;
   function PickDate(theDate:number, theUIAgent:aUIAgent, X:number, Y:number, MinRangeDate:number, NoMin:boolean, MaxRangeDate:number, NoMax:boolean, BetweenMonthBackColor:string, MonthBackColor:string, MonthTextColor:string, TitleBackColor:string, TitleTextColor:string, TrailingTextColor:string, FontName:string, FontSize:number, FontSels:string):number;
}
declare module wPrn {
   function REP_OPEN():string;
   function REP_CLOSE(Handle:string);
   function REP_NEXT(Handle:string, Prn:string):string;
   function REP_DEFAULT(Handle:string):string;
   function REP_CLIENTDEFAULT(Handle:string):string;
   function REP_INFO(Prn:string, Index:number):string;
   function REP_SETUP(Prn:string):number;
   function REP_RESET(Prn:string);
   function REP_START(Prn:string, Title:string, Metrics:number):number;
   function REP_STOP(Prn:string);
   function REP_STARTINFOS(Prn:string, Title:string, Metrics:number):number;
   function REP_STOPINFOS(Prn:string);
   function REP_STARTRAW(Prn:string, Title:string):number;
   function REP_STOPRAW(Prn:string);
   function REP_PRINTRAW(Prn:string, Data:number, DataSize:number);
   function REP_NEWFRAME(Prn:string);
   function REP_WIDTH(Prn:string):number;
   function REP_HEIGHT(Prn:string):number;
   function REP_PS(Prn:string):string;
   function REP_DRAWHEADER(Prn:string, HH:number, HB:number, HF:number);
   function REP_DRAWBODY(Prn:string, Row:number, Column:number, HH:number, HB:number, HF:number);
   function REP_DRAWFOOTER(Prn:string, HH:number, HB:number, HF:number);
   function REP_COLUMNS(Handle:string, HH:number, HB:number, HF:number):number;
   function REP_ROWS(Handle:string, HH:number, HB:number, HF:number):number;
   function REP_PRINTSCREEN(Prn:string, Handle:number):number;
   function REP_SETLOGSIZEANDBORDERS(Prn:string, WIDTH:number, HEIGHT:number, LEFT:number, RIGHT:number, TOP:number, BOTTOM:number);
   function REP_SETORIENTATION(Prn:string, Orient:number):number;
   function REP_GETORIENTATION(Prn:string):number;
   function REP_START2(Prn:string, Title:string, Metrics:number):number;
   function REP_STARTPAGE(Prn:string):number;
   function REP_ENDPAGE(Prn:string):number;
   function REP_SETJOBTYPE(Prn:string, JT:number);
   function REP_GETJOBTYPE(Prn:string):number;
   function REP_SETUSERABORT(Prn:string, Abort:number);
   function REP_GETUSERABORT(Prn:string):number;
   function REP_GETPRINTERROR(Prn:string):number;
}
declare module wMath {
   function Arctan(Value:string):string;
   function Cos(Value:string):string;
   function Exp(Value:string):string;
   function Frac(Value:string):string;
   function TruncNum(Value:string):string;
   function Ln(Value:string):string;
   function Pi():string;
   function Sin(Value:string):string;
   function Sqr(Value:string):string;
   function Sqrt(Value:string):string;
   function Power(X:string, Y:string):string;
   function EArctan(Value:string):string;
   function ECos(Value:string):string;
   function EExp(Value:string):string;
   function EFrac(Value:string):string;
   function ETrunc(Value:string):string;
   function ELn(Value:string):string;
   function EPi():string;
   function ESin(Value:string):string;
   function ESqr(Value:string):string;
   function ESqrt(Value:string):string;
   function EPower(X:string, Y:string):string;
   function IsEven(Value:number):boolean;
   function AbsNum(theNum:string):string;
   function EAbsNum(theNum:string):string;
   function Round(theNum:string):string;
   function ERound(theNum:string):string;
   function IsEqual(LeftNum:string, RightNum:string):boolean;
   function IsEEqual(LeftNum:string, RightNum:string):boolean;
   function DPower10(Value:string, Power:number):string;
   function DRound(Value:string, Decimals:number, RoundKind:string):string;
   function DTrunc(Value:string):string;
   function DAbs(Value:string):string;
}
declare module Motor {
   function NewInst(OfThisClassId:number):string;
   function NewInstFromName(ClassName:string):string;
   function VersionNewInst(OfThisClassId:number, OfThisClassVersion:number):string;
   function NewNamedInst(OfThisClassId:number, ObjectNsId:number, ObjectId:number):string;
   function NewInstFromMotorClass(MotorClass:string):string;
   function CurrentVersionOf(ThisObject:aFullObject):aFullObject;
   function CurrentProjectOf(ThisObject:aFullObject):aFullObject;
   function LastVersionOf(ThisObject:aFullObject):aFullObject;
   function LastVersionInMemOf(ThisObject:aFullObject):string;
   function IsAProject(ThisObject:aFullObject):boolean;
   function IsCurrent(ThisObject:aFullObject):boolean;
   function IsNew(ThisObject:aFullObject):boolean;
   function ClassDefOf(TheClassId:number):aClassDef;
   function ClassIdOf(ClassName:string):number;
   function ThingFromMemory(NsId:number, Id:number, Version:number):aFullObject;
   function ThingFromId(NsId:number, Id:number, Version:number):aFullObject;
   function ThingFromIdInDB(theNsId:number, theId:number, theVersion:number):aFullObject;
   function AreSameThings(FirstObject:aFullObject, SecondObject:aFullObject):boolean;
   function FindModuleOrClassFromName(Name:string):string;
   function FindModuleOrClassFromNameCD(Name:string):string;
   function DelayedKillObject(mySelf:string);
   function DelayedCancelObject(mySelf:string);
   function OpenOQLCursor():string;
   function CloseOQLCursor(theCursor:string);
   function OQLError():number;
   function OQLErrorMsg(Msg:string):number;
   function SetOQLError(errNum:number, errMsg:string);
   function buildContextualNsId(fromReducedNSId:number):number;
   function buildNsId(fromReducedNSId:number, context:number):number;
   function reducedNSId(ofNSId:number):number;
   function NsIdContextOf(NSId:number):number;
   function currentNsIdContext():number;
   function SetCurrentNsIdContext(NSIdContext:number);
   function VarLinkFromId(FromThisObject:aLightObject, FromThisVarId:number):string;
   function VarLinkFromName(FromThisObject:aLightObject, FromThisVarName:string):string;
   function VarLinkFromClassAndId(FromThisMotorClass:string, FromThisVarId:number):string;
   function VarTypeFromVar(FromThisInstance:aLightObject, FromThisVar:string):string;
   function VarLinkFromVar(FromThisInstance:aLightObject, FromThisVar:string):string;
   function SetFullIdTo(thisObject:aFullObject, ObjectNsId:number, ObjectId:number);
   function VarAddressFromName(fromThisInstance:aLightObject, FromVarName:string):string;
   function VarAddressFromLink(FromThisInstance:aLightObject, FromThisVarLink:string):string;
   function MethodAddressFromName(fromThisInstance:aLightObject, FromMethodName:string):string;
   function MethodAddressFromId(theInstance:aLightObject, theMethodId:number):string;
   function PrevVersionOf(thisObject:aFullObject):string;
   function MemoryPrevVersionOf(thisObject:aFullObject):string;
   function LastVersionFromBaseOf(thisObject:aFullObject):string;
   function LastStoredVersionInMemOf(thisObject:aFullObject):string;
   function SearchForVersions(thisObject:string, theVersions:aListOfInstances, HowMany:number):number;
   function SearchForVersionsAnteriorTo(thisObject:aFullObject, theVersions:aListOfInstances, HowMany:number):number;
   function PutFirstInTransactionOfSecond(FirstObject:aFullObject, SecondObject:aFullObject);
   function FindOrCreateTransactionFor(thisObject:aFullObject):aTransaction;
   function ModuleRoutineIdFromName(ModuleId:number, MethodName:string):number;
   function ModuleRoutineTypeFromId(theModuleId:number, theMethodId:number):string;
   function MethodIdFromName(FromThisInstance:aLightObject, MethName:string):number;
   function MethodTypeFromId(theInstance:aLightObject, theMethodId:number):string;
   function MethodTypeFromName(forInst:aLightObject, MethName:string):string;
   function ModuleRoutineAddressFromId(theModuleId:number, theMethodId:number):string;
   function ModuleRoutineAddressFromName(theModuleName:string, theMethodName:string):string;
   function ClassIdFromName(ModName:string, Version:number):number;
   function MethodRankFromId(FromThisInstance:aLightObject, MethodId:number):number;
   function ThingFromFullId(theFullId:string):string;
   function SetDefaultOQLSelectDBMgr(theDBMgr:aDBMgr):aDBMgr;
   function SetDefaultOQLSelectDBMgrFromName(theDBName:string):aDBMgr;
   function GetDefaultOQLSelectDBMgr():aDBMgr;
   function VarTypeFromName(FromThisInstance:aLightObject, FromThisVarName:string):string;
   function UIAgentFromName(FromThisInstance:aLightObject, FromThisVarName:string):aUIAgent;
   function UIAgentFromVarAddress(FromThisInstance:aLightObject, FromThisVarAddress:string):aUIAgent;
   function IsAUIAgent(thisUIAgent:aUIAgent):boolean;
   function KillObjectWhenPresentationClosed(mySelf:string);
   function CancelObjectWhenPresentationClosed(mySelf:string);
   function findDBMgr(OfThisDataSet:string):string;
   function GetRunningContext():string;
   function findNearestWideMotorDBMgr(theWideMotorDataSet:number):aDBMgr;
   function findDBMgrFromName(thisName:string):aDBMgr;
   function KillThingOf(thisObject:aFullObject, ObjectAlreadyModified:boolean);
   function IsThingKilled(theNsId:number, theId:number, theVersion:number):boolean;
   function LockSharedDataBases():boolean;
   function UnlockSharedDataBases():boolean;
   function DeleteThingFromDataBase(theFullId:string);
   function GetPrinter():string;
   function ReleasePrinter();
   function DisposeMem();
   function GetEventProc(theUIAgent:aUIAgent, NameOfEvent:string, EventProcVarAddr:string):string;
   function OpenSQLCursor():string;
   function CloseSQLCursor(theCursor:string);
   function LockCurrentVersionOf(thisObject:aFullObject):string;
   function UnLockCurrentVersionOf(thisObject:aFullObject);
   function SetCorrespondingFullIdProc(theProcAddr:string);
   function UserIsOk(theMessage:string):boolean;
   function UserAnswers(theMessage:string):string;
   function AsGoldString(theIR:aIRAny):string;
   function PrepareCloneObjectOf(thisObject:aFullObject, CorrespondingFullId:string):aFullObject;
   function DeleteThingFromDBOf(theFullObject:aFullObject);
   function PrepareEmptyCloneObjectOf(thisObject:aFullObject, CorrespondingFullId:string):aFullObject;
   function PrepareEmptyNewVersionOf(thisObject:aFullObject):aFullObject;
   function ResetOQLError();
   function fias(f:string):string;
   function IsNilFullId(theFullId:string):boolean;
   function findDBMgrFor(thisFullId:string, asClassFinder:boolean):aDBMgr;
   function findaPB(forThisObject:aFullObject):aPB;
   function RefEqual(PtrTo_thisRefto:string, PtrTo_thatRefto:string, PointsToVersion:boolean):boolean;
   function reftosCompare(thisRefto:string, thatRefto:string, count:number, size:number):boolean;
   function VarAgentOfVar(TheObject:aLightObject, ThisVar:string):aVarAgent;
   function VarAgentOf(thisObject:aLightObject):aVarAgent;
   function NewInstForLoadObject(theClass:string, theFullId:string, IsCurrent:boolean, IsAStub:boolean, forZap:boolean):string;
   function killNewInstforLoadObject(thisObject:aFullObject);
   function KillNewInstForZapObject(thisObject:aFullObject);
   function IsEmpty(theReftoVar:string):boolean;
   function ThingFromPB(theFullId:string):aFullObject;
   function NewPBFor(thisObject:aFullObject):aPB;
   function newaPB():aPB;
   function GetUIAgentFocus():aUIAgent;
   function MemLockVersion(thisObject:aFullObject);
   function MemUnLockVersion(thisObject:aFullObject);
   function MemLockThing(thisObject:aFullObject);
   function MemUnLockThing(thisObject:aFullObject);
   function RecastFromData(thisObject:string);
   function AppendRefObjectsInList(theObject:aFullObject, theList:string);
   function CloneVarsExceptFOFrom(fromObject:aFullObject, toObject:aFullObject);
   function DeregisterDescendantsOf(curClass:string, theClassToo:boolean);
   function PickADescendantOf(ClassDef:aClassDef, OnlyDescendants:boolean):aClassDef;
   function SetAlertClassId(ClassId:number);
   function SetErrorManagerClassId(ClassId:number);
   function SetUIExecMode(UIMode:string);
   function GetUIExecMode():string;
   function DeleteFirstInTransactionOfSecond(FirstObjectNsId:number, FirstObjectId:number, secondObject:aFullObject);
   function SetPhantomFirstInTransactionOfSecond(FirstObject:aFullObject, FirstObjectNsId:number, FirstObjectId:number, Value:boolean, secondObject:aFullObject);
   function IsCurrentInMemory(thisObject:aFullObject):boolean;
   function Filetrace(text:string);
   function createNameSpaceFor(theNsId:number, MaxId:number):string;
   function AsGoldText(theIR:aIRAny, theText:string);
   function sortFullIdByNSId(this:string, that:string):boolean;
   function sortFullIdByNSIdIdVersion(this:string, that:string):boolean;
   function SortList(thisList:aListOfInstances, ascending:boolean, OrderingFunction:string);
   function GetDynamicMultiLangBroker():string;
   function SetDynamicMultiLangBroker(theBroker:string);
   function IsDynamicMultiLangExecution():boolean;
   function CheckInstallAllPreInstalled();
}
declare module MotorTypes {
}
declare module wGraph {
   function CREATEPTR(FILENAME:string):number;
   function DELETEPTR(PTR:number);
   function CREATEBMP(FILENAME:string):number;
   function DELETEBMP(BMP:number);
   function GETBMPSIZE(BMP:number, WIDTH:number, HEIGHT:number);
   function GPI_OPENPS(HANDLE:number):string;
   function GPI_CLOSEPS(PS:string);
   function GPI_CREATEMEMPS(WIDTH:number, HEIGHT:number, BITCOUNT:number, BMP:number):string;
   function GPI_CLOSEMEMPS(PS:string, FREEBMP:number);
   function GPI_BITBLT(TargetPS:string, SourcePS:string, NbPoints:number, POINTL:string, ROP:number, COMPRESS:number);
   function GPI_SAVEPS(PS:string);
   function GPI_RESTOREPS(PS:string);
   function GPI_ERASE(PS:string);
   function GPI_SETCOLOR(PS:string, COL:number);
   function GPI_SETBACKCOLOR(PS:string, COL:number);
   function GPI_MOVE(PS:string, X:number, Y:number);
   function GPI_LINE(PS:string, X:number, Y:number);
   function GPI_BOX(PS:string, X:number, Y:number, MODE:number, XROUND:number, YROUND:number);
   function GPI_PIXEL(PS:string, X:number, Y:number);
   function GPI_FULLARC(PS:string, MODE:number, R:number);
   function GPI_PARTIALARC(PS:string, X:number, Y:number, START:number, SWEEP:number, R:number);
   function GPI_SETLINEKIND(PS:string, KIND:number);
   function GPI_CHARSTRING(PS:string, X:number, Y:number, TEXT:string);
   function GPI_CHARSTRINGWIDTH(PS:string, TEXT:string):number;
   function GPI_CHARSTRINGHEIGHT(PS:string, TEXT:string):number;
   function GPI_CHARDESCEND(PS:string):number;
   function GPI_AVCHARWIDTH(PS:string):number;
   function GPI_MAXCHARHEIGHT(PS:string):number;
   function GPI_SETMIXMODE(PS:string, MODE:number);
   function GPI_SETBACKMIXMODE(PS:string, MODE:number);
   function GPI_BEGINAREA(PS:string, DRAWBOUNDARY:number, FILLMODE:number);
   function GPI_ENDAREA(PS:string);
   function GPI_SETPATTERN(PS:string, ID:number);
   function GPI_SETPATTERNREFPOINT(PS:string, X:number, Y:number);
   function GPI_SETMARKER(PS:string, SYMBOL:number);
   function GPI_MARKER(PS:string, X:number, Y:number);
   function GPI_VGETFONTS(PS:string, FONTS:string, KIND:number);
   function GPI_VGETFONTS2(PS:string, PFONTS:number, KIND:number);
   function GPI_VRELEASEFONTS(PFONTS:number);
   function GPI_VCREATEFONT(PS:string, ID:number, NAME:string, SIZE:number, SEL:number);
   function GPI_VDELETEFONT(PS:string, ID:number);
   function GPI_VSELECTFONT(PS:string, ID:number);
   function DRAW_TEXT(PS:string, X:number, Y:number, W:number, H:number, FORECOL:number, BACKCOL:number, KINDS:number, TEXT:string);
   function DRAW_BORDER(PS:string, X:number, Y:number, W:number, H:number, CX:number, CY:number, FORECOL:number, BACKCOL:number, KINDS:number);
   function DRAW_FILLRECT(PS:string, X:number, Y:number, W:number, H:number, COL:number);
   function DRAW_BITMAP(PS:string, BMP:number, X:number, Y:number, W:number, H:number, STRETCHED:number);
   function DRAW_SCROLLWINDOW(HANDLE:number, X:number, Y:number, W:number, H:number, DX:number, DY:number);
   function DRAW_INVALIDATERECT(HANDLE:number, X:number, Y:number, W:number, H:number);
   function wGRAPH_UNUSED10():number;
   function wGRAPH_UNUSED11(HANDLE:number);
   function wGRAPH_UNUSED12(HANDLE:number, BACKGROUND:number);
   function wGRAPH_UNUSED13(HANDLE:number, TEXT:string, COL:number, FONT:string, SEL:number);
   function wGRAPH_UNUSED14(HANDLE:number, TEXT:string, COL:number, FONT:string, SEL:number);
   function wGRAPH_UNUSED15(HANDLE:number, TEXT:string, COL:number, FONT:string, SEL:number);
   function wGRAPH_UNUSED16(HANDLE:number, COL:number, FONT:string, SEL:number);
   function wGRAPH_UNUSED17(HANDLE:number, COL:number, KIND:number);
   function wGRAPH_UNUSED18(HANDLE:number, COL:number, KIND:number);
   function wGRAPH_UNUSED19(HANDLE:number, TEXT:string, COL:number, FONT:string, SEL:number);
   function wGRAPH_UNUSED20(HANDLE:number, DIV:number, YMIN:string, YMAX:string, FORMAT:string, TEXT:string, COL:number, FONT:string, SEL:number);
   function SAVEBMP(Bitmap:number, FILENAME:string):boolean;
   function ColorToRGB(Color:number):number;
   function RGBToColor(RGBColor:number):number;
   function GetRedValue(RGBColor:number):number;
   function GetGreenValue(RGBColor:number):number;
   function GetBlueValue(RGBColor:number):number;
   function GetRGB(Red:number, Green:number, Blue:number):number;
   function DefineColor(RGBColor:number):number;
   function UndefineColor(Color:number);
   function SetUserColor(Color:number, RGBColor:number);
   function GPI_INITFONTINFOS(PS:string):number;
   function GPI_GETFONTNAME(FontName:string, PS:string, FontInfosHandle:number, FontRank:number):boolean;
   function GPI_GETFONTSIZE(FontSize:number, PS:string, FontInfosHandle:number, FontRank:number, SizeRank:number):boolean;
   function GPI_RELEASEFONTINFOS(FontInfosHandle:number);
   function GPI_GETPIXEL(PS:string, X:number, Y:number):number;
   function GPI_RGBSETCOLOR(PS:string, RGBColor:number);
   function GPI_RGBSETBACKCOLOR(PS:string, RGBColor:number);
   function GPI_RGBGETPIXEL(PS:string, X:number, Y:number):number;
   function DRAW_RGBTEXT(PS:string, X:number, Y:number, Width:number, Height:number, RGBForeColor:number, RGBBackColor:number, Kinds:number, Text:string);
   function DRAW_RGBBORDER(PS:string, X:number, Y:number, Width:number, Height:number, CX:number, CY:number, RGBForeColor:number, RGBBackColor:number, Kinds:number);
   function DRAW_RGBFILLRECT(PS:string, X:number, Y:number, Width:number, Height:number, RGBColor:number);
   function GPI_SETLINEWIDTH(PS:string, Width:number);
   function GPI_RESOLUTIONS(PS:string, Width:number, height:number);
   function GPI_CREATEMETAFILEPS(Width:number, Height:number):string;
   function GPI_GETMETAFILE(MetaFilePS:string, MetaFile:string, MetaFileSize:number);
   function GPI_CLOSEMETAFILEPS(MetaFilePS:string);
   function GPI_DRAWMETAFILE(PS:string, MetaFile:string, MetaFileSize:number, GetLocalBitmapFileNameProc:string);
   function GetFileNameFromBitMap(FileName:string, BMP:number);
   function PrintAgent(UIAgent:aUIAgent, PS:string, X:number, Y:number, Width:number, Height:number, OnlyClientArea:boolean);
}
declare module Risky {
   function OpenDebug():string;
   function AppendInTransaction(thisObject:aFullObject, OfThisObject:aFullObject, IsOwned:boolean);
   function GetProcAddressFromName(DllName:string, ProcName:string):string;
   function ThingFromName(NameCategory:number, Name:string, Version:number):aFullObject;
   function ClassFromId(FromId:number, FromVersion:number):string;
   function ClassFromName(FromName:string, FromVersion:number):string;
   function RefPut(FromThisObject:aFullObject, ToThisObject:aFullObject, theVar:string);
   function RefPutNewVersion(FromThisObject:aFullObject, ToThisObject:aFullObject, theVar:string);
   function RefGet(FromThisObject:aFullObject, theVar:string):string;
   function GOLDOptionsAddr():string;
   function GetIDE():string;
   function reRegister(thisObject:aFullObject);
   function CallWithMyStack(ProcAddr:string, myStack:string, StackSize:number, ReturnSize:number):number;
   function CallWithMyStackEx(ProcAddr:string, myStack:string, StackSize:number, ReturnSize:number, MethodType:aMethodType):number;
   function RefreshClassesTrees();
   function FindFullidsFromName(nameCtg:number, Name:string, onlyCurrentVersions:boolean, AcceptedClassId:number, AcceptsDescendants:boolean):aListOfInstances;
   function SystemFindFullidsFromName(nameCtg:number, Name:string, onlyCurrentVersions:boolean, onlyAliveVersions:boolean, AcceptedClassId:number, AcceptsDescendants:boolean):aListOfInstances;
   function ImportThisFile(thisFile:string, FixedId:boolean);
   function CleanAllMMEntities(fromThisNsIdContext:number, toThisNsIdContext:number);
   function FuncVarsFromId(theId:string, Vars:aListOfInstances, VarsAddress:aListOfInstances);
   function GetThingManager():string;
   function SetCheckOutOfBound(Check:boolean):boolean;
   function SetCheckNonProjectAssign(Check:boolean):boolean;
   function DeleteIROf(theClassOrModule:aEntity);
   function SetObjectAsCurrent(thisObject:aFullObject);
   function NewTemporaryInst(theClass:string):string;
   function ProduceCPPFor(ThisEntity:aEntity, InThisText:string);
   function IsWAMKeyWord(St:string):boolean;
   function LaunchWam();
   function IsAValidObject(theObject:string):boolean;
   function IsAValidpLightObject(ptheObject:string):boolean;
   function RecastToGoodClassVersion(thisInst:aFullObject);
   function CurrentProjectAddressOf(thisObject:aFullObject):string;
   function CurrentVersionAddressOf(thisObject:aFullObject):string;
   function InstalledMotorVersionOfImplem(theImplem:aModuleImplem, theVersion:number, RegisteredIsCurrent:boolean):number;
   function SetGlobalVersion(ofEntity:aEntity, theGlobalVersion:number);
   function IsClassOrModuleDefinedInRuntime(thisClassOrModule:aModuleDef):boolean;
   function GetMMTypeFromSource(theCUImplem:aCUImplem, FieldOwner:string, CurrentPosInSource:number):aType;
   function UpdateDBMgrIdDistributors(Really:boolean):boolean;
   function FuncZapThingFromId(theGoodPB:aPB, theId:string):boolean;
   function GetRefObject(theFullId:string):aFullObject;
   function NewNoInstalledClassInst(OfThisClassId:number):string;
   function NewNoInstalledClassInstFromName(ClassName:string):string;
   function GetIdAccessPlanDesc():aIdAccessPlanDesc;
   function IsSharedAndHasMoreRecentVersionInDB(thisObject:aFullObject):boolean;
   function ExtractInfoFrom(theDesignedScenario:aScenario, DropObject:string, ForMenu:boolean, theVar:aIdentifierDesc, theVarType:aType, theVarScenario:aScenario, IsForTheType:boolean):boolean;
   function MakeANewVersionOfTheScenario(theScenarioAsDesignWindowAgent:aScenarioAsDesignWindowAgent, theScenario:aScenario):string;
   function GetNewVersionOfThisScenario(thisScenario:aScenario):aScenario;
   function GetNewVersionOfThisQVarPresentor(thisQVarPresentor:aQVarPresentor):aQVarPresentor;
   function WYield();
   function GetNewGlobalClassesVersion():number;
   function ExitProcess();
   function LoadDll(DLLName:string):string;
   function UnLoadDll(DLLHandle:string);
   function GetProcAddr(DLLHandle:string, ProcName:string):string;
   function SetParamInteractProc(theProcAddr:string);
   function AncestorNameFor(thisObject:string, forLevel:number):string;
   function WSetGetCurrentDbgInfoProc(theProc:string);
   function WSetDeleteDbgInfo(theProc:string);
   function WGetDeleteDbgInfo():string;
   function WGetFirstDumpedDBGBlock():string;
   function WGetLastDumpedDBGBlock():string;
   function WMarkFirstDumpedDbgBlock();
   function WMarkLastDumpedDbgBlock();
   function WRemoveDumpedDbgBlock();
   function MarkDebugMemory(noInteract:boolean);
   function ParamDisplayMemoryInfo(noInteract:boolean, details:boolean, MemLightObjects:boolean, MemFullObjects:boolean, MemInternalSpaces:boolean, MemGoldSpaces:boolean);
   function DisplayMemoryInfo(noInteract:boolean);
   function ConsistencyError(EntityLibelle:string, Entity:aEntity, ErrorDescription:string, RefEntity:aEntity, canDisplayMessage:boolean);
   function GetIsMultiThreadMode():boolean;
   function GetTheDefaultClassManager():string;
   function GetTheDefaultThingManager():string;
   function TranslateEntityIfNecessary(Entity:aEntity);
   function DeRegisterFromHashTablesOf(theObjectManager:string, thisThing:string);
   function SetTransactionClassId(thisClassId:number);
   function IncBusyDBMgrsCount();
   function DecBusyDBMgrsCount();
   function systemDataBase003WriteAble():boolean;
   function GetCurrentThreadThingManagerFullObjectNumber():number;
   function GetCurGod():aInterpreter;
   function DisposeAllApplicativeInstances();
   function getDBMgrsIterator():aListIterator;
   function ForceNewSharedInstance(NewForceSharedInstance:boolean):boolean;
   function getMainThreadDBMgrs():aListOfInstances;
   function MemberId(thisInstance:string, ClassId:number):boolean;
   function MemberString(thisInstance:string, ClassDataAsCString:string):boolean;
   function AllocParametersBuffer(ForThisMethodType:aMethodType, theObject:aLightObject, ForThisUIAgent:aUIAgent, ParametersSize:number, ReturnSize:number):string;
   function FreeParametersBuffer(theBuffer:string, ForThisMethodType:aMethodType, ParametersSize:number);
   function SetRaiseExceptionOnError(RaiseException:boolean, ErrorLevel:string, OldRaiseException:boolean, OldErrorLevel:string);
   function ConsistencyCheckTransation(T:aTransaction, theRTFText:string):boolean;
   function SetMemTestOption(MemTest:boolean, BlocksNbToTest:number, BlocksNbInterval:number):boolean;
   function FirstLoadedVersionOf(thisThing:string):string;
   function EPW(inputPW:string, outputPW:string, encoding:number):boolean;
   function DPW(inputPW:string, outputPW:string, encoding:number):boolean;
   function GetTerminatingThread():boolean;
   function CallWithMyStack_P(ProcAddr:string, myStack:string, StackSize:number, ReturnSize:number):string;
   function CallWithMyStackEx_P(ProcAddr:string, myStack:string, StackSize:number, ReturnSize:number, MethodType:aMethodType):string;
}
declare module wUtil {
   function AddDependanciesForModule(TheModuleDef:aModuleDef, InList:aListOfInstances, ForWhat:string);
   function MISCERROR():number;
   function EXECPROG(NAME:string, PARM:string, MODE:number, X:number, Y:number, W:number, H:number);
   function RANDOMIZE();
   function RANDOMSEED(Seed:number);
   function GETMOUSEPOS(XMouse:number, YMouse:number);
   function RANDOM(MAX:number):number;
   function RANDOMNUM():string;
   function ISCLIENTFILENAME(Name:string):boolean;
   function ISSERVERFILENAME(Name:string):boolean;
   function MAKECLIENTFILENAME(Name:string);
   function MAKESERVERFILENAME(Name:string);
   function REMOVECLIENTSERVERPATH(Name:string);
   function GetClientTimeDiffInMinutesFromGMT():number;
   function GetServerTimeDiffInMinutesFromGMT():number;
   function PARAMCOUNT():number;
   function PARAMSTR(PARM:number):string;
   function GetParam(Header:string):string;
   function GETENV(NAME:string):string;
   function GETENVCHARS(EnvVar:string):string;
   function SETENV(NAME:string, VALUE:string);
   function ENVCOUNT():number;
   function ENVSTR(INDEX:number):string;
   function CHDIR(DIR:string);
   function MKDIR(DIR:string);
   function RMDIR(DIR:string);
   function GETDIR(VOLUME:number):string;
   function GETDIREX(DirectoryName:string):string;
   function DISKFREE(VOLUME:number):number;
   function DISKFREEEX(DirectoryName:string):number;
   function DISKSIZE(VOLUME:number):number;
   function DISKSIZEEX(DirectoryName:string):number;
   function GETNATIVEPOINTERSIZE():number;
   function GETDISK():number;
   function GETDISKEX(RootPathName:string):number;
   function CHDISK(VOLUME:number);
   function CHDISKEX(DirectoryName:string);
   function GETDISKS():number;
   function GETDISKSEX(RootPathName:string):number;
   function GETDISKTYPE(VOLUME:number):number;
   function GETDISKTYPEEX(RootPathName:string):number;
   function CHVOLUMEEX(Volume:string, RootPathName:string);
   function GETDISKSERIAL():number;
   function GETVOLUMESERIALEX(RootPathName:string):number;
   function GETMACHINEEX(RootPathName:string):string;
   function GETVOLUMEEX(RootPathName:string):string;
   function FEXPAND(FILE:string):string;
   function FGETDIR(FILE:string):string;
   function FGETNAME(FILE:string):string;
   function FGETEXT(FILE:string):string;
   function FGETSIZE(FILE:string):number;
   function FGETATTR(FILE:string):number;
   function FSETATTR(FILE:string, ATTR:number);
   function FCOPYFILE(SOURCE:string, DEST:string);
   function FRENAME(OLD:string, NEW:string);
   function FERASE(NAME:string);
   function FFINDFIRST(PATH:string, ATTR:number):string;
   function FFINDNEXT():string;
   function FFINDFIRSTEX(DEST:string, PATH:string):number;
   function FFINDNEXTEX(HANDLE:number, DEST:string);
   function FFINDCLOSEEX(HANDLE:number);
   function FFINDCLOSE();
   function ZLIBCOMPRESSFILE(SRCFILENAME:string, DSTFILENAME:string, COMPRESSIONLEVEL:number);
   function ZLIBUNCOMPRESSFILE(SRCFILENAME:string, DSTFILENAME:string);
   function EBCDIC2ASCII(SOURCE:string):string;
   function ASCII2EBCDIC(SOURCE:string):string;
   function RealToString(R:string, FORMAT:string):string;
   function CURRENCY(R:string):string;
   function ESTRING(R:string, FORMAT:string):string;
   function ECURRENCY(R:string):string;
   function SETTHOUSANDSSEPARATOR(S:string);
   function GETTHOUSANDSSEPARATOR():string;
   function SETDECIMALSEPARATOR(S:string);
   function GETDECIMALSEPARATOR():string;
   function F_CREATE(SIZE:number, FILENAME:string):number;
   function F_OPEN(SIZE:number, FILENAME:string):number;
   function F_ROOPEN(SIZE:number, FILENAME:string):number;
   function F_CLOSE(H:number);
   function F_READ(H:number, DATA:string);
   function F_WRITE(H:number, DATA:string);
   function F_SEEK(H:number, P:number);
   function F_TRUNCATE(H:number);
   function F_LOCK(H:number);
   function F_UNLOCK(H:number);
   function F_EOF(H:number):number;
   function F_POS(H:number):number;
   function F_SIZE(H:number):number;
   function F_TIME(H:number, CreationTime:string, LastAccessTime:string, LastWriteTime:string);
   function F_ERROR():number;
   function F_BYTEREAD(H:number, DATA:string, NBBYTES:number, NBREAD:number);
   function F_BYTEWRITE(H:number, DATA:string, NBBYTES:number, NBWRITTEN:number);
   function F_BLOCKREAD(H:number, DATA:string, NBBLOCKS:number, NBREAD:number);
   function F_BLOCKWRITE(H:number, DATA:string, NBBLOCKS:number, NBWRITTEN:number);
   function T_CREATE(FILENAME:string):number;
   function T_APPEND(FILENAME:string):number;
   function T_OPEN(FILENAME:string):number;
   function T_CLOSE(H:number);
   function T_WRITE(H:number, S:string);
   function T_WRITECHARS(H:number, PCHARS:string);
   function T_WRITELN(H:number, S:string);
   function T_WRITELNCHARS(H:number, PCHARS:string);
   function T_READINT(H:number):number;
   function T_READNUM(H:number):string;
   function T_READ(H:number):string;
   function T_READCHARS(H:number, PCHARS:string, MAXCHARLEN:number):number;
   function T_READLNINT(H:number):number;
   function T_READLNNUM(H:number):string;
   function T_READLN(H:number):string;
   function T_READLNCHARS(H:number, PCHARS:string, MAXCHARLEN:number):number;
   function T_EOF(H:number):number;
   function T_EOL(H:number):number;
   function T_ERROR():number;
   function MESSAGE(OWNER:number, TITLE:string, TEXT:string, HELPID:number, STYLE:number):number;
   function MESSAGEBOXEX(TITLE:string, TEXT:string, STYLE:number):number;
   function SetPtr(Ptr:number);
   function GetPtr():number;
   function GetSPTR(Index:number):number;
   function CONTROLNAME():string;
   function WINDOWNAME(H:number):string;
   function WINDOWFROMCONTROL(CTRL:string):number;
   function SELFFROMCONTROL(CTRL:string):number;
   function SETRETURNCONTROL(DLG:string, CTRL:string);
   function GETRETURNCONTROL(DLG:string, CTRL:string);
   function SETESCAPECONTROL(DLG:string, CTRL:string);
   function GETESCAPECONTROL(DLG:string, CTRL:string);
   function SETTABCONTROL(CTRL:string, TABCTRL:string);
   function GETTABCONTROL(CTRL:string, TABCTRL:string);
   function GETMDISTR(KIND:number):string;
   function SETMDISTR(KIND:number, DEST:string);
   function FOCUSCONTROL(H:number, CTRL:string);
   function GETCHECKMODE(WINDOW:number):number;
   function SETCHECKMODE(WINDOW:number, FLAG:number);
   function FLASHUIAGENTS(UIAgents:aListOfInstances, FlashMode:number, Message:string, NbFlashes:number, FlashTime:number);
   function COMPILEREGREXPR(MASK:string, BUFFER:number, BUFSIZE:number):number;
   function EXECUTEREGREXPR(PATTERN:string, BUFFER:number):number;
   function GETHOSTCHARSET():number;
   function GETCURRENTCHARSET():number;
   function TRANSLATECHARS(PTR:number, SIZE:number, TYPESCR:number, TYPEDEST:number);
   function TraceInFile(thisText:string, inThisFile:string);
   function ExpandEnvVars(TheString:string):string;
   function PickFolderName(RootDirectory:string, Title:string, Flags:number):string;
   function PickFileName(OpenOrSave:boolean, Title:string, DefExt:string, DefFileName:string, PickerKind:string, Filter:string):string;
   function FilesAreDifferent(File1:string, File2:string):boolean;
   function F_READ_DEPRECATED(H:number, DATA:number);
   function F_WRITE_DEPRECATED(H:number, DATA:number);
   function F_BLOCKREAD_DEPRECATED(H:number, DATA:number, NBBLOCKS:number, NBREAD:number);
   function F_BLOCKWRITE_DEPRECATED(H:number, DATA:number, NBBLOCKS:number, NBWRITTEN:number);
   function GetCurrentPlatform():string;
   function MemCmp(PtrTo_p1:string, PtrTo_p2:string, Length:number):string;
   function IsMemEqual(Buf1:string, Buf2:string, BufSize:number):boolean;
   function IsFileEqual(FName1:string, FName2:string):boolean;
   function CreateDirsIfNecessary(FileName:string);
   function CreateFolderIfNecessary(theFolderName:string);
   function PICKFONT(FontName:string, FontSize:number, FontSels:number, FontColor:number):boolean;
   function BytesSortUp(theArray:string, LeftIndex:number, RightIndex:number, ItemSize:number, theInferiorFunction:string);
   function BytesSortDown(theArray:string, LeftIndex:number, RightIndex:number, ItemSize:number, theInferiorFunction:string);
   function MeetsExpressionCaseUnknown(thisString:string, CapitalizedExpression:string):boolean;
   function MeetsExpression(CapitalizedString:string, CapitalizedExpression:string):boolean;
   function CStringInferior(This:string, ToThat:string):boolean;
   function CStringAsIsInferior(This:string, ToThat:string):boolean;
   function Int4AsHexaCString(i:number):string;
   function PointerAsHexaCString(p:string):string;
   function GOLDString(s:string):string;
   function GetOs():string;
   function OsIsWindows():boolean;
   function ReportEvent(LogFileName:string, AppName:string, EventCategory:number, EventNumber:number, EventString:string, EventBuffer:string, BufferSize:number);
   function wGetCurrentProcessHandle():string;
   function wGetUsedMemory(ProcessHandle:string):number;
   function wGetVirtualMemory(ProcessHandle:string):number;
   function wGetProcessTime(ProcessHandle:string):number;
   function wGetDLLVersionInfo(Name:string, VersionInfoName:string, VersionInfo:string);
   function wGetDllPath(Handle:string, DllPath:string);
   function wZLibCompress(SrcBuffer:string, SrcBufferSize:number, DestBuffer:string, DestBufferSize:number):number;
   function wZLibCompressEx(SrcBuffer:string, SrcBufferSize:number, DestBuffer:string, DestBufferSize:number, CompressionLevel:number):number;
   function wZLibUncompress(SrcBuffer:string, SrcBufferSize:number, DestBuffer:string, DestBufferSize:number):number;
   function wCompress(SrcBuffer:string, SrcBufferSize:number, DestBuffer:string, DestBufferSize:number, CompressionLevel:number):number;
   function wUncompressBufferSize(SrcBuffer:string):number;
   function wUncompress(SrcBuffer:string, SrcBufferSize:number, DestBuffer:string, DestBufferSize:number):number;
   function wZLibCompressFile(SrcFileName:string, DstFileName:string, CompressionLevel:number);
   function wZLibUnCompressFile(SrcFileName:string, DstFileName:string);
   function ReplaceChar(St:string, OldChar:number, NewChar:number):string;
   function LengthTpChar(Chars:string):number;
   function PurgeSequence(theSequence:string);
   function MakeSeqOfSmallIdsFromListOf(theLO:string, Seq:string);
   function MakeSeqOfFullIdsFromListOf(theLO:string, Seq:string);
   function ExpandedFileName(FileName:string):string;
   function FileTime2DateTime(FileTime:string, Date:string, Time:string);
   function FileTime2Int4DateTime(FileTime:string, i4Date:number, i4Time:number);
   function AddUsesFor(TheModuleDef:aModuleDef, InList:aListOfInstances, ForWhat:string);
   function AddDescendantsFor(TheClassDef:aClassDef, InList:aListOfInstances, ForWhat:string);
   function AddAncestorFor(TheClassDef:aClassDef, InList:aListOfInstances, ForWhat:string);
   function AddDependanciesForList(TheList:aListOfInstances, InList:aListOfInstances, ForWhat:string);
   function ModuleCanBeAdded(TheModuleDef:aModuleDef, InList:aListOfInstances, ForWhat:string):boolean;
   function MethodDescFromName(Instance:aLightObject, Name:string):aMethodDesc;
   function VarDescFromName(Instance:aLightObject, Name:string):aInstanceVarDesc;
   function VarDescFromInstalledId(Instance:aLightObject, Id:number):aInstanceVarDesc;
   function FillListWithClassDefAndDescendants(ClassDef:aClassDef, List:aListOfInstances);
   function CallNoParamMethod(inst:aLightObject, Meth:aMethodDesc);
   function CallBooleanFunction(inst:aLightObject, Meth:aMethodDesc):boolean;
   function CallUIMethod(inst:aLightObject, Meth:aMethodDesc, theUIAgent:aUIAgent);
   function AppendOwnedObjectInList(theList:aListOfInstances, object:aFullObject);
   function UpdateReferencesWith(Object:aFullObject, FromList:aListOfInstances, ToList:aListOfInstances);
   function PrepareCloneOf(Object:aFullObject):aFullObject;
   function GetMasterOwnerOf(thisEntity:aEntity):aModuleDef;
   function FlagFO(thisFO:aFullObject);
   function IsFOFlagged(thisFO:aFullObject):boolean;
   function UnFlagFO(thisFO:aFullObject);
   function FindFiles(PathNameWithWC:string, FilesName:aListOfInstances);
   function GetRefSystemXY(X:number, Y:number);
   function ISWINDOWSMOUSE():boolean;
   function IsStringEncodedInUnicodeUTF8():boolean;
   function PaS(thePointer:string):string;
   function SaP(theString:string):string;
   function GetPointerFromHandle(Handle:number):string;
   function GetHandleFromPointer(ThePointer:string):number;
   function FreeHandleAndPointer(Handle:number);
   function FreeHandle(Handle:number);
   function GetPointerFromThreadSharedHandle(Handle:number):string;
   function GetThreadSharedHandleFromPointer(ThePointer:string):number;
   function FreeThreadSharedHandle(Handle:number);
   function UpcaseAccentInsensitive(theString:string):string;
}
declare class aPB extends aLightObject {
   ClassName();
   ClassId();
   Kill();
}
declare class aCandidatesForConfigDefRole extends aSingleRoleType {
   NewInstanceFromDroppedObject();
}
declare class ConfigDefContentsEditionAgent extends aUIAgent {
   deliveries: string ;
   candidates: string ;
   candidatesStaticText: string ;
   StaticText: string ;
   getAllDeliveries: string ;
   UnGetAllDeliveries: string ;
   Name: string ;
   NameStaticText: string ;
}
declare class OnlyContentsAgent extends aUIAgent {
   OwnedDeliveries: string ;
   WithPatch: string ;
}
declare class ConfigDefContentsReadMeAgent extends aFolderViewAgent {
}
declare class ModifyScenarioAgent extends aUIAgent {
   aConfigDef002: string ;
   generateFile: string ;
   copyFiles001: string ;
   WithPatch: string ;
}
declare class ConfigDefMainFolderAgent extends aFolderViewAgent {
   NotifyInit();
   NotifySelected();
}
declare class WydeUtilitiesAgent extends aUIAgent {
   GetCandidatesNotOwnedByOtherConfigs: string ;
   ClearAllComments: string ;
   TakeOnlyPreparedBundles: string ;
}
declare class ConfigDefTextDescriptionAgent extends aUIAgent {
   TextDescription: string ;
}
declare class ConfigDefFileBundlesAgent extends aUIAgent {
   FileBundles: string ;
}
declare class aConfigDef002Agent extends aSplitViewAgent {
}
declare class onlyEventsAgent extends aUIAgent {
   events: string ;
}
declare class ConfigDefDifferencesWithOriginAgent extends aUIAgent {
   Analyzer: string ;
   origin: string ;
   originStaticText: string ;
}
declare class aConfigDef extends aEntity {
   OwnedDeliveries: string ;
   deliveries: string ;
   candidates: string ;
   TextDescription: string ;
   FileBundles: string ;
   events: string ;
   origin: string ;
   Analyzer: string ;
   ActiveEvents: string ;
   TakeOnlyPreparedBundles: string ;
   WithPatch: string ;
   Note(text:string);
   prevBundleOf(thisBundle:aDeliveriesBundle):aDeliveriesBundle;
   getThisDelivery(theDeliveryRef:aDeliveryReference);
   CandidateFromDeliverySignatureAndLowId(Signature:string, lowId:number):aDeliveryReference;
   deliveriesListContains(thisDelivery:aDelivery):boolean;
   CandidatesListContains(thisDelivery:aDelivery):boolean;
   TerminateCandidates();
   initCandidates();
   ClearAllComments();
   InitAnalyzer();
   FullFileName():string;
   initTextDescriptionFromFile(filename:string);
   FinalizeConfigDef();
   initFrom(otherConfigDef:aConfigDef);
   AppendDelivery(thisDelivery:aDeliveryReference, ListOfConfigList:aListOfInstances);
   CreateDirsIfNecessary(FileName:string);
   copyDir(thisDirDef:aDirectoryDef, fileNumber:number, bundleName:string, g:aGauge);
   CopyFileForFileBundles();
   generateDir(thisDirDef:aDirectoryDef, H:number, fileNumber:number, bundleName:string);
   generateFileForFileBundles(H:number);
   RequiredForBundlesInList(ListOfConfigList:aListOfInstances, theDB:aDeliveriesBundleReference, bundleBySignatureAndVersion_HashTable:aDataByStringHashTable, prepOrinstBySignature_HashTable:aDataByStringHashTable):boolean;
   sortList(ListOfConfigList:aListOfInstances);
   copyFiles();
   generateFile();
   getAllDeliveries();
   UnGetAllDeliveries();
   UnGetThisDelivery(theDeliveryRef:aDeliveryReference);
   StringExtract();
   CandidateFromDeliveryReference(Lure:aDeliveryReference):aDeliveryReference;
   LoadFromFile(File:string);
   InitFromFile(File:string);
   PickAFileToLoadFrom();
   CleanListFromOwnedDeliveriesOfConfig(List:aListOfInstances, Config:aConfigDef);
   GetCandidatesNotOwnedByOtherConfigs();
   compareWithOrigin();
   GetBitmap();
   InitAfterNewVersion();
   IsModifiableInIDEExecutionMode();
   DefaultWithPatchValue():boolean;
}
declare class aConfigDefExtension001Agent extends aUIAgent {
   DoYourJob001: string ;
}
declare class aConfigDefDesignerExtension extends aWideExtension {
   FolderParentName();
   DoYourJob();
   MenuText();
   ButtonBMPName();
}
declare class ConfigDefInstallerBackGroundAgent extends aUIAgent {
   ConfigName: string ;
   ConfigNameStaticText: string ;
   ConfigName001: string ;
   ConfigNameStaticText001: string ;
   GroupBox: string ;
}
declare class aConfigDefInstaller001Agent extends aUIAgent {
   CanBeInstalled: string ;
   FileName: string ;
   FileNameStaticText: string ;
}
declare class ConfigDefFileInstallerAgent extends aUIAgent {
   OnlyComment: string ;
   Gauge: string ;
}
declare class aConfigDefInstaller extends aEntity {
   FileName: string ;
   ConfigName: string ;
   QuitWam: string ;
   BundlesFromSignature: string ;
   Gauge: string ;
   FreezeIdsDuringInstall: string ;
   buildInfoList(ToBeInstalled:aListOfInstances, ToBeCopied:aListOfInstances, theMessage:string, newConfigDef:aConfigDef):boolean;
   CheckIfListIsInRights(ToBeInstalled:aListOfInstances):boolean;
   CanBeInstalled():boolean;
   InstallFiles();
   InstallIt(theMessage:string):boolean;
   IsValid();
   CheckIfListSoonInstalled(ToBeInstalled:aListOfInstances):boolean;
   isAlreadyInstalled():boolean;
   GetReadMe(theText:string);
   GetBitmap();
}
declare class ConfigDefListMainAgent extends aOpenWhereClosedUIAgent {
   configDefs: string ;
}
declare class ConfigDefListWydeToolsAgent extends aUIAgent {
   BatchLoadAllConfigs: string ;
   BatchLoadAndGenerateAllConfigFromFiles: string ;
   BatchGenerateAllConfigFromFiles: string ;
   ReportOrphans: string ;
}
declare class aConfigDefList extends aEntity {
   configDefs: string ;
   LoadAllConfigs();
   GenerateAllConfigs();
   BatchLoadAllConfigs();
   BatchLoadAndGenerateAllConfigFromFiles();
   BatchGenerateAllConfigFromFiles();
   OrphanDeliveries():aListOfInstances;
   ReportOrphans():string;
}
declare class aConfigDefRole extends aSingleRoleType {
   NewAcceptedInstance();
   ModifyThisProject(FromThisObject:aFullObject, fromThisUIAgent:aUIAgent, theNewVersion:aConfigDef, atThisRank:number, AddInList:boolean);
   ModifyThisObject();
   NewInstanceFromDroppedObject();
   IsDroppedObjectUsable();
   canBreakLinkBetween();
   SearchAndPick();
}
declare class aDeliveriesConfigDefRole extends aSingleRoleType {
   NewInstanceFromDroppedObject();
}
declare class aInstalledConfigDefExtension001Agent extends aUIAgent {
   DoYourJob: string ;
}
declare class aInstalledConfigDefExtension extends aWideExtension {
   FolderParentName();
   AppendWAMOptionsMenu();
   DoYourJob();
   MenuText();
   ButtonBMPName();
}
declare class MainForInstalledConfigsAgent extends aUIAgent {
   aInstalledConfigDefList003: string ;
}
declare class aInstalledConfigDefList003Agent extends aSplitViewAgent {
}
declare class aInstalledConfigDefList001Agent extends aUIAgent {
   PickAFileToInstall: string ;
   FileToInstall: string ;
   FileToInstallStaticText: string ;
   InstallANewConfig: string ;
   viewConfigToInstall: string ;
   Comment: string ;
   CommentStaticText: string ;
   FreezeIdsDuringInstallation: string ;
}
declare class aInstalledConfigDefList002Agent extends aUIAgent {
   configDefs: string ;
}
declare class aInstalledConfigDefList extends aEntity {
   configDefs: string ;
   QuitWam: string ;
   FileToInstall: string ;
   FreezeIdsDuringInstallation: string ;
   PickAFileToInstall();
   viewConfigToInstall();
   InstallANewConfig();
}
declare class aWAMInstalledConfigExtension001Agent extends aUIAgent {
   DoYourJob: string ;
}
declare class PickAExtensionAgent extends aUIAgent {
   extensions: string ;
   extensions_Executed(:aUIAgent, SelectedRank:number, Option:number):number;
   extensions_Selected(:aUIAgent, SelectedRank:number):number;
}
declare class onlyCOmmentOfConfigExtAgent extends aUIAgent {
   comment: string ;
}
declare class GeneralPickaExtensionAgent extends aSplitViewAgent {
}
declare class MainPickAExtensionAgent extends aUIAgent {
   GeneralPickaExtension: string ;
   DT: string ;
   TopOkCancel: string ;
}
declare class aWAMInstalledConfigExtension extends aWideExtension {
   extensionsInitialized: string ;
   extensions: string ;
   Name: string ;
   FileName: string ;
   Installed: string ;
   mustQuit: string ;
   comment: string ;
   initEntensionsList();
   installExtension(selectedExtension:aWAMInstalledConfigExtension);
   DoYourJob();
   MenuText();
   FolderParentName();
   ButtonBMPName();
}
declare module xConfigDef {
   var theConfigDefCatalog: string ;
   var theInstalledConfigDefCatalog: string ;
   function FilesAreDifferent(File1:string, File2:string):boolean;
   function GetConfigDefCatalog():aConfigDefList;
   function GetInstalledConfigDefCatalog():aInstalledConfigDefList;
   function BatchInstallConfig();
   function InstallConfig(theConfigFileName:string);
   function IsConfigInstalled(theConfigFileName:string):boolean;
   function notRequiredForConfigInList(ListOfConfigList:aListOfInstances, theDB:aDeliveriesBundleReference):boolean;
   function FirstRequiresSecond(First:aDeliveriesBundleReference, Second:aDeliveriesBundleReference):boolean;
   function FirstInConfig(pFirst:string, pSecond:string):boolean;
}
declare class FileBundleMainAgent extends aUIAgent {
   FileBundleActions: string ;
   Name: string ;
   NameStaticText: string ;
   FileBundleDirsAndFiles: string ;
}
declare class FileBundleActionsAgent extends aToolBarUIAgent {
   ButtonsForTopOkCancel: string ;
   appendNewFile: string ;
   deleteFile: string ;
}
declare class FileTreeAgent extends aUIAgent {
   dirs: string ;
/**
*Portability Check: OK
*/
   dirs_Executed(:aUIAgent, SelectedRank:number, Option:number):number;
   NotifyInit();
}
declare class onlyFilesAgent extends aUIAgent {
   GetSelectedDir: string ;
   GetSelectedDirName: string ;
   Files_Selected(SelectedRank:number):number;
}
declare class FileBundleDirsAndFilesAgent extends aSplitViewAgent {
}
declare class FileBundleAnalyzerAgent extends aUIAgent {
   Analyser: string ;
}
declare class ProcessingJobAgent extends aUIAgent {
   job: string ;
   BitMap: string ;
}
declare class aFileBundle extends aEntity {
   dirs: string ;
   selectedFile: string ;
   selectedDir: string ;
   emptyDir: string ;
   Analyser: string ;
   job: string ;
   SetJob(libelle:string);
   BuildFileList(List:aListOfInstances);
   DefaultName():string;
   initName(otherFileBundles:aListOfInstances);
   RefreshFilesAndDirs();
   appendDir(dirName:string, dir:aDirectoryDef):aDirectoryDef;
   GetDirFromName(DirName:string, fromDir:aDirectoryDef):aDirectoryDef;
   ContainsFile(fullFileName:string):boolean;
   SameContentThat(thisBundle:aFileBundle):boolean;
   InitAnalyzerAndCompareWith(thisFileBundle:aFileBundle):boolean;
   appendFile(fullFileName:string, checkExistency:boolean, archive:string);
   appendInexistingFile(fullFileName:string);
   IsValid();
   appendFileOfDir(rootDir:string, subDirToo:boolean);
   appendNewFile();
   deleteFile();
   GetBitmap();
   GetSelectedDir():aDirectoryDef;
   GetSelectedDirFullName():string;
   StringExtract();
   initFrom(thisFileBundle:aFileBundle);
}
declare class onlyDirFilesAgent extends aUIAgent {
   files: string ;
   files_Selected(:aUIAgent, SelectedRank:number):number;
}
declare class aDirectoryDef extends aFileRef {
   Dirs: string ;
   Files: string ;
   GetFileBundle():aFileBundle;
   RemoveYourself();
   FileFromName(FileName:string):aFileRef;
   BuildFileList(List:aListOfInstances);
   RankFor(thisName:string, min:number, max:number, Found:boolean):number;
   AppendFile(fullFileName:string, theFileBundle:aFileBundle, checkExistency:boolean, archive:string);
   AppendDir(DirName:string, theFileBundle:aFileBundle):aDirectoryDef;
   GetTree(theObject:aDirectoryDef, pTheVar:string, theType:aType);
   FileNumber():number;
   InitFrom();
}
declare class aFileRefWithArchive extends aFileRef {
   ArchiveFileName: string ;
   Archive(toThisFileName:string, TransactionOwner:aFullObject);
}
declare class commonFilesAgent extends aUIAgent {
   CommonFiles: string ;
}
declare class deletedFilesAgent extends aUIAgent {
   DeletedFiles: string ;
}
declare class NewFilesAgent extends aUIAgent {
   newFiles: string ;
}
declare class modifiedFilesAgent extends aUIAgent {
   modifiedFiles: string ;
}
declare class aFIleBundleAnalyzer001Agent extends aSplitViewAgent {
}
declare class aFIleBundleAnalyzer002Agent extends aSplitViewAgent {
}
declare class aFileBundleAnalyzer extends aEntity {
   origin: string ;
   newBundle: string ;
   reporter: string ;
   CommonFiles: string ;
   DeletedFiles: string ;
   newFiles: string ;
   modifiedFiles: string ;
   OriginModifiedFiles: string ;
   SelectedFileBundle: string ;
   note(that:string);
   BundlesAreEqual():boolean;
   initDifferences();
}
declare class aModifiedFileRole extends aSingleRoleType {
   ConsultThisObject();
}
declare class aWAMGauge001Agent extends aUIAgent {
   aWAMGaugeDT: string ;
   aPainter001: string ;
   aPainter001_Init(:aUIAgent):number;
}
declare class aWAMGauge extends aGauge {
   PainterUIAgent: string ;
   inc();
}
declare class CommonDeliveriesAgent extends aUIAgent {
   commonDeliveries: string ;
   initDifferences: string ;
   LoadValue();
}
declare class NewDeliveriesAgent extends aUIAgent {
   newDeliveries: string ;
}
declare class DeletedDeliveriesAgent extends aUIAgent {
   deletedDeliveries: string ;
}
declare class ModifiedDeliveriesAgent extends aUIAgent {
   modifiedDeliveries: string ;
}
declare class aConfigDefAnalyzer003Agent extends aSplitViewAgent {
}
declare class aConfigDefAnalyzer004Agent extends aSplitViewAgent {
}
declare class ConfigDefAnalyzerMainFolderAgent extends aFolderViewAgent {
}
declare class MainConfigDefAnalyzerAgent extends aUIAgent {
   ConfigDefAnalyzerMainFolder: string ;
}
declare class onlyCommonFileBundleAgent extends aUIAgent {
   commonFileBundle: string ;
   initFileBundleDifferences: string ;
}
declare class onlyNewFileBundlesAgent extends aUIAgent {
   newFileBundle: string ;
}
declare class onlyDeletedFileBundlesAgent extends aUIAgent {
   deletedFileBundle: string ;
}
declare class onlyModifiedFileBundleAgent extends aUIAgent {
   modifiedFileBundle: string ;
}
declare class aConfigDefAnalyzer005Agent extends aSplitViewAgent {
}
declare class aConfigDefAnalyzer006Agent extends aSplitViewAgent {
}
declare class aConfigDefAnalyzer extends aEntity {
   origin: string ;
   newConfig: string ;
   commonDeliveries: string ;
   newDeliveries: string ;
   deletedDeliveries: string ;
   modifiedDeliveries: string ;
   commonFileBundle: string ;
   newFileBundle: string ;
   deletedFileBundle: string ;
   modifiedFileBundle: string ;
   note(that:string);
   initDeliveriesDifferences();
   initFileBundleDifferences();
   InitFileDifferences();
}
declare class aFileBundleListRole extends aSingleRoleType {
   CreateNewInstance();
}
declare class aBMPbundle001Agent extends FileBundleActionsAgent {
   initFromConfig: string ;
}
declare class aBMPbundle extends aFileBundle {
   initBMPsFrom(thisEntity:aEntity);
   initFromConfig();
   appendNewFile();
   GetBitmap();
   StringExtract();
   DefaultName();
}
declare class BMPAnalyzerAgent extends aUIAgent {
   BitMap: string ;
   BitMap001: string ;
   BMPOrigneSize: string ;
   BMPnewFileSize: string ;
   LoadValue();
}
declare class PreviousTextAgent extends aUIAgent {
   text1: string ;
   StaticText: string ;
}
declare class CurrentTextAgent extends aUIAgent {
   text2: string ;
   StaticText: string ;
}
declare class TextAnalyzerAgent extends aSplitViewAgent {
}
declare class OtherAnalyzerAgent extends aUIAgent {
   Size1: string ;
   Size1StaticText: string ;
   Size2: string ;
   Size2StaticText: string ;
}
declare class aFileAnalyzer extends aEntity {
   LeftRef: string ;
   RightRef: string ;
   LeftText: string ;
   RightText: string ;
   LeftSize: string ;
   RightSize: string ;
   ShowDifferences();
   Terminate();
   LaunchWinDiff();
   LaunchWinMerge(LeftDesc:string, RightDesc:string);
   AttachToTheseTexts(Left:string, Right:string);
   DoWinDiffOnTexts();
   DoWinMergeDiffOnTexts(LeftDesc:string, RightDesc:string);
   DoWinDiffOnFiles();
   GetLeftName():string;
   GetRightName():string;
   LeftBMPSizeAsCstring():string;
   RightBMPSizeAsCString():string;
   StringExtract();
}
declare class aFileCopier001Agent extends aUIAgent {
   PushButton: string ;
   PushButton001: string ;
   PushButton002: string ;
   PushButton003: string ;
   BitMap: string ;
   ExistingfileName: string ;
   PushButton_Executed(:aUIAgent, SelectedRank:number, Option:number):number;
   PushButton001_Executed(:aUIAgent, SelectedRank:number, Option:number):number;
   PushButton002_Executed(:aUIAgent, SelectedRank:number, Option:number):number;
   PushButton003_Executed(:aUIAgent, SelectedRank:number, Option:number):number;
}
declare class aFileCopier extends aLightObject {
   Source: string ;
   Destination: string ;
   Reporter: string ;
   CreateDirectories: string ;
   MsgExistingfileName: string ;
   answer: string ;
   CreateDirsIfNecessary(FileName:string);
   checkSource():boolean;
   checkDestination():boolean;
   copy():boolean;
}
declare class FileAsBitmapAgent extends aUIAgent {
   BitMap: string ;
   BitMap_Init():number;
}
declare class FileAsTextAgent extends aUIAgent {
   PresentedText: string ;
}
/**
*Well, this class should be split in two, one managing Files( standard ones) 
 
Too late to do this in 7.0 because aDirectoryDef overrides 
 the method remove yourself..


*/
declare class aFileRef extends aEntity {
   Extension: string ;
   PresentedText: string ;
   ExistingFileIsText: string ;
   TextIsNotMine: string ;
   FileName: string ;
   IsAText():boolean;
   InitWithNameExt(NameAndExt:string);
   ShortNamewithExt():string;
   FullName():string;
   IsSame(thisFullFileName:string):boolean;
   StringExtract();
   InitFrom(thisFileRef:aFileRef);
   IsABMP():boolean;
   ParamInteract();
   FileExists():boolean;
   Purge();
   LoadFromFile();
   SaveToFile();
   Terminate();
   RemoveYourself(fromFileBundle:aFileBundle);
}
declare class aIntegrationRoot extends aLightObject {
   Script: string ;
   GetEntityToReport():aEntity;
   Report(TheString:string);
   ReportText(TheText:string);
}
declare class DeliveryConfigDefListMainAgent extends aOpenWhereClosedUIAgent {
   DeliveryConfigDefListActions: string ;
   ReleasesMainSplit: string ;
}
declare class DeliveryConfigDefListActionsAgent extends aToolBarUIAgent {
   DeliveryConfigDefListActionsFolder: string ;
}
declare class DeliveryConfigDefListActionAgent extends aUIAgent {
   ActionInitFromFiles: string ;
   ActionNewPatchVersion: string ;
   ActionNewVersion: string ;
   ActionReintegrateLastVersion: string ;
   ActionReportDiff: string ;
   ActionNewVersion_ValueLoaded();
   ActionReintegrateLastVersion_ValueLoaded();
   ActionReportDiff_ValueLoaded();
   ActionNewPatchVersion_ValueLoaded(:aUIAgent);
}
declare class DeliveryConfigDefListProposedVersionAgent extends aUIAgent {
}
declare class DeliveryConfigDefListActionsFolderAgent extends aFolderViewAgent {
}
declare class ReleasesAgent extends aUIAgent {
   configDefs: string ;
   configDefs_ValueLoaded();
/**
*Portability Check: OK
*/
   configDefs_Selected(:aUIAgent, SelectedRank:number):number;
   VarAddressHasChanged();
}
declare class ReleasesCurrentCommentAgent extends aUIAgent {
   CurrentEntityForComment: string ;
   Comment: string ;
}
declare class ReleasesMainSplitAgent extends aSplitViewAgent {
   NotifySubUIAgentSelected();
}
declare class aReleasesList extends aConfigDefList {
   Option: string ;
   ConfigTool: string ;
   Script: string ;
   CurrentEntityForComment: string ;
   CheckConsistencyOfEveryting():boolean;
   AtEnd();
   GetEntityToReport():aEntity;
   Report(TheString:string);
   SubstString(InString:string, FromString:string, ToString:string);
   ActionOptions();
   NewOption();
   ActionSelected(TheUIAgent:aUIAgent, SelectedObject:aLightObject);
   LastSelfVersion():aConfigDefList;
   AcceptMe();
   NewConfigTool();
   NewScript();
   UpdateScriptFromOptions();
   InitForRuntime();
   InitAfterNewVersion();
   Terminate();
   LastDeliveryIsAPatch():boolean;
   DefaultConfigName():string;
   ConfigNameIsValid(TheConfig:aConfigDef):boolean;
   NewConfig():aConfigDef;
   BuildAllConfig(NewConfig:aConfigDef, BundlesToIgnore:aDataByObjectHashTable);
   BuildNewPatchConfig(NewConfig:aConfigDef);
   BuildNewVersionConfig(NewConfig:aConfigDef);
   SelectInList(AtRank:number);
   ActionNewPatchVersion();
   ActionLoadConfigFromFile();
   ActionReintegrateLastVersion();
   ActionNewVersion();
   StringExtract();
/**
*Portability Check: OK
*/
   DiffTwoConfig(FirstConfig:aConfigDef, SecondConfig:aConfigDef):aConfigDef;
   ReportDiff():string;
   ActionReportDiff();
   CanGenerateNewBundleVersion():boolean;
   Init();
}
declare class aScript extends aIntegrationRoot {
   EntityForReport: string ;
   ForceRegenerateBundleFromLastRelease: string ;
   GenerateBothXMLAndTGVFormats: string ;
   Error: string ;
   ExportGoldForPatchIntegration(BaseOnVersion:aConfigDef, Comment:string, BundlesToIgnore:aDataByObjectHashTable, AbortWhenError:boolean):boolean;
   ExportGoldForVersionIntegration(BaseOnVersion:aConfigDef, Comment:string, BundlesToIgnore:aDataByObjectHashTable, AbortWhenError:boolean):boolean;
   GenerateConfigFile(TheConfig:aConfigDef);
   DeliverAll(TheConfig:aConfigDef);
   GeneratePreparedBundleProjectReturnCannot(Bundle:aDeliveriesBundlePreparer, Tool:aBundleTool):boolean;
}
declare class aBundleTool extends aIntegrationRoot {
   ThePreparedBundlesList: string ;
   BundleVersions: string ;
   TheIDE: string ;
   BundlesState: string ;
   BundleVersion(Signature:string):number;
   KillBundleVersions();
   Init();
   GenerateBundleReturnCannotGenerate(TheBundlePrep:aDeliveriesBundlePreparer):boolean;
   DeleteExcessiveVersions(TheBundlePrep:aDeliveriesBundlePreparer);
/**
*Portability  Check: Ok
*/
   GenerateBundleIfNecessaryReturnCannotGenerate(TheBundlePrep:aDeliveriesBundlePreparer, Comment:string, NewBundleVersion:boolean):boolean;
   InitForBundlesGenerationReturnIfGoOn(BaseOnConfig:aConfigDef);
   Terminate();
   GenerateBundlesReturnIfNewBundleVersions(BaseOnConfig:aConfigDef, Comment:string, BundlesToIgnore:aDataByObjectHashTable, AbortWhenError:boolean):boolean;
}
declare class aPatchReleaseBundleGeneration extends aBundleTool {
   DeleteExcessiveVersions();
   GenerateBundleReturnCannotGenerate();
}
declare class aMajorReleaseBundleGeneration extends aBundleTool {
   DeleteExcessiveVersions();
   GenerateBundleReturnCannotGenerate();
}
declare class aConfigDefTool extends aIntegrationRoot {
   TheConfigFiles: string ;
   Init();
   Terminate();
   ConfigPath():string;
   ConfigNameFromConfigFullFileName(TheFile:string):string;
   ConfigFullFileNameFromName(TheName:string):string;
   ReadTheConfigDirectory();
   OrphanDeliveries(TheConfigDefList:aConfigDefList):aListOfInstances;
   ReportOrphans(TheConfigDefList:aConfigDefList):string;
   NewConfigFromFile(File:string):aConfigDef;
   RegenerateProjectConfig(TheConfig:aConfigDef);
   RegenerateConfigsFiles(TheConfigDefList:aConfigDefList);
   NewAcceptedConfigInList(TheConfigDefList:aConfigDefList, TheName:string);
   CreateConfigsFromFiles(TheConfigDefList:aConfigDefList);
   IsAPatchConfig(TheConfig:aConfigDef):boolean;
}
declare class ReleasesOptionMainScenarioAgent extends aUIAgent {
   ReleasesOptionFirstPage: string ;
}
declare class ReleasesOptionFirstPageAgent extends aUIAgent {
   AbortBatchWhenError: string ;
   BundlesToIgnore: string ;
   BundlesToIgnoreGroupBox: string ;
   CleanCommentAtGeneration: string ;
   BeepAtEnd: string ;
   ForceRegenerateBundleFromLastRelease: string ;
   GenerateXML: string ;
   CheckConsistencyBeforeProcessing: string ;
}
declare class aReleasesOption extends aEntity {
   AbortBatchWhenError: string ;
   BundlesToIgnore: string ;
   CleanCommentAtGeneration: string ;
   BeepAtEnd: string ;
   ForceRegenerateBundleFromLastRelease: string ;
   GenerateXML: string ;
   CheckConsistencyBeforeProcessing: string ;
   Init();
   CleanBundlesToIgnore();
   BeforeAccept();
   InitAfterLoad();
   InitAfterNewVersion();
   GetBundlesToIgnoreHash():aDataByObjectHashTable;
   StringExtract();
   NotifyAtEnd();
}
declare class aBundlesToIgnoreRole extends aSingleRoleType {
   SearchAndPick();
   NewInstanceFromDroppedObject();
}
declare class IntegrationExtensionPushButtonAgent extends aUIAgent {
   DoYourJob: string ;
}
declare class aReleasesExtension extends aWideExtension {
   ReleasesCat: string ;
   InitDeliveryConfigCat();
   DoYourJob();
   MenuText();
   FolderParentName();
   ButtonBMPName();
}
declare class RefDevGaugeAgent extends aUIAgent {
   BitMap: string ;
   BmpRank: string ;
   ActionCancel002: string ;
   NotifyInit();
   NotifyTimer();
}
declare class aRefDevGauge extends aLightObject {
}
declare module wWydeWeb {
   function ExitWydeWeb(ReturnCode:number);
   function GetCurrentWydeWebSession():aWydeWebSession;
   function GetWydeWebSessions():aListOfInstances;
   function SetConnectionTimeout(Timeout:number, TimeBetweenCheckTimeout:number);
   function GetConnectionTimeout(Timeout:number, TimeBetweenCheckTimeout:number);
   function EnterInWydeWebSessionCriticalSection();
   function LeaveWydeWebSessionCriticalSection();
   function ExecuteInternetBuffer(BufferIn:string, BufferInSize:number, BufferOut:string, BufferOutSize:number, MaxBufferOutSize:number):number;
   function InitWydeWebServer();
   function TerminateWydeWebServer();
   function TerminateWydeWebSession(theWydeWebSession:aWydeWebSession);
   function SendMessageToWydeWebSession(fromWydeWebSession:aWydeWebSession, toWydeWebSession:aWydeWebSession, Message:string):boolean;
   function RefreshWydeWebClient();
}
declare class WydeWebAdminConsoleAgent extends aUIAgent {
   ListCtrl: string ;
   NbUsers: string ;
   NbUsers001: string ;
   NbUsersStaticText: string ;
   TimeBetweenCheckTimeout: string ;
   TimeBetweenCheckTimeoutStaticText: string ;
   ChangeTimeOut: string ;
   ExecutedList: string ;
   ExecutedRank: string ;
   Priority: string ;
   Message: string ;
   ListCtrl_Init(:aUIAgent):number;
   NotifyTimer();
   SendMessageToSessionSelected();
   SendMessageToAllSessions();
   KillSessionSelected();
   KillAllSessions();
   SetPriorityToHigh();
   SetPriorityToHighForAll();
   SetPriorityToAboveNormal();
   SetPriorityToAboveNormalForAll();
   SetPriorityToNormal();
   SetPriorityToNormalForAll();
   SetPriorityToBelowNormal();
   SetPriorityToBelowNormalForAll();
   SetPriorityToLow();
   SetPriorityToLowForAll();
   ListCtrl_Executed(:aUIAgent, SelectedRank:number, Option:number):number;
}
declare class aWydeWebAdminConsoleTimeOutAgent extends aUIAgent {
   TimeBetweenCheckTimeout: string ;
   TimeBetweenCheckTimeoutStaticText: string ;
}
declare class tWWACTime001Agent extends aDateTimeCtrlUIAgent {
   LoadValue();
   StoreValue();
}
declare class aWydeWebAdminConsole extends aLightObject {
   TimeOut: string ;
   TimeBetweenCheckTimeout: string ;
   SetConnectionTimout();
   Init();
   Run();
   ChangeTimeOut();
}
declare class PopupMenuExecutedAgent extends aMenuItemControlAgent {
   SendMessageToSessionSelected: string ;
   SendMessageToAllSessions: string ;
   Separator: string ;
   KillSessionSelected: string ;
   KillAllSessions: string ;
   Separator001: string ;
   MenuItem: string ;
   SetPriorityToHigh: string ;
   SetPriorityToAboveNormal: string ;
   SetPriorityToNormal: string ;
   SetPriorityToBelowNormal: string ;
   SetPriorityToLow: string ;
   MenuItem001: string ;
   SetPriorityToHighForAll: string ;
   SetPriorityToAboveNormalForAll: string ;
   SetPriorityToNormalForAll: string ;
   SetPriorityToBelowNormalForAll: string ;
   SetPriorityToLowForAll: string ;
}
declare class AskToKillAgent extends aUIAgent {
   StaticText: string ;
}
declare class VoidPickerAgent extends aUIAgent {
   SelectionArgument: string ;
   Select001: string ;
   aVoidPicker002: string ;
   NotifyInit();
   SetlistFormat(theFormat:string);
   SetlistTab(nbre:number, tab:string);
   SetlistTitle(Title:string);
}
declare class VoidPickerOnlyCandidatesAgent extends aPickerUIAgent {
   Candidates: string ;
   setListTitle(Title:string);
   setListFormat(format:string);
   setListTab(nbre:number, tab:string);
}
declare class aVoidPicker extends aPicker {
   myPickerUIAgent: string ;
   GetListBoxUIAgent(inThisUIAgent:aUIAgent):aVoidAsListBoxAgent;
   Pick();
   CandidateStringExtract();
   NewCandidate();
}
declare class aPickerAgent extends aUIAgent {
   PickEventProcAddr: string ;
   Pick(theObject:aLightObject);
}
declare class AcceptedClassesAgent extends aUIAgent {
   AcceptedQVPClassDef001: string ;
   AcceptedClassDef: string ;
   AcceptedClassDefStaticText: string ;
   DescendantsAccepted: string ;
   OnlyDescendantsAccepted: string ;
   GroupBox: string ;
   OnlyNotFinalCurrentVersions: string ;
   OnlyCurrentVersions: string ;
   theAccessPlanDesc: string ;
   theAccessPlanDescStaticText: string ;
}
declare class aQVPPickerPresentor001Agent extends aFolderViewAgent {
}
declare class aQVPPickerPresentor002Agent extends aUIAgent {
   myColumns001: string ;
   myText001: string ;
   myTextStaticText: string ;
   RelativeWidth001: string ;
   Resizable001: string ;
   LastColumnAutoSize001: string ;
   TitleDisplayed001: string ;
   Width002: string ;
   WidthStaticText001: string ;
   Fraction001: string ;
   FractionStaticText001: string ;
   myVar001: string ;
   myVarStaticText: string ;
   aColumnQualifier001: string ;
}
declare class aQVPPickerPresentor extends aQVPBuildInListOfTypeScenario {
   AcceptedQVPClassDef: string ;
   theAccessPlanDesc: string ;
   OnlyNotFinalCurrentVersions: string ;
   OnlyCurrentVersions: string ;
   theCurrentAcceptedClassDef: string ;
   GetCurrentAcceptedClassDef():aClassDef;
   SetNextCurrentAcceptedClassDef();
   CanPresentThisVar(theVarDesc:aVarDesc):boolean;
   CanAcceptThisClassDef(theClassDef:aClassDef):boolean;
   appendNewClassDefConfig();
   appendNewColumn();
   BuildListOfAcceptableVariables(theList:aListOfInstances);
   NewColumnQualifier();
}
declare class aQVPAcceptableClassDefPresentor001Agent extends aUIAgent {
   AcceptedClassDef: string ;
   AcceptedClassDefStaticText: string ;
   DescendantsAccepted: string ;
   OnlyDescendantsAccepted: string ;
}
declare class aQVPAcceptableClassDefPresentor extends aEntity {
   AcceptedClassDef: string ;
   DescendantsAccepted: string ;
   OnlyDescendantsAccepted: string ;
   Init();
}
declare class aVoidPickerColumnQualifier001Agent extends aUIAgent {
   myVar001: string ;
   myVarStaticText: string ;
}
declare class aVoidPickerColumnQualifier002Agent extends aUIAgent {
   myVar001: string ;
   myVarStaticText: string ;
}
declare class aVoidPickerColumnQualifier extends aColumnQualifier {
}
declare class aVoidPickerPresentableVarRole extends aSingleRoleType {
   pickInMemOnly();
}
declare class aVoidPickableCandidate extends aPickableCandidate {
   Vars: string ;
   Kill();
}
declare class aVoidPickerScenario extends aScenario {
   NewQVarPresentor();
   InitEvents();
   DefaultUIAgentClassId();
   Intersect(X0:number, Y0:number, W0:number, H0:number, X1:number, Y1:number, W1:number, H1:number):boolean;
   PaintQVar(theWindow:string, ps:string, AbsX:number, AbsY:number, Dw:number, Dh:number, x:number, y:number, Width:number, Height:number, theQVarPresentor:aQVarPresentor, BuildInListQVP:aQVPBuildInListOfTypeScenario);
   Paint();
   QVPHasBeenSelected();
   ReceiveDropObject();
   CanReceiveDropObject();
   GetChar();
}
declare class OQLPickerWithArgumentAgent extends aUIAgent {
   SelectionArgument: string ;
   Select001: string ;
   OnlyOQLCandidates: string ;
}
declare class OnlyOQLCandidatesAgent extends aPickerUIAgent {
   Candidates: string ;
   LoadValue();
}
declare class aOQLPicker extends aPicker {
   Cursor: string ;
   myPickableList: string ;
   InitPickableList(theList:aPickableList);
   ListItemAsDesc(ThisListItem:string):string;
   ListItemAsClassId(ThisListItem:string):number;
   ListItemAsFullId(ThisListItem:string):string;
   OQLCursorAction(Action:string, intoList:aPickableList):boolean;
   NewSelector();
   Kill();
   Init();
   ColumnInfo(col:number, colSize:number, colTitle:string);
   CandidateStringExtract();
}
declare class aOQLSelectorForPicker extends aSelectorForPicker {
   forThisPicker: string ;
   hasMore: string ;
   ProduceBatch();
   NoMore();
   ListItemAsDesc();
   ListItemAsClassId();
   ListItemAsFullId();
}
declare class PickerAgent extends aPickerAgent {
   aVoidPickerDT: string ;
   VoidPicker: string ;
   NotifyInit();
   NotifyTerminate();
}
declare class a3DRectangleGFS extends aGraphFormScenario {
   DefaultDirectionKind: string ;
   ScenarioKindSet();
   DefaultUIAgentClassId();
   GetQVarPresentor();
   NewQVarPresentor();
}
declare class aGraphFormScenario extends aGraphFrameScenario {
   DefaultGraphParam: string ;
   ScenarioKindSet();
   DefaultUIAgentClassId();
   NewQVarPresentor();
   GetQVarPresentor();
   Init();
   GetChar();
   WillMofifyThisQVPOnGetChar();
}
declare class MoreScenarioVirtualOverrideAgent extends aUIAgent {
   KindOfLine: string ;
   KindOfLineGroupBox: string ;
   NumberOfLine: string ;
   NumberOfLineStaticText: string ;
}
/**
*(1 - XFactor) and YFactor are used as factors for the default size of the frame from the scenario's size (to have less than 100 in width for instance)
WidthFactor and (1 - HeightFactor) are used as a relative virtual center coordinate (with regard to autosizing)

*/
declare class aGraphFrameScenario extends aScenario {
   KindOfLine: string ;
   NumberOfLine: string ;
   ScenarioKindSet();
   DefaultUIAgentClassId();
   BuildUIAgent();
   DefaultUIComponentClassId();
   NewQVarPresentor();
   GetQVarPresentor();
   CanUse();
   Init();
   InitEvents();
}
declare module wGraphLib {
   var DraggableToolForGraph: string ;
   function GetDraggableToolForGraph():aDraggableToolForGraph;
   function CreateAndFinalizePointAgent(PointQVP:aGraphQVP, Point:aPoint, FrameAgent:aGraphFrameUIAgent, HostUIAgent:aUIAgent);
   function InsertPoint(TheScenario:aScenario, Rank:number, X:number, Y:number, GraphAgent:aGraphModifierUIAgent, Name:string):aGraphQVP;
   function FindClonedScenario(TheScenario:aScenario):aScenario;
   function MakeNewVersionOfQVPIfPossible(ForUIAgent:aUIAgent);
}
declare class DTFGAgent extends aUIAgent {
   GraphForm1006: string ;
   GraphForm2007: string ;
   GraphForm3001: string ;
   GraphForm4001: string ;
   GraphForm5001: string ;
   GraphForm6001: string ;
   GraphForm7001: string ;
   GraphForm8001: string ;
   GraphForm9001: string ;
   GraphForm10007: string ;
   GraphForm11001: string ;
   GraphForm12001: string ;
   GraphForm13001: string ;
   GraphForm14001: string ;
   GraphForm15001: string ;
   GraphForm16: string ;
   GraphForm17: string ;
   GraphForm18: string ;
   GraphForm19: string ;
   GraphForm20008: string ;
   GraphForm21: string ;
   GraphForm22: string ;
   GraphForm23: string ;
   GraphForm24: string ;
   GraphForm25: string ;
   GraphForm26: string ;
}
declare class DragableClassModifiersAgent extends aUIAgent {
   NewVarForm: string ;
   NewClassForm: string ;
   NewReftoForm: string ;
   NewListofForm: string ;
   NewConstForm: string ;
   NewTypeForm: string ;
   NewMethodForm: string ;
   NewScenarioForm: string ;
}
declare class aDraggableToolForGraph extends aLightObject {
   GraphForm1: string ;
   GraphForm2: string ;
   GraphForm3: string ;
   GraphForm4: string ;
   GraphForm5: string ;
   GraphForm6: string ;
   GraphForm7: string ;
   GraphForm8: string ;
   GraphForm9: string ;
   GraphForm10: string ;
   GraphForm11: string ;
   GraphForm12: string ;
   GraphForm13: string ;
   GraphForm14: string ;
   GraphForm15: string ;
   GraphForm16: string ;
   GraphForm17: string ;
   GraphForm18: string ;
   GraphForm19: string ;
   GraphForm20: string ;
   GraphForm21: string ;
   GraphForm22: string ;
   GraphForm23: string ;
   GraphForm24: string ;
   GraphForm25: string ;
   GraphForm26: string ;
   NewClassForm: string ;
   NewVarForm: string ;
   NewReftoForm: string ;
   NewListofForm: string ;
   NewConstForm: string ;
   NewTypeForm: string ;
   NewMethodForm: string ;
   NewScenarioForm: string ;
   Init();
}
declare class aTextGFS extends aGraphFormScenario {
   ScenarioKindSet();
   DefaultUIAgentClassId();
}
declare class aTextGFU extends aGraphFormUIAgent {
   AutoWidth();
   AutoHeight();
   CalcAutoWidthHeight();
   Paint();
   NotifyGetChar();
   NotifyRangeHasChanged();
   Hide();
   Show();
}
declare class aGraphFormUIAgent extends aGraphFrameUIAgent {
   DraggingThumb: string ;
   IHaveThumb():boolean;
   PtrForThumb():number;
   GetThumbPos(X:number, Y:number);
   UpDateDataFromThumbPos(X:number, Y:number);
   DrawThumb(PS:string, X:number, Y:number, Color:string);
   CalcAutoWidthHeight();
   PaintThumb(Ps:string);
   Paint();
   NotifyDblClk();
   NotifyGetChar();
   NotifyButtonDown();
   NotifyMouseMove();
   NotifyButtonUp();
   Hide();
   Show();
}
declare class aGraphFrameUIAgent extends aXXXAsFrameAgent {
   myDesignWindow: string ;
   myFrame: string ;
   CalcAutoWidth: string ;
   CalcAutoHeight: string ;
   OldWidth: string ;
   OldHeight: string ;
   ZoomFactor: string ;
   MustRecalcPos: string ;
   CharWidth: string ;
   CharHeight: string ;
   FontSize: string ;
   DragObject: string ;
   IsDragging: string ;
   StartX: string ;
   StartY: string ;
   ToX: string ;
   ToY: string ;
   DrawLine: string ;
   InLoadFromVar: string ;
   CanRecalcPos: string ;
   ResizeWithWidthFactor: string ;
   ResizeWithHeightFactor: string ;
   CalcExpectedPosFromAutoSizeAndAttachedFrames(Ps:string, AutoSize:boolean, AttachedAutoSize:boolean, ForceRecalc:boolean);
   GraphModifierUIAgent():aGraphModifierUIAgent;
   GetTitleForeColor():string;
   GetTitleBackColor():string;
   GetTitleFontName():string;
   GetTitleFontSize():number;
   GetTitleFontSels():string;
   AutoWidthHeightFromAgents(Ps:string, Width:number, Height:number, ForceRecalc:boolean, It:aListIterator);
   AutoWidthHeightFromSubAgents(Ps:string, Width:number, Height:number, ForceRecalc:boolean);
   GetAutoWidthHeight(Width:number, Height:number);
   CalcSizes(PS:string, ZoomFactor:string, ForceRecalc:boolean);
   GetZoomFactor():string;
   SetAutoWidthHeight(PS:string, Width:number, Height:number, ForceRecalc:boolean);
   ResetWidthHeightFromFrame(PS:string);
   GetAutoWidthHeightAndMustRecalcPos(ForceRecalc:boolean, Width:number, Height:number);
   MinAutoWidthHeight(Ps:string, Width:number, Height:number, ForceRecalc:boolean);
   CalcAutoWidthHeight();
   IsPoint():boolean;
   MakeNewVersionOfmyQVarPresentorIfPossible();
   DxDyForWidthHeight(OldWidth:number, OldHeight:number, NewWidth:number, NewHeight:number, Dx:number, Dy:number);
   CalcAutoWidthHeightDxDy(Ps:string, Width:number, Height:number, Dx:number, Dy:number, ForceRecalc:boolean);
   AutoWidthHeightDxDy(Ps:string, Width:number, Height:number, Dx:number, Dy:number, ForceRecalc:boolean);
   ForceRecalcPos(Repaint:boolean);
   ResetPos(MustRepaint:boolean);
   CalcTitle():string;
   DesignWindowSizeFromGraphEntitySize(x:number, y:number, Width:number, Height:number);
   SetPosFromQVP();
   Finalize();
   IncX();
   IncY();
   IncWidth();
   IncHeight();
   myWindow():aDesignWindow;
   NotifyHostRangeHasChanged();
   RecalcPos();
   GetXPos();
   GetYPos();
   GetWidth();
   GetHeight();
   CanChangeWidth();
   CanChangeHeight();
   NotifyDblClkOnObject(TheObject:aLightObject);
   NotifyDblClk();
   PaintBack(theDlgWindow:string, Ps:string, XPaint:number, YPaint:number, WidthPaint:number, HeightPaint:number):boolean;
   PaintBorder(theDlgWindow:string, Ps:string, XPaint:number, YPaint:number, WidthPaint:number, HeightPaint:number):boolean;
   Paint();
   PositionVector():string;
   SizeVector():string;
   Intersection(xA:number, yA:number, xB:number, yB:number, xC:number, yC:number);
   AuthorizedDw();
   AuthorizedDh();
   NotifyDelete();
   NotifyDeleteOnlyDesign();
   HasBeenSentTo(ToFrameQVP:aGraphEntity, Back:boolean);
   HasBeenSentNext(ToFrameQVP:aGraphEntity);
   HasBeenSentToFront();
   HasBeenSentToBack();
   DrawHorzLine(PS:string, XMin:number, XMax:number, Y:number);
   DrawMultipleBorder(PS:string);
   DrawVertLine(PS:string, X:number, YMin:number, YMax:number);
   WillCalcLinkFromCenters():boolean;
   CalcLinkFromCenters(X1:number, Y1:number, W1:number, H1:number, X2:number, Y2:number, W2:number, H2:number, x:number, y:number);
   CalcLinkFrom(thePointedFrameUIAgent:aXXXAsFrameAgent, ForceX:boolean, ForceY:boolean, FromX:number, FromY:number);
   CalcLinkTo(thePointingFrameUIAgent:aXXXAsFrameAgent, ForceX:boolean, ForceY:boolean, ToX:number, ToY:number);
   DrawInvertLine(PS:string, ToX:number, ToY:number);
   DragAndDropObject(thisObject:aLightObject, FromX:number, FromY:number, DrawLine:boolean);
   NotifyButtonDown();
   NotifyButtonUp();
   NotifyMouseMove();
   GetForeColor();
   GetBackColor();
   GetFontName();
   GetFontSize();
   GetFontSels();
   GetForeColorFor(thisUIAgent:aUIAgent):string;
   GetBackColorFor(thisUIAgent:aUIAgent):string;
   GetFontNameFor(thisUIAgent:aUIAgent):string;
   GetFontSizeFor(thisUIAgent:aUIAgent):number;
   GetFontSelsFor(thisUIAgent:aUIAgent):string;
   IsSubUIAgentHidden(thisUIAgent:aUIAgent):boolean;
   GetAutoHideFor(thisUIAgent:aUIAgent):boolean;
   GetAddLinkFor(thisUIAgent:aUIAgent):boolean;
   GetLinkKindFor(thisUIAgent:aUIAgent, theLinkUIAgent:aLinkUIAgent):string;
   GetLineKindFor(thisUIAgent:aUIAgent, theLinkUIAgent:aLinkUIAgent):string;
   GetNbSymbolsFor(thisUIAgent:aUIAgent, theLinkUIAgent:aLinkUIAgent):number;
   GetSymbolsAtMiddleFor(thisUIAgent:aUIAgent, theLinkUIAgent:aLinkUIAgent):boolean;
   GetLinkForeColorFor(thisUIAgent:aUIAgent, theLinkUIAgent:aLinkUIAgent):string;
   GetLinkBackColorFor(thisUIAgent:aUIAgent, theLinkUIAgent:aLinkUIAgent):string;
   GetLinkTextFor(thisUIAgent:aUIAgent, theLinkUIAgent:aLinkUIAgent):string;
   CalcRectangleEdgeAuthorizedDxDyFor(ThisFrame:aFrame);
   InvalidateFrame();
   GetActualMasterFrameUIAgent():aGraphFrameUIAgent;
   NotifyMasterChanged();
   SetMasterFrameUIAgent(Agent:aGraphFrameUIAgent);
   GetExpectedMasterFrameUIAgent():aGraphFrameUIAgent;
   UpdateMasterFrameUIAgent();
   AttachedFrameAt(x:number, y:number):aGraphFrameUIAgent;
   AttachedFrameFromObject(Object:aLightObject):aGraphFrameUIAgent;
   UppestFrameFromObjectInAttachementTree(Object:aLightObject):aGraphFrameUIAgent;
   AfterHideShow();
   Show();
   Hide();
   SetExtUIAgent(Agent:aExtGraphUIAgent);
   PaintLine(theDlgWindow:string, Ps:string, XPaint:number, YPaint:number, WidthPaint:number, HeightPaint:number):boolean;
   LoadValue();
   CalcExpectedPosFromFramePosOrAutoSize(ThisFrame:aFrame, Ps:string, AutoSize:boolean, ForceRecalc:boolean);
   CalcMasterExpectedPosFromPosOrAutoSize(Ps:string, AutoSize:boolean, ForceRecalc:boolean);
   CalcExpectedPosFromAttachedFramesPosOrAutoSize(Ps:string, AutoSize:boolean, ForceRecalc:boolean);
   CalcExpectedPosFromAutoSize(Ps:string, AutoSize:boolean, ForceRecalc:boolean);
   AdjustDxDwFromFactor(mDx:number, Width:number, Factor:string, Dx:number, Dw:number);
   GiveForm();
   RestoreDxDwFromFactor(mDx:number, Width:number, Factor:string, Dx:number, Dw:number);
   RestoreForm();
   CalcExpectedPos();
}
declare class aGraphEntity001Agent extends aUIAgent {
   X: string ;
   Y: string ;
   Width: string ;
   Height: string ;
   StaticText: string ;
   StaticText001: string ;
   StaticText002: string ;
   StaticText003: string ;
   ForeColor: string ;
   ForeColorStaticText: string ;
   BackColor: string ;
   BackColorStaticText: string ;
   X001: string ;
   Y001: string ;
   Width001: string ;
   Height001: string ;
   NotifyInit();
   X001_Changed():number;
   Y001_Changed():number;
   Width001_Changed():number;
   Height001_Changed():number;
   X_Changed():number;
   Y_Changed():number;
   Width_Changed():number;
   Height_Changed():number;
}
declare class MoreForGraphEntityAgent extends aUIAgent {
   GraphEntityKindsSet: string ;
   GraphEntityKindsSetGroupBox: string ;
   myPresentedObject: string ;
   myPresentedObjectStaticText: string ;
}
declare class aGraphEntity extends aGraphQVP {
   myPresentedObject: string ;
   myPresentedLightObject: string ;
   GraphEntityKindsSet: string ;
   GraphParam: string ;
   Init();
   PresentedObject():aLightObject;
   GetPresentedObject();
   NotifyDeleteFromGraph();
   SetHideShowInKinds(Hide:boolean);
   HideShow();
   GetCenterRelativeX():string;
   SetCenterRelativeX(X:string);
   GetCenterRelativeY():string;
   SetCenterRelativeY(Y:string);
   GetFirstWidthFactor():string;
   SetFirstWidthFactor(WidthFactor:string);
   GetFirstHeightFactor():string;
   SetFirstHeightFactor(HeightFactor:string);
   ChangeWidthHeightFromUpLeftSizeFactor(Width:number, Height:number);
}
declare class aGraphModifierUIAgent extends aXXXAsDesignWindowAgent {
   SelectFrameAtCreation: string ;
   myDesignWindow: string ;
   UnityWidth: string ;
   UnityHeight: string ;
   PageWidth: string ;
   PageHeight: string ;
   RulerWidth: string ;
   RulerHeight: string ;
   OldNo: string ;
   OldX: string ;
   OldY: string ;
   DontUpdateQVP: string ;
   SelectedLineFirstPoint: string ;
   CreatePointX: string ;
   CreatePointY: string ;
   GetGraphScenario(onThisClassDef:aClassDef):aScenario;
   GetGraphScenarioFor(thisObject:aLightObject):aScenario;
   DesignWindowX(GraphEntityX:number):number;
   DesignWindowY(GraphEntityY:number):number;
   DesignWindowWidth(GraphEntityWidth:number):number;
   DesignWindowHeight(GraphEntityHeight:number):number;
   GraphEntityX(DesignWindowX:number):number;
   GraphEntityY(DesignWindowY:number):number;
   GraphEntityWidth(DesignWindowWidth:number):number;
   GraphEntityHeight(DesignWindowHeight:number):number;
   StartLine(X:number, Y:number, theGraphFrameLinkScenario:aGraphFrameLinkScenario);
   AddEntityInGraphUIAgentFromWindowPosAndSize(X:number, Y:number, theObject:aLightObject, UsingThisScenario:aScenario, Refresh:boolean, GraphUIAgent:aUIAgent, QVPOwner:aScenario, Width:number, Height:number):aGraphFrameUIAgent;
   AddEntityInGraphUIAgentFromWindowPos(X:number, Y:number, theObject:aLightObject, UsingThisScenario:aScenario, Refresh:boolean, GraphUIAgent:aUIAgent, QVPOwner:aScenario):aGraphFrameUIAgent;
   AddEntityInGraphFromWindowPos(X:number, Y:number, theObject:aLightObject, UsingThisScenario:aScenario, Refresh:boolean):aGraphFrameUIAgent;
   AddEntityInGraphFromTop(X:number, Y:number, theLightObject:aLightObject, UsingThisScenario:aScenario, Refresh:boolean):aGraphFrameUIAgent;
   NotifyDroppedObject(theUIComponent:string, X:number, Y:number, thisObject:aFullObject):number;
   FindXXXAsFrameAgentFor();
   FindFrameForQVP(QVP:aQVarPresentor):aLightObject;
   ObjectCanBeDropped(theObject:aLightObject):boolean;
   NotifyCanReceiveDroppedObject();
   Finalize();
   NotifyRangeHasChanged();
   DrawRulers();
   SetZoomFactor(NewZoomFactor:string, X:number, Y:number);
   GetZoomFactor():string;
   NotifyButtonDblClk();
   UpDateOnDelete();
   InteractWithUser();
   CalcPageWidthHeight();
   Paint();
   ReposFrames();
   LoadFromVar();
   LoadValue();
   NotifyButtonUp();
   NotifyMouseMove();
   ShowSelectedFrames();
   HideSelectedFrames();
   Init();
   FindClosestSegmentReturnFirstPoint(x:number, y:number, xOnLine:number, yOnLine:number):aPoint;
   NotifyButtonDown();
   NotifyDblClkOnObject(TheObject:aLightObject);
}
declare class aGraph001Agent extends aUIAgent {
   StaticText: string ;
}
declare class GraphModifierAgent extends aGraphModifierUIAgent {
   Separator: string ;
   Print: string ;
   SetPrintingConfiguration: string ;
   MenuItem: string ;
   SetZoom50: string ;
   SetZoom75: string ;
   SetZoom100: string ;
   SetZoom200: string ;
   SetDoubleZoom: string ;
   SetMiddleZoom: string ;
   SaveToFile: string ;
   Separator001: string ;
   NotifyTerminate();
   NotifyCheck();
}
declare class aGraph002Agent extends aToolBarUIAgent {
   SaveSaveAndCloseClose: string ;
}
declare class aGraph003Agent extends aUIAgent {
   SendToFront: string ;
   SendToBack: string ;
   ShowSelectedFrames001: string ;
   HideSelectedFrames: string ;
}
declare class PrinterScenarioAgent extends aGraphPrinterUIAgent {
}
declare class BeforePrintingScenarioAgent extends aGraphBeforePrintingUIAgent {
}
declare class PrintingPreviewAgent extends aUIAgent {
   BeforePrintingScenario: string ;
   GetPrintingZoom: string ;
   StaticText001: string ;
   StaticText002: string ;
   SetPrintingZoom: string ;
   ActionCancel001: string ;
   PushButton: string ;
   Laps: string ;
   aGraphDT: string ;
   Laps001: string ;
   PushButton_Executed(SelectedRank:number, Option:number):number;
}
declare class SetPrintingConfigurationAgent extends aUIAgent {
   StaticText: string ;
   EntryField: string ;
   LeftMargins: string ;
   LeftMarginsStaticText: string ;
   RightMargins: string ;
   RightMarginsStaticText: string ;
   TopMargins: string ;
   TopMarginsStaticText: string ;
   BottomMargins: string ;
   BottomMarginsStaticText: string ;
   GroupBox: string ;
   LandScape: string ;
   WithPageNumber: string ;
   DontShowPages: string ;
   EntryField_Init():number;
   EntryField_ValueStored(:aUIAgent);
   CheckMarginBounds(Agent:aUIAgent);
   LeftMargins_ValueStored():number;
   RightMargins_ValueStored():number;
   TopMargins_ValueStored():number;
   BottomMargins_ValueStored():number;
}
declare class DraggableToolsAgent extends aUIAgent {
   DisplayDraggableToolForGraph: string ;
}
declare class aGraph005Agent extends aFolderViewAgent {
}
declare class aGraph004Agent extends aFolderViewAgent {
}
declare class aGraph007Agent extends aFolderViewAgent {
}
declare class aGraph008Agent extends aFolderViewAgent {
}
declare class BuilderScenarioAgent extends aGraphBuilderUIAgent {
}
declare class DragableForClassModifAgent extends aUIAgent {
   DisplayDraggableToolForGraph: string ;
}
declare class aGraph006Agent extends aUIAgent {
}
declare class GraphAsControlAgent extends aGraphModifierInDlgWindowAgent {
}
declare class BeforeSavingScenarioAgent extends aGraphBeforeSavingUIAgent {
}
declare class SavingPreviewAgent extends aUIAgent {
   BeforeSavingScenario: string ;
   PushButton: string ;
   FileName: string ;
   BitmapFileType: string ;
   PageWidth: string ;
   PageHeight: string ;
   Zoom: string ;
   DT: string ;
   PageWidth001: string ;
   PageWidthStaticText: string ;
   PageHeight001: string ;
   PageHeightStaticText: string ;
   BitmapFileType001: string ;
   BitmapFileTypeStaticText: string ;
   FileName001: string ;
   FileNameStaticText: string ;
   Zoom001: string ;
   ZoomStaticText: string ;
   aGraphDT: string ;
   ActionCancel001: string ;
   NotifyInit();
   LoadValue();
   NotifyStoreToVar();
   PushButton_Executed(SelectedRank:number, Option:number):number;
}
declare class PopupMenuForGraphOverAgent extends PopupMenuForGraphAgent {
   SaveToFile: string ;
   Separator: string ;
   Print: string ;
   SetPrintingConfiguration: string ;
   Separator001: string ;
   MenuItem: string ;
   SetZoom50: string ;
   SetZoom75: string ;
   SetZoom100: string ;
   SetZoom200: string ;
   SetDoubleZoom: string ;
   SetMiddleZoom: string ;
   Separator003: string ;
   MenuItem001: string ;
   AlignLeft: string ;
   AlignRight: string ;
   AlignTop: string ;
   AlignBottom: string ;
   AlignWidth: string ;
   AlignHeight: string ;
   AlignInterWidth: string ;
   AlignInterHeight: string ;
   AlignHorzCenter: string ;
   AlignVertCenter: string ;
   AlignGroup: string ;
   AlignUnGroup: string ;
   SendToFront: string ;
   ShowSelectedFrames: string ;
   HideSelectedFrames: string ;
   Separator004: string ;
   Separator005: string ;
   Separator006: string ;
   Separator007: string ;
   Separator009: string ;
   MenuItem002: string ;
   ShowFrameFinder: string ;
   SendToBack: string ;
}
declare class PopupMenuForGraphAgent extends aMenuItemControlAgent {
}
declare class aGraph extends aScenario {
   LeftMargins: string ;
   RightMargins: string ;
   TopMargins: string ;
   BottomMargins: string ;
   DontShowPages: string ;
   Zoom: string ;
   WithPageNumber: string ;
   LandScape: string ;
   PagesToPrint: string ;
   PrintingZoom: string ;
   OwnedId: string ;
   ScenarioForObjectInGraph(TheObject:aLightObject):aScenario;
   IsSystemCloseAccepted();
   Init();
   SetZoomFactor(ZoomFactor:number);
   Print();
   GetPrintingZoom():number;
   SetPrintingConfiguration();
   StartPrint():aGraphPrinterUIAgent;
   PrintPage(theGraphPrinterUIAgent:aGraphPrinterUIAgent, xPage:number, yPage:number, PageNumber:number);
   FinishPrint(theGraphPrinterUIAgent:aGraphPrinterUIAgent);
   CalcNbPages():number;
   DisplayZoom():string;
   SetZoom(theUIAgent:aUIAgent, ZoomFactor:number);
   SetZoom50(theUIAgent:aUIAgent);
   SetZoom75(theUIAgent:aUIAgent);
   SetZoom100(theUIAgent:aUIAgent);
   SetZoom200(theUIAgent:aUIAgent);
   SetDoubleZoom(theUIAgent:aUIAgent);
   SetMiddleZoom(theUIAgent:aUIAgent);
   StringExtract();
   DisplayDraggableToolForGraph():aDraggableToolForGraph;
   SendToFront();
   SendToBack();
   UIModify();
   UIConsult();
   ShowSelectedFrames();
   HideSelectedFrames();
   StartBuild():string;
   FinishBuild(BuilderHandle:string);
   AddObject(BuilderHandle:string, theObject:aLightObject, theScenario:aScenario, X:number, Y:number, Width:number, Height:number, Refresh:boolean):aGraphFrameUIAgent;
   AddVerticalTree(BuilderHandle:string, theObject:aLightObject, theEntityScenario:aScenario, theVarDesc:aVarDesc, X:number, Y:number, HorzInterval:number, VertInterval:number, MaxX:number, Refresh:boolean);
   AddHorizontalTree(BuilderHandle:string, theObject:aLightObject, theScenario:aScenario, theVarDesc:aVarDesc, X:number, Y:number, LevelMaxWidth:number, HorzInterval:number, VertInterval:number, MaxY:number, Refresh:boolean);
   FillList(theObject:aLightObject, theVarDesc:aVarDesc, theListOfClassDef:aListOfInstances);
   AddHorizontalTreeWithPresentedAndExpandingVars(BuilderHandle:string, theObject:aLightObject, theListOfPresentedVars:aListOfInstances, theListOfExpandingVars:aListOfInstances, X:number, Y:number, LevelMaxWidth:number, HorzInterval:number, VertInterval:number, MaxY:number, Refresh:boolean);
   AddHorizontalTreeWithMultiVariablesManaging(BuilderHandle:string, Object:aLightObject, ScenariosDesigner:aScenarioForGraphDesigner, X:number, Y:number, LevelMaxWidth:number, HorzInterval:number, VertInterval:number, MaxY:number, Refresh:boolean);
   AddHorizontalTreeWithScens(BuilderHandle:string, Object:aLightObject, theListOfScens:aListOfInstances, X:number, Y:number, LevelMaxWidth:number, HorzInterval:number, VertInterval:number, MaxY:number, Refresh:boolean);
   AddHorizontalTreeWithVarsAndScens(BuilderHandle:string, Object:aLightObject, theListOfVars:aListOfInstances, theListOfScens:aListOfInstances, X:number, Y:number, LevelMaxWidth:number, HorzInterval:number, VertInterval:number, MaxY:number, Refresh:boolean);
   Refresh(BuilderHandle:string);
   IsConsistent();
   ScenarioKindSet();
   PaintBack(theGraphUIAgent:aGraphModifierUIAgent, Ps:string, XPaint:number, YPaint:number, WidthPaint:number, HeightPaint:number):boolean;
   StartBmpSave(Width:number, Height:number, Zoom:string):aGraphPrinterUIAgent;
   BmpSavePageWithOffset(theGraphPrinterUIAgent:aGraphPrinterUIAgent, xPage:number, yPage:number, FileName:string, BitmapFileType:string, OriginX:number, OriginY:number);
   BmpSavePage(theGraphPrinterUIAgent:aGraphPrinterUIAgent, xPage:number, yPage:number, FileName:string, BitmapFileType:string);
   FinishBmpSave(theGraphPrinterUIAgent:aGraphPrinterUIAgent);
   SaveToFile();
   GetOption():aOption;
   IsAnExportableEntity();
   IsAnInOutSyncEntity();
   GetIDAllocater();
   GetNsIdAndIdforOwnedEntity();
   RegisterYourselfInIDE();
   InOutSyncCategory();
   NotifyDeletion();
   IsGraph();
   SaveToBitmapWithAgent(TheAgent:aGraphBeforeSavingUIAgent, FileName:string, TheGauge:aGauge, PageWidth:number, PageHeight:number, BitmapFileType:string, ZoomFactor:string, LastXPages:number, LastYPages:number, OriginX:number, OriginY:number);
   SaveToBitmap(FileName:string, TheGauge:aGauge, PageWidth:number, PageHeight:number, BitmapFileType:string, ZoomFactor:string, LastXPages:number, LastYPages:number, OriginX:number, OriginY:number);
   SmallestRectContainingAllFrames(xMin:number, yMin:number, xMax:number, yMax:number, ZoomFactor:string);
   SaveSmallestRectangle(FileName:string, BitmapFileType:string, ZoomFactor:string);
   ShowFrameFinder();
   LaunchPrint(Gauge:aGauge, BeforePrintingScenario:BeforePrintingScenarioAgent, theGraphPrinterUIAgent:aGraphPrinterUIAgent);
   ExecutePrint(Gauge:aGauge, BeforePrintingScenario:BeforePrintingScenarioAgent);
}
declare class aGraphModifierScenario extends aScenario {
   DefaultUIAgentClassId();
   DefaultUIComponentClassId();
   BuildUIAgent();
}
declare class aGraphPrinterUIAgent extends aGraphModifierUIAgent {
   Prn: string ;
   PrinterPageWidth: string ;
   PrinterPageHeight: string ;
   GetClientWidth();
   GetClientHeight();
   Show();
   SetFocus();
   SetTopXY(TopX:number, TopY:number);
   NotifyInit();
   Paint();
   Init();
}
declare class aAutoSizeGraphFrameScenario extends aGraphFrameScenario {
   DefaultUIAgentClassId();
   ScenarioKindSet();
   GetLabelForThisQVarPresentor();
   GetQVarPresentor();
   Init();
}
declare class aAutoSizeGraphFrameUIAgent extends aGraphFrameUIAgent {
   AutoWidth();
   AutoHeight();
   PaintBack();
   PaintBorder();
   Paint();
   NotifyRangeHasChanged();
   NotifyButtonDblClk();
   DrawHorzLine();
   DrawMultipleBorder();
   AutoWidthHeightFromSubAgents();
   CalcExpectedPosForFrame();
}
declare class aLinkUIAgent extends aUIAgent {
   FromFrameUIAgent: string ;
   ToFrameUIAgent: string ;
   Point1: string ;
   Point2: string ;
   myDesignWindow: string ;
   TextWidth: string ;
   TextHeight: string ;
   PointsAgents: string ;
   SetFromFrameUIAgent(FromFrameUIAgent:aGraphFrameUIAgent);
   SetToFrameUIAgent(ToFrameUIAgent:aGraphFrameUIAgent);
   GetFromFrameUIAgent():aGraphFrameUIAgent;
   GetToFrameUIAgent():aGraphFrameUIAgent;
   CreateAndFinalizePointAgent(PointQVP:aGraphQVP, Point:aPoint, MasterAgent:aGraphFrameUIAgent):aPointUIAgent;
   Finalize();
   SetFirstPointPos(X:number, Y:number);
   SetLineColorKindAndWidth(PS:string);
   DrawLinkForPoint(Ps:string, X1:number, Y1:number, X2:number, Y2:number);
   DrawLinksForPointReturnTrueForDefault(Ps:string, X1:number, Y1:number, X2:number, Y2:number):boolean;
   CalcRectForPoint(X1:number, Y1:number, X2:number, Y2:number, xMin:number, yMin:number, xMax:number, yMax:number);
   CalcRectForPoint1And2(xMin:number, yMin:number, xMax:number, yMax:number);
   MarkPointsToDeleted();
   SetForeLink(Fore:boolean);
   AddPoint(Rank:number, X:number, Y:number, FrameAgent:aGraphFrameUIAgent):aPointUIAgent;
   MarkPointsToDestroy(FromPointAgent:aPointUIAgent):boolean;
   DeletePoint(PointAgent:aPointUIAgent);
   Init();
   Terminate();
   NotifyTerminate();
   ResetPointsPos();
}
declare class aQVPLinkScenario extends aQVarPresentor {
   LinkKind: string ;
   LineKind: string ;
   NbSymbols: string ;
   SymbolsAtMiddle: string ;
   LinkForeColor: string ;
   LinkBackColor: string ;
   LinkText: string ;
}
declare class aGraphUIAgent extends aUIAgent {
   Width: string ;
   Height: string ;
   CalcAutoWidth: string ;
   CalcAutoHeight: string ;
   ZoomFactor: string ;
   CharWidth: string ;
   CharHeight: string ;
   FontSize: string ;
   IAmHidden: string ;
   IsDragging: string ;
   theGraphFrameUIAgent: string ;
   SetAutoWidthHeight(Width:number, Height:number);
   GetAutoWidthHeight(Width:number, Height:number);
   myWindowAgent():aGraphModifierUIAgent;
   MyGraphFrameUIAgent():aGraphFrameUIAgent;
   CalcSizes(PS:string, ZoomFactor:string, ForceRecalc:boolean);
   ChangePos();
   GetWidth();
   GetHeight();
   NotifyButtonDblClk();
   Show();
   Hide();
   IsHidden();
   GetFromFrameUIAgent(LinkQVP:aQVPLinkScenario):aGraphFrameUIAgent;
   GetToFrameUIAgent(LinkQVP:aQVPLinkScenario):aGraphFrameUIAgent;
   SetFramesUIAgent(BuiltUIAgent:aLinkUIAgent, LinkQVP:aQVPLinkScenario);
   BuildLinkUIAgent(thisLink:aQVarPresentor):aLinkUIAgent;
   FindLinkUIAgent(ThisObject:aFullObject):aLinkUIAgent;
   NewLinkScenario():aLinkScenario;
   CreateLinkFor(ThisObject:aFullObject, FromX:number, FromY:number, ToX:number, ToY:number, LinkKind:string, LineKind:string, NbSymbols:number, SymbolsAtMiddle:string, LinkForeColor:string, LinkBackColor:string, LinkText:string):aQVPLinkScenario;
   DeleteIfExistLinkFor(ThisObject:aFullObject);
   DeleteLink(ExceptObject:aLightObject, ExceptList:aListOfInstances);
   FindLinkFor(ThisObject:aFullObject):aQVPLinkScenario;
   CheckForVisibleObjects():boolean;
   CheckLinks();
   LoadValue();
   GetForeColor();
   GetBackColor();
   GetFontName();
   GetFontSize();
   GetFontSels();
   FinalizeFrameUIAgent(QVarPresentor:aQVarPresentor, UIAgent:aUIAgent);
   AddFrameUIAgentEx(TheScenario:aScenario, QVarPresentor:aQVarPresentor, HostUIAgent:aUIAgent, HostVarAgent:aVarAgent):aGraphFrameUIAgent;
   AddFrameUIAgentInUIAgent(QVarPresentor:aQVarPresentor, UIAgent:aUIAgent):aUIAgent;
   AddFrameUIAgentInMyFrameUIAgent(QVarPresentor:aQVarPresentor):aUIAgent;
   AddFrameUIAgentInMyWindow(QVarPresentor:aQVarPresentor):aUIAgent;
   GetAutoHide():boolean;
   GetAddLink():boolean;
   GetLinkKind(theLinkUIAgent:aLinkUIAgent):string;
   GetLineKind(theLinkUIAgent:aLinkUIAgent):string;
   GetNbSymbols(theLinkUIAgent:aLinkUIAgent):number;
   GetSymbolsAtMiddle(theLinkUIAgent:aLinkUIAgent):boolean;
   GetLinkForeColor(theLinkUIAgent:aLinkUIAgent):string;
   GetLinkBackColor(theLinkUIAgent:aLinkUIAgent):string;
   GetLinkText(theLinkUIAgent:aLinkUIAgent):string;
   CalcAutoWidthHeight();
}
declare class aLinkScenario extends aScenario {
   DefaultUIAgentClassId();
   ScenarioKindSet();
   GetLabelForThisQVarPresentor();
   BuildSubComponents();
   NewQVarPresentor();
   InsertPointWithMaster(Rank:number, X:number, Y:number, GraphAgent:aGraphModifierUIAgent, Name:string, Master:aGraphQVP):aGraphQVP;
   InsertPoint(Rank:number, X:number, Y:number, GraphAgent:aGraphModifierUIAgent, Name:string):aGraphQVP;
   AddPointWithMaster(X:number, Y:number, GraphAgent:aGraphModifierUIAgent, Name:string, Master:aGraphQVP);
   AddPoint(X:number, Y:number, GraphAgent:aGraphModifierUIAgent, Name:string);
   InitAfterLoad();
}
declare class aGraphFrameLinkScenario extends aScenario {
   DefaultGraphParam: string ;
   ScenarioKindSet();
   DefaultUIAgentClassId();
   NewQVarPresentor();
}
declare class aGraphFrameLinkUIAgent extends aUIAgent {
   AddFirstPoint(X:number, Y:number, ToThisFrame:aFrame);
}
declare class aQVPGraphFrameLinkScenario extends aQVarPresentor {
   FromGraphEntity: string ;
   ToGraphEntity: string ;
   CreatedByThis: string ;
}
declare class aPointUIAgent extends aGraphFrameUIAgent {
   myLinkUIAgent: string ;
   Finalize();
   DrawLinks();
   CanBeDeleted();
   CalcRectFromLinks();
   NotifyDblClk();
   IsPoint();
   MaxDistToLine():number;
   Sqr(i:number):number;
   Dist(Dx:number, Dy:number):number;
   NotifyButtonDown();
   MarkLinksToDestroy();
   NotifyDelete();
   NotifyDeleteOnlyDesign();
   Terminate();
   AutoWidth();
   AutoHeight();
   CommonMasterFrame(FirstFrame:aFrame, SecondFrame:aFrame):aFrame;
   CommonMasterWithNext():aFrame;
   CommonMasterAgentWithNext():aGraphFrameUIAgent;
   NotifyMasterChanged();
   GiverOfNewVersionsOfThisScenario();
   GiveNewVersionOfThisQVarPresentor();
}
declare class aQVPXXXAsGraphText001Agent extends aUIAgent {
   DrawTextKind: string ;
   DrawTextKindGroupBox: string ;
   VerticalAutoSize: string ;
   VisibleState: string ;
}
declare class aQVPXXXAsGraphText extends aQVarPresentor {
   DrawTextKind: string ;
   VerticalAutoSize: string ;
   VisibleState: string ;
   Init();
}
declare class DesignerOfGraphScenariosForClassDefsAgent extends aUIAgent {
   theAssociators: string ;
   PushButton: string ;
   theAssociators001: string ;
   PushButton001: string ;
   PushButton002: string ;
   theClassDef: string ;
   theClassDefStaticText: string ;
   theScenario: string ;
   theScenarioStaticText: string ;
   PushButton_Executed(SelectedRank:number, Option:number):number;
   theAssociators_Selected(SelectedRank:number):number;
   theAssociators001_Selected(SelectedRank:number):number;
   PushButton001_Executed(SelectedRank:number, Option:number):number;
   PushButton002_Executed(SelectedRank:number, Option:number):number;
}
declare class DesignerForGraphScenarioAgent extends aUIAgent {
   DesignerForGraphScenario: string ;
   OnlyScenario: string ;
   NotifyInit();
}
declare class aScenarioForGraphDesigner extends aScenario {
   theAssociators: string ;
   BuiltScenario: string ;
   theEntity: string ;
   StringExtract();
}
declare class aAssociator001Agent extends aUIAgent {
   theClassDef: string ;
   theClassDefStaticText: string ;
}
declare class ScenarioOnlyWithValidationAgent extends aUIAgent {
   aAssociatorDT: string ;
   ToolBarInModalMode: string ;
   OnlyScenario: string ;
   NotifyInit();
}
declare class aAssociator extends aScenario {
   theClassDef: string ;
   theScenario: string ;
   ActionValid();
   Init();
   StringExtract();
}
declare class aGraphBuilderUIAgent extends aGraphModifierUIAgent {
   Show();
   SetFocus();
}
declare class aQVPRefToAsAutoSizeScenario001Agent extends aUIAgent {
   ExtractKind: string ;
   ExtractKindGroupBox: string ;
   LinkKind: string ;
   LinkKindStaticText: string ;
   LineKind: string ;
   LineKindStaticText: string ;
   NbSymbols: string ;
   NbSymbolsStaticText: string ;
   LinkForeColor: string ;
   LinkForeColorStaticText: string ;
   LinkBackColor: string ;
   LinkBackColorStaticText: string ;
   FontName: string ;
   FontNameStaticText: string ;
   FontSize: string ;
   FontSizeStaticText: string ;
   FontSels: string ;
   LinkText: string ;
   LinkTextStaticText: string ;
   VisibleState: string ;
   SymbolsAtMiddleStaticText: string ;
   SymbolsAtMiddle001: string ;
   AutoHideStaticText: string ;
   AutoHide001: string ;
   AddLinkStaticText: string ;
   AddLink001: string ;
}
declare class QVPRefToAsAutoSizeMainAgent extends aUIAgent {
   DrawTextKind: string ;
   DrawTextKindGroupBox: string ;
   VerticalAutoSize: string ;
   VisibleState: string ;
}
declare class aQVPRefToAsAutoSizeScenario003Agent extends aFolderViewAgent {
}
declare class aQVPSingleLinkScenario extends aQVPLinkKind {
   DrawTextKind: string ;
   ExtractKind: string ;
   AutoHide: string ;
   AddLink: string ;
   LinkKind: string ;
   LineKind: string ;
   NbSymbols: string ;
   SymbolsAtMiddle: string ;
   LinkForeColor: string ;
   LinkBackColor: string ;
   VerticalAutoSize: string ;
   NotOldVersion: string ;
   VisibleState: string ;
   LinkText: string ;
   Init();
   InitAfterLoad();
   GetDrawTextKind();
   SetDrawTextKind();
   GetExtractKind();
   SetExtractKind();
   GetAutoHide();
   SetAutoHide();
   GetAddLink();
   SetAddLink();
   GetLinkKind();
   SetLinkKind();
   GetLineKind();
   SetLineKind();
   GetNbSymbols();
   SetNbSymbols();
   GetSymbolsAtMiddle();
   SetSymbolsAtMiddle();
   GetLinkForeColor();
   SetLinkForeColor();
   GetLinkBackColor();
   SetLinkBackColor();
   GetNotOldVersion();
   SetNotOldVersion();
   GetVisibleState();
   SetVisibleState();
   GetLinkText();
   SetLinkText();
   GetVerticalAutoSize();
   SetVerticalAutoSize();
}
declare class aQVPListOfAsAutoSizeScenario001Agent extends aUIAgent {
   ExtractKind: string ;
   ExtractKindGroupBox: string ;
   LinkKind: string ;
   LinkKindStaticText: string ;
   LineKind: string ;
   LineKindStaticText: string ;
   NbSymbols: string ;
   NbSymbolsStaticText: string ;
   LinkForeColor: string ;
   LinkForeColorStaticText: string ;
   LinkBackColor: string ;
   LinkBackColorStaticText: string ;
   DrawTextKind: string ;
   DrawTextKindGroupBox: string ;
   FontName: string ;
   FontNameStaticText: string ;
   FontSize: string ;
   FontSizeStaticText: string ;
   FontSels: string ;
   LinkText: string ;
   LinkTextStaticText: string ;
   VisibleState: string ;
   SymbolsAtMiddleStaticText: string ;
   SymbolsAtMiddle001: string ;
   AutoHideStaticText: string ;
   AutoHide001: string ;
   AddLinkStaticText: string ;
   AddLink001: string ;
}
declare class aQVPListOfAsAutoSizeScenario002Agent extends aUIAgent {
   DrawTextKind: string ;
   DrawTextKindGroupBox: string ;
   VisibleState: string ;
   LinkFromMiddleStaticText: string ;
   LinkFromMiddle001: string ;
}
declare class aQVPListOfAsAutoSizeScenario003Agent extends aFolderViewAgent {
}
declare class aQVPListOfAsAutoSizeScenario extends aQVPLinkKind {
   DrawTextKind: string ;
   ExtractKind: string ;
   AutoHide: string ;
   AddLink: string ;
   LinkKind: string ;
   LineKind: string ;
   NbSymbols: string ;
   SymbolsAtMiddle: string ;
   LinkForeColor: string ;
   LinkBackColor: string ;
   NotOldVersion: string ;
   VisibleState: string ;
   LinkFromMiddle: string ;
   LinkText: string ;
   Init();
   InitAfterLoad();
   GetDrawTextKind();
   SetDrawTextKind();
   GetExtractKind();
   SetExtractKind();
   GetAutoHide();
   SetAutoHide();
   GetAddLink();
   SetAddLink();
   GetLinkKind();
   SetLinkKind();
   GetLineKind();
   SetLineKind();
   GetNbSymbols();
   SetNbSymbols();
   GetSymbolsAtMiddle();
   SetSymbolsAtMiddle();
   GetLinkForeColor();
   SetLinkForeColor();
   GetLinkBackColor();
   SetLinkBackColor();
   GetNotOldVersion();
   SetNotOldVersion();
   GetVisibleState();
   SetVisibleState();
   GetLinkText();
   SetLinkText();
   GetLinkFromMiddle();
   SetLinkFromMiddle();
}
declare class aGraphPrinterScenario extends aScenario {
   DefaultUIAgentClassId();
   DefaultUIComponentClassId();
}
declare class aGraphBeforePrintingScenario extends aScenario {
   DefaultUIAgentClassId();
   DefaultUIComponentClassId();
   BuildUIAgent();
}
declare class aGraphBeforePrintingUIAgent extends aGraphModifierUIAgent {
   ZoomFactor: string ;
   CurrentXPage: string ;
   CurrentYPage: string ;
   CurrentPrintingXPage: string ;
   CurrentPrintingYPage: string ;
   TogglePage(xPage:number, yPage:number);
   IsToPrint(xPage:number, yPage:number):boolean;
   Finalize();
   ChangePos();
   NotifyHostRangeHasChanged();
   NotifyButtonDown();
   NotifyButtonUp();
   NotifyButtonDblClk();
   NotifyMouseMove();
   Paint();
   LoadValue();
   SetCurrentPage(XPage:number, YPage:number);
   Init();
   NotifyInit();
   GetZoomFactor();
}
declare class aGraphBuilderScenario extends aScenario {
   DefaultUIAgentClassId();
   DefaultUIComponentClassId();
}
declare class aObjectAsBitMapUIAgent extends aBitMapControlAgent {
   IsDragging: string ;
   NotifyButtonDown();
   NotifyButtonUp();
   NotifyMouseMove();
}
declare class aGraphModifierInDlgWindow extends aGraphModifierScenario {
   DefaultUIAgentClassId();
}
declare class aGraphModifierInDlgWindowAgent extends aGraphModifierUIAgent {
   Finalize();
   ChangePos();
   NotifyHostRangeHasChanged();
}
declare class aGraphBeforeSavingScenario extends aGraphBeforePrintingScenario {
   DefaultUIAgentClassId();
}
declare class aGraphBeforeSavingUIAgent extends aGraphBeforePrintingUIAgent {
   PagesToSave: string ;
   SavingPageWidth: string ;
   SavingPageHeight: string ;
   Init();
   TogglePage();
   IsToPrint();
   CalcPageWidthHeight();
   CalcNbPages():number;
   LoadValue();
}
declare class aGraphFormEntityAgent extends MoreForGraphEntityAgent {
   DrawTextKind: string ;
   DrawTextKindGroupBox: string ;
   DirectionKind: string ;
   DirectionKindGroupBox: string ;
}
declare class aGraphFormEntity extends aGraphEntity {
   DrawTextKind: string ;
   GraphFormParam: string ;
   IsTransparent: string ;
   HasRelief: string ;
   DirectionKind: string ;
}
declare class aRectangleGFS extends aGraphFormScenario {
   ScenarioKindSet();
   DefaultUIAgentClassId();
}
declare class aRectangleGFU extends aGraphFormUIAgent {
   Paint();
   Hide();
   Show();
}
declare class aRectangleWithTitleGFS extends aGraphFormScenario {
   DefaultDirectionKind: string ;
   ScenarioKindSet();
   DefaultUIAgentClassId();
   GetQVarPresentor();
}
declare class aRectangleWithTitleGFU extends aGraphFormUIAgent {
   Paint();
   GetThumbPos();
   IHaveThumb();
   UpDateDataFromThumbPos();
   PtrForThumb();
   Hide();
   Show();
}
declare class aRoundRectangleGFS extends aGraphFormScenario {
   DefaultDirectionKind: string ;
   ScenarioKindSet();
   DefaultUIAgentClassId();
   GetQVarPresentor();
}
declare class aRoundRectangleGFU extends aGraphFormUIAgent {
   Paint();
   GetThumbPos();
   IHaveThumb();
   UpDateDataFromThumbPos();
   PtrForThumb();
   Hide();
   Show();
}
declare class aRoundRectWithTitleGFS extends aGraphFormScenario {
   DefaultDirectionKind: string ;
   ScenarioKindSet();
   DefaultUIAgentClassId();
   GetQVarPresentor();
}
declare class aRoundRectWithTitleGFU extends aGraphFormUIAgent {
   Paint();
   GetThumbPos();
   IHaveThumb();
   UpDateDataFromThumbPos();
   PtrForThumb();
   Hide();
   Show();
}
declare class aRhomboidGFS extends aGraphFormScenario {
   ScenarioKindSet();
   DefaultUIAgentClassId();
}
declare class aRhomboidGFU extends aGraphFormUIAgent {
   Paint();
   Hide();
   Show();
}
declare class aEllipseGFS extends aGraphFormScenario {
   ScenarioKindSet();
   DefaultUIAgentClassId();
}
declare class aEllipseGFU extends aGraphFormUIAgent {
   Paint();
   Hide();
   Show();
}
declare class aHexaGFS extends aGraphFormScenario {
   ScenarioKindSet();
   DefaultUIAgentClassId();
   GetQVarPresentor();
}
declare class aHexaGFU extends aGraphFormUIAgent {
   Paint();
   GetThumbPos();
   IHaveThumb();
   UpDateDataFromThumbPos();
   Hide();
   Show();
}
declare class aTrapezoidGFS extends aGraphFormScenario {
   DefaultDirectionKind: string ;
   ScenarioKindSet();
   DefaultUIAgentClassId();
   GetQVarPresentor();
}
declare class aTrapezoidGFU extends aGraphFormUIAgent {
   Paint();
   GetThumbPos();
   IHaveThumb();
   UpDateDataFromThumbPos();
   Hide();
   Show();
}
declare class aTriangleGFS extends aGraphFormScenario {
   DefaultDirectionKind: string ;
   ScenarioKindSet();
   DefaultUIAgentClassId();
   GetQVarPresentor();
}
declare class aTriangleGFU extends aGraphFormUIAgent {
   Paint();
   Hide();
   Show();
}
declare class aPentaGFS extends aGraphFormScenario {
   DefaultDirectionKind: string ;
   ScenarioKindSet();
   DefaultUIAgentClassId();
   GetQVarPresentor();
}
declare class aPentaGFU extends aGraphFormUIAgent {
   Paint();
   GetThumbPos();
   IHaveThumb();
   UpDateDataFromThumbPos();
   PtrForThumb();
   Hide();
   Show();
}
declare class aArrowGFS extends aGraphFormScenario {
   DefaultDirectionKind: string ;
   ScenarioKindSet();
   DefaultUIAgentClassId();
   GetQVarPresentor();
   NewQVarPresentor();
}
declare class aArrowGFU extends aGraphFormUIAgent {
   Paint();
   IHaveThumb();
   PtrForThumb();
   GetThumbPos();
   UpDateDataFromThumbPos();
   Hide();
   Show();
}
declare class aArrowGraphFormEntityAgent extends aGraphFormEntityAgent {
   GraphParamForArrow: string ;
   ParamX: string ;
   ParamXStaticText: string ;
   ParamY: string ;
   ParamYStaticText: string ;
}
declare class aArrowGraphFormEntity extends aGraphFormEntity {
   GraphParamForArrow: string ;
}
declare class aBoxGFS extends aGraphFormScenario {
   ScenarioKindSet();
   DefaultUIAgentClassId();
   GetQVarPresentor();
}
declare class aBoxGFU extends aGraphFormUIAgent {
   Paint();
   IHaveThumb();
   PtrForThumb();
   GetThumbPos();
   UpDateDataFromThumbPos();
   Hide();
   Show();
}
declare class aBullGFS extends aGraphFormScenario {
   ScenarioKindSet();
   DefaultUIAgentClassId();
   GetQVarPresentor();
   NewQVarPresentor();
}
declare class aBubbleGFU extends aGraphFormUIAgent {
   Paint();
   IHaveThumb();
   PtrForThumb();
   GetThumbPos();
   UpDateDataFromThumbPos();
   Hide();
   Show();
}
declare class aBullGraphFormEntity001Agent extends aGraphFormEntityAgent {
   GraphParamForBull: string ;
   ParamX: string ;
   ParamXStaticText: string ;
   ParamY: string ;
   ParamYStaticText: string ;
}
declare class aBullGraphFormEntity extends aGraphFormEntity {
   GraphParamForBull: string ;
}
declare class a3DRectGFU extends aGraphFormUIAgent {
   Paint();
   GetThumbPos();
   IHaveThumb();
   UpDateDataFromThumbPos();
   PtrForThumb();
   Hide();
   Show();
}
declare class a3DRectGraphFromEntityAgent extends aGraphFormEntityAgent {
   BorderForeColor: string ;
   BorderForeColorStaticText: string ;
   BorderBackColor: string ;
   BorderBackColorStaticText: string ;
}
declare class a3DRectGraphFromEntity extends aGraphFormEntity {
   BorderForeColor: string ;
   BorderBackColor: string ;
}
declare class aObjectAsBitMapScenario extends aXXXAsBitMap {
   DefaultUIAgentClassId();
}
declare class aASIndexedBuildInListScenario extends aIndexedBuildInListScenario {
   DefaultUIAgentClassId();
   ScenarioKindSet();
   GetLabelForThisQVarPresentor();
   GetQVarPresentorOnDrop();
   CloneAll();
}
declare class aAutoSizeScenario extends aScenario {
   DefaultUIAgentClassId();
   ScenarioKindSet();
   GetLabelForThisQVarPresentor();
   GetOverridingScenarioFor();
   CanUse();
}
declare class aAutoSizeUIAgent extends aGraphUIAgent {
   AutoWidth();
   AutoHeight();
   CalcAutoWidthHeight();
   Paint();
   NotifyRangeHasChanged();
   NotifyButtonDblClk();
   NotifyHostRangeHasChanged();
   ChangePos();
   Finalize();
}
declare class aASIndexedBuildInListUIAgent extends aIndexedBuildInListUIAgent {
   Width: string ;
   Height: string ;
   ZoomFactor: string ;
   CharWidth: string ;
   CharHeight: string ;
   MyGraphFrameUIAgent():aGraphFrameUIAgent;
   GetWidth();
   GetHeight();
   AutoWidth();
   AutoHeight();
   CalcAutoWidthHeight();
   NotifyRangeHasChanged();
   NotifyButtonDblClk();
   NotifyHostRangeHasChanged();
   ChangePos();
   Finalize();
}
declare class aAutoSizeBuildInRefScenario extends aBuildInRefScenario {
   DefaultUIAgentClassId();
   ScenarioKindSet();
   GetLabelForThisQVarPresentor();
   GetQVarPresentorOnDrop();
}
declare class aAutoSizeBuildInRefUIAgent extends aBuildInRefUIAgent {
   Width: string ;
   Height: string ;
   ZoomFactor: string ;
   CharWidth: string ;
   CharHeight: string ;
   MyGraphFrameUIAgent():aGraphFrameUIAgent;
   GetWidth();
   GetHeight();
   AutoWidth();
   AutoHeight();
   CalcAutoWidthHeight();
   NotifyRangeHasChanged();
   NotifyButtonDblClk();
   NotifyHostRangeHasChanged();
   ChangePos();
   Finalize();
}
declare class aAutoSizeRefScenario extends aRefScenario {
   DefaultUIAgentClassId();
   ScenarioKindSet();
   GetLabelForThisQVarPresentor();
   CloneAll():aAutoSizeRefScenario;
}
declare class aAutoSizeRefUIagent extends aRefUIAgent {
   Width: string ;
   Height: string ;
   ZoomFactor: string ;
   CharWidth: string ;
   CharHeight: string ;
   GetRefObject(VarAddress:string):aFullObject;
   GetRefUIAgent():aUIAgent;
   UpdateRefUIAgent(VarAddress:string);
   MyGraphFrameUIAgent():aGraphFrameUIAgent;
   CalcAutoWidthHeight();
   GetWidth();
   GetHeight();
   AutoWidth();
   AutoHeight();
   ChangePos();
   Finalize();
   LoadValue();
}
declare class aExtListOfScenario extends aExtGraphScenario {
   DefaultUIAgentClassId();
}
declare class aExtListOfUIAgent extends aExtGraphUIAgent {
   theListOfAsExtLinkUIAgent: string ;
   GetExtUIAgent();
   SetExtUIAgentVar(UIAgent:aListOfAsExtLinkUIAgent);
   LoadValue();
   Terminate();
   SetExtDefaultSize();
   SetExtDefaultPos();
}
declare class aListOfAsExtLinkUIAgent extends aGraphFrameUIAgent {
   HostGraphFrameUIAgent: string ;
   myExtListOfUIAgent: string ;
   Paint();
   CanChangeWidth();
   CanChangeHeight();
   AuthorizedDw();
   AuthorizedDh();
   DrawBackLinks();
   Finalize();
   LoadValue();
   NotifyDblClk();
   CanBeDeleted();
   Terminate();
   SetExtUIAgent(Agent:aExtListOfUIAgent);
   GiverOfNewVersionsOfThisScenario();
   GiveNewVersionOfThisQVarPresentor();
   NotifyDelete();
}
declare class aGraphFrameForScenarioScenario extends aGraphFrameScenario {
   DefaultUIAgentClassId();
   GetQVarPresentor();
}
declare class aGraphFrameForScenarioUIAgent extends aGraphFrameUIAgent {
   Finalize();
   CalcAutoWidthHeight();
   Paint();
}
declare class aLineInListUIAgent extends aGraphUIAgent {
}
declare class aListOfAsAutoSizeScenario extends aScenario {
   DefaultUIAgentClassId();
   ScenarioKindSet();
   GetLabelForThisQVarPresentor();
   BuildSubComponents();
   Paint();
   NewQVarPresentor();
   IsToBeCloneAll();
   GetQVarPresentor();
}
declare class aListOfAsAutoSizeUIAgent extends aLinkKindUIAgent {
   DraggedObject: string ;
   VisibleObjects: string ;
   ElementHeight: string ;
   nbPos: string ;
   pTabOfPos: string ;
   CheckForVisibleObjects();
   CheckLinks();
   Paint();
   AutoWidth();
   AutoHeight();
   CalcAutoWidthHeight();
   NotifyButtonDblClk();
   NotifyButtonDown();
   NotifyButtonUp();
   NotifyMouseMove();
   Kill();
   ChangeVarAgent();
}
declare class aListOfAsExtLinkScenario extends aGraphFrameScenario {
   NewQVarPresentor();
   DefaultUIAgentClassId();
   ScenarioKindSet();
   GetLabelForThisQVarPresentor();
}
declare class aQVPListOfAsExtLink extends aGraphEntity {
   CloneAll();
}
declare class aRefToAsAutoSizeScenario extends aScenario {
   DefaultUIAgentClassId();
   NewQVarPresentor():aQVPRefToAsAutoSizeScenario;
   ScenarioKindSet();
   GetLabelForThisQVarPresentor();
   IsToBeCloneAll();
   BuildSubComponents();
   GetQVarPresentor();
   Paint();
}
declare class aRefToAsAutoSizeUIAgent extends aLinkKindUIAgent {
   GetRefObject():string;
   Paint();
   AutoWidth();
   AutoHeight();
   CalcAutoWidthHeight();
   NotifyButtonDblClk();
   CheckLinks();
   GetRefFrameUIAgent():aGraphFrameUIAgent;
   CheckForVisibleObjects();
   Finalize();
   NotifyButtonDown();
   NotifyButtonUp();
   NotifyMouseMove();
   ChangeVarAgent();
}
declare class aXXXAsAutoSizeGraphText extends aScenario {
   Init();
   Paint();
   DefaultUIAgentClassId();
   NewQVarPresentor();
   ScenarioKindSet();
   GetLabelForThisQVarPresentor();
   GetQVarPresentor();
}
declare class aXXXAsAutoSizeGTUIAgent extends aGraphUIAgent {
   OldText: string ;
   GetText():string;
   Paint();
   AutoWidth();
   AutoHeight();
   WidthMargin():number;
   HeightMargin():number;
   CalcAutoWidthHeight();
   ChangePos();
   NotifyButtonDblClk();
   LoadValue();
   IsHidden();
}
declare class aRoundGraphFrameScenario extends aGraphFrameScenario {
   DefaultUIAgentClassId();
   ScenarioKindSet();
   GetLabelForThisQVarPresentor();
   Init();
}
declare class aRoundGraphFrameUIAgent extends aGraphFrameUIAgent {
   RoundParameter: string ;
   PaintBack();
   PaintBorder();
   Paint();
   NotifyRangeHasChanged();
   NotifyButtonDblClk();
   Show();
   Hide();
}
declare class aEllipseGraphFrameScenario extends aGraphFrameScenario {
   DefaultUIAgentClassId();
   ScenarioKindSet();
   GetLabelForThisQVarPresentor();
   GetQVarPresentor();
   Init();
}
declare class aEllipseGraphFrameUIAgent extends aGraphFrameUIAgent {
   AutoWidth();
   AutoHeight();
   CalcAutoWidthHeight();
   PaintBack();
   PaintBorder();
   Paint();
   NotifyRangeHasChanged();
   NotifyButtonDblClk();
   Show();
   Hide();
   DrawHorzLine();
}
declare class aXXXAsASGTWithTitle extends aXXXAsAutoSizeGraphText {
   Paint();
   DefaultUIAgentClassId();
}
declare class aXXXAsASGTWithTitleUIAgent extends aXXXAsAutoSizeGTUIAgent {
   GetText();
}
declare class aHorzAutoSizeScenario extends aAutoSizeScenario {
   DefaultUIAgentClassId();
}
declare class aHorzAutoSizeUIAgent extends aAutoSizeUIAgent {
   CalcAutoWidthHeight();
   Paint();
   NotifyRangeHasChanged();
}
declare module wGraphBuilder {
   function Add(theObject:aLightObject, theGraph:aGraph);
   function AddAt(theObject:aLightObject, theGraph:aGraph, X:number, Y:number, theWidth:number, theHeight:number);
   function AddAtUsingScenario(theObject:aLightObject, theGraph:aGraph, theScenario:aAutoSizeGraphFrameScenario, X:number, Y:number, theWidth:number, theHeight:number);
   function AddAtWithScenarioOnFly(theObject:aLightObject, theGraph:aGraph, X:number, Y:number, theWidth:number, theHeight:number);
   function AddWithPresentedAndExpandingVars(theObject:aLightObject, theGraph:aGraph, ShownVars:aListOfInstances, ExpandingVars:aListOfInstances);
   function AddTreeWithScenariosOnFly(theBeginningObject:aLightObject, theGraph:aGraph);
   function AddTreeWithListOfVarsAndScens(theBeginningObject:aLightObject, theListOfVars:aListOfInstances, theListOfScens:aListOfInstances, theGraph:aGraph);
   function AddTreeWithListOfScens(theBeginningObject:aLightObject, theListOfScens:aListOfInstances, theGraph:aGraph);
   function AddHorizontalTreeOfClassesWithDescendants(theBeginningObject:aLightObject, theGraph:aGraph);
   function AddVerticalTreeOfClassesWithDescendants(theBeginningObject:aLightObject, theGraph:aGraph);
   function AddTreeOfClassesPresentingVariables(theBeginningObject:aLightObject, theGraph:aGraph);
   function AddTreeOfClassesPresentingMethods(theBeginningObject:aLightObject, theGraph:aGraph);
   function AddTreeOfClassesPresentingVariablesAndMethods(theBeginningObject:aLightObject, theGraph:aGraph);
   function AddTreeOfClassesPresentingVariablesInAndOut(theBeginningObject:aLightObject, theGraph:aGraph);
   function AddTreeOfClassesPresentingMethodsInAndOut(theBeginningObject:aLightObject, theGraph:aGraph);
   function AddTreeOfClassesPresentingVariablesAndMethodsInAndOut(theBeginningObject:aLightObject, theGraph:aGraph);
   function AddTriangle(Direction:string, X:number, Y:number, Width:number, Height:number, BackColor:string, ForeColor:string, PresentedText:string, NameOfFont:string, SizeOfFont:number, TypeOfFont:string, theGraph:aGraph);
   function AddTrapezoid(Direction:string, X:number, Y:number, Width:number, Height:number, BackColor:string, ForeColor:string, PresentedText:string, NameOfFont:string, SizeOfFont:number, TypeOfFont:string, theGraph:aGraph);
   function AddPentagone(Direction:string, X:number, Y:number, Width:number, Height:number, BackColor:string, ForeColor:string, PresentedText:string, NameOfFont:string, SizeOfFont:number, TypeOfFont:string, theGraph:aGraph);
   function AddArrow(Direction:string, X:number, Y:number, Width:number, Height:number, BackColor:string, ForeColor:string, PresentedText:string, NameOfFont:string, SizeOfFont:number, TypeOfFont:string, theGraph:aGraph);
   function AddBox(X:number, Y:number, Width:number, Height:number, BackColor:string, ForeColor:string, PresentedText:string, NameOfFont:string, SizeOfFont:number, TypeOfFont:string, theGraph:aGraph);
   function AddBubble(X:number, Y:number, Width:number, Height:number, BackColor:string, ForeColor:string, PresentedText:string, NameOfFont:string, SizeOfFont:number, TypeOfFont:string, theGraph:aGraph);
   function AddHexagone(X:number, Y:number, Width:number, Height:number, BackColor:string, ForeColor:string, PresentedText:string, NameOfFont:string, SizeOfFont:number, TypeOfFont:string, theGraph:aGraph);
   function AddEllipse(X:number, Y:number, Width:number, Height:number, BackColor:string, ForeColor:string, PresentedText:string, NameOfFont:string, SizeOfFont:number, TypeOfFont:string, theGraph:aGraph);
   function AddRhomboid(X:number, Y:number, Width:number, Height:number, BackColor:string, ForeColor:string, PresentedText:string, NameOfFont:string, SizeOfFont:number, TypeOfFont:string, theGraph:aGraph);
   function AddRectangle(X:number, Y:number, Width:number, Height:number, BackColor:string, ForeColor:string, PresentedText:string, NameOfFont:string, SizeOfFont:number, TypeOfFont:string, theGraph:aGraph);
   function AddRoundRectangle(X:number, Y:number, Width:number, Height:number, BackColor:string, ForeColor:string, PresentedText:string, NameOfFont:string, SizeOfFont:number, TypeOfFont:string, theGraph:aGraph);
   function AddText(PresentedText:string, X:number, Y:number, BackColor:string, ForeColor:string, NameOfFont:string, SizeOfFont:number, TypeOfFont:string, theGraph:aGraph);
   function AddRectangleWithTitle(Title:string, X:number, Y:number, Width:number, Height:number, BackColor:string, ForeColor:string, NameOfFont:string, SizeOfFont:number, TypeOfFont:string, theGraph:aGraph);
   function AddRoundRectangleWithTitle(Title:string, X:number, Y:number, Width:number, Height:number, BackColor:string, ForeColor:string, NameOfFont:string, SizeOfFont:number, TypeOfFont:string, theGraph:aGraph);
   function Add3DRectangle(Direction:string, X:number, Y:number, Width:number, Height:number, BackColor:string, ForeColor:string, PresentedText:string, NameOfFont:string, SizeOfFont:number, TypeOfFont:string, theGraph:aGraph);
   function AddGraphInList(theGraph:aGraph, WithTheName:string);
}
declare class aTriangleGraphFrameScenario extends aGraphFrameScenario {
   DefaultUIAgentClassId();
   ScenarioKindSet();
   GetLabelForThisQVarPresentor();
   GetQVarPresentor();
   Init();
}
declare class aTriangleGraphFrameUIAgent extends aGraphFrameUIAgent {
   AutoWidth();
   AutoHeight();
   CalcAutoWidthHeight();
   DrawHorzLine();
   PaintBack();
   PaintBorder();
   Paint();
   NotifyRangeHasChanged();
   NotifyButtonDblClk();
   Show();
   Hide();
   CalcLinkFrom();
   CalcLinkTo();
   NotifyButtonDown();
   CalcExpectedPosForFrame();
}
declare class ChangeTitleAgent extends aUIAgent {
   EntryField: string ;
}
declare class aRectangleWithTitleGraphFrameUIAgent extends aGraphFrameUIAgent {
   TitleHeight: string ;
   TextWidth: string ;
   TextHeight: string ;
   theBitmapName: string ;
   theText: string ;
   BmpWidth: string ;
   BmpHeight: string ;
   OldTitle: string ;
   AutoWidth();
   AutoHeight();
   ExtractTextAndBitmap(theBitmapName:string, theText:string);
   CalcAutoWidthHeight();
   PaintBack();
   PaintBorder();
   Paint();
   NotifyRangeHasChanged();
   NotifyButtonDblClk();
   DrawHorzLine();
   DrawTitleLine(PS:string, XMin:number, XMax:number, Y:number);
   DrawMultipleBorder();
   LoadValue();
   CalcExpectedPosForFrame();
}
declare class aHexaGraphFrameUIAgent extends aGraphFrameUIAgent {
   AutoWidth();
   AutoHeight();
   CalcAutoWidthHeight();
   DrawHorzLine();
   Paint();
   NotifyRangeHasChanged();
   NotifyButtonDblClk();
   Show();
   Hide();
   CalcLinkFrom();
   CalcLinkTo();
}
declare class aRectNoRightBorderGraphFrameUIAgent extends aGraphFrameUIAgent {
   AutoWidth();
   AutoHeight();
   CalcAutoWidthHeight();
   Paint();
   NotifyRangeHasChanged();
   NotifyButtonDblClk();
   Show();
   Hide();
}
declare class aRectangleWithTitleGraphFrameScenario001Agent extends MoreScenarioVirtualOverrideAgent {
   DefaultFont: string ;
   FontName: string ;
   FontNameStaticText: string ;
   FontSize: string ;
   FontSizeStaticText: string ;
   FontSels: string ;
   GroupBox: string ;
   DefaultTitleKind: string ;
   DefaultTitleExtractKind: string ;
   DefaultTitleExtractKindStaticText: string ;
   DefaultTitleExtractParam: string ;
   DefaultTitleExtractParamStaticText: string ;
   GroupBox001: string ;
}
declare class aRectangleWithTitleGraphFrameScenario extends aGraphFrameScenario {
   DefaultUIAgentClassId();
   ScenarioKindSet();
   GetLabelForThisQVarPresentor();
   GetQVarPresentor();
   Init();
}
declare class aHexaGraphFrameScenario extends aGraphFrameScenario {
   DefaultUIAgentClassId();
   ScenarioKindSet();
   GetLabelForThisQVarPresentor();
   GetQVarPresentor();
   Init();
}
declare class aRectNoRightBorderGraphFrameScenario extends aGraphFrameScenario {
   DefaultUIAgentClassId();
   ScenarioKindSet();
   GetLabelForThisQVarPresentor();
   GetQVarPresentor();
   Init();
}
declare class GraphSpecifierAgent extends aUIAgent {
}
declare class ModSpecifierAgent extends aUIAgent {
}
declare class PopupMenuForClassInGraphAgent extends aMenuItemControlAgent {
   Ascendants: string ;
   Variables: string ;
   Methods: string ;
   Types: string ;
   Constants: string ;
   Scenarios: string ;
   UsedClassesAndModules: string ;
   Descendants: string ;
   MenuItem: string ;
   MenuItem001: string ;
   MenuItem002: string ;
   MenuItem003: string ;
   MenuItem004: string ;
   MenuItem005: string ;
   MenuItem006: string ;
   MenuItem007: string ;
}
declare class PopupMenuForModuleInGraphAgent extends aMenuItemControlAgent {
   Variables: string ;
   Methods: string ;
   Types: string ;
   Constants: string ;
   Scenarios: string ;
   UsedClassesAndModules: string ;
   MenuItem: string ;
   MenuItem001: string ;
   MenuItem002: string ;
   MenuItem003: string ;
   MenuItem004: string ;
   MenuItem005: string ;
}
declare class aGraphSpecifier extends aEntity {
   Ascendants: string ;
   Variables: string ;
   Methods: string ;
   Types: string ;
   Constants: string ;
   Scenarios: string ;
   UsedClassesAndModules: string ;
   Descendants: string ;
}
declare class aTitleAutoSizeUIAgent extends aGraphUIAgent {
   TitleHeight: string ;
   TextWidth: string ;
   TextHeight: string ;
   theBitmapName: string ;
   theText: string ;
   BmpWidth: string ;
   BmpHeight: string ;
   AutoWidth();
   AutoHeight();
   CalcTitle():string;
   ExtractTextAndBitmap(theBitmapName:string, theText:string);
   CalcAutoWidthHeight();
   Paint();
   NotifyRangeHasChanged();
   NotifyButtonDblClk();
   NotifyHostRangeHasChanged();
   ChangePos();
   Finalize();
}
declare class aRefClassAsAutoSizeScenario extends aRefToAsAutoSizeScenario {
   DefaultUIAgentClassId();
   BuildVarAgent();
}
declare class aRefClassAsAutoSizeUIAgent extends aRefToAsAutoSizeUIAgent {
   GetRefObject();
}
declare class aTitleAutoSizeScenario001Agent extends aUIAgent {
   DefaultFont: string ;
   FontName: string ;
   FontNameStaticText: string ;
   FontSize: string ;
   FontSizeStaticText: string ;
   FontSels: string ;
   GroupBox: string ;
   DefaultTitleKind: string ;
   DefaultTitleExtractKind: string ;
   DefaultTitleExtractKindStaticText: string ;
   DefaultTitleExtractParam: string ;
   DefaultTitleExtractParamStaticText: string ;
   GroupBox001: string ;
}
declare class aTitleAutoSizeScenario extends aAutoSizeScenario {
   Init();
   DefaultUIAgentClassId();
   IsToBeCloneAll();
}
declare class ObjectAsBitMapAgent extends aObjectAsBitMapUIAgent {
}
declare class ListOfAsGraphListAgent extends aListOfAsAutoSizeUIAgent {
}
declare class ListOfAsExtLinkScenarioAgent extends aListOfAsExtLinkUIAgent {
}
declare class _aListofReftosType001Agent extends aExtListOfUIAgent {
   ListOfAsExtLinkScenario: string ;
}
declare class AutoSizeIndexedBuildInscenarioAgent extends aASIndexedBuildInListUIAgent {
}
declare class GraphRefScenarioAgent extends aAutoSizeRefUIagent {
}
declare class GraphBuildInRefScenarioAgent extends aAutoSizeBuildInRefUIAgent {
}
declare class FloatingListOfAsAutoSizeScenarioAgent extends aListOfAsAutoSizeUIAgent {
}
declare class ListOfAsExtScenarioAgent extends aListOfAsExtLinkUIAgent {
}
declare class ExtListOfScenarioAgent extends aExtListOfUIAgent {
   ListOfAsExtScenario: string ;
}
declare class CStringAsGraphStaticTextAgent extends aXXXAsAutoSizeGTUIAgent {
}
declare class NumAsGraphStaticTextAgent extends aXXXAsAutoSizeGTUIAgent {
}
declare class NumAsGraphStaticTextWithTitleAgent extends aXXXAsASGTWithTitleUIAgent {
}
declare class IntAsGraphStaticTextAgent extends aXXXAsAutoSizeGTUIAgent {
}
declare class IntAsGraphStaticTextWithTitleAgent extends aXXXAsASGTWithTitleUIAgent {
}
declare class CStringAsGraphTextWithTitleAgent extends aXXXAsASGTWithTitleUIAgent {
}
declare class BooleanAsGraphStaticTextAgent extends aXXXAsAutoSizeGTUIAgent {
}
declare class BooleanAsGraphStatictextWithTitleAgent extends aXXXAsASGTWithTitleUIAgent {
}
declare class AutoSizeRefClassDefForGraphAgent extends aRefClassAsAutoSizeUIAgent {
}
declare class RefToTypeForGraphAgent extends aRefToAsAutoSizeUIAgent {
}
declare class aGraphDraggableEntity extends aEntity {
   InitFromGraph(Graph:aGraph);
   NotifyDropped(theUIComponent:string, X:number, Y:number, thisObject:string);
   CanBeDroppedIn(thisUIAgent:aUIAgent):boolean;
   UnDrag();
   GetScenarioToUse(Graph:aGraph, Object:aFullObject):aScenario;
}
declare class aGoldMagicExtension001Agent extends aUIAgent {
   DoYourJob: string ;
}
declare class aGoldMagicExtension extends aWideExtension {
   BuildNewGoldMagic():aGOLDMagic;
   DoYourJob();
   Init();
   FolderParentName();
   MenuText();
   ButtonBMPName();
}
declare class MainForGoldMagicAgent extends aUIAgent {
   UpdateCurrentLangage: string ;
   defaultOption: string ;
   Options: string ;
   GroupBox: string ;
   GroupBox001: string ;
}
declare class aGOLDMagic extends aEntity {
   defaultOption: string ;
   Options: string ;
   GoldOptions():aGOLDMagicOptions;
   theIDE():aWideIde;
   ResetDefaults();
   UpdateCurrentLanguage();
   IsSystemCloseAccepted();
}
declare class aGOLDMagicOptions001Agent extends aUIAgent {
   theKW: string ;
   KW001: string ;
   Element: string ;
   ElementGroupBox: string ;
   KW002: string ;
   LoadCurrentLangage: string ;
   ResetDefaults: string ;
   ConsultCurrentLangage: string ;
   Index: string ;
   ActionValid001: string ;
   ActionCancel001: string ;
   HelpButton: string ;
   Name: string ;
   NameStaticText: string ;
   myText: string ;
   myTextStaticText: string ;
   TimingOn: string ;
   TimingOff: string ;
   KW002_Selected(SelectedRank:number):number;
   KW002_Executed(SelectedRank:number, Option:number):number;
}
declare class tKW001Agent extends aUIAgent {
   Kind: string ;
   UserChoice: string ;
   UserChoiceStaticText: string ;
   ShortHand: string ;
   ShortHandStaticText: string ;
}
declare class aGOLDMagicOptions extends aGOLDCompilerOptions {
   theKW: string ;
   GoldOptions():aGOLDMagicOptions;
   Init();
   ConsultCurrentLangage();
   ResetDefaults();
   LoadCurrentLangage();
   TimingOn();
   TimingOff();
}
declare class ModulesAndClassesToReparseAgent extends aUIAgent {
   ModulesAndClasses: string ;
   GetAllDescendants: string ;
   GetAllUserClasses: string ;
}
declare class aWReParser001Agent extends aSplitViewAgent {
}
declare class RootMDIForReparserAgent extends aOpenWhereClosedUIAgent {
   aWReParser001: string ;
   theTotalCountStaticText: string ;
   Current001: string ;
   CurrentStaticText: string ;
   BeingParsed: string ;
   theTotalCount001: string ;
   SeeAll: string ;
   ConfirmationNeeded: string ;
   FillContainer: string ;
}
declare class aWReParser002Agent extends aToolBarUIAgent {
   parseall: string ;
   GetAllDescendants: string ;
   GetAllUserClasses: string ;
   CheckAll: string ;
}
declare class aWReParser extends aEntity {
   theTotalCount: string ;
   theTotalLen: string ;
   Current: string ;
   BeingParsed: string ;
   Lines: string ;
   SeeAll: string ;
   ModulesAndClasses: string ;
   ParseUIAgents: string ;
   ConfirmationNeeded: string ;
   ClassesOrModulesInError: string ;
   ParseThis(theDef:aModuleDef, curRank:number, TotalCount:number, T:aTransaction);
   CanBeReparsed(TheModule:aModuleDef):boolean;
   ExpandTreeBox(forVar:string);
   ParseTypeScenarios(TheType:aType, curRank:number, TotalCount:number, T:aTransaction);
   Plural(i:number):string;
   ParseAll();
   ParseOnlyTheList();
   ParseListAndUIAgents();
   putDescendants(ofthisDef:aClassDef, inThisList:aListOfInstances);
   GetAllDescendants();
   GetAllUserClasses();
   run();
   StringExtract();
   GetExistingCatalog():aWAMContainerCatalog;
   PickAContainer():aWAMContainer;
   FillContainer();
}
declare class aWReparserAllClassesRole extends aSingleRoleType {
   IsDroppedObjectUsable();
   NewInstanceFromDroppedObject();
}
declare class aWReparserWideExtension001Agent extends aUIAgent {
   DoYourJob: string ;
}
declare class aWReparserWideExtension extends aWideExtension {
   theGlobalReparser: string ;
   DoYourJob();
   FolderParentName();
   MenuText();
   ButtonBMPName();
}
declare module wScenarioBuilder {
   function ModifyPosition(OfTheQVar:aQVarPresentor):aQVarPresentor;
   function ModifySize(OfTheQVar:aQVarPresentor):aQVarPresentor;
   function ModifyRelativeParameters(OfTheQVar:aQVarPresentor):aQVarPresentor;
   function ModifyFont(InTheScenario:aScenario, ForTheQVar:aQVarPresentor, NameOfFont:string, SizeOfFont:number, TypeOfFont:string):aQVarPresentor;
   function ModifyExecMode(InTheScenario:aScenario, ForTheQVar:aQVarPresentor, ExecMode:string):aQVarPresentor;
   function ModifyStoreMode(InTheScenario:aScenario, ForTheQVar:aQVarPresentor, StoreMode:string):aQVarPresentor;
   function AddEntryField(InTheScenario:aScenario, X:number, Y:number, Width:number, Height:number, XFactor:number, YFactor:number, WidthFactor:number, HeightFactor:number, Length:number, ForeColor:string, BackColor:string, Format:string, Justification:string, Shadow:string, KindOfEntryField:string, IsKillOnUIAgentKill:boolean):aQVarPresentor;
   function AddStaticText(InTheScenario:aScenario, X:number, Y:number, Width:number, Height:number, XFactor:number, YFactor:number, WidthFactor:number, HeightFactor:number, ForeColor:string, BackColor:string, NameOfFont:string, SizeOfFont:number, TypeOfFont:string, Text:string, Justification:string, Shadow:string, KindOfStaticText:string, IsKillOnUIAgentKill:boolean):aQVarPresentor;
   function AddCheckBox(InTheScenario:aScenario, X:number, Y:number, Width:number, XFactor:number, YFactor:number, WidthFactor:number, HeightFactor:number, ForeColor:string, BackColor:string, Text:string, Shadow:string, KindOfCheckBox:string, IsKillOnUIAgentKill:boolean):aQVarPresentor;
   function AddRadioButton(InTheScenario:aScenario, X:number, Y:number, Width:number, XFactor:number, YFActor:number, WidthFactor:number, HeightFactor:number, ForeColor:string, BackColor:string, Text:string, Shadow:string, KindOfRadioButton:string, IsKillOnUIAgentKill:boolean):aQVarPresentor;
   function AddPushButton(InTheScenario:aScenario, X:number, Y:number, Width:number, Height:number, XFactor:number, YFactor:number, WidthFactor:number, HeightFactor:number, ForeColor:string, BackColor:string, Text:string, ActiveInExecMode:string, CallKind:string, KindOfPushButton:string, IsKillOnUIAgentKill:boolean):aQVarPresentor;
   function AddVScrollBar(InTheScenario:aScenario, X:number, Y:number, Width:number, Height:number, XFactor:number, YFactor:number, WidthFactor:number, HeightFactor:number, Variable:aVarDesc, Shadow:string, KindOfScrollBar:string, IsKillOnUIAgentKill:boolean):aQVarPresentor;
   function AddHScrollBar(InTheScenario:aScenario, X:number, Y:number, Width:number, Height:number, XFactor:number, YFactor:number, WidthFactor:number, HeightFactor:number, Variable:aVarDesc, Shadow:string, KindOfScrollBar:string, IsKillOnUIAgentKill:boolean):aQVarPresentor;
   function AddGauge(InTheScenario:aScenario, X:number, Y:number, Width:number, Height:number, XFactor:number, YFactor:number, WidthFactor:number, HeightFactor:number, Variable:aVarDesc, IsHorizontal:boolean, Shadow:string, IsKillOnUIAgentKill:boolean):aQVarPresentor;
   function AddComboBox(InTheScenario:aScenario, X:number, Y:number, Width:number, Height:number, XFactor:number, YFactor:number, WidthFactor:number, HeightFactor:number, ForeColor:string, BackColor:string, Shadow:string, KindOfComboBox:string, IsKillOnUIAgentKill:boolean):aQVarPresentor;
   function AddComboBoxEntry(InTheScenario:aScenario, X:number, Y:number, Width:number, Height:number, XFactor:number, YFactor:number, WidthFactor:number, HeightFactor:number, Length:number, ForeColor:string, BackColor:string, Format:string, Justification:string, Shadow:string, KindOfComboBoxEntry:string, IsKillOnUIAgentKill:boolean):aQVarPresentor;
   function AddBitMap(InTheScenario:aScenario, X:number, Y:number, Width:number, Height:number, XFactor:number, YFactor:number, WidthFactor:number, HeightFactor:number, ReleasedBitMap:string, PressedBitMap:string, DisabledBitMap:string, TypeOfBitMap:string, ActiveInExecMode:string, CallKind:string, KindOfBitMap:string, IsKillOnUIAgentKill:boolean):aQVarPresentor;
   function AddHelpButton(InTheScenario:aScenario, X:number, Y:number, Width:number, Height:number, XFactor:number, YFactor:number, WidthFactor:number, HeightFactor:number, TypeOfBitMap:string, ActiveInExecMode:string, CallKind:string, KindOfBitMap:string, IsKillOnUIAgentKill:boolean):aQVarPresentor;
   function AddGroupBox(InTheScenario:aScenario, X:number, Y:number, Width:number, Height:number, XFactor:number, YFactor:number, WidthFactor:number, HeightFactor:number, ForeColor:string, BackColor:string, Justification:string, Shadow:string, KindOfGroupBox:string, Text:string, IsKillOnUIAgentKill:boolean):aQVarPresentor;
   function AddTreeBox(InTheScenario:aScenario, X:number, Y:number, Width:number, Height:number, XFactor:number, YFactor:number, WidthFactor:number, HeightFactor:number, IsKillOnUIAgentKill:boolean):aQVarPresentor;
   function AddListBox(InTheScenario:aScenario, X:number, Y:number, Width:number, Height:number, XFactor:number, YFactor:number, WidthFactor:number, HeightFactor:number, ForeColor:string, BackColor:string, Shadow:string, Separators:string, Tabulations:string, Format:string, KindOfListBox:string, IsKillOnUIAgentKill:boolean):aQVarPresentor;
   function AddMLE(InTheScenario:aScenario, X:number, Y:number, Width:number, Height:number, XFactor:number, YFactor:number, WidthFactor:number, HeightFactor:number, ForeColor:string, BackColor:string, Shadow:string, KindOfMLE:string, IsKillOnUIAgentKill:boolean):aQVarPresentor;
   function AddDataTemplate(InTheScenario:aScenario, PresentedClass:aClassDef, BuildPresentedObject:boolean, ListOfVariables:aListOfInstances, ListOfMethods:aListOfInstances, ListOfScenarios:aListOfInstances, ListOfControls:aListOfInstances, IsKillOnUIAgentKill:boolean):aQVarPresentor;
   function AddMenuItem(InTheScenario:aScenario, Text:string, ActiveInExecMode:string, KindOfMenuItem:string, IsKillOnUIAgentKill:boolean):aQVarPresentor;
   function AddSeparator(InTheScenario:aScenario, IsKillOnUIAgentKill:boolean):aQVarPresentor;
   function AddMDIWindowMenuItem(InTheScenario:aScenario, Text:string, ActiveInExecMode:string, KindOfMenuItem:string, IsKillOnUIAgentKill:boolean):aQVarPresentor;
   function AddVariableWithDefaultScenario(InTheScenario:aScenario, Variable:aVarDesc, X:number, Y:number, Width:number, Height:number, XFactor:number, YFactor:number, WidthFactor:number, HeightFactor:number, ForeColor:string, BackColor:string, IsKillOnUIAgentKill:boolean):aQVarPresentor;
   function AddMethodWithDefaultScenario(InTheScenario:aScenario, Method:aMethodDesc, X:number, Y:number, Width:number, Height:number, XFactor:number, YFactor:number, WidthFactor:number, HeightFactor:number, ForeColor:string, BackColor:string, Text:string, IsKillOnUIAgentKill:boolean):aQVarPresentor;
   function AddVariable(InTheScenario:aScenario, Variable:aVarDesc, ScenarioOfVariable:number, X:number, Y:number, Width:number, Height:number, XFactor:number, YFactor:number, WidthFactor:number, HeightFactor:number, ForeColor:string, BackColor:string, IsKillOnUIAgentKill:boolean):aQVarPresentor;
   function AddMethod(InTheScenario:aScenario, Method:aMethodDesc, ScenarioOfMethod:number, X:number, Y:number, Width:number, Height:number, XFactor:number, YFactor:number, WidthFactor:number, HeightFactor:number, ForeColor:string, BackColor:string, Text:string, ReleasedBitMap:string, PressedBitMap:string, DisabledBitMap:string, TypeOfBitMap:string, IsKillOnUIAgentKill:boolean):aQVarPresentor;
   function AddMethodWithBuildInScenario(InTheScenario:aScenario, Method:aMethodDesc, ListOfParams:aListOfInstances, ListOfMethScens:aListOfInstances, ListOfConts:aListOfInstances, AutoTriggered:boolean, IsKillOnUIAgentKill:boolean):aQVarPresentor;
   function AddRefToWithRefScenario(InTheScenario:aScenario, Variable:aVarDesc, ReferencedScenarioUsed:aScenario, X:number, Y:number, Width:number, Height:number, XFactor:number, YFactor:number, WidthFactor:number, HeightFactor:number, IsKillOnUIAgentKill:boolean):aQVarPresentor;
   function AddRefToWithBuildInRefScenario(InTheScenario:aScenario, Variable:aVarDesc, ListOfVariables:aListOfInstances, ListOfMethods:aListOfInstances, ListOfScenarios:aListOfInstances, ListOfControls:aListOfInstances, IsKillOnUIAgentKill:boolean):aQVarPresentor;
   function AddListOfWithFolderScenario(InTheScenario:aScenario, Variable:aVarDesc, ReferencedScenarioUsed:aScenario, X:number, Y:number, Width:number, Height:number, XFactor:number, YFactor:number, WidthFactor:number, HeightFactor:number, DistanceLeft:number, DistanceRight:number, DistanceTop:number, DistanceBottom:number, FolderDimension:number, Position:string, IsKillOnUIAgentKill:boolean):aQVarPresentor;
   function AddListOfWithBuildInListScenario(InTheScenario:aScenario, Variable:aVarDesc, ListOfVarsInList:aListOfInstances, X:number, Y:number, Width:number, Height:number, XFactor:number, YFactor:number, WidthFactor:number, HeightFactor:number, TitleDisplayed:boolean, LastColumnAutoSize:boolean, IsKillOnUIAgentKill:boolean):aQVarPresentor;
   function ChangeColumn(OfTheBuildInList:aQVPBuildInListOfTypeScenario, Rank:number, Title:string, Width:number, Fraction:string, Resizable:boolean, RelativeWidth:boolean, TitleForeColor:string, TitleBackColor:string, TitleGridSet:string, TitleJustification:string, LineForeColor:string, LineBackColor:string, LineGridSet:string, LineJustification:string):aColumnQualifier;
   function AddElementsOutOfBuildInList(OfTheBuildInList:aQVPBuildInListOfTypeScenario, ListOfVars:aListOfInstances, ListOfMeths:aListOfInstances, ListOfScens:aListOfInstances, ListOfConts:aListOfInstances):aQVarPresentor;
   function AddListOfWithIndexedBuildInListScenario(InTheScenario:aScenario, Variable:aVarDesc, ListOfVars:aListOfInstances, ListOfMeths:aListOfInstances, ListOfScens:aListOfInstances, ListOfConts:aListOfInstances, Rank:number, IsKillOnUIAgentKill:boolean):aQVarPresentor;
   function AddScenario(InTheScenario:aScenario, TheScenarioToAdd:aScenario, X:number, Y:number, Width:number, Height:number, XFactor:number, YFactor:number, WidthFactor:number, HeightFactor:number, IskillOnUIAgentKill:boolean):aQVarPresentor;
   function AddFolders(InTheFolderView:aClassAsFolderView, Folders:aListOfInstances, Position:string, FolderDimension:number, IsKillOnUIAgentKill:boolean):aListOfInstances;
   function AddSplits(InTheSplitView:aClassAsSplitView, Splits:aListOfInstances, IsHorizontal:boolean, IsKillOnUIAgentKill:boolean):aListOfInstances;
   function AddToolBar(InTheScenario:aScenario, ToolBar:aToolBarScenario, KindOfToolBar:string, Width:number, Height:number, IsKillOnUIAgentKill:boolean):aQVarPresentor;
   function AddExplanation(ForTheQVar:aQVarPresentor, TextOfExplanation:string, ForeColorOfExplanation:string, BackColorOfExplanation:string, NameOfFont:string, SizeOfFont:number, TypeOfFont:string);
}
declare class DefinePositionAgent extends aUIAgent {
   X: string ;
   XStaticText: string ;
   Y: string ;
   YStaticText: string ;
   GroupBox: string ;
   OfTheObject: string ;
   OfTheObjectStaticText: string ;
}
declare class DefineSizeAgent extends aUIAgent {
   Width: string ;
   WidthStaticText: string ;
   Height: string ;
   HeightStaticText: string ;
   GroupBox: string ;
   OfTheObject: string ;
   OfTheObjectStaticText: string ;
}
declare class DefineRelativeAgent extends aUIAgent {
   XFactorStaticText: string ;
   YFactorStaticText: string ;
   WidthFactorStaticText: string ;
   HeightFactorStaticText: string ;
   GroupBox: string ;
   OfTheObject: string ;
   OfTheObjectStaticText: string ;
   XFactor001: string ;
   YFactor001: string ;
   WidthFactor001: string ;
   HeightFactor001: string ;
}
declare class aBuilder extends aScenario {
   X: string ;
   Y: string ;
   Width: string ;
   Height: string ;
   XFactor: string ;
   YFactor: string ;
   WidthFactor: string ;
   HeightFactor: string ;
   OfTheObject: string ;
}
declare module wRunTimeBuilder {
   function FinalizeUIAgent(theUIAgent:aUIAgent, theQVarPresentor:aQVarPresentor);
   function AddEntryFieldAtRunTime(InTheUIAgent:aUIAgent, X:number, Y:number, Width:number, Height:number, XFactor:string, YFactor:string, WidthFactor:string, HeightFactor:string, Length:number, ForeColor:string, BackColor:string, Format:string, Justification:string, Shadow:string, KindOfEntryField:string):aVoidAsXXXAgent;
   function AddStaticTextAtRunTime(InTheUIAgent:aUIAgent, X:number, Y:number, Width:number, Height:number, XFactor:string, YFactor:string, WidthFactor:string, HeightFactor:string, ForeColor:string, BackColor:string, NameOfFont:string, SizeOfFont:number, TypeOfFont:string, Text:string, Justification:string, Shadow:string, KindOfStaticText:string):aVoidAsXXXAgent;
   function AddComboBoxAtRunTime(InTheUIAgent:aUIAgent, X:number, Y:number, Width:number, Height:number, XFactor:string, YFactor:string, WidthFactor:string, HeightFactor:string, ForeColor:string, BackColor:string, Shadow:string, KindOfComboBox:string):aVoidAsXXXAgent;
   function AddRadioButtonAtRunTime(InTheUIAgent:aUIAgent, X:number, Y:number, Width:number, XFactor:string, YFActor:string, WidthFactor:string, HeightFactor:string, ForeColor:string, BackColor:string, Text:string, Shadow:string, KindOfRadioButton:string):aVoidAsXXXAgent;
   function AddPushButtonAtRunTime(InTheUIAgent:aUIAgent, X:number, Y:number, Width:number, Height:number, XFactor:string, YFactor:string, WidthFactor:string, HeightFactor:string, ForeColor:string, BackColor:string, Text:string, ActiveInExecMode:string, CallKind:string, KindOfPushButton:string):aVoidAsXXXAgent;
   function AddVScrollBarAtRunTime(InTheUIAgent:aUIAgent, X:number, Y:number, Width:number, Height:number, XFactor:string, YFactor:string, WidthFactor:string, HeightFactor:string, Variable:aVarDesc, Shadow:string, KindOfScrollBar:string):aVoidAsXXXAgent;
   function AddHScrollBarAtRunTime(InTheUIAgent:aUIAgent, X:number, Y:number, Width:number, Height:number, XFactor:string, YFactor:string, WidthFactor:string, HeightFactor:string, Variable:aVarDesc, Shadow:string, KindOfScrollBar:string):aVoidAsXXXAgent;
   function AddCheckBoxAtRunTime(InTheUIAgent:aUIAgent, X:number, Y:number, Width:number, XFactor:string, YFactor:string, WidthFactor:string, HeightFactor:string, ForeColor:string, BackColor:string, Text:string, Shadow:string, KindOfCheckBox:string):aVoidAsXXXAgent;
   function AddComboBoxEntryAtRunTime(InTheUIAgent:aUIAgent, X:number, Y:number, Width:number, Height:number, XFactor:string, YFactor:string, WidthFactor:string, HeightFactor:string, Length:number, ForeColor:string, BackColor:string, Format:string, Justification:string, Shadow:string, KindOfComboBoxEntry:string):aVoidAsXXXAgent;
   function AddBitMapAtRunTime(InTheUIAgent:aUIAgent, X:number, Y:number, Width:number, Height:number, XFactor:string, YFactor:string, WidthFactor:string, HeightFactor:string, ReleasedBitMap:string, PressedBitMap:string, DisabledBitMap:string, TypeOfBitMap:string, ActiveInExecMode:string, CallKind:string, KindOfBitMap:string):aVoidAsXXXAgent;
   function AddHelpButtonAtRunTime(InTheUIAgent:aUIAgent, X:number, Y:number, Width:number, Height:number, XFactor:string, YFactor:string, WidthFactor:string, HeightFactor:string, TypeOfBitMap:string, ActiveInExecMode:string, CallKind:string, KindOfBitMap:string):aVoidAsXXXAgent;
   function AddGroupBoxAtRunTime(InTheUIAgent:aUIAgent, X:number, Y:number, Width:number, Height:number, XFactor:string, YFactor:string, WidthFactor:string, HeightFactor:string, ForeColor:string, BackColor:string, Justification:string, Shadow:string, KindOfGroupBox:string, Text:string):aVoidAsXXXAgent;
   function AddTreeBoxAtRunTime(InTheUIAgent:aUIAgent, X:number, Y:number, Width:number, Height:number, XFactor:string, YFactor:string, WidthFactor:string, HeightFactor:string):aVoidAsXXXAgent;
   function AddListBoxAtRunTime(InTheUIAgent:aUIAgent, X:number, Y:number, Width:number, Height:number, XFactor:string, YFactor:string, WidthFactor:string, HeightFactor:string, ForeColor:string, BackColor:string, Shadow:string, Separators:string, Tabulations:string, Format:string, KindOfListBox:string):aVoidAsXXXAgent;
   function AddMLEAtRunTime(InTheUIAgent:aUIAgent, X:number, Y:number, Width:number, Height:number, XFactor:string, YFactor:string, WidthFactor:string, HeightFactor:string, ForeColor:string, BackColor:string, Shadow:string, KindOfMLE:string):aVoidAsXXXAgent;
   function AddMenuItemAtRunTime(InTheUIAgent:aUIAgent, Text:string, ActiveInExecMode:string, KindOfMenuItem:string, SubMenu:boolean):aVoidAsXXXAgent;
   function AddSeparatorAtRunTime(InTheUIAgent:aUIAgent):aVoidAsXXXAgent;
   function AddMDIWindowMenuItemAtRunTime(InTheUIAgent:aUIAgent, Text:string, ActiveInExecMode:string, KindOfMenuItem:string, SubMenu:boolean):aVoidAsXXXAgent;
   function AddGaugeAtRunTime(InTheUIAgent:aUIAgent, X:number, Y:number, Width:number, Height:number, XFactor:string, YFactor:string, WidthFactor:string, HeightFactor:string, Variable:aVarDesc, IsHorizontal:boolean, Shadow:string):aUIAgent;
   function AddVariableWithDefaultScenarioAtRunTime(InTheUIAgent:aUIAgent, Variable:aVarDesc, X:number, Y:number, Width:number, Height:number, XFactor:string, YFactor:string, WidthFactor:string, HeightFactor:string, ForeColor:string, BackColor:string, ExecMode:string):aUIAgent;
   function AddMethodWithDefaultScenarioAtRunTime(InTheUIAgent:aUIAgent, Method:aMethodDesc, X:number, Y:number, Width:number, Height:number, XFactor:string, YFactor:string, WidthFactor:string, HeightFactor:string, ForeColor:string, BackColor:string, Text:string, ExecMode:string):aUIAgent;
   function AddVariableAtRunTime(InTheUIAgent:aUIAgent, Variable:aVarDesc, ScenarioOfVariable:number, X:number, Y:number, Width:number, Height:number, XFactor:string, YFactor:string, WidthFactor:string, HeightFactor:string, ForeColor:string, BackColor:string, ExecMode:string):aUIAgent;
   function AddMethodAtRunTime(InTheUIAgent:aUIAgent, Method:aMethodDesc, ScenarioOfMethod:number, X:number, Y:number, Width:number, Height:number, XFactor:string, YFactor:string, WidthFactor:string, HeightFactor:string, ExecMode:string, ForeColor:string, BackColor:string, Text:string, ReleasedBitMap:string, PressedBitMap:string, DisabledBitMap:string, TypeOfBitMap:string):aUIAgent;
   function AddRefToWithRefScenarioAtRunTime(InTheUIAgent:aUIAgent, Variable:aVarDesc, ReferencedScenarioUsed:aScenario, X:number, Y:number, Width:number, Height:number, XFactor:string, YFactor:string, WidthFactor:string, HeightFactor:string):aUIAgent;
   function AddRefToWithBuildInRefScenarioAtRunTime(InTheUIAgent:aUIAgent, Variable:aVarDesc, ListOfVars:aListOfInstances, ListOfMeths:aListOfInstances, ListOfScens:aListOfInstances, ListOfConts:aListOfInstances):aUIAgent;
   function AddListOfWithFolderScenarioAtRunTime(InTheUIAgent:aUIAgent, Variable:aVarDesc, ReferencedScenarioUsed:aScenario, X:number, Y:number, Width:number, Height:number, XFactor:string, YFactor:string, WidthFactor:string, HeightFactor:string, DistanceLeft:number, DistanceRight:number, DistanceTop:number, DistanceBottom:number, FolderDimension:number, Position:string):aUIAgent;
   function AddListOfWithBuildInListScenarioAtRunTime(InTheUIAgent:aUIAgent, Variable:aVarDesc, ListOfVarsInList:aListOfInstances, X:number, Y:number, Width:number, Height:number, XFactor:string, YFactor:string, WidthFactor:string, HeightFactor:string, TitleDisplayed:boolean, LastColumnAutoSize:boolean):aUIAgent;
   function AddScenarioAtRunTime(InTheUIAgent:aUIAgent, TheScenarioToAdd:aScenario, X:number, Y:number, Width:number, Height:number, XFactor:string, YFactor:string, WidthFactor:string, HeightFactor:string):aUIAgent;
   function AddFoldersAtRunTime(InTheUIAgent:aUIAgent, TheFolderView:aClassAsFolderView, Folders:aListOfInstances, Position:string, FolderDimension:number):aUIAgent;
   function AddSplitsAtRunTime(InTheUIAgent:aUIAgent, TheSplitView:aClassAsSplitView, Splits:aListOfInstances, IsHorizontal:boolean):aUIAgent;
   function AddToolBarAtRunTime(InTheUIAgent:aUIAgent, ToolBar:aToolBarScenario, KindOfToolBar:string, Width:number, Height:number):aUIAgent;
   function AddExplanationAtRunTime(ForTheUIAgent:aUIAgent, TextOfExplanation:string, ForeColorOfExplanation:string, BackColorOfExplanation:string, NameOfFont:string, SizeOfFont:number, TypeOfFont:string);
}
declare module wClassOrModuleMaker {
   var NoAlert: string ;
   function Comments();
   function BugReport(comment:string);
   function BlankText(theModuleDef:aModuleDef);
   function RegenerateTextFromMM(theDef:aModuleDef);
   function BuildClass(theName:string, theAncestor:aClassDef):aClassDef;
   function BuildModule(theName:string):aModuleDef;
   function AddGold(theModuleDef:aModuleDef, theSourceLine:string);
   function AddGoldText(TheModule:aModuleDef, Source:string);
   function NewClassProject(Name:string, AncestorName:string):aClassDef;
   function ClassOrModuleCanBeModified(theDef:aModuleDef):boolean;
   function ProjectOfClassOrModule(theDef:aModuleDef):aModuleDef;
   function ProjectOfClassOrModuleFromName(Name:string):aModuleDef;
   function GetNewOrExistingBlanKClass(Name:string, Ancestor:aClassDef, AllowOverride:boolean, ShowWarning:boolean):aClassDef;
   function Parse(theModuleDef:aModuleDef):boolean;
   function SetClassMakerBase();
   function RegisterClassInIDE(thisClassDef:aClassDef);
   function RegisterModuleInIDE(thisModuleDef:aModuleDef);
   function TreatClassOrModuleTransactionBeforeAccept(theTransaction:aTransaction);
   function AcceptAndRegisterClassesOrModulesOfTransaction(thisTransaction:aTransaction);
   function AcceptAndRegisterClassOrModule(thisModuleDef:aModuleDef);
   function UIModalModifyProject(thisDef:aModuleDef):string;
   function IsWellParsed(thisDef:aModuleDef):boolean;
   function CancelClassOrModule(thisDef:aModuleDef);
   function CancelClassesOrModulesOfTransaction(T:aTransaction);
   function AddVarInProject(InClassOrModule:aModuleDef, VarName:string, VarType:aType);
   function AddVar(InClassOrModule:aModuleDef, VarName:string, VarType:aType):boolean;
}
declare class aClassPrepAgent extends aUIAgent {
   Ancestor: string ;
   AncestorStaticText: string ;
   MyText: string ;
   ParsingStatus: string ;
   ParsingStatusStaticText: string ;
   TestSyntax: string ;
   StoreClass: string ;
   SourceReImport: string ;
   ViewClass: string ;
   Name: string ;
   NameStaticText: string ;
   ClassTextStaticText: string ;
   myText001: string ;
}
/**
*This Class provides the basis mechanisms in order to be able to programmaticaly create a Class, 
by preparing its text, and then parsing it and saving the class. It also provides a mechanism 
intended to reload the beautified text after parsing, or to synchronise a Preparer with a ClassDef

The programming paradigm is illustrated by the following example, which creates the very begining 
of aCalculator with only one Operation, "Add"

  var  Prep: aClassPreparer
...
   new(Prep)
   Prep.Name="aCalculator"
   WriteLn(Prep.myText, "Operand1,Operand2,R : int8")
   Writeln(Prep.myText, "proc Add R=Operand1 + Operand2  uirefresh } "
   if Prep.ParsesOk
      Prep.StoreClass
   else
      Prep.ViewClass
   endIf      
  ...
   Prep.kill(Prep)
   
  All methods starting with an underline are anciliaries, and are NOT intended to be neither used 
nor overriden by clients

This Class will likely be overriden so that one will be able to create independently vars, types, consts, procs,Scens
etc
*/
declare class aClassPreparer extends aEntity {
   Ancestor: string ;
   CodeText: string ;
   ParsingStatus: string ;
   theClassDef: string ;
   wasCreated: string ;
   TrueBug: string ;
   NoAlert: string ;
   theClassIsNew: string ;
   BugReport(comment:string);
   _BuildClass(theName:string, theAncestor:aClassDef):aClassDef;
   _BuildModule(theName:string):aModuleDef;
   _BlankGoldText(theModuleDef:aModuleDef);
   _AddGoldLine(theModuleDef:aModuleDef, theSourceLine:string);
   _AddGoldText(theModuleDef:aModuleDef, theSourceText:string);
   _NewClass(Name:string, AncestorName:string):aClassDef;
   _NewVersionOfDefAndImplem(oldDef:aClassDef):aClassDef;
   _NewClassVersion(Name:string):aClassDef;
   _NewClassVersionOrNewClassProject(Name:string, AncestorName:string):aClassDef;
   _Parse(theModuleDef:aModuleDef):boolean;
   Init();
   _produceAllText();
   PrepStatus(theImplemStatus:string):string;
   SourceReImport();
   TestSyntax();
   ParsesOk():boolean;
   RegisterInIDE();
   ForceStoreClass(forceStoreIfNotParsed:boolean);
   CancelClass();
   StoreClass();
   ViewClass();
   IsOwnedByLoggedUser():boolean;
   DeleteClass();
   IsExisting():boolean;
   ClassHasChanged():boolean;
}
declare class MoreGridScenarioAgent extends aUIAgent {
   DefaultColTitleHeight: string ;
   DefaultColTitleHeightStaticText: string ;
   DefaultRowTitleWidth: string ;
   DefaultRowTitleWidthStaticText: string ;
   DefaultColWidth: string ;
   DefaultColWidthStaticText: string ;
   DefaultRowHeight: string ;
   DefaultRowHeightStaticText: string ;
   DefaultGridForeColor: string ;
   DefaultGridForeColorStaticText: string ;
   DefaultGridBackColor: string ;
   DefaultGridBackColorStaticText: string ;
   DefaultUnusedGridBackColor: string ;
   DefaultUnusedGridBackColorStaticText: string ;
   DefaultNbCols: string ;
   DefaultNbColsStaticText: string ;
   DefaultNbRows: string ;
   DefaultNbRowsStaticText: string ;
}
declare class aGridScenario extends aScenario {
   DefaultColWidth: string ;
   DefaultRowHeight: string ;
   DefaultTitleFontName: string ;
   DefaultTitleFontSize: string ;
   DefaultTitleFontSels: string ;
   DefaultBorderKinds: string ;
   DefaultTextKinds: string ;
   DefaultTitleForeColor: string ;
   DefaultTitleBackColor: string ;
   DefaultColTitleHeight: string ;
   DefaultRowTitleWidth: string ;
   DefaultGridWidth: string ;
   DefaultGridHeight: string ;
   DefaultGridForeColor: string ;
   DefaultGridBackColor: string ;
   DefaultUnusedGridBackColor: string ;
   DefaultNbCols: string ;
   DefaultNbRows: string ;
   Bmp: string ;
   Init();
   DefaultUIAgentClassId();
   BuildUIAgent();
   InitEvents();
   NewQVarPresentor();
   GetQVarPresentor(forThisVar:aIdentifierDesc, forThisType:aType):aQVPGridScenario;
   PaintSB(theWindow:string, ps:string, AbsX:number, AbsY:number, Dw:number, Dh:number, x:number, y:number, Width:number, Height:number, theQVarPresentor:aQVPGridScenario);
   Paint(theWindow:string, ps:string, AbsX:number, AbsY:number, Dw:number, Dh:number, x:number, y:number, Width:number, Height:number, theQVarPresentor:aQVPGridScenario);
   GetBitmap();
   HTMLAgentAccepted();
}
declare class aGridUIAgent extends aUIAgent {
   ColWidth: string ;
   RowHeight: string ;
   TitleFontName: string ;
   TitleFontSize: string ;
   TitleFontSels: string ;
   TitleBorderKinds: string ;
   TitleTextKinds: string ;
   TitleForeColor: string ;
   TitleBackColor: string ;
   ColTitleHeight: string ;
   RowTitleWidth: string ;
   GridWidth: string ;
   GridHeight: string ;
   HalfGridWidth: string ;
   HalfGridHeight: string ;
   GridForeColor: string ;
   GridBackColor: string ;
   UnusedGridBackColor: string ;
   Cols: string ;
   Rows: string ;
   FirstVisibleCol: string ;
   FirstVisibleRow: string ;
   FontPool: string ;
   UpdateCount: string ;
   DraggedCol: string ;
   DraggedRow: string ;
   PressedCol: string ;
   PressedRow: string ;
   CornerPressed: string ;
   CornerTitle: string ;
   DraggedColX: string ;
   DraggedRowY: string ;
   MemPS: string ;
   MemPSCount: string ;
   DragX: string ;
   DragY: string ;
   ColExecutedEventProcAddr: string ;
   RowExecutedEventProcAddr: string ;
   CornerExecutedEventProcAddr: string ;
   CellsBuildingDelayed: string ;
   SetExecModeDone: string ;
   CellsColorSameAsGridColors: string ;
   theCurrentControlShouldBeOnFocus: string ;
   AdjustScroll();
   AdjustPositions();
   GetVisibleGridWidth(ClientWidth:number):number;
   GetVisibleGridHeight(ClientHeight:number):number;
   NotifyColExecuted(Col:number):number;
   NotifyRowExecuted(Row:number):number;
   NotifyCornerExecuted():number;
   SetCols(NbCols:number);
   SetRows(NbRows:number);
   GetCols():number;
   GetRows():number;
   GetNbRightVisibleCol():number;
   GetNbBottomVisibleRow():number;
   GetColResizeable(Col:number):boolean;
   GetRowResizeable(Row:number):boolean;
   GetColAtX(X:number):number;
   GetRowAtY(Y:number):number;
   ColExecuted(Col:number):number;
   RowExecuted(Row:number):number;
   CornerExecuted():number;
   ColResized(Col:aGridCol);
   RowResized(Row:aGridRow);
   Init();
   Kill();
   InitWith(Qualifier:aQVarPresentor);
   Finalize();
   ChangePos();
   NotifyHostRangeHasChanged();
   AdjustFirstVisibleColRow();
   BetterEnsureVisible(Col:number, Row:number);
   EnsureVisible(Row:number, Col:number);
   NotifyRangeHasChanged();
   GetColAt(X:number):number;
   GetRowAt(Y:number):number;
   GetResizeableColAt(X:number):number;
   GetResizeableRowAt(Y:number):number;
   GetColTitleAt(X:number, Y:number):number;
   GetRowTitleAt(X:number, Y:number):number;
   PointerFromPos(X:number, Y:number):number;
   CreateMemPS(ClientWidth:number, ClientHeight:number);
   DestroyMemPS();
   DrawDragLines(X:number, Y:number);
   BeginDrag(X:number, Y:number);
   Drag(X:number, Y:number);
   ManageButtonDown(no:number, x:number, y:number):number;
   NotifyButtonDown();
   ManageButtonUp(no:number, x:number, y:number):number;
   NotifyButtonUp();
   NotifyButtonDblClk();
   ManageMouseMove(x:number, y:number):number;
   NotifyMouseMove();
   TerminateFontPool();
   SelectFont(ps:string, FontName:string, FontSize:number, FontSels:string);
   GetColorFor(Color:string):string;
   PaintCorner(ps:string, ClientWidth:number, ClientHeight:number, x:number, y:number, Width:number, Height:number);
   PaintColTitles(ps:string, ClientWidth:number, ClientHeight:number, x:number, y:number, Width:number, Height:number);
   PaintRowTitles(ps:string, ClientWidth:number, ClientHeight:number, x:number, y:number, Width:number, Height:number);
   GetTotalGridWidth():number;
   GetTotalGridHeight():number;
   PaintGrid(ps:string, ClientWidth:number, ClientHeight:number, x:number, y:number, Width:number, Height:number);
   DrawGrid(ps:string, ClientX:number, ClientY:number, ClientWidth:number, ClientHeight:number, x:number, y:number, Width:number, Height:number);
   NotifyPaint();
   NotifyScrollBar();
   AdjustColPosition();
   AdjustRowPosition();
   AdjustCellPosition();
   AdjustCols(NbCols:number);
   AdjustRows(NbRows:number);
   GetCell(Col:number, Row:number):aGridCell;
   GetCellPos(Col:number, Row:number, X:number, Y:number, Width:number, Height:number, Visible:boolean);
   SetDefaultColWidth(Width:number);
   GetDefaultColWidth():number;
   SetDefaultRowHeight(Height:number);
   GetDefaultRowHeight():number;
   SetTitleSize(ColTitleHeight:number, RowTitleWidth:number);
   GetTitleSize(ColTitleHeight:number, RowTitleWidth:number);
   SetColWidth(Col:number, Width:number);
   GetColWidth(Col:number):number;
   SetRowHeight(Row:number, Height:number);
   GetRowHeight(Row:number):number;
   SetColResizeable(Col:number, Resizeable:boolean);
   SetRowResizeable(Row:number, Resizeable:boolean);
   SetColSortable(Col:number, CanSort:boolean);
   GetColSortable(Col:number):boolean;
   SetRowSortable(Row:number, CanSort:boolean);
   GetRowSortable(Row:number):boolean;
   SetColTitle(Col:number, Title:string);
   GetColTitle(Col:number):string;
   SetRowTitle(Row:number, Title:string);
   GetRowTitle(Row:number):string;
   SetColFormat(Col:number, ForeColor:string, BackColor:string, FontName:string, FontSize:number, FontSels:string, BorderKinds:string, TextKinds:string);
   GetColFormat(Col:number, ForeColor:string, BackColor:string, FontName:string, FontSize:number, FontSels:string, BorderKinds:string, TextKinds:string);
   SetRowFormat(Row:number, ForeColor:string, BackColor:string, FontName:string, FontSize:number, FontSels:string, BorderKinds:string, TextKinds:string);
   GetRowFormat(Row:number, ForeColor:string, BackColor:string, FontName:string, FontSize:number, FontSels:string, BorderKinds:string, TextKinds:string);
   Invalidate();
   NoUpDate();
   UpDate();
   IsUpDate():boolean;
   SetCellMinWidth(Col:number, Width:number);
   SetCellMinHeight(Row:number, Height:number);
   SetCellVariableEx(Col:number, Row:number, TheVarDesc:aIdentifierDesc, ThisObject:aLightObject, WithThisScenario:aScenario, ExecMode:string, ChangeCellWidth:boolean, ChangeCellHeight:boolean, WithThisQVarPresentor:aQVarPresentor, CellUIAgentClassId:number):aUIAgent;
   SetDataEx(Col:number, Row:number, DataAddress:string, DataType:aType, DataHostVarAgent:aVarAgent, WithThisScenario:aScenario, ExecMode:string, ChangeCellWidth:boolean, ChangeCellHeight:boolean, WithThisQVarPresentor:aQVarPresentor, CellUIAgentClassId:number):aUIAgent;
   SetObjectEx(Col:number, Row:number, TheObject:aLightObject, WithThisScenario:aScenario, ExecMode:string, ChangeCellWidth:boolean, ChangeCellHeight:boolean, WithThisQVarPresentor:aQVarPresentor, CellUIAgentClassId:number):aUIAgent;
   SetCellVariable(Col:number, Row:number, TheVarDesc:aIdentifierDesc, ThisObject:aLightObject, WithThisScenario:aScenario, ExecMode:string, ChangeCellWidth:boolean, ChangeCellHeight:boolean):aUIAgent;
   SetData(Col:number, Row:number, DataAddress:string, DataType:aType, DataHostVarAgent:aVarAgent, WithThisScenario:aScenario, ExecMode:string, ChangeCellWidth:boolean, ChangeCellHeight:boolean):aUIAgent;
   SetObject(Col:number, Row:number, TheObject:aLightObject, WithThisScenario:aScenario, ExecMode:string, ChangeCellWidth:boolean, ChangeCellHeight:boolean):aUIAgent;
   SwapCols(Col1:number, Col2:number);
   SwapRows(Row1:number, Row2:number);
   IsCellInferior(Cell1:aGridCell, Cell2:aGridCell):boolean;
   SortRow(Col:number, RowL:number, RowR:number, Up:boolean);
   SortCol(ColL:number, ColR:number, Row:number, Up:boolean);
   IsCellHidden(Col:number, Row:number):boolean;
   HideCell(Col:number, Row:number);
   ShowCell(Col:number, Row:number);
   GetCellFocus():aGridCell;
   GetCellRowCol(GridCell:aGridCell, Col:number, Row:number);
   SetExecMode();
   NotifyOutControlGetFocus();
   NotifyInit();
   NotifyGridEnter();
   NotifyLoseFocus();
}
declare class aGridCol extends aGridRowOrCol {
   X: string ;
   Width: string ;
   Cells: string ;
   Init();
   Terminate();
}
declare class aGridRowOrCol extends aLightObject {
   Title: string ;
   ForeColor: string ;
   BackColor: string ;
   FontName: string ;
   FontSize: string ;
   FontSels: string ;
   Resizeable: string ;
   Visible: string ;
   BorderKinds: string ;
   TextKinds: string ;
   Pressed: string ;
   CanSort: string ;
   SortUp: string ;
   Init();
}
declare class aGridRow extends aGridRowOrCol {
   Y: string ;
   Height: string ;
}
declare class aGridCell extends aLightObject {
   GridUIAgent: string ;
   CellUIAgent: string ;
   X: string ;
   Y: string ;
   Width: string ;
   Height: string ;
   Visible: string ;
   UIAgentBuildingDelayed: string ;
   pBuildCellUIAgentParameters: string ;
   BuildCellUIAgent(WithThisScenario:aScenario, WithThisQVarPresentor:aQVarPresentor, theVarDesc:aIdentifierDesc, theType:aType, VarAddress:string, HostVarAgent:aVarAgent, ExecMode:string):aUIAgent;
   FinishBuildCellUIAgent();
   IsHidden():boolean;
   Hide();
   Show();
   RectIntersect(X1:number, Y1:number, W1:number, H1:number, X2:number, Y2:number, W2:number, H2:number):boolean;
   SetPosition(X:number, Y:number, Width:number, Height:number, Visible:boolean);
   GetClassDefScenario():aScenario;
   GetCellVariableWidthHeight(TheVarDesc:aIdentifierDesc, ThisObject:aLightObject, WithThisScenario:aScenario, WithThisQVarPresentor:aQVarPresentor, ExecMode:string, Width:number, Height:number);
   GetCellDataWidthHeight(DataAddress:string, DataType:aType, WithThisScenario:aScenario, WithThisQVarPresentor:aQVarPresentor, ExecMode:string, Width:number, Height:number);
   ChangeOrCreateGridCellUIAgent(CellUIAgentClassId:number, HostVarAgent:aVarAgent);
   DelayBuildCellUIAgent(WithThisScenario:aScenario, WithThisQVarPresentor:aQVarPresentor, theVarDesc:aIdentifierDesc, theType:aType, VarAddress:string, HostVarAgent:aVarAgent, ExecMode:string);
   SetVariable(TheVarDesc:aIdentifierDesc, ThisObject:aLightObject, WithThisScenario:aScenario, WithThisQVarPresentor:aQVarPresentor, ExecMode:string, CellUIAgentClassId:number):aUIAgent;
   SetData(DataAddress:string, DataType:aType, DataHostVarAgent:aVarAgent, WithThisScenario:aScenario, WithThisQVarPresentor:aQVarPresentor, ExecMode:string, CellUIAgentClassId:number):aUIAgent;
   Terminate();
   GetDataInfo(DataAddress:string, DataType:aType);
}
declare class aGridCellUIAgent extends aUIAgent {
   GridCell: string ;
   CreationWidth: string ;
   CreationHeight: string ;
   HiddenByUser: string ;
   ScenarioWidth();
   ScenarioHeight();
   Kill();
   Show();
   Hide();
   HideCell();
   ShowCell();
   RecursFindMainControl(curUIAgent:aUIAgent, goingForward:boolean):string;
   SetNextTab();
   GetMainControl();
}
declare class MoreQVPGridScenarioAgent extends aUIAgent {
   ColTitleHeight: string ;
   ColTitleHeightStaticText: string ;
   RowTitleWidth: string ;
   RowTitleWidthStaticText: string ;
   ColWidth: string ;
   ColWidthStaticText: string ;
   RowHeight: string ;
   RowHeightStaticText: string ;
   GridForeColor: string ;
   GridForeColorStaticText: string ;
   GridBackColor: string ;
   GridBackColorStaticText: string ;
   UnusedGridBackColor: string ;
   UnusedGridBackColorStaticText: string ;
   NbCols: string ;
   NbColsStaticText: string ;
   NbRows: string ;
   NbRowsStaticText: string ;
   CellsBuildingDelayed: string ;
}
declare class aQVPGridScenario extends aQVarPresentor {
   ColWidth: string ;
   RowHeight: string ;
   TitleFontName: string ;
   TitleFontSize: string ;
   TitleFontSels: string ;
   BorderKinds: string ;
   TextKinds: string ;
   TitleForeColor: string ;
   TitleBackColor: string ;
   ColTitleHeight: string ;
   RowTitleWidth: string ;
   GridWidth: string ;
   GridHeight: string ;
   GridForeColor: string ;
   GridBackColor: string ;
   UnusedGridBackColor: string ;
   NbCols: string ;
   NbRows: string ;
   CellsBuildingDelayed: string ;
   SelectFont();
}
declare class GridCtrlAgent extends aGridUIAgent {
}
declare class ObjectGridAgent extends aGridUIAgent {
   RecursShowVar(theClassDef:aClassDef, CurLine:number);
   NotifyInit();
}
declare class WebBrowserAgent extends aWebBrowserUIAgent {
}
declare module wExtendedControls {
}
declare class aWebBrowserScenario extends aXXXAsOleControl {
   Init();
   DefaultUIAgentClassId();
   InitEvents();
}
declare class aWebBrowserUIAgent extends aXXXAsOleControlUIAgent {
   StatusTextChangeAddr: string ;
   ProgressChangeAddr: string ;
   CommandStateChangeAddr: string ;
   DownloadBeginAddr: string ;
   DownloadCompleteAddr: string ;
   TitleChangeAddr: string ;
   PropertyChangeAddr: string ;
   BeforeNavigate2Addr: string ;
   NewWindow2Addr: string ;
   NavigateComplete2Addr: string ;
   DocumentCompleteAddr: string ;
   OnQuitAddr: string ;
   OnVisibleAddr: string ;
   OnToolBarAddr: string ;
   OnMenuBarAddr: string ;
   OnStatusBarAddr: string ;
   OnFullScreenAddr: string ;
   OnTheaterModeAddr: string ;
   NotifyStatusTextChange(Text:string);
   StatusTextChange(Text:string):number;
   NotifyProgressChange(Progress:number, ProgressMax:number);
   ProgressChange(Progress:number, ProgressMax:number):number;
   NotifyCommandStateChange(Command:number, Enable:boolean);
   CommandStateChange(Command:number, Enable:boolean):number;
   NotifyDownloadBegin();
   DownloadBegin():number;
   NotifyDownloadComplete();
   DownloadComplete():number;
   NotifyTitleChange(Text:string);
   TitleChange(Text:string):number;
   NotifyPropertyChange(szProperty:string);
   PropertyChange(szProperty:string):number;
   NotifyBeforeNavigate2(pDisp:string, URL:string, Flags:string, TargetFrameName:string, PostData:string, Headers:string, Cancel:string);
   BeforeNavigate2(pDisp:string, URL:string, Flags:string, TargetFrameName:string, PostData:string, Headers:string, Cancel:string):number;
   NotifyNewWindow2(ppDisp:string, Cancel:string);
   NewWindow2(ppDisp:string, Cancel:string):number;
   NotifyNavigateComplete2(pDisp:string, URL:string);
   NavigateComplete2(pDisp:string, URL:string):number;
   NotifyDocumentComplete(pDisp:string, URL:string);
   DocumentComplete(pDisp:string, URL:string):number;
   NotifyOnQuit();
   OnQuit():number;
   NotifyOnVisible(Visible:boolean);
   OnVisible(Visible:boolean):number;
   NotifyOnToolBar(ToolBar:boolean);
   OnToolBar(ToolBar:boolean):number;
   NotifyOnMenuBar(MenuBar:boolean);
   OnMenuBar(MenuBar:boolean):number;
   NotifyOnStatusBar(StatusBar:boolean);
   OnStatusBar(StatusBar:boolean):number;
   NotifyOnFullScreen(FullScreen:boolean);
   OnFullScreen(FullScreen:boolean):number;
   NotifyOnTheaterMode(TheaterMode:boolean);
   OnTheaterMode(TheaterMode:boolean):number;
   GoBack();
   GoForward();
   GoHome();
   GoSearch();
   Navigate(URL:string, Flags:string, TargetFrameName:string, PostData:string, Headers:string);
   Refresh();
   Refresh2(Level:string);
   Stop();
   GetApplication():string;
   GetParent():string;
   GetContainer():string;
   GetDocument():string;
   GetTopLevelContainer():boolean;
   GetType():string;
   GetLeft():number;
   SetLeft(Left:number);
   GetTop():number;
   SetTop(Top:number);
   GetWidth1():number;
   SetWidth(Width:number);
   GetHeight1():number;
   SetHeight(Height:number);
   GetLocationName():string;
   GetLocationURL():string;
   GetBusy():boolean;
   Quit();
   ClientToWindow(pcx:string, pcy:string);
   PutProperty(Property:string, vtValue:string);
   GetProperty1(Property:string):string;
   GetName():string;
   GetHWND():number;
   GetFullName():string;
   GetPath():string;
   GetVisible():boolean;
   SetVisible(Visible:boolean);
   GetStatusBar():boolean;
   SetStatusBar(StatusBar:boolean);
   GetStatusText():string;
   SetStatusText(StatusText:string);
   GetToolBar():number;
   SetToolBar(ToolBar:number);
   GetMenuBar():boolean;
   SetMenuBar(MenuBar:boolean);
   GetFullScreen():boolean;
   SetFullScreen(FullScreen:boolean);
   Navigate2(URL:string, Flags:string, TargetFrameName:string, PostData:string, Headers:string);
   QueryStatusWB(cmdID:number):number;
   ExecWB(cmdID:number, cmdexecopt:number, pvaIn:string, pvaOut:string);
   ShowBrowserBar(pvaClsid:string, pvarShow:string, pvarSize:string);
   GetReadyState():number;
   GetOffline():boolean;
   SetOffline(Offline:boolean);
   GetSilent():boolean;
   SetSilent(Silent:boolean);
   GetRegisterAsBrowser():boolean;
   SetRegisterAsBrowser(RegisterAsBrowser:boolean);
   GetRegisterAsDropTarget():boolean;
   SetRegisterAsDropTarget(RegisterAsDropTarget:boolean);
   GetTheaterMode():boolean;
   SetTheaterMode(TheaterMode:boolean);
   GetAddressBar():boolean;
   SetAddressBar(AddressBar:boolean);
   GetResizable():boolean;
   SetResizable(Resizable:boolean);
   Finalize();
}
declare class RTFText003Agent extends aTextUIAgent {
   Init();
   NotifyButtonUp();
}
declare class RTFEditorAgent extends aUIAgent {
   RTFMLE: string ;
   aRTFToolBarDT: string ;
   aRTFToolBar001: string ;
   theRTFToolBar: string ;
   aRTFToolBarDT_Init():number;
   aRTFToolBarDT_Terminate():number;
   RTFMLE_Selected(SelectedRank:number):number;
   RTFMLE_ButtonUp(No:number, X:number, Y:number):number;
}
declare class tFileName001Agent extends aCStringControlAgent {
   NotifyValueChanged();
}
declare class EntryFieldWithButtonAgent extends aUIAgent {
   EntryField: string ;
   PushButton: string ;
   EntryField_Changed(:aUIAgent):number;
   PushButton_Executed(:aUIAgent, SelectedRank:number, Option:number):number;
   LoadValue();
   StoreValue();
   EntryField_LoseFocus(:aUIAgent):number;
   SetExecMode();
}
declare class tImageFileName002Agent extends aCStringControlAgent {
   NotifyValueChanged();
}
declare class ImageAsEntryFieldWithButtonAgent extends aUIAgent {
   EntryField: string ;
   PushButton: string ;
   EntryField_Changed():number;
   PushButton_Executed(SelectedRank:number, Option:number):number;
   LoadValue();
   StoreValue();
   EntryField_LoseFocus():number;
}
declare class ImageAsViewerAgent extends aUIAgent {
   EntryField: string ;
   PushButton: string ;
   BitMap: string ;
   EntryField_Changed():number;
   PushButton_Executed(SelectedRank:number, Option:number):number;
   LoadValue();
   StoreValue();
   EntryField_LoseFocus():number;
}
declare class BitmapAgent extends aUIAgent {
   BitMap: string ;
   LoadValue();
}
declare class URLFileAgent extends aWebBrowserUIAgent {
   Started: string ;
   LoadValue();
}
declare class RTFToolBarAgent extends aUIAgent {
   FontNames: string ;
   ForeColor: string ;
   Bold: string ;
   Italic: string ;
   Underscore: string ;
   FontName: string ;
   InSelected: string ;
   FontSize: string ;
   FontSize001: string ;
   Align: string ;
   InsertImage: string ;
   NotifyInit();
   NotifyStoreToVar();
   FontName_Init():number;
   FontName_Changed():number;
   FontNames_Selected(SelectedRank:number):number;
   InsertImage_Init(:aUIAgent):number;
}
declare class PopupMenuAgent extends aMenuItemControlAgent {
   ChangeFont: string ;
   Separator: string ;
   Bold: string ;
   Italic: string ;
   Underscore: string ;
   Separator001: string ;
   MenuItem: string ;
   Align: string ;
   MenuItem001: string ;
   ForeColor: string ;
}
declare class ChangeFontAgent extends aUIAgent {
   FontName: string ;
   FontNameStaticText: string ;
   FontSize: string ;
   FontSizeStaticText: string ;
   Bold: string ;
   ForeColor: string ;
   ForeColorStaticText: string ;
   Italic: string ;
   Underscore: string ;
}
declare class aRTFToolBar extends aLightObject {
   theMLEUIAgent: string ;
   ForeColor: string ;
   FontName: string ;
   FontSize: string ;
   FontSels: string ;
   Bold: string ;
   Italic: string ;
   Underscore: string ;
   Strikeout: string ;
   Align: string ;
   InRefresh: string ;
   GetInfoFromMLE();
   SetMLEForeColor();
   SetMLEFontName();
   SetMLEFontSize();
   SetMLEFontSels();
   SetMLEParaFormat();
   ChangeFont();
   ShowPopupMenu(X:number, Y:number);
   InsertImage();
}
declare class aQVPFileNameAsEntryFieldMore1Agent extends aUIAgent {
   Title: string ;
   TitleStaticText: string ;
   DefExt: string ;
   DefExtStaticText: string ;
   DefFileName: string ;
   DefFileNameStaticText: string ;
   Filter: string ;
   FilterStaticText: string ;
   PickerKind: string ;
   PickerKindStaticText: string ;
   OpenOrSave: string ;
}
declare class aQVPFileNameAsEntryField002Agent extends aFolderViewAgent {
}
declare class aQVPFileNameAsEntryField extends aQVPXXXAsEF {
   OpenOrSave: string ;
   Title: string ;
   DefExt: string ;
   DefFileName: string ;
   PickerKind: string ;
   Filter: string ;
   Init();
}
declare class aFileNameAsEntryField extends aXXXAsEF {
   NewQVarPresentor();
}
declare class aFileNameAsEntryFieldWithButton extends aScenario {
   NewQVarPresentor();
}
declare class aImageFileNameAsEntryField extends aFileNameAsEntryField {
   GetQVarPresentor();
}
declare class aImageFileNameAsEntryFieldWithButton extends aFileNameAsEntryFieldWithButton {
   GetQVarPresentor();
}
declare module wUITypes {
   function GPI_INITFONTINFOS(PS:string):number;
   function GPI_GETFONTNAME(FontName:string, PS:string, FontInfosHandle:number, FontRank:number):boolean;
   function GPI_GETFONTSIZE(FontSize:number, PS:string, FontInfosHandle:number, FontRank:number, SizeRank:number):boolean;
   function GPI_RELEASEFONTINFOS(FontInfosHandle:number);
   function PickFileName(OpenOrSave:boolean, Title:string, DefExt:string, DefFileName:string, PickerKind:string, Filter:string):string;
   function WydeToMSJustification(WydeJustification:string):number;
   function UpdateKind(NewKind:string, ChoiceIndex:number);
   function ItemCompareString(Data1:number, Data2:number, theUIAgent:aListOfAsListCtrlUIAgent):number;
   function ItemCompareNum(Data1:number, Data2:number, theUIAgent:aListOfAsListCtrlUIAgent):number;
   function ItemCompareType(Data1:number, Data2:number, theUIAgent:aListOfAsListCtrlUIAgent):number;
   function ItemCompareUser(Data1:number, Data2:number, theUIAgent:aListOfAsListCtrlUIAgent):number;
   function SelectFileInClientSystemExplorer(thePickedFileName:string);
}
declare class aRootProducer extends aLightObject {
   myEntity: string ;
   NextProducer: string ;
   myFactory: string ;
   PostAttach();
}
declare class aProducerHashTable extends aDataByObjectHashTable {
   Init();
   Free();
}
declare class aProducerHasher extends aLightObject {
   theHasher: string ;
   FirstOneShotProducer: string ;
   insert(thisProducer:aRootProducer);
   InsertOneShot(thisProducer:aRootProducer);
   searchProducer(forThisObject:aLightObject):aRootProducer;
   RemoveAllHashed();
   Init();
   Kill();
}
declare class aProducerFactory extends aEntity {
   Hasher: string ;
   Init();
   Kill();
   Attach(thisProducer:aRootProducer, andThisEntity:aEntity);
   FindProducerFor(thisEntity:aEntity):aRootProducer;
   BuildSecondBestProducerFor(thisEntity:aLightObject):aRootProducer;
   NewProducerFor(thisEntity:aLightObject):aRootProducer;
   NewOneShotProducerFor(thisEntity:aLightObject):aRootProducer;
   NewProducerForName(ProducerName:string, thisEntity:aLightObject):aRootProducer;
   ProducerFor(thisEntity:aEntity):aRootProducer;
   ProduceFromImplem(theImplem:aModuleImplem);
   Reset();
}
declare class aProducer extends aRootProducer {
   target():string;
   Produce(where:string, options:string);
   producerFor(thisEntity:aLightObject):aProducer;
   NewProducerFor(thisEntity:aLightObject):aProducer;
   NewOneShotProducerFor(thisEntity:aLightObject):aProducer;
}
declare class aRootProduced extends aLightObject {
   myText: string ;
   IsLineWrapped: string ;
   TabCount: string ;
   TabString: string ;
   CurString: string ;
   StartTime: string ;
   Init();
   InitProduced(forProducer:string);
   TermProduced();
   Indent();
   unIndent();
   WriteToText(theString:string);
   WritelnToText(theString:string);
   WriteToFile(FileName:string);
   CanBreakLine();
}
declare module wProducers {
}
declare module wProducerMod {
   var theFactories: string ;
   var tTypes: string ;
   function AncestorNameFor(thisObject:string, forGeneration:number):string;
   function TargetFromName(Name:string):string;
   function GetFactory(fromTarget:string):aProducerFactory;
   function GetFactoryFromName(Name:string):aProducerFactory;
   function ProducerFor(thisEntity:aLightObject, forTarget:string):aProducer;
   function NewProducerFor(thisEntity:aLightObject, forTarget:string):aProducer;
   function initproducers();
}
declare class aDocProducedText extends aHTMLText {
   WriteSolveFirstRef(s:string, forThisProducer:aEntityDocProducer);
   concatTextSolvingRefs(theOthertext:string, forThisProducer:aEntityDocProducer);
   concatDescription(theOthertext:string, BRbefore:boolean, forThisProducer:aEntityDocProducer);
}
declare class aHTMLText extends aProducedText {
   _tabHTMLchar: string ;
   curStyle: string ;
   Init();
   SetHTMLStyle(NewStyle:aHTMLStyle);
   setFileName();
   beginDocument();
   BeginDocumentWithBackgroundImage(docTitle:string, ColorString:string, BackgroundImagePath:string);
   endDocument();
   writeHeader(level:number, title:string);
   writeNormalizeCharacters(s:string);
}
declare class aProducedText extends aRootProduced {
   myFileName: string ;
   indentPattern: string ;
   _curIndent: string ;
   _saveIndent: string ;
   _transactionStartIndent: string ;
   _nbCharInCurrentLine: string ;
   _transactionStartPos: string ;
   Init();
   textLength():number;
   NbLines():number;
   setFileName(name:string);
   _write(s:string);
   write(s:string);
   writeLn(s:string);
   canBreakLineWith(breakChar:number, minLength:number);
   beginDocument(docTitle:string, ColorString:string);
   restartAt(thisLine:string):boolean;
   endDocument();
   loadDocument();
   MakeSurDirExists(forFileName:string);
   saveDocument();
   flushIfSizeExceeds(maxSize:number);
   eraseFile();
   lastLine():string;
   split(separator:string, stringToSplit:string, beforePart:string, afterPart:string, separatorFound:boolean);
   Indent();
   unIndent();
   tmpBlankIndent();
   restoreIndent();
   beginTransaction();
   cancelTransaction();
   concatText(thisText:string);
   insertText(thisText:string, atLineNr:number);
}
declare class HTMLStyleInfoAgent extends aUIAgent {
   ParagraphType: string ;
   IndentAmount: string ;
   IndentAmountStaticText: string ;
   Font: string ;
   Family: string ;
   FamilyStaticText: string ;
   Size001: string ;
   SizeStaticText: string ;
   Style: string ;
   SetFont001: string ;
   GroupBox: string ;
   GroupBox001: string ;
   Sample: string ;
   Color: string ;
   ColorStaticText: string ;
   GroupBox002: string ;
   ResetSample();
   LoadValue();
   NotifyInit();
   NotifyStoreToVar();
}
declare class aHTMLStyle extends aEntity {
   Color: string ;
   ColorRGBString: string ;
   ParagraphType: string ;
   IndentAmount: string ;
   Font: string ;
   Sample: string ;
   Init();
   SetFont();
   SetToCurStyle(curStyle:aHTMLStyle);
   AsHTMLSize():number;
   BeforeAccept();
   BeginTag(OldStyle:aHTMLStyle):string;
   EndTag(OldStyle:aHTMLStyle):string;
   SetUIAgentToStyle(theUIAgent:aUIAgent);
}
declare class aEntityDocProducer extends aProducer {
   myOutText: string ;
   myContext: string ;
   Produce(where:aDocProducedText, options:aHTMLDocProducingApplication);
   producerFor(thisEntity:aLightObject):aEntityDocProducer;
   asFileName():string;
   asHREF(how:string):string;
   myContainerEntity():aModuleDef;
   SetNewHTMLStyle(StyleName:string);
   SetNewHTMLStyleForProduced(StyleName:string, forProduced:aDocProducedText);
   RelativeRootPath():string;
   RelativePath():string;
   HREFfromResourceName(name:string, how:string):string;
   HREFfromName(containerName:string, resourceName:string):string;
   asHREFOwnedEntity(how:string):string;
   paragraphTag():string;
   level1Tag():string;
   level2Tag():string;
   StringExtract();
   WriteComment(where:aDocProducedText, context:aHTMLDocProducingApplication, DescStyle:string);
   WriteMyText(where:aDocProducedText, context:aHTMLDocProducingApplication, DescStyle:string);
   KindOfEntity():string;
}
declare class aModuleDefDocProducer extends aEntityDocProducer {
   myContainerEntity();
   asHREF();
   KindOfEntity();
   paragraphTag();
   level1Tag();
   level2Tag();
   _writeComment();
   _listClasses();
   _listOwner();
   _listUses();
   _listAncestors();
   _listChildren();
   _listVars();
   _listMethods();
   HasTypes():boolean;
   _listTypes();
   HasScenarios():boolean;
   _listScenarios();
   ProduceAttributesLegend(Where:aDocProducedText, Context:aHTMLDocProducingApplication);
   Produce(where:aDocProducedText, options:aHTMLDocProducingApplication);
   ProduceIndex(ListIndex:aDocProducedText, Context:aHTMLDocProducingApplication);
   ProduceTableOfContentsItem(where:aDocProducedText, context:aHTMLDocProducingApplication);
}
declare class aClassDefDocProducer extends aModuleDefDocProducer {
   KindOfEntity();
   _listClasses();
   _listOwner();
   _listAncestors();
   _listChildren();
   ProduceIndex();
}
declare class aMethodTypeDocProducer extends aEntityDocProducer {
   ProcOrFunc():string;
   Produce(where:aDocProducedText, options:aHTMLDocProducingApplication);
}
declare class aIdentifierDocProducer extends aEntityDocProducer {
   asHREF();
}
declare class aTypeDocProducer extends aEntityDocProducer {
   TypeDeclForVar():string;
   Produce(where:aDocProducedText, options:aHTMLDocProducingApplication);
}
declare class aRecordDescDocProducer extends aTypeDocProducer {
   Produce(where:aDocProducedText, options:aHTMLDocProducingApplication);
}
declare class aVarDescDocProducer extends aIdentifierDocProducer {
   Produce(where:aDocProducedText, options:aHTMLDocProducingApplication);
}
declare class aSingleRoleTypeDocProducer extends aTypeDocProducer {
   TypeDeclForVar();
}
declare class aMultiRoleTypeDocProducer extends aSingleRoleTypeDocProducer {
   TypeDeclForVar();
}
declare class aReferenceTypeDocProducer extends aTypeDocProducer {
   TypeDeclForVar();
   Produce(where:aDocProducedText, options:aHTMLDocProducingApplication);
}
declare class aMethodDescDocProducer extends aIdentifierDocProducer {
   paragraphTag();
   level1Tag();
   level2Tag();
   Produce(where:aDocProducedText, options:aHTMLDocProducingApplication);
}
declare class aParameterDescDocProducer extends aIdentifierDocProducer {
   Produce(where:aDocProducedText, options:aHTMLDocProducingApplication);
}
declare class ProdHTMLDummyScenarioAgent extends aUIAgent {
   Show();
}
declare class aScenarioDocProducer extends aEntityDocProducer {
   asHREF();
   SaveScenarioAsBitmap(theScenario:aScenario, FileName:string);
   Produce(where:aDocProducedText, options:aHTMLDocProducingApplication);
}
declare module wMMDocProducers {
   function ColorToHTMLRGB(theColor:string):string;
   function PICKFONT(FontName:string, FontSize:number, FontSels:number, FontColor:number):boolean;
}
declare class aHTMLDocProducingAppli001Agent extends ProdParametersScenAgent {
   workingDirectory: string ;
   workingDirectoryStaticText: string ;
   propagateProducing: string ;
   includeSystemEntities: string ;
   includePrivateEntities: string ;
   startProducing: string ;
   GetAllDescendants: string ;
   GetAllUserClasses: string ;
   ViewButton: string ;
   sectionsToProduce: string ;
   filesToProduce: string ;
   UseSubDirs: string ;
   AttributesLegend: string ;
   ViewButton_Received(:aUIAgent, X:number, Y:number, Object:aFullObject):number;
   ViewButton_CanReceive(:aUIAgent, X:number, Y:number, Object:aFullObject):number;
   ViewButton_Executed(:aUIAgent, SelectedRank:number, Option:number):number;
}
declare class HTMLProduceDocStylesAgent extends aUIAgent {
   DefaultStyles: string ;
   HTMLStyles: string ;
   StaticText: string ;
   GroupBox: string ;
   ResetSample();
   LoadValue();
   HTMLStyles_Selected(:aUIAgent, SelectedRank:number):number;
   NotifyInit();
   NotifyStoreToVar();
}
declare class aHTMLDocProducingAppli002Agent extends aFolderViewAgent {
}
declare class ProdDocBitmapScenAgent extends aUIAgent {
   ModulesGifPath: string ;
   ModulesGifPathStaticText: string ;
   ClassesGifPath: string ;
   ClassesGifPathStaticText: string ;
   MethsGifPath: string ;
   MethsGifPathStaticText: string ;
   VarsGifPath: string ;
   VarsGifPathStaticText: string ;
   ScensGifPath: string ;
   ScensGifPathStaticText: string ;
   GeneralGifPath: string ;
   GeneralGifPathStaticText: string ;
   ModulesGif: string ;
   ClassesGif: string ;
   GeneralGif: string ;
   MethodsGif: string ;
   VariablesGif: string ;
   ScenariosGif: string ;
   TypesGifPath: string ;
   TypesGifPathStaticText: string ;
   TypesGif: string ;
   TableOfContentsGifPath: string ;
   TableOfContentsGifPathStaticText: string ;
   TableOfContentsGif: string ;
   DBDefsGifPath: string ;
   DBDefsGifPathStaticText: string ;
   DBDefsGif: string ;
   TableOfContentsGifPath_LoseFocus():number;
   TableOfContentsGifPath_Init();
   ModulesGifPath_LoseFocus(:aUIAgent):number;
   ModulesGifPath_Init();
   ClassesGifPath_LoseFocus(:aUIAgent):number;
   ClassesGifPath_Init();
   GeneralGifPath_LoseFocus(:aUIAgent):number;
   GeneralGifPath_Init();
   MethsGifPath_LoseFocus(:aUIAgent):number;
   MethsGifPath_Init();
   VarsGifPath_LoseFocus(:aUIAgent):number;
   VarsGifPath_Init();
   TypesGifPath_LoseFocus():number;
   TypesGifPath_Init();
   ScensGifPath_LoseFocus(:aUIAgent):number;
   ScensGifPath_Init();
   DBDefsGifPath_LoseFocus(:aUIAgent):number;
   DBDefsGifPath_Init(:aUIAgent):number;
}
declare class HTMLSectionsToProduceAgent extends aUIAgent {
   SelectedSection: string ;
   SelectedSectionStaticText: string ;
   Sections001: string ;
   StaticText: string ;
}
declare class aHTMLDocProducingGenInfoAgent extends aUIAgent {
   BackgroundColor: string ;
   BackgroundColorStaticText: string ;
   NoCommentString: string ;
   NoCommentStringStaticText: string ;
   TableOfContentsTitle: string ;
   TableOfContentsTitleStaticText: string ;
   BackgroundImageGifPath: string ;
   BackgroundImageGifPathStaticText: string ;
   BackgroundImageGif: string ;
   BackgroundImageGifPath_LoseFocus():number;
   BackgroundImageGifPath_Init();
}
/**
*aDocProducingAppli fournit la fenêtre principale de l'application "production de doc au format HTML".

#Principales méthodes :
- [acceptsEntity] indique à l'appelant (un producteur) si une entité donnée satisfait le critère de filtrage.
- [startProducing] est appelée par le bouton StartProducing.
- [produceDocOfModule] destinée à être appelée par un autre composant, sans utiliser l'interface utilisateur de l'application.

#INTERNAL

version : 1.10 du 17/04/97
différences / version 1.0 :
- adaptation nouvelle version de Wide (Avril 97)
- mention 'override'
- choix des sections
- interface utilisateur (drag&drop classes, modules)
manuel utilisateur : version 1.10


*/
declare class aHTMLDocProducingApplication extends aXXXProducingApplication {
   filesToProduce: string ;
   sectionsToProduce: string ;
   propagateProducing: string ;
   includeSystemEntities: string ;
   includePrivateEntities: string ;
   UseSubDirs: string ;
   AttributesLegend: string ;
   TableOfContentsTitle: string ;
   workingDirectory: string ;
   ProducingIndexes: string ;
   ProducersToRun: string ;
   HTMLStyles: string ;
   Sections: string ;
   SelectedSection: string ;
   BackgroundColor: string ;
   SectionToProduce: string ;
   NoCommentString: string ;
   TableOfContentsGifPath: string ;
   ModulesGifPath: string ;
   ClassesGifPath: string ;
   GeneralGifPath: string ;
   MethodsGifPath: string ;
   VariablesGifPath: string ;
   TypesGifPath: string ;
   ScenariosGifPath: string ;
   BackgroundImageGifPath: string ;
   DBDefsGifPath: string ;
   classDefDerivesFrom(theClass:aClassDef, fromThisClass:aClassDef):boolean;
   isSystemEntity(theEntity:aEntity):boolean;
   acceptsEntity(theEntity:aEntity):boolean;
   addToProducersToRun(thisProducer:aEntityDocProducer, forPropagation:boolean);
   InitFactory();
   HTMLStyleFor(StyleName:string):aHTMLStyle;
   SetHTMLStyle(StyleName:string, Color:string, ParagraphType:string, IndentAmount:number, FontFamily:string, FontSize:number, FontStyle:string);
   DefaultStyles();
   IsASection(SectionName:string):boolean;
   ProduceThisSection(SectionName:string):boolean;
   BackGroundColorAsRGB():string;
   Init();
   produceDocOfModule(thisModule:aModuleDef, propagate:boolean);
   GifFileName(GifPath:string):string;
   CopyGifFile(FromPath:string);
   DirectoryName(forEntity:aEntity):string;
   ProduceHeaderFor(ProduceKind:string, Where:aDocProducedText, Producer:aEntityDocProducer);
   ProduceTableOfContents();
   StartProducing();
   LaunchExplorer(OnEntity:aEntity);
   StringExtract();
}
declare class aHTMLDocSection001Agent extends aUIAgent {
   Name: string ;
   NameStaticText: string ;
}
declare class aHTMLDocSection extends aFullObject {
   Name: string ;
   StringExtract();
}
declare class aDocProducerfactory extends aProducerFactory {
   Init();
}
declare class aXXXProducingAppli002Agent extends aOpenWhereClosedUIAgent {
   ProduceClassesFolder: string ;
   NotifyCheck();
}
declare class ProdModsAndClassesAgent extends aUIAgent {
   ModulesAndClasses: string ;
}
declare class ProdParametersScenAgent extends aUIAgent {
}
declare class aXXXProducingAppli004Agent extends aSplitViewAgent {
}
declare class ProducingAppliStatusBarAgent extends aToolBarUIAgent {
   StaticText: string ;
   nbToDo001: string ;
   nbDone: string ;
   progressRate: string ;
}
declare class aXXXProducingAppli001Agent extends aFolderViewAgent {
}
declare class aXXXProducingApplication extends aEntity {
   EntitiesToProduce: string ;
   NumDone: string ;
   NumToDo: string ;
   ProgressRate: string ;
   PutDescendants(ofthisDef:aClassDef, inThisList:aListOfInstances);
   GetAllDescendants();
   GetAllUserClasses();
   InitModulesCount();
   OneMoreDone();
   StartProducing();
}
declare class aHTMLProducerExtension001Agent extends aUIAgent {
   DoYourJob: string ;
}
declare class aHTMLDocProducerExtension extends aWideExtension {
   FolderParentName();
   DoYourJob();
   MenuText();
   ButtonBMPName();
}
declare class GenCppInMDIAgent extends aOpenWhereClosedUIAgent {
   Split: string ;
   NotifyCheck();
}
declare class GenCppToolBarAgent extends aToolBarUIAgent {
   Generate: string ;
   GenerateAndCompile: string ;
   Compile: string ;
   SaveSaveAndCloseClose: string ;
   GenerateAndCompile_Received(X:number, Y:number, Object:aFullObject):number;
   GenerateAndCompile_CanReceive(X:number, Y:number, Object:aFullObject):number;
   Generate_Received(X:number, Y:number, Object:aFullObject):number;
   Generate_CanReceive(X:number, Y:number, Object:aFullObject):number;
   Compile_Received(X:number, Y:number, Object:aFullObject):number;
   Compile_CanReceive(X:number, Y:number, Object:aFullObject):number;
}
declare class StatusBarAgent extends aToolBarUIAgent {
   EntitiesProgressWorking: string ;
   ProgressWorking: string ;
}
declare class CppEntitiesAgent extends aUIAgent {
   CurrentEntity: string ;
   FolderForTopOkCancel: string ;
   FolderForTopOkCancel_Init(:aUIAgent):number;
   CurrentEntity_Init(:aUIAgent):number;
}
declare class OnlyOutExtAgent extends aUIAgent {
   theConsole: string ;
   OutText: string ;
   OutText_ButtonDblClk(:aUIAgent, No:number, X:number, Y:number):number;
}
declare class SplitAgent extends aSplitViewAgent {
}
declare class CPPGeneratorInBatchAgent extends aUIAgent {
   Split: string ;
   ProgressWorking: string ;
   EntitiesProgressWorking: string ;
}
declare class aCPPGenerator extends aEntity {
   GenCppEntities: string ;
   GenCppEntitiesToGenerate: string ;
   ProgressWorking: string ;
   EntitiesProgressWorking: string ;
   theConsole: string ;
   InGenerateAndCompile: string ;
   CurrentEntity: string ;
   inBatch: string ;
   FolderForTopOkCancel: string ;
   CurrentEntityAgent: string ;
   OperationAborted: string ;
   InConsole: string ;
   mustNotBlankText: string ;
   CommandAborted: string ;
   AbortedMsg: string ;
   MustAdjustLang: string ;
   AdjustLangAsked: string ;
   Mode: string ;
   ViewResult: string ;
   Stop: string ;
   ProductName: string ;
   ProductVersion: string ;
   ResourceFileUpdated: string ;
   DebugResFile: string ;
   ReleaseResFile: string ;
   ResourceCompiler: string ;
   DebugResourceCompilerOptions: string ;
   ReleaseResourceCompilerOptions: string ;
   DontEmbedResources: string ;
   ProductVersionIsValid: string ;
   OneProjectHasChanged():boolean;
   TimeString(t:number):string;
   ProjectFromName(ProjectName:string):aGenCppEntity;
   CreateConsole();
   CreateDefaultDLLPackage();
   InitResourceCompiler();
   Init();
   InitAfterLoad();
   InitAfterNewVersion();
   NewVersion();
   Terminate();
   WriteLnInOutText(theString:string);
   BlankOutText();
   ExecuteCommand(theCommand:string);
   ExecuteExtendedCommand(theCommand:string);
   ExecuteCommandWithAbort(theCommand:string, abortMsg:string);
   AddCommandToExecute(theCommand:string);
   ExecuteCommands();
   ExecuteCommandsWithAbort(abortMsg:string);
   SetProgressWorking(i:number);
   SetEntitiesProgressWorking(i:number);
   ResetDoneFlags();
   Generate();
   Compile();
   GenerateAndCompile();
   SelectAll();
   GenerateSelectedCPPProjects();
   CompileSelectedCPPProjects();
   LinkSelectedCPPProjects();
   GenerateAndCompileAndLinkSelectedCPPProjects();
   CompileAndLinkSelectedCPPProjects();
   DoBatchBuild():number;
   BatchBuild():number;
   SaveReportInFile(ProjectName:string);
   BatchMake();
   BatchGenerate();
   CreatePackagesFromTextFileForThisBundle(RootForTextFiles:string, DebugMode:boolean, AdditionalLibs:string, ForBundle:aDeliveriesBundle);
   CreatePackagesFromTextFileForAllBundles(RootForTextFiles:string, DebugMode:boolean, AdditionalLibs:string);
   CreatePackagesFromInstalledBundles();
   DoBatchBuildDeliveries():number;
   BatchBuildDeliveries():number;
   CompileExportFiles():number;
   LineExecuted(theUIAgent:aUIAgent);
   HasChanged();
   OldHasChanged():boolean;
   PrepareSelectedProjectForEdition();
   Save();
   RefreshAfterSynchronization();
   IsSystemCloseAccepted();
   DoBatchRegenerateAndCompile(Mode:string, ViewResult:boolean, Modalize:boolean):number;
   BatchGenerateAndCompile():number;
   GenerateAndCompileReceived(TheGenCppEntity:aGenCppEntity);
   GenerateReceived(TheGenCppEntity:aGenCppEntity);
   CompileReceived(theGenCppEntity:aGenCppEntity);
   NormalizeProductVersion();
   UpdateResourceFile():boolean;
}
declare class aGenCppPackage001Agent extends ReturnFirstPageGenCppEntityAgent {
   AddDependancies: string ;
   ExportClasses: string ;
   InitModulesToGenerateFromTgv: string ;
   DoNotUseNameSpace: string ;
   DllPreloaded: string ;
   SubtractOtherCPPEntities: string ;
   RemoveUnusedAgents: string ;
   GenCppPackageModulesToGenerate: string ;
   CompileAndLinkInDebugAndRelease: string ;
   CompileAndLinkInDebugAndRelease_ValueLoaded(:aUIAgent);
   CompileAndLinkInDebugAndRelease_ValueStored(:aUIAgent);
}
declare class DependenciesAgent extends aUIAgent {
   RolesToBeAdded: string ;
   UIAgentsToBeAdded: string ;
   UsesToBeAdded: string ;
   ChildrenToBeAdded: string ;
   AncestorToBeAdded: string ;
   ModulesUsedToBeAdded: string ;
}
declare class CompilerOptionForDllAgent extends ReturnCompilerOptionAgent {
   ResetOptions: string ;
}
declare class LinkerOptionsForDllAgent extends ReturnLinkerOptionAgent {
   LibName: string ;
   LibNameStaticText: string ;
   DllName: string ;
   DllNameStaticText: string ;
   ResetLinkOptions: string ;
   ReleaseDllName: string ;
   ReleaseDllNameStaticText: string ;
   ReleaseLibName: string ;
   ReleaseLibNameStaticText: string ;
   ReleaseAdditionalLibs: string ;
   ReleaseAdditionalLibsStaticText: string ;
   ResetLinkOptionsWithDebugAndRelease: string ;
   AdditionnalLibsStaticText_Init():number;
}
declare class SystemGenerationAgent extends aUIAgent {
   SystemHGeneration: string ;
}
declare class aGenCppPackage extends aGenCppEntity {
   ModulesToGenerate: string ;
   TheExecutionMode: string ;
   RolesToBeAdded: string ;
   UIAgentsToBeAdded: string ;
   UsesToBeAdded: string ;
   ChildrenToBeAdded: string ;
   AncestorToBeAdded: string ;
   ModulesUsedToBeAdded: string ;
   ExportClasses: string ;
   DoNotUseNameSpace: string ;
   DllPreloaded: string ;
   DebugDllName: string ;
   CompilerOption: string ;
   AppliHeaderFileName: string ;
   OFMFileName: string ;
   DebugLibName: string ;
   TgvName: string ;
   NameSpaceName: string ;
   OptionText: string ;
   CanModifySource: string ;
   EntitiesToBeSubtracted: string ;
   ContinueProduceAfterReturn: string ;
   GenerateGoldOQLAsComment: string ;
   GenerateConsistencyInformation: string ;
   SpecifyDBDefsForOQLGeneration: string ;
   ProduceOQLOnlyForTheseDBDefs: string ;
   NbClassesOrModulesPerObj: string ;
   DoNotExportLeafClasses: string ;
   DoNotExportMotherIfAllLeavesNotExported: string ;
   aUIAgentClassDef: string ;
   ClassesToRemove: string ;
   ReleaseDllName: string ;
   ReleaseLibName: string ;
   ReleaseAdditionalLibs: string ;
   NbSimultaneousCompilations: string ;
   GeneratePerfAnalyserInfo: string ;
   AddClassesFor(theModule:aModuleDef, InThisList:aListOfInstances);
   DeleteClassesWhichAreInModule(InThisList:aListOfInstances);
   GetHeaderListToProduce(theModule:aModuleDef, InThisList:aListOfInstances);
   PutInList(theModule:aModuleDef, InThisList:aListOfInstances, ForHeader:boolean):boolean;
   AddLibs():string;
   DLLName():string;
   LibName():string;
   ResetCompileOptions();
   VC6CompileOptions();
   ResetLinkOptions();
   ResetLinkOptionsWithDebugAndRelease();
   Init();
   CheckFileName();
   InitForExportFile(theTGVFileName:string);
   UpDateAllOptionsFromName();
   IsItToGenerate(CurModuleDef:aModuleDef):boolean;
   ClassNeedToBeExported(thisModuleOrClass:aModuleDef, ClassesToGenerate:aListOfInstances):boolean;
   CreateAppliHeaderH();
   CreateAppliHeaderCpp();
   CreateOFMCpp();
   CPPGeneration();
   HGeneration();
   AppendAllSystemClasses(theClassDef:aClassDef, InThisList:aListOfInstances);
   SystemHGeneration();
   DeleteClassOrModuleThatCannotBeProduced(InThisList:aListOfInstances);
   GenerateHeader();
   GenerateCpp();
   EmptyOption();
   WriteOption(Option:string);
   SaveOptionToFile():string;
   SaveOptionToFileName(FileName:string):string;
   RemoveFd(CompilerOption:string):string;
   GetModifiedOptionString(OptionString:string):string;
   GetOptimizedOptionString(OptionString:string):string;
   GetOptimizedLinkerFilename(theFilename:string):string;
   GetOptimizedLinkerOptionString(OptionString:string):string;
   GetOptimizedMode():boolean;
   CompileInSelectedMode();
   Compile();
   LinkInSelectedMode();
   Link();
   AddMultiRole(CurRole:aMultiRoleType, InThisList:aListOfInstances);
   AddRoles(CurModule:aModuleDef, InThisList:aListOfInstances);
   AddUIAgents(CurModule:aModuleDef, InThisList:aListOfInstances);
   AddUses(CurModule:aModuleDef, InThisList:aListOfInstances);
   AddModulesUsed(CurModule:aModuleDef, InThisList:aListOfInstances);
   AddChildren(theClassDef:aClassDef, InThisList:aListOfInstances);
   CheckDependencies();
   AddDependencies();
   InitModulesToGenerateFromTgv();
   AddSubClasses(theModule:aModuleDef, InThisList:aListOfInstances);
   CanGenerateHeaderOrCpp(WithMessage:boolean):boolean;
   CanGenerateHeader();
   CanGenerateCpp();
   SubtractOtherCPPEntities();
   GetBitmap();
   PutModulesToGenerate();
   IsThereSqlDBDefTarget():boolean;
   AddImplicitUses(thisMethod:aMethodImplem, inThisList:aListOfInstances);
   RemoveNonCodedAndTerminalAgents();
   IsConsistent();
   GenCppEntityKind();
   ContainsReimplem();
}
declare class aModulesToGenerateRole extends aSingleRoleType {
   NewInstanceFromDroppedObject();
/**
*Portability Check: OK
*/
   IsDroppedObjectUsable();
}
declare class ReturnFirstPageGenCppEntityAgent extends aUIAgent {
   DoGenerateHeader: string ;
   DoGenerateCpp: string ;
   DoCompile: string ;
   DoLink: string ;
   GenDir: string ;
   GenDirStaticText: string ;
   Name: string ;
   NameStaticText: string ;
   myText: string ;
   myTextStaticText: string ;
   DebugMode: string ;
   Make: string ;
   DoMakeInOtherProcess: string ;
   TargetCompilationPlatform: string ;
   TargetCompilationPlatformStaticText: string ;
   Name_Changed():number;
   UpdateGen();
   TargetCompilationPlatform_Selected(:aUIAgent, SelectedRank:number):number;
}
declare class ReturnCompilerOptionAgent extends aUIAgent {
   Compiler: string ;
   CompilerStaticText: string ;
   CompilerOptions: string ;
   CompilerOptionsStaticText: string ;
   ReleaseCompilerOptions: string ;
   ReleaseCompilerOptionsStaticText: string ;
   SeparateX64ObjDir: string ;
   CompileWithZp1: string ;
}
declare class ReturnLinkerOptionAgent extends aUIAgent {
   Linker: string ;
   LinkerStaticText: string ;
   LinkerOptions: string ;
   LinkerOptionsStaticText: string ;
   AdditionnalLibs: string ;
   AdditionnalLibsStaticText: string ;
   ReleaseLinkerOptions: string ;
   ReleaseLinkerOptionsStaticText: string ;
}
declare class FolderForGenCppEntityAgent extends aFolderViewAgent {
}
declare class FirstPageAgent extends aUIAgent {
   mySelf: string ;
}
declare class CompilerOptionAgent extends aUIAgent {
   mySelf: string ;
}
declare class LinkerOptionAgent extends aUIAgent {
   mySelf: string ;
}
declare class FileInErrorAgent extends aUIAgent {
   FileInErrorText: string ;
}
declare class aGenCppEntity extends aEntity {
   GenerateCppInOtherProcess: string ;
   DoGenerateHeader: string ;
   DoGenerateCpp: string ;
   DoCompile: string ;
   DoLink: string ;
   GenDir: string ;
   Compiler: string ;
   DebugCompilerOptions: string ;
   ReleaseCompilerOptions: string ;
   Linker: string ;
   DebugLinkerOptions: string ;
   ReleaseLinkerOptions: string ;
   AdditionalLibs: string ;
   DebugMode: string ;
   FileInErrorText: string ;
   LastOwnedId: string ;
   GenerateHeaderDone: string ;
   GenerateCppDone: string ;
   CompileDone: string ;
   LinkDone: string ;
   CPPGenNsId: string ;
   CPPGenId: string ;
   CompileAndLinkInDebugAndRelease: string ;
   TargetCompilationPlatform: string ;
   SeparateX64ObjDir: string ;
   CompileWithZp1: string ;
   GetLinkerDebugOptions(BuildPlatform:string):string;
   GetLinkerReleaseOptions(BuildPlatform:string):string;
   IsEWAM():boolean;
   ConsoleExe():string;
   GetCPPGenerator():aCPPGenerator;
   ResetDoneFlags();
   CanGenerateHeader():boolean;
   CanGenerateCpp():boolean;
   CanCompile():boolean;
   CanLink():boolean;
   mySelf():aGenCppEntity;
   updateOptionsForPlatform();
   Init();
   WriteLnInOutText(theString:string);
   WriteLnInFile(TheFile:number, theCString:string);
   SetProgressWorking(i:number);
   UpDateAllOptionsFromName(theNewName:string);
   CreateDirsIfNecessary(FileName:string);
   CreateGenDirIfNecessary();
   ChangeDirToGenDir();
   ChangeDirToLinkDir();
   GenerateHeader();
   GenerateCpp();
   Compile();
   Link();
   CanGenerate(WithMessage:boolean):boolean;
   CanCompileAndLink(WithMessage:boolean):boolean;
   ExternalGenerate();
   Generate();
   ContainsReimplem():boolean;
   Make();
   LineExecuted(theUIAgent:aUIAgent, TaggedLine:string, EntityName:string);
   KnowsWhatToDoWith(Line:string, EntityName:string):boolean;
   GetIDAllocater();
   GetNsIdAndIdforOwnedEntity();
   IsAnInOutSyncEntity();
   InOutSyncCategory();
   NotifyDeletion();
   IsAnExportableEntity();
   RegisterYourselfInIDE();
   GetBitmap();
   PutModulesToGenerate(inList:aListOfInstances);
   ChangeNameToValidOne();
   GenCppEntityKind():string;
   GetLinkerOptions(BuildPlatform:string, Option:string):string;
   InitAfterLoad();
}
declare module wGenCppMod {
   function ExpandEnvVarsForStartCommand(TheString:string):string;
   function ProduceOneCppHeader(theModulesList:aListOfInstances);
   function ProduceOneCppHeaderGivenFileName(theModulesList:aListOfInstances, OFMHeaderFileName:string, AppliHeaderFileName:string);
   function CPPString(St:string):string;
   function PickFileName(OpenOrSave:boolean, Title:string, DefExt:string, DefFileName:string, PickerKind:string, Filter:string):string;
   function SetContinueProduceAfterReturn(ContinueProduceAfterReturn:boolean);
   function SetGenerateGoldOQLAsComment(GenerateGoldOQLAsComment:boolean);
   function ClassOrModuleCanBeProduced(theModuleDef:aModuleDef):boolean;
   function SetOQLTargetDBDefs(TheseDBDefs:aListOfInstances);
   function SetGeneratePerfAnalyzerInfo(gen:boolean);
}
declare class FirstPageGenCppExeAgent extends ReturnFirstPageGenCppEntityAgent {
   WindowsApplication: string ;
   theRunnigContext: string ;
   theRunnigContextStaticText: string ;
   CommandLine: string ;
   CommandLineStaticText: string ;
   WindowsApplication_Selected(SelectedRank:number):number;
}
declare class ExeLinkerOptionAgent extends ReturnLinkerOptionAgent {
   ExeName: string ;
   ExeNameStaticText: string ;
}
declare class aGenExe extends aGenCppEntity {
   WindowsApplication: string ;
   ExeName: string ;
   theRunningContext: string ;
   CommandLine: string ;
   Init();
   UpDateAllOptionsFromName();
   CPPGeneration();
   GenerateHeader();
   GenerateCpp();
   Compile();
   Link();
   Replace(OldString:string, NewString:string, InTheString:string);
   WindowsApplicationWillChangeTo(NewValue:boolean);
   CanGenerateHeader();
   CanGenerateCpp();
   CanCompile();
   CanLink();
   IsAnInOutSyncEntity();
   GenCppEntityKind();
}
declare class aCPPGeneratorExtension001Agent extends aUIAgent {
   DoYourJob: string ;
}
declare class aCPPGeneratorExtension extends aWideExtension {
   GetCPPContainer():aCPPGenerator;
   Init();
   FolderParentName();
   DoYourJob();
   MenuText();
   ButtonBMPName();
}
declare class aDataBaseDesignerClassDefAndDBAgent extends aSplitViewAgent {
}
declare class ClassDBDefsDesignerAgent extends aUIAgent {
   GetClassDefToCheckDependencies: string ;
   ComboBox: string ;
   StaticText: string ;
   aDataBaseDesignerVirtPartAndComment: string ;
   ComboBox_Init():number;
   ComboBox_Selected(SelectedRank:number):number;
   ComboBox_ValueLoaded(:aUIAgent);
   aDataBaseDesignerVirtPartAndComment_ValueLoaded();
}
declare class ClassDefTreeAgent extends aDataBaseDesignerFullObjectRootVirtualAgent {
   theFullObjectClassDef: string ;
   Descendants: string ;
   TheNotifierUIAgent: string ;
   timerLaunched: string ;
   aDataBaseDesignerToolBar: string ;
   InsertNotifierUIAgent();
   SetBMPToNode(thisNode:string);
   LoadValue();
/**
*Portability Check: OK
*/
   Descendants_Executed(:aUIAgent, SelectedRank:number, Option:number):number;
   NotifyLoadValue();
   NotifyTimer();
}
declare class MainAgent extends aOpenWhereClosedUIAgent {
   DT: string ;
   Once: string ;
   Name: string ;
   theModuleDef: string ;
   ClassDBDefsDesigner: string ;
   Name_Init(:aUIAgent):number;
   Name_ValueLoaded(:aUIAgent);
   LoadValue();
   NotifyTerminate();
}
declare class aDataBaseDesigneronlyCommentAgent extends aUIAgent {
   Comment: string ;
   ClearText: string ;
   SaveText: string ;
}
declare class CommentAndClassesAgent extends aSplitViewAgent {
}
declare class ApplicativeRootTreeAgent extends aDataBaseDesignerAppRootVirtualAgent {
   theApplicativeRootClassDef: string ;
   Descendants: string ;
   theNotifierUIAgent: string ;
   timerLaunched: string ;
   aDataBaseDesignerToolBar: string ;
   InsertNotifierUIAgent();
   SetBMPToNode(thisNode:string);
   LoadValue();
/**
*Portability Check: OK
*/
   Descendants_Executed(SelectedRank:number, Option:number):number;
   NotifyLoadValue();
   NotifyTimer();
}
declare class aDataBaseDesigner002Agent extends aFolderViewAgent {
}
/**
*This is the database designer. A long time ago the TGV database had mappings too, but
this is obsolete now. It would be simpler to get rid of the TGV option.
*/
declare class aDataBaseDesigner extends aEntity {
   theLocalConfig: string ;
   ClassDBDefs: string ;
   DBDefs: string ;
   theFullObjectClassDef: string ;
   theApplicativeRootClassDef: string ;
   currentDBDef: string ;
   currentDBMgr: string ;
   currentExtension: string ;
   EntitiesToCloneDBDefFor: string ;
   DBDefToClone: string ;
   DBDefsToMerge: string ;
   DBDefsToCompare: string ;
   DBDefToCompare: string ;
   IgnoreMonoVersioningInCompare: string ;
   IgnoreTGVDatabases: string ;
   ClassesToIgnore: string ;
   DefaultListOfStoredAsBinary: string ;
   DefaultClassesMonoVersionned: string ;
   DefaultListOfWithoutInterTable: string ;
   DefaultTableKind: string ;
   DefaultReftosAndListofsStoredWithFullId: string ;
   DefaultHeaderStoredWithUpdateDate: string ;
   DefaultHeaderStoredWithUpdateTime: string ;
   EraseWhenCloning: string ;
   ShallowCopywhenCloning: string ;
   AlwaysCloneInAncestorColumns: string ;
   AutomaticMapping: string ;
   IgnoreThisClass(TheClass:aModuleDef):boolean;
   PurgeComment();
   UpdateUIAgents(TheClass:aClassDef);
   StoreOptions();
   GetCurrentDBDef():aDBDef;
   CanModifyCurrentDBDef():boolean;
   UpdateClassDBDef(FromRoot:aClassDef);
   _UpdateClassDBDefs(FromRoot:aClassDef);
   UpdateClassDBDefs(FromRoot:aClassDef);
   RefreshFromClassRoot(TheClass:aClassDef);
   initFromCurrentDBDef();
   reInit();
   InitDefaultOptions();
   Init();
   UIRefresh();
   IsSystemCloseAccepted();
   StringExtract();
   CloneDBDefFrom(ClonedDBDef:aDBDef);
   PickDBDefThenClone();
   AppendClassDefs(thisObject:aEntity, inTheList:aListOfInstances);
   PartialCloneDBDefFrom(ClonedDBDef:aDBDef, forClassDefs:aListOfInstances, DeepCopy:boolean, Erasing:boolean, restrictToClasses:boolean);
   ChooseDBDefAndClassesThenClone();
   PurgeDeadClasses();
   InitAfterLoad();
   BlankDDL();
   CompareDatabases();
   ClearText();
   SaveText();
}
declare class aClassDBDefRole extends aSingleRoleType {
   NewInstanceFromDroppedObject();
   IsDroppedObjectUsable();
   ModifyThisObject();
   canBreakLinkBetween();
   AuthorizeAction();
}
declare class aDBSqlExtension001Agent extends aUIAgent {
   DoYourJob: string ;
}
declare class aDBSqlExtension extends aWideExtension {
   thedesigner: string ;
   NewDBDesigner():aDataBaseDesigner;
   DoYourJob();
   FolderParentName();
   MenuText();
   ButtonBMPName();
}
declare class aSqlTypeWithPrecision extends aSqlType {
   GetNewTypeData();
   StringExtract();
   ColumnTypeDDL();
   IsPrecisionVariable();
}
declare class aSqlTypeDataWithPrecision001Agent extends aUIAgent {
   Precision: string ;
   PrecisionStaticText: string ;
}
declare class aSqlTypeDataWithPrecision extends aSqlTypeData {
   Precision: string ;
   GetPrecision();
   StringExtract();
   CloneYourSelfInNewDBDef();
   SetEncryption();
   SetPrecision();
}
declare class aSqlTypeForNumber extends aSqlType {
   GetNewTypeData();
   ColumnTypeDDL();
}
declare class aSqlTypeDataForNumber001Agent extends aUIAgent {
   Precision: string ;
   PrecisionStaticText: string ;
   Scale: string ;
   ScaleStaticText: string ;
}
declare class aSqlTypeDataForNumber extends aSqlTypeData {
   Precision: string ;
   Scale: string ;
   StringExtract();
   GetPrecision();
   SetPrecision();
   GetScale();
   CloneYourSelfInNewDBDef();
   SetEncryption();
}
/**
*Definition class for Oracle Databases representation.
*/
declare class aOracleDBDef extends aODBCDBDef {
   EnableServerTrace: string ;
   EncryptionBrokerClassDef: string ;
   EncryptionBrokerData: string ;
   Init();
   WriteTitle();
   GetLegalNameFrom();
   DropDB();
   SupportAscendingDescendingInIndex():boolean;
   ProduceIndexDDL();
   ExternalType();
   NeedPatchFromWamInfTo8500():boolean;
   AddTimeAndDateTimeTypes();
   PatchFromWamVersionInfTo8500();
   InitTypes();
   BestFitDBType();
   AddReservedNames();
   NewDBMgr();
   SqlPlaceHolderString();
   SqlTypeIsCompatibleWithMMType();
   OracleType(FromOracleTypeName:string):number;
   OracleTypeName(FromOracleType:number):string;
   SqlTypeAndDataFromDBValues();
   BestMMTypeForData();
   PRBGeneratorClassName();
   GetDDLEndLineCharsForDDLSript();
   StringExtract();
   IsValid();
   produceCommentDDL(PtrTo_Where:string, PtrTo_Options:string, theSqlDesc:aSqlDesc);
   GenerateCommentsDDL();
/**
*Portability Check: OK
*/
   ProduceSQLTop();
   SqlNestedRequestOnTupleMayUseIN();
   GetEncryptionBrokerClassId();
   GetListOfSqlEncryptionData();
   GetTheXMLProducer();
}
/**
*Definition class for Oracle Databases managers. 
Though inherited from ODBCDBMgr, the implementation for this class closely follows Oracle specific mechanisms.
*/
declare class aOracleDBMgr extends aODBCDBMgr {
   pLogonDataArea: string ;
   pHostDataArea: string ;
   LockHdle: string ;
   LockFullIds: string ;
   LockAllHandle: string ;
   LockIDHandle: string ;
   GetErrorNumForStatement(hStmt:string):number;
   Init();
   Connect(theUser:string, thePassword:string, theConnectString:string):number;
   SqlCloseCursor(TheCursor:string):boolean;
   SetUpCursor();
   Commit();
   EnableServerTrace(enabled:boolean);
   fOpen();
/**
*Closes the default cursor and logs out from the DB.
*/
   fClose();
   BindParameterInStmt();
   SqlExecStrForStmt();
   SqlExecute();
   SqlFetchStatement();
   DoesTableExist();
   DoesColumnExist();
   SqlAllocStatement();
   SqlFreeStatement();
   ProcessPreviousToBind();
   NameInDB();
   SqlFetchExtendedStatement();
   PrepareStmtForColumnWiseFetch();
   UnlockDB();
   PrefixForNamedLocking():string;
   LockDB();
   GetMaxVarCharLen();
   SqlBindForFetch();
   AfterBindParameterInStmt();
   LockCurrentVersionOf();
   UnLockCurrentVersionOf();
   SqlPrepareTextStatement();
   SqlPrepareStrStatement();
   SqlParseCString();
   SqlParseText();
   ColumnDescription();
   SqlBindForExtendedFetch();
   GetTables();
   GetColumns();
   GetPrimaryKey();
   PrepareStmtForRowWiseFetch();
   SqlResetStatement();
   PurgeDB();
   NewInstanceId();
   DBVersionInfo();
   GetErrorForStatement();
   DBHandleIsValid();
   LockDBForIDAllocator();
   UnlockDBForIDAllocator();
   DoesIndexExist();
   DoesIndexColumnExist();
   SqlBindCol();
   IsFetchedDataTruncated();
   GetRowCount();
}
declare module wOCI {
   function obreak(lda:string):number;
   function ocan(cursor:string):number;
   function oclose(cursor:string):number;
   function ocof(lda:string):number;
   function ocom(lda:string):number;
   function ocon(lda:string):number;
   function odefinps(cursor:string, opcode:number, pos:number, bufctx:string, bufl:number, ftype:number, scale:number, indp:string, fmt:string, fmtl:number, fmtt:number, rlen:string, rcode:string, pv_skip:number, ind_skip:number, alen_skip:number, rc_skip:number):number;
   function odescr(cursor:string, pos:number, dbsize:number, dbtype:number, cbuf:string, cbufl:number, dsize:number, prec:number, scale:number, nullok:number):number;
   function oerhms(lda:string, rcode:number, buf:string, bufsiz:number):number;
   function oermsg(rcode:number, buf:string):number;
   function oexec(cursor:string):number;
   function oexfet(cursor:string, nrows:number, cancel:number, exact:number):number;
   function oexn(cursor:string, iters:number, rowoff:number):number;
   function ofen(cursor:string, nrows:number):number;
   function ofetch(cursor:string):number;
   function oflng(cursor:string, pos:number, buf:string, bufl:number, dtype:number, retl:string, offset:number):number;
   function oopt(cursor:string, rbopt:number, waitopt:number):number;
   function opinit(mode:number):number;
   function olog(lda:string, hda:string, uid:string, uidl:number, pswd:string, pswdl:number, conn:string, connl:number, mode:number):number;
   function ologof(lda:string):number;
   function oopen(cursor:string, lda:string, dbn:string, dbnl:number, arsize:number, uid:string, uidl:number):number;
   function oparse(cursor:string, sqlstm:string, sqllen:number, defflg:number, lngflg:number):number;
   function orol(lda:string):number;
   function osetpi(cursor:string, piece:number, bufp:string, lenp:string):number;
   function onbset(lda:string):number;
   function onbtst(lda:string):number;
   function onbclr(lda:string):number;
   function ognfd(lda:string, fdp:string):number;
   function obndra(cursor:string, sqlvar:string, sqlvl:number, progv:string, progvl:number, ftype:number, scale:number, indp:string, alen:string, arcode:string, maxsiz:number, cursiz:string, fmt:string, fmtl:number, fmtt:number):number;
   function obndrn(cursor:string, sqlvn:number, progv:string, progvl:number, ftype:number, scale:number, indp:string, fmt:string, fmtl:number, fmtt:number):number;
   function obndrv(cursor:string, sqlvar:string, sqlvl:number, progv:string, progvl:number, ftype:number, scale:number, indp:string, fmt:string, fmtl:number, fmtt:number):number;
   function odefin(cursor:string, pos:number, buf:string, bufl:number, ftype:number, scale:number, indp:string, fmt:string, fmtl:number, fmtt:number, rlen:string, rcode:string):number;
   function obindps(cursor:string, OpCode:number, sqlvar:string, sqlvl:number, pvctx:string, progvl:number, ftype:number, scale:number, indp:string, alenp:string, rcodep:string, pvskip:number, indskip:number, alenskip:number, rcskip:number, maxsiz:number, cursiz:string, fmt:string, fmtl:number, fmtt:number):number;
}
declare class aOracleSqlDateType extends aSqlDateTimeType {
   NewTimeFormatWithValidDate: string ;
   BindValue();
   InlinedValue();
   BindDataForFetchForCol();
   ConvertFromHourMinSecAndIsUndefTime(h:number, min:number, s:number, MMType:aType, VarAddress:string, isUndefTime:boolean);
   ConvertDataAfterFetchForCol();
   FreeBufferAfterBind();
   BufferSizeForFetch();
   BindDataForArrayFetch();
   GetCTypeKind();
   Init();
}
declare class aSQLServerDBDefSpecificAgent extends aUIAgent {
   MaxLogsize: string ;
   MaxLogsizeStaticText: string ;
   DumpInstruction: string ;
   DumpInstructionStaticText: string ;
   PleaseForgetSpaceCheck: string ;
   PleaseForgetSpaceCheck001: string ;
}
declare class aSQLServerDBDef001Agent extends aFolderViewAgent {
}
declare class aSQLServerDBDef extends aODBCDBDef {
   mySQL_DBMgr: string ;
   DoMapInt8ToBigInt: string ;
   UseLongNameForDBEntity: string ;
   SupportClusterServer: string ;
   AllowRefetchOnFailover: string ;
   Use_Sp_getapplockForLocking: string ;
   UseExplicitTransaction: string ;
   DefaultTableFileGroup: string ;
   DefaultTextImageFileGroup: string ;
   DefaultIndexFileGroup: string ;
   CanMapSmallInt8ToInt: string ;
   DoMapCharToUnicode: string ;
   EncryptionBrokerClassDef: string ;
   EncryptionBrokerData: string ;
   UseMaxDataTypesForDefaultMapping: string ;
   AccentInsensitive: string ;
   CaseInsensitive: string ;
   IndexAccentCase: string ;
   WriteTitle();
   NewDBMgr();
   AddBIGINTTypeFromWamVersionInfTo8500();
   AddUnicodeTypesWamVersionInfTo4300();
   AddMaxDataTypesWamVersionInfTo5400();
   PatchDateTimeTypesFromWamVersionInfTo8500();
   PatchMoneyTypesFromWamVersionInfTo8500();
   AddDateTimeTypesFromWamVersionInfTo8500();
   NeedPatchFromWamInfTo8500():boolean;
   NeedPatchFromWamInfTo4300():boolean;
   NeedPatchFromWamInfTo5400():boolean;
   IsValid();
   InitTypes();
   BestFitDBType();
   AddReservedNames();
   SqlTypeIsCompatibleWithMMType();
   CreateDefaultTableDescs();
   Init();
   SetDBOption(optionName:string, isSet:boolean):boolean;
   SqlTypeAndDataFromDBValues();
   BestMMTypeForData();
   PRBGeneratorClassName();
   StringExtract();
   MaxDBEntitiesNameLength();
   OpenDBForManagement();
/**
*Portability Check: OK
*/
   GetStoragePropertyDDL();
/**
*Portability Check: OK
*/
   ProduceSQLTop();
   CanBindSmallInt8ToInt();
   ProduceSQLDistinctAfterTop();
   GetEncryptionBrokerClassId();
   GetListOfSqlEncryptionData();
   GetTheXMLProducer();
   IsAccentSensitive();
   IndexAccentCaseSensitivity();
   IsCaseSensitive();
   HasVirtualPrecision();
}
declare class aSQLServerDBMgr extends aODBCDBMgr {
   SupportClusterServer: string ;
   AllowRefetchOnFailover: string ;
   UserName: string ;
   PW: string ;
   UseMyErrorOnGetErrorForNextStatement: string ;
   Use_Sp_getapplockForLocking: string ;
   UseExplicitTransaction: string ;
   IsInsideExplicitTransaction: string ;
   GetAppLock(LockName:string, timeOut:number):boolean;
   ReleaseAppLock(LockName:string);
   SqlGetTRANCOUNT():number;
   ChkTRANCOUNT();
   SqlBeginTransaction();
/**
*Portability Check: OK
*/
   SqlChangeExplicitTransactionMode(isExplicit:boolean);
   LockDB();
   UnlockDB();
   LockCurrentVersionOf();
   UnLockCurrentVersionOf();
   SetNamedLock();
   IsNamedLockSet(LockName:string):boolean;
   ReSetNamedLock();
   CheckLockCompatibilityWithServerVersion();
/**
*Portability Check: OK
*/
   SetUpConnectionAttributsBeforeConnect();
   fOpen();
   NewInstanceId();
   GetSQLSTATEForStatement(hStmt:string, theSQLSTATE:string);
   TryToReOpenDB(nbAttemps:number, delay_sec:number):boolean;
   SqlExecStrForStmt();
   CanReplayTransaction();
   CanReplayOQLQuery();
   GetErrorForStatement();
   LockDBForIDAllocator();
   UnlockDBForIDAllocator();
   fClose();
   _HasMoreRecentVersionInDB(theFullId:string):boolean;
   Statistic();
   PrepareForTransaction();
   PrepareForIdAllocation();
   TerminateIdAllocation();
   Commit();
   PurgeDB();
   Init();
   DoesIndexExist();
   DoesIndexColumnExist();
}
declare module wSQLServer {
}
declare module wODBC {
   function SQLAllocConnect(EnvironmentHandle:string, ConnectionHandle:string):string;
   function SQLAllocEnv(EnvironmentHandle:string):string;
   function SQLAllocStmt(ConnectionHandle:string, StatementHandle:string):string;
   function SQLBindCol(StatementHandle:string, ColumnNumber:string, TargetType:string, TargetValue:string, BufferLength:string, StrLen_or_Ind:string):string;
   function SQLBindParameter(hstmt:string, ipar:string, fParamType:string, fCType:string, fSqlType:string, cbColDef:string, ibScale:string, rgbValue:string, cbValueMax:string, pcbValue:string):string;
   function SQLCloseCursor(StatementHandle:string):string;
   function SQLColAttribute(StatementHandle:string, ColumnNumber:string, FieldIdentifier:string, CharacterAttribute:string, BufferLength:string, StringLength:string, NumericAttribute:string):string;
   function SQLColumns(StatementHandle:string, pCatalogName:string, NameLength1:string, SchemaName:string, NameLength2:string, TableName:string, NameLength3:string, ColumnName:string, NameLength4:string):string;
   function SQLConnect(ConnectionHandle:string, ServerName:string, NameLength1:string, UserName:string, NameLength2:string, Authentication:string, NameLength3:string):string;
   function SQLDescribeCol(StatementHandle:string, ColumnNumber:string, ColumnName:string, BufferLength:string, NameLength:string, DataType:string, ColumnSize:string, DecimalDigits:string, Nullable:string):string;
   function SQLDisconnect(ConnectionHandle:string):string;
   function SQLError(EnvironmentHandle:string, ConnectionHandle:string, StatementHandle:string, Sqlstate:string, NativeError:string, MessageText:string, BufferLength:string, TextLength:string):string;
   function SQLExecDirect(StatementHandle:string, StatementText:string, TextLength:string):string;
   function SQLExecute(StatementHandle:string):string;
   function SQLFetch(StatementHandle:string):string;
   function SQLFreeConnect(ConnectionHandle:string):string;
   function SQLFreeEnv(EnvironmentHandle:string):string;
   function SQLFreeStmt(StatementHandle:string, Option:string):string;
   function SQLGetConnectOption(ConnectionHandle:string, Option:string, Value:string):string;
   function SQLGetCursorName(StatementHandle:string, CursorName:string, BufferLength:string, NameLength:string):string;
   function SQLGetData(StatementHandle:string, ColumnNumber:string, TargetType:string, TargetValue:string, BufferLength:string, StrLen_or_Ind:string):string;
   function SQLGetInfo(ConnectionHandle:string, InfoType:string, InfoValue:string, BufferLength:string, StringLength:string):string;
   function SQLGetStmtOption(StatementHandle:string, Option:string, Value:string):string;
   function SQLGetTypeInfo(StatementHandle:string, DataType:string):string;
   function SQLNumResultCols(StatementHandle:string, ColumnCount:string):string;
   function SQLParamData(StatementHandle:string, Value:string):string;
   function SQLPrepare(StatementHandle:string, StatementText:string, TextLength:string):string;
   function SQLPutData(StatementHandle:string, Data:string, StrLen_or_Ind:string):string;
   function SQLRowCount(StatementHandle:string, RowCount:string):string;
   function SQLSetConnectOption(ConnectionHandle:string, Option:string, Value:string):string;
   function SQLSetCursorName(StatementHandle:string, CursorName:string, NameLength:string):string;
   function SQLSetPos(hstmt:string, irow:string, fOption:string, fLock:string):string;
   function SQLSetParam(StatementHandle:string, ParameterNumber:string, ValueType:string, ParameterType:string, LengthPrecision:string, ParameterScale:string, ParameterValue:string, StrLen_or_Ind:string):string;
   function SQLSetStmtOption(StatementHandle:string, Option:string, Value:string):string;
   function SQLStatistics(StatementHandle:string, CatalogName:string, NameLength1:string, SchemaName:string, NameLength2:string, TableName:string, NameLength3:string, Unique:string, Reserved:string):string;
   function SQLTables(StatementHandle:string, CatalogName:string, NameLength1:string, SchemaName:string, NameLength2:string, TableName:string, NameLength3:string, TableType:string, NameLength4:string):string;
   function SQLTransact(EnvironmentHandle:string, ConnectionHandle:string, CompletionType:string):string;
   function SQLExtendedFetch(hstmt:string, fFetchType:string, irow:string, pcrow:string, rgfRowStatus:string):string;
   function SQLBrowseConnect(ConnectionHandle:string, ConnStrIn:string, ConnStrInLength:string, ConnStrOut:string, ConnStrOutMax:string, ConnStrOutLength:string):string;
   function SQLSetStmtAttr(StatementHandle:string, Attribute:string, Value:string, StringLength:string):string;
   function SQLGetStmtAttr(StatementHandle:string, Attribute:string, Value:string, BufferLength:string, StringLength:string):string;
   function SQLSetConnectAttr(ConnectionHandle:string, Attribute:string, Value:string, StringLength:string):string;
   function SQLGetDiagField(HandleType:string, Handle:string, RecNumber:string, DiagIdentifier:string, DiagInfo:string, BufferLength:string, StringLength:string):string;
   function SQLAllocHandle(HandleType:string, InputHandle:string, OutputHandle:string):string;
   function SQLFreeHandle(HandleType:string, Handle:string):string;
   function SQLGetConnectAttr(ConnectionHandle:string, Attribute:string, Value:string, BufferLength:string, StringLength:string):string;
   function SQLGetDiagRec(HandleType:string, Handle:string, RecNumber:string, Sqlstate:string, NativeError:string, MessageText:string, BufferLength:string, TextLength:string):string;
   function GetODBCStatistics(forDB:aODBCDBMgr, inText:string);
}
declare class aODBCSqlDateTimeType extends aSqlDateTimeType {
   SetToUndefDBDateValue();
   IsUndefDBDateValue();
   InlinedValue();
   BindValue();
   FreeBufferAfterBind();
   BindDataForFetchForCol();
   ConvertDataAfterFetchForCol();
   BufferSizeForFetch();
   BindDataForArrayFetch();
   GetCTypeKind();
}
declare class aTranslatorExtension001Agent extends aUIAgent {
   DoYourJob: string ;
}
declare class aTranslatorExtension extends aWideExtension {
   theTranslator: string ;
   DoYourJob();
   FolderParentName();
   MenuText();
   ButtonBMPName();
}
declare class TranslatorFileMakerAgent extends aOpenWhereClosedUIAgent {
   ClassesToExport: string ;
   ClassesToExportStaticText: string ;
   fromLanguage: string ;
   fromLanguageStaticText: string ;
   FileName: string ;
   FileNameStaticText: string ;
   PickAfileNameForImport: string ;
   BuildWordingList: string ;
   ShowTranslator: string ;
}
declare class TranslatorActionAgent extends aUIAgent {
   fromLanguage: string ;
   fromLanguageStaticText: string ;
   toLanguage: string ;
   toLanguageStaticText: string ;
   Translate: string ;
   OnlyComment: string ;
   FileName: string ;
   FileNameStaticText: string ;
   PickAfileNameForImport: string ;
   theGauge: string ;
}
declare class aLanguageTranslator extends aExportManager {
   ClassesList: string ;
   OrList: string ;
   fromLanguage: string ;
   toLanguage: string ;
   theListToTranslate: string ;
   theGauge: string ;
   Init();
   Kill(mySelf:string);
   SetListToTranslate(theList:aListOfInstances);
   BuildWordingList();
   ShowTranslator();
   doYourJob();
   ExportTGVDataSetId();
   ExportTGVNsIdContext();
   Translate();
}
declare class aTranslatedWording001Agent extends aUIAgent {
   Language001: string ;
   StaticText: string ;
   Wording: string ;
}
declare class aTranslatedWording extends aFullObject {
   Language: string ;
   Wording: string ;
}
declare class aAllTranslationWordings001Agent extends aUIAgent {
   fromLanguage: string ;
   fromLanguageStaticText: string ;
   ToLanguage: string ;
   ToLanguageStaticText: string ;
   allWordings: string ;
   FromWording: string ;
   ToWording: string ;
   GroupBox: string ;
   allWordings_Selected(SelectedRank:number):number;
   ToLanguage_Selected(SelectedRank:number):number;
   fromLanguage_Selected(SelectedRank:number):number;
}
declare class aAllTranslationWordings extends aFullObject {
   allWordings: string ;
   currentRankToEdit: string ;
   fromLanguage: string ;
   ToLanguage: string ;
   GetAbstractWording(theString:string, theLanguage:string):aAbstractWording;
   AppendWording(theString:string, theLanguage:string);
   currentAbstractWording():aAbstractWording;
   FromWording():aTranslatedWording;
   ToWording():aTranslatedWording;
   SetCurrentAbstractWording(selectedRank:number);
   TranslateIfPossible(theString:string, FromLanguage:string, toLanguage:string);
}
declare class aAbstractWording extends aFullObject {
   allTranslatedWordings: string ;
   Init();
   WordingFromLanguage(theLanguage:string):string;
   IsCorrespondingTo(theString:string, theLanguage:string):boolean;
   StringExtract();
   GetFrenchWording():string;
   GetEnglishWording():string;
   GetSpanishWording():string;
   GetGermanWording():string;
   GetItalianWording():string;
}
declare class aDBTestBrowser001Agent extends aSplitViewAgent {
}
declare class DBtestBrowserAgent extends aUIAgent {
   FoundEntities: string ;
   FoundEntitiesNumber: string ;
   ExecuteSelection: string ;
   ComboBox: string ;
   ComboBox_Init(:aUIAgent):number;
   ComboBox_Selected(:aUIAgent, SelectedRank:number):number;
}
declare class aDBTestBrowser002Agent extends aUIAgent {
   GetCurrentEntity: string ;
   GetSelfIfCurrentEntitySelected: string ;
}
declare class OnlyViewSelectedObjectAgent extends aUIAgent {
   ShowSelected: string ;
}
/**
*Called from aWideIde::BrowseDatabase in WideDLL / WCONTEXT.CPP 
*/
declare class aDBTestBrowser extends aMetaModelBrowser {
   CurDBDef: string ;
   CurOpenDBDef: string ;
   DBDefs: string ;
   OldDefaultDBMgr: string ;
   OldContext: string ;
   GetAllInstancesOfClassDef(fromClassdef:aClassDef, InList:aListOfInstances);
   OpenDBDef(DB:aDBDef):boolean;
   CloseDBDef(DB:aDBDef);
   CloseCurrentDBDef();
   ReInit();
   GetAllObjects(ThisList:aListOfInstances, ThisClass:aClassDef);
   ExecuteSelection();
   GetCurrentEntity();
   GetSelfIfCurrentEntitySelected():aDBTestBrowser;
   ShowSelected();
   Terminate();
   UIModalConsult();
}
declare class NewScenarioAgent extends aUIAgent {
   EntityName: string ;
   EntityNameStaticText: string ;
   EntityKind: string ;
   EntityKindStaticText: string ;
   AncestorClassDef: string ;
   AncestorClassDefStaticText: string ;
   EntityName_Init():number;
   ShowOrHide();
   NotifyInit();
   NotifyStoreToVar();
}
declare class OpenScenarioAgent extends aUIAgent {
   theEntities: string ;
   EntityKind: string ;
   EntityKindStaticText: string ;
   AllEntities: string ;
   ConsultEntities: string ;
   EntryField: string ;
   StaticText: string ;
   SelectEntityFromName(theName:string);
   NotifyInit();
   NotifyStoreToVar();
   LoadValue();
   theEntities_Executed(SelectedRank:number, Option:number):number;
   EntryField_Changed():number;
   EntryField_Init():number;
}
declare class aWideNewOpenManager extends aEntity {
   theEntities: string ;
   EntityKind: string ;
   EntityName: string ;
   AllEntities: string ;
   ConsultEntities: string ;
   AncestorClassDef: string ;
   GetDescendant(thisClassDef:aClassDef, inThisList:aListOfInstances);
   CalcList();
   CreateClass(Name:string, Ancestor:aClassDef):aEntity;
   CreateModule(Name:string):aEntity;
   CreateGraph(Name:string):aEntity;
   Modify(theEntity:aEntity);
   CreateNew();
   Init();
   ActionValid();
   ActionCancel();
   IsValid();
}
declare module wOpenNewManager {
   function RefreshClassesTrees();
}
declare class MainHistoryAgent extends aUIAgent {
   allVersions: string ;
   InitAllVersions: string ;
   ViewSelectedObject: string ;
   CompareVersionsWithAnalyser: string ;
   allVersions_Selected(SelectedRank:number):number;
}
declare class HistoryAsPickerAgent extends aUIAgent {
   allVersions: string ;
   ViewSelectedObject: string ;
   PickSelectedObject: string ;
   CompareVersionsWithAnalyzer: string ;
}
declare class aEntityHistorian extends aEntity {
   theObject: string ;
   allVersions: string ;
   selectedObject: string ;
   UsedAsVersionPicker: string ;
   SelectedEntity: string ;
   UnfreezeSelectedObject();
   InitAllVersions();
   GetAllVersions():string;
/**
*Portability Check: OK
*/
   VersionsNumber():number;
/**
*Portability Check: OK
*/
   FrozenVersionsNumber():number;
   displayAllOwnedVersions();
   ViewSelectedObject();
   PickSelectedObject();
   PickAnOldVersion():aEntity;
   myModuleDef();
   StringExtract();
   CompareVersionsWithAnalyzer();
}
declare class aHistorianRole extends aSingleRoleType {
   ConsultThisObject();
}
declare class aWelcomeManager001Agent extends aOpenWhereClosedUIAgent {
   aWellcomeManager002: string ;
}
declare class aWelcomeManager002Agent extends aUIAgent {
   GetIde: string ;
   TutorialsWithText: string ;
}
declare class onlyTutorialsAgent extends TutorialsWithTextAgent {
   TutorialsSplit001: string ;
}
declare class aWelcomeManager extends aEntity {
   Tutorials: string ;
   Examples: string ;
   NewTutorial():aTutorialDescription;
   CatalogFileNameWithoutExt():string;
   XMLFormatCatalogFileName():string;
   TextFormatCatalogFileName():string;
   LoadExample(rank:number);
   Loadtutorial(rank:number);
   StringExtract();
   SubNodeValue(XMLField:string, XMLNode:aXMLNamedNode):string;
   SubNodeAsText(XMLField:string, XMLNode:aXMLNamedNode, TheText:string);
   ExtractXML(FileName:string);
   ExtractTXT(FileName:string);
   Init();
}
declare class aSqlImpactExtension001Agent extends aUIAgent {
   DoYourJob: string ;
}
declare class aSqlImpactExtension extends aWideExtension {
   theAnalyser: string ;
   DoYourJob();
   FolderParentName();
   MenuText();
   ButtonBMPName();
}
declare class aImpactAnalyserToCheckAgent extends aUIAgent {
   ComboBox: string ;
   StaticText: string ;
   aImpactAnalyser001: string ;
   ComboBox_Init():number;
   ComboBox_Selected(SelectedRank:number):number;
}
declare class aImpactAnalyserLightObjectRootAgent extends aUIAgent {
   theFullObjectClassDef: string ;
   Descendants: string ;
/**
*Portability Check: OK
*/
   Descendants_Executed(:aUIAgent, SelectedRank:number, Option:number):number;
}
declare class aImpactAnalyserCommentAndTreesAgent extends aSplitViewAgent {
}
declare class aImpactAnalyserMainAgent extends aOpenWhereClosedUIAgent {
   aImpactAnalyserToCheck: string ;
}
declare class aImpactAnalyserCommentAgent extends aUIAgent {
   Comment: string ;
   Comment_Received(:aUIAgent, X:number, Y:number, Object:aFullObject):number;
   Comment_CanReceive(:aUIAgent, X:number, Y:number, Object:aFullObject):number;
}
declare class aImpactAnalyserApplicativeRootAgent extends aUIAgent {
   theApplicativeRootClassDef: string ;
   Descendants: string ;
/**
*Portability Check: OK
*/
   Descendants_Executed(:aUIAgent, SelectedRank:number, Option:number):number;
}
declare class aImpactAnalyserTreesAgent extends aFolderViewAgent {
}
declare class aImpactAnalyserModulesAgent extends aUIAgent {
   theIDE: string ;
   myContext: string ;
   allModules: string ;
/**
*Portability Check: OK
*/
   allModules_Executed(:aUIAgent, SelectedRank:number, Option:number):number;
}
declare class aMappingImpactOnOQLAnalyser extends aEntity {
   currentDBDef: string ;
   theLocalConfig: string ;
   DBDefs: string ;
   theLightObjectClassDef: string ;
   theApplicativeRootClassDef: string ;
   theIDE: string ;
   EntitiesToAnalyse: string ;
   AnalyzeAllClassesAndModules: string ;
   ShowOQL: string ;
   ShowSQL: string ;
   AnalyseMappingOnly: string ;
   DetectQueriesOnBigVolumeClasses: string ;
   SaveOnlyReportToFile: string ;
   SaveToFile: string ;
   StringExtract();
   PurgeComment();
   CanOQLAnalysis(theObject:aFullObject):boolean;
   Scroll();
   NewOQLReportWriter():aOQLReportWriter;
   OQLAnalysis(theObject:aFullObject);
   AppendAnalyseableObjects(thisObject:aEntity, inTheList:aListOfInstances);
   OQLAnalysisMany();
   OQLAnalysisAllModulesAndClasses();
   GetCurrentDBDef():aDBDef;
   Init();
   FirstTestDBDef():aDBDef;
   reInit();
   NotifyCurrentDBDefChanged();
}
declare class aOQLReportWriter extends aIRProcessor {
   theText: string ;
   pTheText: string ;
   curMethod: string ;
   curDBDef: string ;
   curModule: string ;
   curOQLSelect: string ;
   FoundMethodWithOQL: string ;
   FoundOQLInMethod: string ;
   ShowOQL: string ;
   ShowSQL: string ;
   AnalyseMappingOnly: string ;
   MappingIsInconsistent: string ;
   DetectQueriesOnBigVolumeClasses: string ;
   OnlySaveToFileHandle: string ;
   Init();
   HandleClass();
   HandleMethod();
   HandleIRAny();
   GetFileHandle(SaveToFile:string):number;
   FlushText(theText:string);
   WriteOQLInfoFor(theOp:aOQLOpSelect);
   IsBigVolumeClassRepresentation(CurClassRep:aSqlClassDefRepresentation):boolean;
   WriteOutClassInformation(TheModule:aModuleDef, TheMethod:aMethodImplem);
   AnalyseMappingFor(theOp:aIRAny);
   HandleOpNode();
   AfterHandleOpNode();
   ProcessModuleMethodsForDBDef(forModuleDef:aModuleDef, forDBDef:aDBDef, InText:string);
   ProcessMethodForDBDef(forMethodDesc:aMethodDesc, forDBDef:aDBDef, InText:string);
}
declare class aIRProcessor extends aLightObject {
   HostIRAny: string ;
   ProcessAncestorAfter: string ;
   ProcessIRAny(theAny:aIRAny, forClassDef:aClassDef);
   HandleClass(theClass:aClassDef);
   AfterHandleClass(theClass:aClassDef);
   HandleModule(theModule:aModuleDef);
   BeforeHandleModuleClass(theModule:aModuleDef);
   AfterHandleModule(theModule:aModuleDef);
   HandleMethod(theMethod:aMethodImplem);
   AfterHandleMethod(theMethod:aMethodImplem);
   HandleStatement(theStatement:aIRStatement);
   AfterHandleStatement(theStatement:aIRStatement);
   HandleOpNode(theOp:aIROpNode);
   AfterHandleOpNode(theOp:aIROpNode);
   HandleIRAny(theAny:aIRAny);
   ExtractIrAny(theAny:aIRAny, theVarDesc:aIdentifierDesc):aIRAny;
   ProcessMethodImplem(MethodImplem:aMethodImplem);
   ProcessMethodDesc(MethodDesc:aMethodDesc);
   ProcessClassMethods(ClassDef:aClassDef);
   ProcessModule(ModuleDef:aModuleDef);
}
declare class DependenciesScenAgent extends aUIAgent {
   AddUses: string ;
   AddChildren: string ;
   AddAncestor: string ;
   AddModulesUsed: string ;
   AddRoles: string ;
   AddUIAgents: string ;
}
declare class BuildListFromTGVScenAgent extends aUIAgent {
   TgvName: string ;
   StaticText: string ;
}
declare class aClassListBuilder extends aLightObject {
   ModuleList: string ;
   AddRoles: string ;
   AddUIAgents: string ;
   AddUses: string ;
   AddChildren: string ;
   AddAncestor: string ;
   AddModulesUsed: string ;
   TgvName: string ;
   AcceptSystemClasses: string ;
   AddClassesFor(theModule:aModuleDef, InThisList:aListOfInstances);
   PutInList(theModule:aModuleDef, InThisList:aListOfInstances):boolean;
   AddMultiRole(CurRole:aMultiRoleType, InThisList:aListOfInstances);
   AddRolesToList(CurModule:aModuleDef, InThisList:aListOfInstances);
   AddUIAgentsToList(CurModule:aModuleDef, InThisList:aListOfInstances);
   AddUsesToList(CurModule:aModuleDef, InThisList:aListOfInstances);
   AddModulesUsedToList(CurModule:aModuleDef, InThisList:aListOfInstances);
   AddChildrenToList(theClassDef:aClassDef, InThisList:aListOfInstances);
   DeleteClassesWhichAreInModule(InThisList:aListOfInstances);
   InitFromExportFile(toList:aListOfInstances);
   AddSubClassesToList(theModule:aModuleDef, InThisList:aListOfInstances);
   CopyToList(fromList:aListOfInstances, toList:aListOfInstances);
   AddDependenciesToList(toList:aListOfInstances);
   AddTGVToList(toList:aListOfInstances);
}
declare class MDIHelpBrowserAgent extends aOpenWhereClosedUIAgent {
   theURLFile: string ;
   DT: string ;
   EntryField: string ;
   URLFile: string ;
   DT_Init(:aUIAgent):number;
   URLFile_ButtonDown(No:number, X:number, Y:number):number;
   PrevPage();
   NextPage();
   URLFile_CommandStateChange(Command:number, Enable:boolean):number;
   URLFile_TitleChange(Text:string):number;
}
declare class ModalHelpBrowserAgent extends aUIAgent {
   theURLFile: string ;
   DT: string ;
   URLFile: string ;
   DT_Init(:aUIAgent):number;
   PrevPage();
   NextPage();
   URLFile_CommandStateChange(Command:number, Enable:boolean):number;
   URLFile_TitleChange(Text:string):number;
}
declare class HtmlHelpBrowserAgent extends aWebBrowserUIAgent {
}
declare class aHelpBrowser002Agent extends aToolBarUIAgent {
   PrevPage: string ;
   NextPage: string ;
}
declare class aHelpBrowser extends aEntity {
   IsHelpBrowsingPossible():boolean;
   ShowHelp(HelpFile:string);
   PrevPage(theUIAgent:aUIAgent);
   NextPage(theUIAgent:aUIAgent);
   EnablePrev(Enable:boolean);
   EnableNext(Enable:boolean);
}
declare class MemoryViewerLookForObjectsByClasssAgent extends aUIAgent {
   selectedClassDef: string ;
   selectedClassDefStaticText: string ;
   LookForObjects: string ;
   FoundObjectNumber: string ;
   StaticText: string ;
   WithDescendants: string ;
   HelpButton: string ;
   FoundObjects001: string ;
   GroupBox: string ;
   ObjectNsId: string ;
   ObjectNsIdStaticText: string ;
   ObjectId: string ;
   ObjectIdStaticText: string ;
   LookForNsIdIdObject: string ;
   FoundObjects001_Executed(:aUIAgent, SelectedRank:number, Option:number):number;
}
declare class aMemoryViewer extends aEntity {
   selectedClassDef: string ;
   FoundObjects: string ;
   WithDescendants: string ;
   MemPresentedList: string ;
   MemBlocksSum: string ;
   MemBlocksCount: string ;
   FullObjectCount: string ;
   LightObjectCount: string ;
   MemFullObjects: string ;
   MemLightObjects: string ;
   MemGoldSpaces: string ;
   MemInternalSpaces: string ;
   OnlyByClass: string ;
   Working: string ;
   TraceDisposeMem: string ;
   UnloadReferenceWhileDisposeMem: string ;
   SecureDisposeMem: string ;
   ReportFileName: string ;
   ObjectNsId: string ;
   ObjectId: string ;
   FoundObjectNumber():number;
   AppendObject(thisObject:aLightObject);
   LookForNsIdIdObject();
   LookForObjects();
   Init();
   Terminate();
   PleaseMarkDebugMemory();
   PleaseUnMarkDebugMemory();
   StackFromBlock(currentWydeInfo:string):string;
   FindCandidateByClass(ClassName:string):aMemoryBlock;
   FindCandidateByObject(thisObject:aLightObject):aMemoryBlock;
   BuildMemoryInfo();
   ParamInteract();
   IsSystemCloseAccepted();
   SetUpGC(gc:aMemoryViewerGarbageCollector);
   RefreshDisposeMemInfo();
   DODisposeMem();
   WriteToThisFile(FileName:string, sep:number);
   ActionWriteToFile();
   SetUnsetKillBreakPointOnClass(thisClassDef:aClassDef);
   SetUnsetKillBreakPointOnObject(thisObject:aLightObject);
}
declare class aLightObjectReference001Agent extends aUIAgent {
   displayObject: string ;
}
declare class aMemViewerLightObjectReference extends aLightObject {
   theObject: string ;
   Display();
   displayObject();
   StringExtract();
}
declare class aFullObjectReference001Agent extends aUIAgent {
   versions001: string ;
   theList: string ;
}
declare class aMemViewerFullObjectReference extends aMemViewerLightObjectReference {
   versions: string ;
   Init();
   Terminate();
   Display();
}
declare class aMemoryViewerExtension extends aWideExtension {
   currentMemoryViewer: string ;
   DoYourJob();
   FolderParentName();
   MenuText();
   ButtonBMPName();
}
declare module wWideGraph {
   function DrawBorder(ps:string, X:number, Y:number, Width:number, Height:number, Cx:number, Cy:number, ForeColor:string, BackColor:string, kinds:string);
   function DrawText(ps:string, X:number, Y:number, Width:number, Height:number, ForeColor:string, BackColor:string, Kinds:string, theText:string);
   function DrawBorderText(ps:string, X:number, Y:number, Width:number, Height:number, Cx:number, Cy:number, BorderForeColor:string, BorderBackColor:string, BorderKinds:string, dxText:number, dyText:number, TextForeColor:string, TextBackColor:string, TextKinds:string, theText:string);
   function DrawArrows(ps:string, FromX:number, FromY:number, ToX:number, ToY:number, ArrowShape:number, TotalArrowLength:number, MiddleArrowLength:number, NbArrows:number, ForeColor:number, BackColor:number);
   function DrawArrowsPart(ps:string, FromX:number, FromY:number, ToX:number, ToY:number, ArrowShape:number, TotalArrowLength:number, MiddleArrowLength:number, NbArrows:number, ForeColor:number, BackColor:number, Half:boolean);
   function CalcArrowsRect(FromX:number, FromY:number, ToX:number, ToY:number, ArrowShape:number, TotalArrowLength:number, MiddleArrowLength:number, NbArrows:number, xMin:number, yMin:number, xMax:number, yMax:number);
   function CalcArrowsPartRect(FromX:number, FromY:number, ToX:number, ToY:number, ArrowShape:number, TotalArrowLength:number, MiddleArrowLength:number, NbArrows:number, xMin:number, yMin:number, xMax:number, yMax:number, Half:boolean);
   function CalcLinkFromRects(X1:number, Y1:number, W1:number, H1:number, X2:number, Y2:number, W2:number, H2:number, FromX:number, FromY:number, ToX:number, ToY:number);
   function CalcSide(X:number, Y:number, RectX:number, RectY:number, RectWidth:number, RectHeight:number):number;
   function CalcPointFromMinDist(X:number, Y:number, RectX:number, RectY:number, RectWidth:number, RectHeight:number, MinDist:number, PointX:number, PointY:number);
   function DrawCircles(ps:string, FromX:number, FromY:number, ToX:number, ToY:number, R:number, NbCircles:number, ForeColor:number, BackColor:number);
   function GPI_INTERSECTCLIPRECTANGLE(ps:string, Rect:string);
   function IntersectClipRectangle(ps:string, X:number, Y:number, Width:number, Height:number);
   function SetPtr(Ptr:number);
   function GetPtr():number;
   function GetSPTR(Index:number):number;
   function GPI_MAXCHARWIDTH(Ps:string):number;
   function ChangeTextOnGetChar(Ch:number, VKey:string, CharCount:number, Flags:number, theText:string, TextLen:number):number;
   function GPI_LINE2(PS:string, X1:number, Y1:number, X2:number, Y2:number);
   function GPI_LINE3(PS:string, X1:number, Y1:number, X2:number, Y2:number, X3:number, Y3:number);
   function GPI_LINE4(PS:string, X1:number, Y1:number, X2:number, Y2:number, X3:number, Y3:number, X4:number, Y4:number);
   function GPI_LINE5(PS:string, X1:number, Y1:number, X2:number, Y2:number, X3:number, Y3:number, X4:number, Y4:number, X5:number, Y5:number);
   function GPI_LINE6(PS:string, X1:number, Y1:number, X2:number, Y2:number, X3:number, Y3:number, X4:number, Y4:number, X5:number, Y5:number, X6:number, Y6:number);
   function DrawBrokenLink(Ps:string, FromX:number, FromY:number, ToX:number, ToY:number, DistFromBorder:number, Frame1:aFrame, Frame2:aFrame);
   function DrawBubble(PS:string, X:number, Y:number, Width:number, Height:number, Param1:number, Param2:number, ZoomGraphParamX:number, ZoomGraphParamY:number);
   function DrawBox(PS:string, X:number, Y:number, Width:number, Height:number, Param:number);
   function DrawUpArrow(Ps:string, X:number, Y:number, Width:number, Height:number, ParamX:number, ParamY:number);
   function DrawDownArrow(Ps:string, X:number, Y:number, Width:number, Height:number, ParamX:number, ParamY:number);
   function DrawLeftArrow(Ps:string, X:number, Y:number, Width:number, Height:number, ParamX:number, ParamY:number);
   function DrawRightArrow(Ps:string, X:number, Y:number, Width:number, Height:number, ParamX:number, ParamY:number);
   function RectIntersect(X1:number, Y1:number, W1:number, H1:number, X2:number, Y2:number, W2:number, H2:number):boolean;
   function ProjectPoint(Xa:number, Ya:number, Xb:number, Yb:number, Xc:number, Yc:number);
   function Det(u:string, v:string):number;
   function Scalar(u:string, v:string):number;
   function IntersectLines(A:string, u:string, B:string, v:string):string;
   function OppositeVector(u:string):string;
   function SumVector(u:string, v:string):string;
   function Vector(A:string, B:string):string;
   function VectorUp():string;
   function VectorRight():string;
   function IsZero(O:string):boolean;
   function PointInRectangle(DoLe:string, Size:string, O:string):boolean;
   function QualifyPoint(Dole:string, Size:string, O:string, u:string, Candidate:string, Qualified:string, BestScalar:number);
   function IntersectionWithRectangle(DoLe:string, Size:string, O:string, u:string):string;
   function IntersectionWithRectangleFromCenter(DoLe:string, Size:string, O:string):string;
   function GetClosestLineFirstPoint(CandidatePoint:aPoint, x:number, y:number, xOnLine:number, yOnLine:number, BestPoint:aPoint, BestSqDist:number);
   function GetClosestSegmentFirstPoint(CandidatePoint:aPoint, x:number, y:number, xOnLine:number, yOnLine:number, BestPoint:aPoint, BestSqDist:number);
}
declare class GraphOfClassesModifierAgent extends GraphModifierAgent {
   LoadValue();
   Finalize();
   NotifySelectedFramesChanged();
   MaxDist();
   Init();
   ObjectCanBeDropped();
}
declare class PopupMenuForGraphOfClassesAgent extends PopupMenuForGraphOverAgent {
   ModifyOption: string ;
   DeleteOption: string ;
   Separator010: string ;
   ModifyName: string ;
   Separator011: string ;
}
declare class NameOfGraphAgent extends aUIAgent {
   NotifyInit();
}
declare class FirstPageForGraphAgent extends aUIAgent {
}
declare class aGraphOfClasses001Agent extends aFolderViewAgent {
}
declare class aGraphOfClasses002Agent extends aFolderViewAgent {
}
declare class aGraphOfClasses003Agent extends aFolderViewAgent {
}
declare class aGraphOfClasses004Agent extends aFolderViewAgent {
}
declare class aGraphOfClasses extends aGraph {
   theOption: string ;
   BackBeingPainted: string ;
   RefreshGraph();
   UpdateTitles();
   GetOption();
   ModifyOption();
   DeleteOption();
   MotifyName();
   DisplayDraggableToolForGraph();
   StartBmpSave();
   StringExtract();
   xxxToBeDeletedxxxShowClassFinder();
   ScenarioForObjectInGraph();
   GetBitmap();
}
declare class NameOptionAgent extends aUIAgent {
   NameOption: string ;
}
declare class AscendantsAgent extends aUIAgent {
   AscendantsOption: string ;
}
declare class VariablesAgent extends aUIAgent {
   VariablesOption: string ;
}
declare class MethodsAgent extends aUIAgent {
   MethodsOption: string ;
}
declare class TypesAgent extends aUIAgent {
   TypesOption: string ;
}
declare class ConstantsAgent extends aUIAgent {
   ConstantsOption: string ;
}
declare class ScenariosAgent extends aUIAgent {
   ScenariosOption: string ;
}
declare class UsedClassesAndModulesAgent extends aUIAgent {
   UsedClassesAndModulesOption: string ;
}
declare class DescendantsAgent extends aUIAgent {
   DescendantsOption: string ;
}
declare class ElementsOptionsAgent extends aFolderViewAgent {
}
declare class aGraphOfClassesOption004Agent extends aUIAgent {
   AllOptions: string ;
}
declare class AllOptionsAgent extends aFolderViewAgent {
}
declare class VariableNameOptionAgent extends aUIAgent {
   VariableNameOption: string ;
}
declare class VariableTypeOptionAgent extends aUIAgent {
   VariableTypeOption: string ;
}
declare class VariablemyOwnerOptionAgent extends aUIAgent {
   VariablemyOwnerOption: string ;
}
declare class VariableAcceptedClassOptionAgent extends aUIAgent {
   VariableAcceptedClassOption: string ;
}
declare class VariableBackRefOptionAgent extends aUIAgent {
   VariableBackRefOption: string ;
}
declare class VariableOptionAgent extends aFolderViewAgent {
}
declare class GraphMainOptionsAgent extends aUIAgent {
   GraphBackColor: string ;
   GraphBackColorStaticText: string ;
   ShowSelectedEntity: string ;
   MaxDist: string ;
   MaxDistStaticText: string ;
   UseSelectedFrameAsParent: string ;
}
declare class ReftoLinkOptionAgent extends aUIAgent {
   ReftoLinkOption: string ;
}
declare class ListofLinkOptionAgent extends aUIAgent {
   ListofLinkOption: string ;
}
declare class tElementOption001Agent extends aUIAgent {
   ForeColor: string ;
   ForeColorStaticText: string ;
   BackColor: string ;
   BackColorStaticText: string ;
   FontName: string ;
   FontNameStaticText: string ;
   FontSize: string ;
   FontSizeStaticText: string ;
   FontSels: string ;
   Visible: string ;
}
declare class LinkOptionAgent extends aUIAgent {
   AutoHide: string ;
   AddLink: string ;
   LinkKind: string ;
   LinkKindStaticText: string ;
   LineKind: string ;
   LineKindStaticText: string ;
   NbSymbols: string ;
   NbSymbolsStaticText: string ;
   LinkForeColor: string ;
   LinkForeColorStaticText: string ;
   LinkBackColor: string ;
   LinkBackColorStaticText: string ;
   LinkText: string ;
   LinkTextStaticText: string ;
}
declare class aGraphOfClassesOption extends aOption {
   NameOption: string ;
   AscendantsOption: string ;
   VariablesOption: string ;
   MethodsOption: string ;
   TypesOption: string ;
   ConstantsOption: string ;
   ScenariosOption: string ;
   UsedClassesAndModulesOption: string ;
   DescendantsOption: string ;
   VariableNameOption: string ;
   VariableTypeOption: string ;
   VariablemyOwnerOption: string ;
   VariableAcceptedClassOption: string ;
   VariableBackRefOption: string ;
   ReftoLinkOption: string ;
   ListofLinkOption: string ;
   GraphBackColor: string ;
   ShowSelectedEntity: string ;
   MaxDist: string ;
   UseSelectedFrameAsParent: string ;
   OwnedReftoLinkOption: string ;
   OwnedListofLinkOption: string ;
   Init();
   CloneVarsOnRecast();
}
declare class aGraphDragableNewVar001Agent extends aUIAgent {
   VarName: string ;
   VarNameStaticText: string ;
   VarType: string ;
   VarTypeStaticText: string ;
}
declare class aGraphDraggableNewVar extends aGraphDraggableEntity {
   VarName: string ;
   VarType: string ;
   NewTypeDesc: string ;
   curClassDef: string ;
   NotifyDropped();
   CanBeDroppedIn();
   IsValid();
}
declare class aGraphDragableNewClass001Agent extends aUIAgent {
   NewClassName: string ;
   NewClassNameStaticText: string ;
   theAncestor: string ;
   theAncestorStaticText: string ;
}
declare class aGraphDraggableNewClass extends aGraphDraggableEntity {
   theAncestor: string ;
   NewClassName: string ;
   Dropping: string ;
   CreateAndDisplay():aClassDef;
   NotifyDropped(theUIComponent:aDesignWindow, X:number, Y:number, thisObject:string);
   IsValid();
}
declare class aGraphDraggableNewRefto001Agent extends aUIAgent {
   VarName: string ;
   VarNameStaticText: string ;
}
declare class aGraphDraggableNewRefto002Agent extends NewLinkAgent {
   VarName: string ;
   VarNameStaticText: string ;
}
declare class aGraphDraggableNewRefto extends aGraphDraggableNewLink {
   ChangeComment();
   IsValid();
}
declare class ClassesAgent extends aUIAgent {
   ComboBox: string ;
   StaticText: string ;
   StaticText001: string ;
   ComboBox001: string ;
   NotifyInit();
   ComboBox_Selected(SelectedRank:number):number;
   ComboBox001_Selected(SelectedRank:number):number;
}
declare class NewLinkAgent extends aUIAgent {
   Classes: string ;
}
declare class aGraphDraggableNewLink extends aGraphDraggableEntity {
   VarName: string ;
   FromFrameUIAgent: string ;
   ToFrameUIAgent: string ;
   FromClassDef: string ;
   ToClassDef: string ;
   theGraphModifierUIAgent: string ;
   CreateVarX: string ;
   CreateVarY: string ;
   VarDescFromName(ThisClassDef:aClassDef, theVarName:string):aIdentifierDesc;
   NotifyDropped();
   ChangeComment(thisObject:aLightObject);
   CanBeDroppedIn();
   UnDrag();
}
declare class aGraphDraggableNewListof001Agent extends aUIAgent {
   VarName: string ;
   VarNameStaticText: string ;
}
declare class aGraphDraggableNewListof002Agent extends NewLinkAgent {
   VarName: string ;
   VarNameStaticText: string ;
}
declare class aGraphDraggableNewListof extends aGraphDraggableNewLink {
   ChangeComment();
   IsValid();
}
declare class aGraphDraggableNewConst001Agent extends aUIAgent {
   ConstName: string ;
   ConstNameStaticText: string ;
   Value: string ;
   ValueStaticText: string ;
}
declare class aGraphDraggableNewConst extends aGraphDraggableEntity {
   ConstName: string ;
   Value: string ;
   curClassDef: string ;
   NotifyDropped();
   CanBeDroppedIn();
   IsValid();
}
declare class aGraphDraggableNewType001Agent extends aUIAgent {
   TypeName: string ;
   TypeNameStaticText: string ;
}
declare class aGraphDraggableNewType extends aGraphDraggableEntity {
   TypeName: string ;
   curClassDef: string ;
   NotifyDropped();
   CanBeDroppedIn();
   IsValid();
}
declare class aGraphDraggableNewMethod001Agent extends aUIAgent {
   MethodName: string ;
   MethodNameStaticText: string ;
}
declare class aGraphDraggableNewMethod extends aGraphDraggableEntity {
   MethodName: string ;
   curClassDef: string ;
   NotifyDropped();
   CanBeDroppedIn();
   IsValid();
}
declare class aGraphDraggableNewScenario extends aGraphDraggableEntity {
   curClassDef: string ;
   NotifyDropped();
   CanBeDroppedIn();
}
declare module xGraphMMModif {
   var DraggableToolForGraphOfClasses: string ;
   var ProposedAncestorClassDef: string ;
   function SetOnlyDefModificationAllowed(Allowed:boolean);
   function GetOnlyDefModificationAllowed():boolean;
   function GetDraggableToolForGraphOfClasses():aDraggableToolForGraphOfClasses;
   function ModifyClass(thisClass:aClassDef);
   function AppendVarInClass(theVarName:string, theVarType:aType, theTypeDesc:string, theClassDef:aClassDef):boolean;
   function SetSystemPositionFromPos(X:number, Y:number);
   function SetScenarioMakerModal(Modal:boolean);
   function CreateVarInClass(theClassDef:aClassDef, X:number, Y:number):boolean;
   function CreateScenarioInClass(theClassDef:aClassDef, X:number, Y:number):boolean;
}
declare class aDraggableToolForGraphOfClasses extends aDraggableToolForGraph {
   Init();
}
declare class TypeForVarInGraphAgent extends aAutoSizeUIAgent {
}
declare class ClassDefWithTitleInGraphAgent extends aRectangleWithTitleGraphFrameUIAgent {
   DerivesFrom001: string ;
   myVars: string ;
   myMethods: string ;
   myTypes: string ;
   myConsts: string ;
   AvailableScenarios: string ;
   Descendants: string ;
   Descendants001: string ;
   myUses: string ;
   theGraphOfClassesOption: string ;
   Finalize();
   RecalcAndRedraw();
   NotifyButtonUp();
   newChoice(theString:string, Enable:boolean):aEntity;
   ClassIsOwnedByLoggedUser():boolean;
   ClassMustBeDelivered():boolean;
   NotifyButtonDblClk();
   NotifyCanReceiveDroppedObject();
   GetForeColorFor();
   GetBackColorFor();
   GetFontNameFor();
   GetFontSizeFor();
   GetFontSelsFor();
   IsSubUIAgentHidden();
   LoadValue();
   NotifyButtonDown();
   GetLinkOption(theLinkUIAgent:aLinkUIAgent, pLinkOption:string);
   GetLinkForeColorFor();
   GetLinkBackColorFor();
   GetTitleForeColor();
   GetTitleBackColor();
   GetTitleFontName();
   GetTitleFontSize();
   GetTitleFontSels();
   Modify(theUIAgent:aUIAgent);
   Consult(theUIAgent:aUIAgent);
   Delete(theUIAgent:aUIAgent);
   CheckIn(theUIAgent:aUIAgent);
   Deliver(theUIAgent:aUIAgent);
   CheckOut(theUIAgent:aUIAgent);
   Synchronize(theUIAgent:aUIAgent);
   SelectClassInTree(theUIAgent:aUIAgent);
}
declare class ClassDefInGraphAgent extends aAutoSizeGraphFrameUIAgent {
   NotifyButtonDblClk();
   NotifyCanReceiveDroppedObject();
}
declare class IdentifierDescInGraphAgent extends aAutoSizeGraphFrameUIAgent {
   aIdentifierDescHorzForGraph: string ;
   myType: string ;
   myOwner: string ;
   theGraphOfClassesOption: string ;
   theRole: string ;
   Finalize();
   GetForeColorFor();
   GetBackColorFor();
   GetFontNameFor();
   GetFontSizeFor();
   GetFontSelsFor();
   IsSubUIAgentHidden();
   LoadValue();
}
declare class SingleRoleTypeForReftoInGraphAgent extends RoleTypeForListOfTypeInGraphAgent {
}
declare class SingleRoleTypeForListofInGraphAgent extends RoleTypeForListOfTypeInGraphAgent {
}
declare class aRecordDescForGraphAgent extends aAutoSizeGraphFrameUIAgent {
}
declare class aListofReftosTypeFrameForGraphAgent extends aAutoSizeGraphFrameUIAgent {
}
declare class ListofForVarInGraphAgent extends aAutoSizeUIAgent {
}
declare class aListofReftosTypeForGraphAgent extends aAutoSizeUIAgent {
}
declare class aReftoTypeFrameForGraphAgent extends aAutoSizeGraphFrameUIAgent {
}
declare class ReftoForVarInGraphAgent extends aAutoSizeUIAgent {
}
declare class aReftoTypeForGraphAgent extends aAutoSizeUIAgent {
}
declare class aFullReferenceTypeForGraphAgent extends aAutoSizeUIAgent {
}
declare class aMethodTypeForGraphAgent extends aAutoSizeGraphFrameUIAgent {
}
declare class aBasicTypeForGraphAgent extends aAutoSizeGraphFrameUIAgent {
}
declare class aSubRangeTypeForGraph001Agent extends aAutoSizeGraphFrameUIAgent {
}
declare class aEnumTypeForGraphAgent extends aAutoSizeGraphFrameUIAgent {
}
declare class aPointerTypeForGraphAgent extends aAutoSizeGraphFrameUIAgent {
}
declare class aNumTypeForGraphAgent extends aAutoSizeGraphFrameUIAgent {
}
declare class aIntTypeForGraphAgent extends aAutoSizeGraphFrameUIAgent {
}
declare class aCStringTypeForGraphAgent extends aAutoSizeGraphFrameUIAgent {
}
declare class aBooleanTypeforGraphAgent extends aAutoSizeGraphFrameUIAgent {
}
declare class aArrayTypeForGraphAgent extends aAutoSizeGraphFrameUIAgent {
}
declare class aIdentifierDescHorzForGraphAgent extends aHorzAutoSizeUIAgent {
}
declare class aMethodDescForGraphAgent extends aAutoSizeGraphFrameUIAgent {
}
declare class aMethodDescHorzGraphAgent extends aHorzAutoSizeUIAgent {
}
declare class MethodDescNameForGraphAgent extends aAutoSizeGraphFrameUIAgent {
}
declare class aOverrideMethodDescForGraphAgent extends aAutoSizeGraphFrameUIAgent {
}
declare class aConstPointerForGraphAgent extends aAutoSizeGraphFrameUIAgent {
}
declare class aConstStringforGraphAgent extends aAutoSizeGraphFrameUIAgent {
}
declare class aConstInt4ForGraphAgent extends aAutoSizeGraphFrameUIAgent {
}
declare class aConstInt8ForGraphAgent extends aAutoSizeGraphFrameUIAgent {
}
declare class aConstCharForGraphAgent extends aAutoSizeGraphFrameUIAgent {
}
declare class aConstInt2ForGraphAgent extends aAutoSizeGraphFrameUIAgent {
}
declare class aConstBooleanForGraphAgent extends aAutoSizeGraphFrameUIAgent {
}
declare class aConstRealForGraphAgent extends aAutoSizeGraphFrameUIAgent {
}
declare class aConstEnumForGraphAgent extends aAutoSizeGraphFrameUIAgent {
}
declare class aConstIntForGraphAgent extends aAutoSizeGraphFrameUIAgent {
}
declare class aEllipseScenForGraphAgent extends aEllipseGraphFrameUIAgent {
   theGraphOfClassesOption: string ;
   theRole: string ;
   myType: string ;
   Finalize();
   GetForeColorFor();
   GetBackColorFor();
   GetFontNameFor();
   GetFontSizeFor();
   GetFontSelsFor();
   IsSubUIAgentHidden();
   LoadValue();
   GetLinkOption(theVarDesc:aIdentifierDesc, pLinkOption:string);
   GetAutoHideFor();
   GetAddLinkFor();
   GetLinkKindFor();
   GetLineKindFor();
   GetNbSymbolsFor();
   GetSymbolsAtMiddleFor();
   GetLinkForeColorFor();
   GetLinkBackColorFor();
   GetLinkTextFor();
   GetForeColor();
}
declare class aRectVarDescForGraphAgent extends aAutoSizeGraphFrameUIAgent {
}
declare class aHorzVarDescForGraphAgent extends aHorzAutoSizeUIAgent {
}
declare class aFullTypeForGraphAgent extends aAutoSizeUIAgent {
}
declare class aParameterDescForGraphAgent extends aAutoSizeGraphFrameUIAgent {
}
declare class aParameterDescHorzForGraphAgent extends aHorzAutoSizeUIAgent {
}
declare class aEllipseSimpleVarDescForGraphAgent extends aEllipseGraphFrameUIAgent {
   theGraphOfClassesOption: string ;
   Finalize();
   GetForeColorFor();
   GetBackColorFor();
   GetFontNameFor();
   GetFontSizeFor();
   GetFontSelsFor();
   IsSubUIAgentHidden();
   LoadValue();
}
declare class aTriangleForGraphAgent extends aTriangleGraphFrameUIAgent {
   Name: string ;
   DerivesFrom: string ;
   myVars: string ;
   Descendants: string ;
   Descendants001: string ;
}
declare class RectClassWithNoRightBorderAgent extends aRectNoRightBorderGraphFrameUIAgent {
   Name: string ;
   myVars: string ;
}
declare class aHexaClassDefForGraphAgent extends aHexaGraphFrameUIAgent {
   Name: string ;
   myVars: string ;
}
declare class ModuleDefForGraphAgent extends aRectangleWithTitleGraphFrameUIAgent {
   myVars: string ;
   myMethods: string ;
   myTypes: string ;
   myConsts: string ;
   AvailableScenarios: string ;
   myUses: string ;
   theGraphOfClassesOption: string ;
   Finalize();
   RecalcAndRedraw();
   ClassIsOwnedByLoggedUser():boolean;
   ClassMustBeDelivered():boolean;
   NotifyButtonDblClk();
   GetForeColorFor();
   GetBackColorFor();
   GetFontNameFor();
   GetFontSizeFor();
   GetFontSelsFor();
   IsSubUIAgentHidden();
   LoadValue();
   Modify(theUIAgent:aUIAgent);
   Consult(theUIAgent:aUIAgent);
   Delete(theUIAgent:aUIAgent);
   CheckIn(theUIAgent:aUIAgent);
   Deliver(theUIAgent:aUIAgent);
   CheckOut(theUIAgent:aUIAgent);
   Synchronize(theUIAgent:aUIAgent);
   SelectClassInTree(theUIAgent:aUIAgent);
   NotifyButtonUp();
}
declare module xActiveXDesign {
   var OCXDesignInited: string ;
   function GetIID(pUnknown:string, ClassId:string):boolean;
   function IsEventIID(pUnknown:string, EventId:string):boolean;
   function ProduceActiveXEventText(EventMethodTable:aRecordDesc, theUIAgentText:string, EventList:aListOfInstances, NameMap:aNameMapForCOMMapper);
   function ProduceActiveXMainText(MethodTable:aRecordDesc, theUIAgentText:string, EventList:aListOfInstances, NameMap:aNameMapForCOMMapper);
   function EntitiesFromIdStr(TheIdStr:string, TheConstIdStr:aConstString, TheType:aType);
   function GetEventInterface(TheCoClassIdStr:string, TheCoClass:aRecordDesc):aPointerType;
   function GetInterfacesForCoClass(TheCoClassIdStr:string, TheCoClass:aRecordDesc, MainInterface:aPointerType, EventInterface:aPointerType);
   function ProduceUIAgentInitializationAndTermination(UIAgentText:string, TheInterfaceIdStr:string);
   function ProduceUIAgentCode(UIAgentClassDef:aClassDef, TheCoClassIdStr:string, TheCoClass:aRecordDesc, EventList:aListOfInstances, ConversionOptions:string):boolean;
   function FindCoClassFromIdStrInModule(TheTypeLibModule:aModuleDef, TheCoClassIdStr:string):aRecordDesc;
   function ProduceActiveX(ScenarioName:string, Where:aModuleDef, TheTypeLibModule:aModuleDef, TheCoClassIdStr:string, ConversionOptions:string):boolean;
   function ProduceScenarioAndUIAgentClassFromActiveX(ScenarioClassName:string, UIAgentClassName:string, TheTypeLibModule:aModuleDef, TheCoClassIdStr:string, ConversionOptions:string);
}
declare class ActiveXExtensionMainAgent extends aUIAgent {
   GetAppopriateScenario: string ;
   GetAppopriateScenarioStaticText: string ;
   AddingKind: string ;
   theCOMGallery: string ;
   InstallIt: string ;
   theCOMGallery001: string ;
   ButtonsForTopOkCancel: string ;
   PreferGoldTypes: string ;
   PreferGoldTypesStaticText: string ;
   TheGauge: string ;
   Laps: string ;
   ForceInvoke: string ;
   AddingKind_ValueStored(:aUIAgent);
   theCOMGallery_Selected(:aUIAgent, SelectedRank:number):number;
   LoadValue();
}
declare class ActiveXExtensionIconAgent extends aUIAgent {
   DoYourJob001: string ;
}
declare class ActiveXExtensionNamesChoiceAgent extends aUIAgent {
   ScenarioClassName: string ;
   ScenarioClassNameStaticText: string ;
   UIAgentClassName: string ;
   UIAgentClassNameStaticText: string ;
   ScenarioClassName_ValueStored(:aUIAgent);
   UIAgentClassName_ValueStored(:aUIAgent);
}
declare class ActiveXExtensionHolderChoiceAgent extends aUIAgent {
   ScenarioName: string ;
   ScenarioNameStaticText: string ;
   Where: string ;
   WhereStaticText: string ;
   ScenarioName_ValueStored(:aUIAgent);
   Where_ValueStored(:aUIAgent);
}
declare class aActiveXExtension extends aWideExtension {
   CoClassIdStr: string ;
   ScenarioClassName: string ;
   UIAgentClassName: string ;
   ScenarioName: string ;
   ScenarioHolder: string ;
   AddingKind: string ;
   Report: string ;
   theCOMGallery: string ;
   ConversionOptions: string ;
   ForceInvoke: string ;
   SelectedRank: string ;
   TheGauge: string ;
   EnableOrDisableInstallIt();
   FolderParentName();
   DoYourJob();
   MenuText();
   GetAppopriateScenario():string;
   ClassDefNameValid(ClassDefName:string, Message:string):boolean;
   CanBeInstalled(WithMessage:boolean):boolean;
   SetTitle(TheUIAgent:aUIAgent, TheTitle:string);
   AcceptTransaction(TheUIAgent:aUIAgent);
   CancelTransaction(TheUIAgent:aUIAgent);
   InstallIt(TheUIAgent:aUIAgent);
   Init();
   Terminate();
   ButtonBMPName();
}
declare class COMGalleryDebugAgent extends aUIAgent {
   BuildCOMRegistry: string ;
   COMGalleryListBox: string ;
}
declare class COMGalleryListBoxAgent extends aListBoxUIAgent {
   CharIndex: string ;
   MinSelection: string ;
   MaxSelection: string ;
   TimeForLastChar: string ;
   LoadValue();
   NotifyGetLineText();
   ResetCharIndex();
   SelectForMoreChar(Ch:number);
   NotifyGetChar();
}
declare class aCOMGallery extends aEntity {
   COMRegistry: string ;
   TYPELIBRegistry: string ;
   TYPELIBListOfRankFromGUIDString: string ;
   hkClassesRoot: string ;
   hkCLSIDRoot: string ;
   hkTYPELIBRoot: string ;
   CreateHKEYS();
   ReleaseHKEYS();
   Init();
   Terminate();
   GetOrAppendTYPELIBDesc(TypeLibId:string, VersionString:string):aTYPELIBDesc;
   AppendCOMDesc(ComponentId:string, ComponentType:string);
   RegKeyEnumeration();
   BuildCOMRegistry();
   RankFromString(TheChar:number, CharIndex:number, MinSelection:number, MaxSelection:number);
}
declare class aCOMDesc extends aEntity {
   ComponentId: string ;
   ComponentType: string ;
   BitMap: string ;
   hkClassesRoot: string ;
   hkIdRoot: string ;
   hkId: string ;
   IdRootKeyName():string;
   GetClassesRootHKEY():string;
   GetIdRootHKEY():string;
   IdAccessRight():string;
   GetIdHKEY():string;
   ReleaseHKEYS();
   KeyForValues():string;
   ReadValue(Key:string):string;
   CreateName();
   CreateBitmap();
   GetBitmap();
   Terminate();
}
declare module wActiveXRuntime {
}
/**
*; CoUninitialize should return nil 
; start from CLS...
*/
declare module wCOM {
   var IIDHashTable: string ;
   function CoInitialize(ptr:string):string;
   function CoUninitialize();
   function MultiByteToWideChar(CodePage:string, dwFlags:string, MultiByteStr:string, cchMultiByte:number, lpWideCharStr:string, cchWideChar:number):number;
   function WideCharToMultiByte(CodePage:string, dwFlags:string, lpWideCharStr:string, cchWideChar:number, MultiByteStr:string, cchMultiByte:number, lpDefaultChar:string, lpUsedDefaultChar:string):number;
   function CLSIDFromString(lpsz:string, clsid:string):string;
   function CoCreateInstance(classId:string, pUnknownOuter:string, dwClsContext:string, interfaceId:string, ppv:string):string;
   function StringFromGUID2(rguid:string, lpsz:string, cbMax:number):number;
   function QueryPathOfRegTypeLib(globaluid:string, wVerMajor:string, wVerMinor:string, localeid:string, lpbstrPathName:string):string;
   function VariantInit(varg:string);
   function VariantChangeType(pvargDest:string, pvargSrc:string, wFlags:string, vt:string):string;
   function VariantClear(pvarg:string):string;
   function SysAllocString(sz:string):string;
   function SysFreeString(oleString:string):string;
   function SysStringLen(oleString:string):number;
   function SysStringByteLen(oleString:string):number;
   function LoadTypeLib(szFileName:string, pTypeLib:string):string;
   function LoadRegTypeLib(TheGUID:string, wVerMajor:string, wVerMinor:string, TheLCID:string, ptlib:string):string;
   function CStringToOleString(MultiByteChar:string, lpWideCharStr:string, cchWideByte:number):number;
   function CLSIDFromOLEString(lpsz:string, clsid:string):string;
   function CLSIDFromCString(sz:string, clsid:string):string;
   function IIDFromCString(sz:string, clsid:string):string;
   function Succeeded(hr:string):boolean;
   function Failed(hr:string):boolean;
   function ComRefCount(pIUnknown:string):number;
   function OleStringToCString(lpWideCharStr:string, MultiByteStr:string, cchMultiByte:number):number;
   function CStringToBSTR(theString:string):string;
   function BSTRToCString(theBSTR:string):string;
   function CStringFromGUID(rguid:string, cstr:string):string;
   function SaID(IdStr:string):string;
   function NewBSTR(theString:string):string;
   function FreeBSTR(theBSTR:string);
   function TextToBSTR(TheText:string):string;
   function BstrToText(TheText:string, TheBSTR:string);
   function tpCharToBSTR(pChar:string):string;
   function FreeBstrIntoText(TheText:string, TheBSTR:string);
   function SameComponent(pInterface1:string, pInterface2:string):boolean;
   function SafeArrayAllocDescriptor(cDims:string, ppsaOut:string);
   function SafeArrayAllocDescriptorEx(vt:string, cDims:string, ppsaOut:string);
   function SafeArrayAllocData(psa:string);
   function SafeArrayCreate(vt:string, cDims:string, rgsabound:string):string;
   function SafeArrayCreateEx(vt:string, cDims:string, rgsabound:string, pvExtra:string):string;
   function SafeArrayCopyData(psaSource:string, psaTarget:string);
   function SafeArrayDestroyDescriptor(psa:string);
   function SafeArrayDestroyData(psa:string);
   function SafeArrayDestroy(psa:string);
   function SafeArrayRedim(psa:string, psaboundNew:string);
   function SafeArrayGetDim(psa:string):string;
   function SafeArrayGetElemsize(psa:string):string;
   function SafeArrayGetUBound(psa:string, nDim:string, plUbound:string);
   function SafeArrayGetLBound(psa:string, nDim:string, plLbound:string);
   function SafeArrayLock(psa:string);
   function SafeArrayUnlock(psa:string);
   function SafeArrayAccessData(psa:string, ppvData:string);
   function SafeArrayUnaccessData(psa:string);
   function SafeArrayGetElement(psa:string, rgIndices:string, pv:string);
   function SafeArrayPutElement(psa:string, rgIndices:string, pv:string);
   function SafeArrayCopy(psa:string, ppsaOut:string);
   function SafeArrayPtrOfIndex(psa:string, rgIndices:string, ppvData:string);
   function SafeArraySetIID(psa:string, guid:string);
   function SafeArrayGetIID(psa:string, pguid:string);
   function SafeArrayGetVartype(psa:string, pvt:string);
   function SafeArrayCreateVector(vt:string, lLbound:string, cElements:string):string;
   function SafeArrayCreateVectorEx(vt:string, lLbound:string, cElements:string, pvExtra:string):string;
}
declare module wExtendedCOM {
}
/**
*This module has the routines to access the
Windows Registry Information
*/
declare module wRegistryAccess {
   function KEY_READ():number;
   function KEY_ALL_ACCESS():number;
   function RegOpenKeyExternal(KeyHandle:string, lpSubKey:string, hkResult:string):string;
   function RegOpenKey(KeyHandle:string, lpSubKey:string, hkResult:string):string;
   function RegOpenKeyExExternal(KeyHandle:string, SubKey:string, ulOptions:string, samDesired:string, hkResult:string):string;
   function RegOpenKeyEx(KeyHandle:string, SubKey:string, ulOptions:string, samDesired:string, hkResult:string):string;
   function RegQueryValueExternal(KeyHandle:string, outlpSubKey:string, lpValue:string, lpcbValue:string):string;
   function RegQueryValue(KeyHandle:string, outlpSubKey:string, lpValue:string, lpcbValue:string):string;
   function RegQueryValueExExternal(KeyHandle:string, pValueName:string, outlpReserved:string, lpType:string, lpData:string, lpcbData:string):string;
   function RegQueryValueEx(KeyHandle:string, pValueName:string, outlpReserved:string, lpType:string, lpData:string, lpcbData:string):string;
   function RegSetValueExExternal(KeyHandle:string, outlpValueName:string, Reserved:string, dwType:string, lpData:string, cbData:string):string;
   function RegSetValueEx(KeyHandle:string, outlpValueName:string, Reserved:string, dwType:string, lpData:string, cbData:string):string;
   function RegCloseKeyExternal(KeyHandle:string):string;
   function RegCloseKey(KeyHandle:string):string;
   function RegEnumKeyExternal(KeyHandle:string, dwIndex:string, lpName:string, cbName:string):string;
   function RegEnumKey(KeyHandle:string, dwIndex:string, lpName:string, cbName:string):string;
   function RegEnumKeyExExternal(KeyHandle:string, dwIndex:string, Name:string, cName:string, Reserved:string, pClass:string, pcClass:string, pftLastWriteTime:string):string;
   function RegEnumKeyEx(KeyHandle:string, dwIndex:string, Name:string, cName:string, Reserved:string, pClass:string, pcClass:string, pftLastWriteTime:string):string;
   function RegQueryInfoKeyExternal(KeyHandle:string, lpClass:string, lpcClass:string, Reserved:string, cSubKeys:string, pcMaxSubKeyLen:string, pcMaxClassLen:string, pcValues:string, pcMaxValueNameLen:string, pcMaxValueLen:string, pcbSecurityDescriptor:string, pftLastWriteTime:string):string;
   function RegQueryInfoKey(KeyHandle:string, lpClass:string, lpcClass:string, Reserved:string, cSubKeys:string, pcMaxSubKeyLen:string, pcMaxClassLen:string, pcValues:string, pcMaxValueNameLen:string, pcMaxValueLen:string, pcbSecurityDescriptor:string, pftLastWriteTime:string):string;
   function LoadLibraryEx(lpLibFileName:string, hFile:string, dwFlags:string):string;
   function FreeLibrary(hlibrary:string):boolean;
   function LoadBitmap(hInst:string, lpBitmapName:string):string;
   function DeleteObject(hObject:string):boolean;
   function CreateBMPFromHandle(hObject:string):number;
}
declare class ClassesTreeAgent extends aUIAgent {
   aClassDefPickerDT: string ;
   Descendants: string ;
   MoveToParent001: string ;
   NotifyInit();
   Descendants_Executed(SelectedRank:number, Option:number):number;
   ShowSelectObjectInTree(theRootClassDef:aClassDef, selectedObject:aClassDef);
   MoveToParent();
}
declare class aClassDefPicker002Agent extends aPickerUIAgent {
   Candidates: string ;
}
declare class ClassDefPickerAgent extends aFolderViewAgent {
}
declare class MainClassDefPickerAgent extends aPickerUIAgent {
   ClassDefPicker: string ;
}
declare class aClassOrModuleDefPicker extends aPicker {
   CandidateStringExtract();
   SearchAndPick();
   UpdateCadidatesFromMyList();
}
declare class aEntityPicker001Agent extends aPickerUIAgent {
   Candidates: string ;
}
declare class aEntityPicker extends aPicker {
   CandidateStringExtract();
}
declare class DummyForPaintAgent extends aUIAgent {
   Show();
   SetFocus();
}
declare class aScenarioPicker001Agent extends aUIAgent {
}
declare class aScenarioPicker003Agent extends aUIAgent {
   CandidatesWithScenarios: string ;
}
declare class CandidatesWithScenariosAgent extends aPickerUIAgent {
   BitMap: string ;
   GroupBox: string ;
   selectedScenario: string ;
   Candidates: string ;
   AddaptPos();
   Candidates_Selected(SelectedRank:number):number;
   NotifyInit();
   LoadValue();
   NotifyRangeHasChanged();
}
declare class aScenarioPicker extends aPicker {
   CandidateStringExtract();
}
declare class PickerWithArgumentForTypesAgent extends aUIAgent {
   PickerWithArgument: string ;
   withWhat: string ;
}
declare class aTypePicker extends aPicker {
   withWhat: string ;
   Select();
   SearchAndPick();
}
declare class aIrGraphGenerator extends aFullObject {
   theGraph: string ;
   BuilderHandle: string ;
   CurX: string ;
   CurY: string ;
   CurWidth: string ;
   CurHeight: string ;
   Generate(theAny:aIRAny, X:number, Y:number, XMax:number, YMax:number);
   ExtractIrAny(theAny:aIRAny, theVarDesc:aIdentifierDesc):aIRAny;
   RecursGetNextObjects(theAny:aIRAny, ForClassDef:aClassDef, InList:aListOfInstances);
   GetNextObjects(theAny:aIRAny):aListOfInstances;
   MoveBranch(theAny:aIRAny, X:number, Y:number);
   GenerateOpNode(theOpNode:aIROpNode, X:number, Y:number, XMax:number, YMax:number);
   GenerateStatement(theStatement:aIRStatement, X:number, Y:number, XMax:number, YMax:number);
   GenerateAny(theAny:aIRAny, X:number, Y:number, XMax:number, YMax:number);
   GenerateIrTreeFor(theMethodDesc:aMethodDesc);
}
declare class aOpGraph001Agent extends aGraphModifierUIAgent {
   MenuItem: string ;
   Print: string ;
   SetPrintingConfiguration: string ;
   MenuItem001: string ;
   SetZoom50: string ;
   SetZoom75: string ;
   SetZoom100: string ;
   SetZoom200: string ;
   SetDoubleZoom: string ;
   SetMiddleZoom: string ;
}
declare class aOpGraph extends aGraph {
}
declare class aOpGraphExtension001Agent extends aUIAgent {
   DoYourJob: string ;
   DoYourJob_Received(X:number, Y:number, Object:aFullObject):number;
   DoYourJob_CanReceive(X:number, Y:number, Object:aFullObject):number;
}
declare class aOpGraphExtension extends aWideExtension {
   TheObject: string ;
   DoYourJob();
   FolderParentName();
   MenuText();
   ButtonBMPName();
}
declare class aIRAnyAutoAgent extends aRectangleWithTitleGraphFrameUIAgent {
   NotifyDblClk();
}
declare class aIrOpNodeAutoAgent extends aEllipseGraphFrameUIAgent {
   aIrOpNode002: string ;
   CalcLinkFrom();
   CalcLinkTo();
}
declare class aIrOpNode002Agent extends aTitleAutoSizeUIAgent {
   Paint();
}
declare class aIROpBasicUnaryAutoAgent extends aIrOpNodeAutoAgent {
   theOpNode: string ;
}
declare class aIROpBinaryAutoAgent extends aIrOpNodeAutoAgent {
   L001: string ;
   R001: string ;
}
declare class aIROpSetAutoAgent extends aIrOpNodeAutoAgent {
   Values: string ;
}
declare class aIRStatementAutoAgent extends aRectangleWithTitleGraphFrameUIAgent {
   NextStatic: string ;
   CalcLinkFrom();
   CalcLinkTo();
}
declare class aIrStatementLoopAutoAgent extends aIRStatementAutoAgent {
   Statements: string ;
}
declare class aIrStatementForEachAutoAgent extends aIRStatementAutoAgent {
   Item: string ;
   Domain: string ;
   Statements: string ;
}
declare class aIrStatementForEachUsingCounterAutoAgent extends aIrStatementForEachAutoAgent {
   Counter: string ;
}
declare class aIrStatementWhileAutoAgent extends aIRStatementAutoAgent {
   Cond: string ;
   Statements: string ;
}
declare class aIrStatementForAutoAgent extends aIRStatementAutoAgent {
   Index: string ;
   Start001: string ;
   Stop: string ;
   ForStep: string ;
   Statements: string ;
}
declare class aIrStatementWithAutoAgent extends aIRStatementAutoAgent {
   WithOpId: string ;
}
declare class aIrStatementCaseAutoAgent extends aIRStatementAutoAgent {
   Value: string ;
   Choices: string ;
   Default: string ;
}
declare class aIrStatementIfAutoAgent extends aIRStatementAutoAgent {
   Cond: string ;
   ifunc_Statements: string ;
   Else_Statements: string ;
}
declare class aIrStatementReturnAutoAgent extends aIRStatementAutoAgent {
   Value: string ;
}
declare class aIrStatementCallAutoAgent extends aIRStatementAutoAgent {
   Call001: string ;
}
declare class aIrStatementAssignAutoAgent extends aIRStatementAutoAgent {
   L001: string ;
   R001: string ;
}
declare class aListAutoAgent extends aRectangleWithTitleGraphFrameUIAgent {
   Elements: string ;
}
declare class ElementsAgent extends aListOfAsAutoSizeUIAgent {
   Elements: string ;
   CheckForElements();
   CheckForVisibleObjects();
   CheckLinks();
   Paint();
   AutoWidth();
   AutoHeight();
   CalcAutoWidthHeight();
   ChangePos();
   NotifyButtonDblClk();
   NotifyButtonDown();
   NotifyButtonUp();
   NotifyMouseMove();
   Kill();
   ChangeVarAgent();
   NotifyInit();
}
declare class aIRCaseChoiceAutoAgent extends aRectangleWithTitleGraphFrameUIAgent {
   Values: string ;
   Statements: string ;
   CalcLinkTo();
   CalcLinkFrom();
}
declare class aIROpCallAutoAgent extends aIrOpNodeAutoAgent {
   Routine: string ;
   Args: string ;
}
declare class aIROpIntrinsicWithParmsAutoAgent extends aIrOpNodeAutoAgent {
   Args: string ;
}
declare class aIROpCastAutoAgent extends aIROpBasicUnaryAutoAgent {
   RecastAsTypeIdOp: string ;
}
declare class aIRChoiceRange002Agent extends aIRAnyAutoAgent {
   Min001: string ;
   Max001: string ;
}
declare class aIrStatementDecByConstAutoAgent extends aIRStatementAutoAgent {
   L001: string ;
}
declare class aIrStatementIncByConstAutoAgent extends aIRStatementAutoAgent {
   L001: string ;
}
declare class aOpWriteElementAutoAgent extends aIROpBasicUnaryAutoAgent {
   Modifiers: string ;
   ModifiersBis: string ;
}
declare class aIrStatementCommentAutoAgent extends aIRStatementAutoAgent {
   CalcLinkFrom();
   CalcLinkTo();
}
declare class aOpSqlExecAutoAgent extends aIrOpNodeAutoAgent {
   SqlString: string ;
   UsingCursor: string ;
}
declare class aOQLOpSelectAutoAgent extends aIrOpNodeAutoAgent {
   WhereOp: string ;
   VarsList: string ;
   FromList: string ;
   OrderBy: string ;
}
declare class aOQLStFetchAutoAgent extends aIRStatementAutoAgent {
   IntoList: string ;
   UsingCursor: string ;
}
declare class aSqlExecStAutoAgent extends aRectangleWithTitleGraphFrameUIAgent {
   ExecOp: string ;
}
declare class aOQLStSelectAutoAgent extends aRectangleWithTitleGraphFrameUIAgent {
   SelectOp: string ;
}
declare class PickerWithArgumentForAPAgent extends aUIAgent {
   aAPPicker001: string ;
}
declare class APPickerOnlyArgumentsAgent extends aUIAgent {
   GridCtrl: string ;
   GridCtrl_Init(:aUIAgent):number;
}
declare class aAPPicker001Agent extends aSplitViewAgent {
}
declare class aAPPicker extends aPicker {
   arguments: string ;
   InitMultiArguments();
   InitArguments(usingSelectionScenario:aScenario);
   SearchAndPick();
   FillArguments();
   Select();
   Terminate();
}
declare class aBitmapGraphScenario extends aDrawGraphScenario {
   DefaultBitmapName: string ;
   DefaultUIAgentClassId();
   Paint(theWindow:string, ps:string, AbsX:number, AbsY:number, Dw:number, Dh:number, x:number, y:number, Width:number, Height:number, theQVarPresentor:aQVPBitmapForGraph);
   NewQVarPresentor();
   GetQVarPresentor();
}
declare class aBitmapGraphUIAgent extends aDrawGraphUIAgent {
   Paint();
}
declare class aScenarioAsWindowOverride_Agent extends aUIAgent {
   DefaultAutoScale: string ;
   DefaultAutoCenter: string ;
   DefaultClonageAllowed: string ;
}
declare class aDrawGraphScenario extends aScenario {
   DefaultAutoScale: string ;
   DefaultAutoCenter: string ;
   DefaultClonageAllowed: string ;
   DefaultUIAgentClassId();
   ScenarioKindSet();
   CanUse();
   GetQVarPresentor();
   NewQVarPresentor();
   ModifyKinds();
   GetChar();
   IsToBeCloneAll();
   WillMofifyThisQVPOnGetChar();
}
declare class aDrawGraphUIAgent extends aGraphUIAgent {
   ChangePos();
   NotifyButtonDblClk();
   NotifyHostRangeHasChanged();
   AutoWidth();
   CalcAutoWidthHeight();
}
declare class aEllipseGraphScenario extends aDrawGraphScenario {
   DefaultUIAgentClassId();
   Paint();
}
declare class aEllipseGraphUIAgent extends aDrawGraphUIAgent {
   Paint();
}
declare class MoreQVPVirtualOverride_Override2Agent extends MoreQVPVirtualOverride_Agent {
   BitmapName: string ;
   BitmapNameStaticText: string ;
}
declare class aQVPBitmapForGraph extends aQVPXXXForGraph {
   BitmapName: string ;
}
declare class MoreQVPVirtualOverride_OverrideAgent extends MoreQVPVirtualOverride_Agent {
   Increasing: string ;
}
declare class aQVPSegmentForGraph extends aQVPXXXForGraph {
   Increasing: string ;
}
declare class MoreQVPVirtualOverride_Override4Agent extends MoreQVPVirtualOverride_Agent {
   Shape: string ;
   Ratio: string ;
   RatioStaticText: string ;
}
declare class aQVPTrapezeForGraph extends aQVPXXXForGraph {
   Shape: string ;
   Ratio: string ;
}
declare class MoreQVPVirtualOverride_Agent extends aUIAgent {
   AutoScale: string ;
   AutoCenter: string ;
}
declare class aQVPXXXForGraph extends aQVarPresentor {
   AutoScale: string ;
   AutoCenter: string ;
   RecalcAutoScale();
   BeforeAccept();
}
declare class aRectangleGraphScenario extends aDrawGraphScenario {
   DefaultUIAgentClassId();
   Paint();
}
declare class aRectangleGraphUIAgent extends aDrawGraphUIAgent {
   Paint();
}
declare class aScenarioAsWindowOverride_OverrideAgent extends aScenarioAsWindowOverride_Agent {
   DefaultIncreasing: string ;
}
declare class aSegmentGraphScenario extends aDrawGraphScenario {
   DefaultIncreasing: string ;
   DefaultUIAgentClassId();
   Paint();
   NewQVarPresentor();
   GetQVarPresentor();
}
declare class aSegmentGraphUIAgent extends aDrawGraphUIAgent {
   Paint();
}
declare class aTextGraphScenario extends aDrawGraphScenario {
   DefaultUIAgentClassId();
   Paint();
}
declare class aTextGraphUIAgent extends aDrawGraphUIAgent {
   Paint();
}
declare class aTrapezeGraphScenario extends aDrawGraphScenario {
   DefaultShape: string ;
   DefaultRatio: string ;
   DefaultUIAgentClassId();
   Paint();
   NewQVarPresentor();
   GetQVarPresentor();
}
declare class aTrapezeGraphUIAgent extends aDrawGraphUIAgent {
   Paint();
}
declare class RectangleAgent extends aRectangleGraphUIAgent {
}
declare class EllipseAgent extends aEllipseGraphUIAgent {
}
declare class SegmentAgent extends aSegmentGraphUIAgent {
}
declare class TextAgent extends aTextGraphUIAgent {
}
declare class BitmapForGraphAgent extends aBitmapGraphUIAgent {
}
declare class TrapezeAgent extends aTrapezeGraphUIAgent {
}
declare module wGraphControls {
}
declare class MainForReparserAgent extends RootMDIForReparserAgent {
   DoActionOnAllElement: string ;
   ParseListAndUIAgents: string ;
}
declare class MainForConsistencyCheckerAgent extends RootMDIForReparserAgent {
   DoActionOnAllElement: string ;
}
declare class aWConsistencyChecker extends aWReParser {
   ParseOnlyTheList();
   StringExtract();
   CanBeReparsed();
}
declare class aWConsistencyCheckerExtension001Agent extends aUIAgent {
   DoYourJob: string ;
}
declare class aWConsistencyCheckerExtension extends aWideExtension {
   theGlobalChecker: string ;
   DoYourJob();
   FolderParentName();
   MenuText();
   ButtonBMPName();
}
declare class BitmapControlAgent extends aBitMapControlAgent {
   LoadValue();
}
declare class _25_12_1999_Scroll_VerticalAgent extends aUIAgent {
   dStaticText: string ;
   mStaticText: string ;
   yStaticText: string ;
   DaySpinButton: string ;
   MonthSpinButton: string ;
   YearSpinButton: string ;
}
declare class Dec_12_1999Agent extends aUIAgent {
   mm: string ;
   d001: string ;
   y: string ;
   StaticText: string ;
}
declare class DayOfTheWeekAgent extends aCStringControlAgent {
   LoadValue();
   StoreValue();
}
declare class MS_OCXCalendarAgent extends aCalendarCtrlAgent {
   LoadValue();
   StoreValue();
   NotifyNewYear();
   NotifyNewMonth();
   NotifyAfterUpdate();
}
declare class _25_12_1999Agent extends aUIAgent {
   d001: string ;
   m001: string ;
   y: string ;
   StaticText: string ;
   StaticText001: string ;
}
declare class _25_12_1999StaticAgent extends aCStringControlAgent {
   LoadValue();
}
declare class _23_59_00Agent extends aUIAgent {
   h001: string ;
   m001: string ;
   s001: string ;
   StaticText: string ;
   StaticText001: string ;
}
declare class _23_59_00StaticAgent extends aCStringControlAgent {
   LoadValue();
}
declare class aCalendarCtrlAgent extends aXXXAsOleControlUIAgent {
   AfterUpdateAddr: string ;
   BeforeUpdateAddr: string ;
   NewMonthAddr: string ;
   NewYearAddr: string ;
   NotifyAfterUpdate();
   AfterUpdate():number;
   NotifyBeforeUpdate(Cancel:string);
   BeforeUpdate(Cancel:string):number;
   NotifyNewMonth();
   NewMonth():number;
   NotifyNewYear();
   NewYear():number;
   SetBackColor1(BackColor:number);
   GetBackColor1():number;
   SetDay(Day:number);
   GetDay():number;
   SetDayFont(DayFont:string);
   GetDayFont():string;
   SetDayFontColor(DayFontColor:number);
   GetDayFontColor():number;
   SetDayLength(DayLength:number);
   GetDayLength():number;
   SetFirstDay(FirstDay:number);
   GetFirstDay():number;
   SetGridCellEffect(GridCellEffect:number);
   GetGridCellEffect():number;
   SetGridFont(GridFont:string);
   GetGridFont():string;
   SetGridFontColor(GridFontColor:number);
   GetGridFontColor():number;
   SetGridLinesColor(GridLinesColor:number);
   GetGridLinesColor():number;
   SetMonth(Month:number);
   GetMonth():number;
   SetMonthLength(MonthLength:number);
   GetMonthLength():number;
   SetShowDateSelectors(ShowDateSelectors:boolean);
   GetShowDateSelectors():boolean;
   SetShowDays(ShowDays:boolean);
   GetShowDays():boolean;
   SetShowHorizontalGrid(ShowHorizontalGrid:boolean);
   GetShowHorizontalGrid():boolean;
   SetShowTitle(ShowTitle:boolean);
   GetShowTitle():boolean;
   SetShowVerticalGrid(ShowVerticalGrid:boolean);
   GetShowVerticalGrid():boolean;
   SetTitleFont(TitleFont:string);
   GetTitleFont():string;
   SetTitleFontColor(TitleFontColor:number);
   GetTitleFontColor():number;
   SetValue1(Value:string);
   GetValue1():string;
   SetValueIsNull(ValueIsNull:boolean);
   GetValueIsNull():boolean;
   SetYear(Year:number);
   GetYear():number;
   NextDay();
   NextMonth();
   NextWeek();
   NextYear();
   PreviousDay();
   PreviousMonth();
   PreviousWeek();
   PreviousYear();
   Refresh();
   Today();
   AboutBox();
   Finalize();
}
declare class aCalendarCtrlScenario extends aXXXAsOleControl {
   Init();
   DefaultUIAgentClassId();
   InitEvents();
}
declare class GenCPPFileNamesAgent extends aUIAgent {
   AppliHeaderFileName: string ;
   AppliHeaderFileNameStaticText: string ;
   OFMFileName: string ;
   OFMFileNameStaticText: string ;
   NameSpaceName: string ;
   NameSpaceNameStaticText: string ;
   CanModifySource: string ;
   ContinueProduceAfterReturn: string ;
   GenerateGoldOQLAsComment: string ;
   GenerateConsistencyInformation: string ;
   DoNotProduceOQLForAllDBDef: string ;
   GetIde: string ;
   ProduceOQLOnlyForTheseDBDefs: string ;
   NbClassesOrModulesPerObj: string ;
   NbClassesOrModulesPerObjStaticText: string ;
   DoNotExportLeafClasses: string ;
   NbSimultaneousCompilations: string ;
   NbSimultaneousCompilationsStaticText: string ;
   DoNotExportMotherIfAllLeavesNotExported: string ;
   GeneratePerfAnalyserInfo: string ;
   DoNotProduceOQLForAllDBDef_ValueStored(:aUIAgent);
   GetIde_ValueLoaded(:aUIAgent);
   ProduceOQLOnlyForTheseDBDefs_ValueLoaded(:aUIAgent);
}
declare class FolderForGenCppPackageAgent extends aFolderViewAgent {
}
declare class GenCppPackageSubtractAgent extends aUIAgent {
   PushButton: string ;
   PackagesToBeSubtracted: string ;
   PushButton001: string ;
   aCPPGeneratorDT: string ;
   GenCppEntities: string ;
   PushButton_Executed(:aUIAgent, SelectedRank:number, Option:number):number;
   PushButton001_Executed(:aUIAgent, SelectedRank:number, Option:number):number;
   LoadValue();
}
declare class leftPartOfClassDBDefDesignerAgent extends aUIAgent {
   GetCurrentDBDef: string ;
   PickDBDefThenClone: string ;
   ClassDBDefs: string ;
   LoadValue();
}
declare class aDataBaseDesigner001Agent extends virtualPartofDesignerAgent {
   aDataBaseDesignerClassDefAndDB: string ;
}
declare class virtualPartofDesignerAgent extends aUIAgent {
}
declare class OracleDBDefOptionsAgent extends aUIAgent {
   ActivateServerTrace: string ;
}
declare module xCOMWrapperDesign {
   function GetTypeInfoName(pTypeInfo:string):string;
   function GetVtblFromParameter(theParameter:aParameterDesc):aRecordDesc;
   function GetInterfaceNameFromVtblRecordDesc(theVtblRecordDesc:aRecordDesc):string;
   function IsInterfaceInplemented(pIUnknown:string, theConst:aConstDesc):boolean;
   function GetInfos(ComIdStr:string, Interfaces:aListOfInstances, MainInterfaceName:string, DispInterface:boolean, DualInterface:boolean, CoCreateInstanceInspectionModeSet:string);
   function GetInterfaceNameFromConst(theConst:aConstDesc):string;
   function CreateBrokerIfNeeded(pIUnknown:string, theConst:aConstDesc, InterfaceBrokers:aListOfInstances);
   function CreateWrapperClassDef(ClassNameToCreate:string, Ancestor:aClassDef, ComIdStr:string, InterfaceBrokers:aListOfInstances, ComponentCreationInInit:boolean, CoCreateInstanceModeSet:string);
   function AddPropertyNeededTypeInfo(pTypeInfo:string, pTypeAttr:string, Index:number);
   function AddMethodNeededTypeInfo(pTypeInfo:string, pTypeAttr:string, Index:number);
   function ProduceProperty(pTypeInfo:string, pTypeAttr:string, Index:number, theText:string, NameMap:aNameMapForCOMMapper);
   function AddInStrings(theStrings:aListOfInstances, StringToAdd:string);
   function GetAndRemoveString(theStrings:aListOfInstances):string;
   function ProduceVtblEntry(pTypeInfo:string, pTypeAttr:string, Index:number, theText:string, NameMap:aNameMapForCOMMapper, VtblName:string, DispInterface:boolean, Line:number);
   function ProduceMethod(pTypeInfo:string, pTypeAttr:string, Index:number, theText:string, NameMap:aNameMapForCOMMapper, ForVtbl:boolean, VtblName:string, IsDispInterface:boolean);
   function ProduceMethodUsingMethodType(MethodType:aMethodType, MethodName:string, InterfaceName:string, IntoText:string, NameMap:aNameMapForCOMMapper);
   function ProduceComponentInterface(pUnknown:string, ClassNameToCreate:string, ConversionOptions:string);
   function PointerTypePointingToType(InModule:aModuleDef, PointedType:aType):aPointerType;
   function AddTheMethodInvoke(IntoText:string, NameMap:aNameMapForCOMMapper);
   function ProduceComponentInterfaceUsingInterfaceType(InterfaceType:aPointerType, TheWrapperClassDef:aClassDef, ConversionOptions:string);
   function CreateWrapper(ClassNameToCreate:string, Ancestor:aClassDef, ComIdStr:string, ComponentCreationInInit:boolean, CoCreateInstanceModeSet:string, CoCreateInstanceInspectionModeSet:string, ConversionOptions:string);
   function CreateAllBrokersForModule(TheModule:aModuleDef);
   function GetOrCreateAllBrokersForModule(TheModule:aModuleDef, Brokers:aListOfInstances);
   function GetOrCreateBrokersForCoClass(TheCoClassRecordType:aRecordDesc, Brokers:aListOfInstances);
   function CreateAllBrokers();
   function GetInheritedTypeInfo(pTypeInfo:string):string;
   function ChangeAndFreeBSTR(bstrString:string, str:string);
   function GetAcceptableClassName(ClassName:string):string;
   function GetMainInterfaceConstIdStr(ComIdStr:string, CoCreateInstanceInspectionModeSet:string, UsingModule:aModuleDef):aConstString;
   function CreateWrapperClassDefUsingModule(ClassNameToCreate:string, Ancestor:aClassDef, ComIdStr:string, MainInterfaceConstIdStr:aConstString, InterfaceBrokers:aListOfInstances, ComponentCreationInInit:boolean, CoCreateInstanceModeSet:string, UsingModule:aModuleDef):aClassDef;
   function GetCoClassRecordDescFromIdString(TheModule:aModuleDef, IdString:string):aRecordDesc;
   function GetOrCreateBrokersIfNeeded(pIUnknown:string, ForModule:aModuleDef, Brokers:aListOfInstances, NameMap:aNameMapForCOMMapper);
   function GetBrokersForCommonInterfaces(COMIdStr:string, CoCreateInstanceInspectionModeSet:string, Brokers:aListOfInstances);
   function GetDefaultInterfaceType(CoClassesInterfaces:aRecordDesc):aPointerType;
   function CreateWrapperUsingModule(ClassNameToCreate:string, Ancestor:aClassDef, ComIdStr:string, ComponentCreationInInit:boolean, CoCreateInstanceModeSet:string, CoCreateInstanceInspectionModeSet:string, ConversionOptions:string, UsingModule:aModuleDef);
}
declare class COMWrapperExtensionMainAgent extends aUIAgent {
   theAllComGallery: string ;
   COMGalleryListBox: string ;
   ButtonsForTopOkCancel: string ;
   COMMapperClassName: string ;
   COMMapperClassNameStaticText: string ;
   Ancestor: string ;
   AncestorStaticText: string ;
   InstallIt: string ;
   ShowAdvanced: string ;
   ShowMoreInfo: string ;
   StaticText: string ;
   TheGauge: string ;
   Laps: string ;
   NotifyInit();
   COMMapperClassName_ValueStored(:aUIAgent);
   COMGalleryListBox_Selected(SelectedRank:number):number;
   InstallIt_Init(:aUIAgent):number;
   LoadValue();
}
declare class COMWrapperExtensionIconAgent extends aUIAgent {
   DoYourJob: string ;
}
declare class COMWrapperExtensionOptionsAgent extends aUIAgent {
   ComponentCreationInInit: string ;
   CoCreateInstanceModeSetGroupBox: string ;
   CoCreateInstanceInspectionModeSetGroupBox: string ;
   ConversionOptions: string ;
   ConversionOptionsGroupBox: string ;
   CoCreateInstanceModeSet: string ;
   CoCreateInstanceInspectionModeSet: string ;
   CallOption: string ;
   CallOptionGroupBox: string ;
   ComponentCreationInInit_Init(:aUIAgent):number;
   ComponentCreationInInit_ValueStored(:aUIAgent);
}
declare class COMWrapperExtensionMoreInfoAgent extends aUIAgent {
   ListBox: string ;
   COMId: string ;
   COMIdStaticText: string ;
   StaticText: string ;
   StaticText001: string ;
   EntryField: string ;
   NotifyInit();
}
declare class aCOMWrapperExtension extends aWideExtension {
   COMId: string ;
   COMMapperClassName: string ;
   Ancestor: string ;
   theAllComGallery: string ;
   ComponentCreationInInit: string ;
   CoCreateInstanceModeSet: string ;
   CoCreateInstanceInspectionModeSet: string ;
   ConversionOptions: string ;
   CallOption: string ;
   SelectedRank: string ;
   TheGauge: string ;
   EnableOrDisableInstallIt();
   COMIdAndMapperClassNameFromRank();
   Init();
   FolderParentName();
   DoYourJob();
   MenuText();
   ShowAdvanced();
   ShowMoreInfo();
   ClassDefNameValid(ClassDefName:string, Message:string):boolean;
   CanBeInstalled(WithMessage:boolean):boolean;
   SetTitle(TheUIAgent:aUIAgent, TheTitle:string);
   AcceptTransaction(TheUIAgent:aUIAgent);
   CancelTransaction(TheUIAgent:aUIAgent);
   InstallIt(TheUIAgent:aUIAgent);
   ImportFromIDL();
   Terminate();
   ButtonBMPName();
}
declare class aAllComGallery extends aCOMGallery {
   RegKeyEnumeration();
}
declare class aInterfaceProducer001Agent extends aUIAgent {
   GoldDef: string ;
}
/**
*This class will generate a the WAM record structure that can be used to access COM components. It expects a
pointer to the typelib as the input.

*/
declare class aInterfaceProducer extends aLightObject {
   GoldDef: string ;
   ErrorString: string ;
   ErrorCode: string ;
   ComErrorCode: string ;
   RaiseError(ErrorString:string, ErrorCode:string, ComErrorCode:string);
   LastError():string;
   LastErrorString():string;
   LastComError():string;
   GetWAMStructure(WAMDef:string);
   ChangeAndFreeBSTR(bstrString:string, str:string);
   VTtoString(vt:string):string;
   StripLeadingMarks(UserDefinedVariable:string);
   TYPEDESCtoString(ptrTypeInfo:string, ptdesc:string):string;
   DumpFunc(ptrTypeInfo:string, pattr:string, index:string):string;
   DumpVar(ptrTypeInfo:string, pattr:string, index:string):string;
   DumpConst(ptrTypeInfo:string, pattr:string, index:number, fConst:boolean):string;
   GenerateTypedef(ptrTypeInfo:string):string;
   GenerateInterface(ptrTypeInfo:string):string;
   GenerateDisPatchInterface(ptrTypeInfo:string):string;
   GenerateWAMStructure(ptrTypeLib:string):string;
}
declare class bIUnknown extends aLightObject {
   pInterface: string ;
   LastResult: string ;
   QueryInterface(pIUnknown:string);
   MapInterface(pInterface:string);
   GetInterface():string;
   ReleaseInterface();
   Terminate();
}
declare module wComWrapperRunTime {
   function GetInterfaceFor(thebIUnknown:bIUnknown):string;
   function RemapInterfaceFor(BrokerClassDef:aClassDef, thebIUnknown:bIUnknown, pIUnknown:string);
   function Invoke(pDispatch:string, MethodID:number, Flags:number, ResultType:number, ResultAddr:string, ParamInfo:string, Parameters:string);
   function SetProperty(pDispatch:string, PropertyID:number, PropertyType:number, Property:string);
   function GetProperty(pDispatch:string, PropertyID:number, PropertyType:number, Property:string);
}
declare class aTestCom extends aFullObject {
   Test();
}
declare class bFont extends bIDispatch {
   QueryInterface();
}
declare class bIAdviseSink extends bIUnknown {
   QueryInterface();
   RemoteOnDataChange(pFormatetc:string, pStgmed:string);
   RemoteOnViewChange(dwAspect:string, lindex:string);
   RemoteOnRename(pmk:bIMoniker);
   RemoteOnSave();
   RemoteOnClose();
}
declare class bIAdviseSink2 extends bIAdviseSink {
   QueryInterface();
   RemoteOnLinkSrcChange(pmk:bIMoniker);
}
declare class bIBindProtocol extends bIUnknown {
   QueryInterface();
   CreateBinding(szUrl:string, pbc:bIBindCtx, ppb:bIBinding);
}
declare class bIBindStatusCallback extends bIUnknown {
   QueryInterface();
   OnStartBinding(dwReserved:string, pib:bIBinding);
   GetPriority(pnPriority:string);
   OnLowResource(reserved:string);
   OnProgress(ulProgress:string, ulProgressMax:string, ulStatusCode:string, szStatusText:string);
   OnStopBinding(hresult:string, szError:string);
   RemoteGetBindInfo(grfBINDF:string, pbindinfo:string, pstgmed:string);
   RemoteOnDataAvailable(grfBSCF:string, dwSize:string, pformatetc:string, pstgmed:string);
   OnObjectAvailable(riid:string, punk:bIUnknown);
}
declare class bIBinding extends bIUnknown {
   QueryInterface();
   Abort();
   Suspend();
   Resume();
   SetPriority(nPriority:string);
   GetPriority(pnPriority:string);
   RemoteGetBindResult(pclsidProtocol:string, pdwResult:string, pszResult:string, dwReserved:string);
}
declare class bIClassActivator extends bIUnknown {
   QueryInterface();
   GetClassObject(rclsid:string, dwClassContext:string, locale:string, riid:string, ppv:string);
}
declare class bICatRegister extends bIUnknown {
   QueryInterface();
   RegisterCategories(cCategories:string, rgCategoryInfo:string);
   UnRegisterCategories(cCategories:string, rgcatid:string);
   RegisterClassImplCategories(rclsid:string, cCategories:string, rgcatid:string);
   UnRegisterClassImplCategories(rclsid:string, cCategories:string, rgcatid:string);
   RegisterClassReqCategories(rclsid:string, cCategories:string, rgcatid:string);
   UnRegisterClassReqCategories(rclsid:string, cCategories:string, rgcatid:string);
}
declare class bICatInformation extends bIUnknown {
   QueryInterface();
   EnumCategories(lcid:string, ppenumCategoryInfo:bIEnumCATEGORYINFO);
   GetCategoryDesc(rcatid:string, lcid:string, pszDesc:string);
   EnumClassesOfCategories(cImplemented:string, rgcatidImpl:string, cRequired:string, rgcatidReq:string, ppenumClsid:bIEnumGUID);
   IsClassOfCategories(rclsid:string, cImplemented:string, rgcatidImpl:string, cRequired:string, rgcatidReq:string);
   EnumImplCategoriesOfClass(rclsid:string, ppenumCatid:bIEnumGUID);
   EnumReqCategoriesOfClass(rclsid:string, ppenumCatid:bIEnumGUID);
}
declare class bIClassFactory extends bIUnknown {
   QueryInterface();
   RemoteCreateInstance(riid:string, ppvObject:bIUnknown);
   RemoteLockServer(fLock:string);
}
declare class bIChannelHook extends bIUnknown {
   QueryInterface();
   ClientGetSize(uExtent:string, riid:string, pDataSize:string);
   ClientFillBuffer(uExtent:string, riid:string, pDataSize:string, pDataBuffer:string);
   ClientNotify(uExtent:string, riid:string, cbDataSize:string, pDataBuffer:string, lDataRep:string, hrFault:string);
   ServerNotify(uExtent:string, riid:string, cbDataSize:string, pDataBuffer:string, lDataRep:string);
   ServerGetSize(uExtent:string, riid:string, hrFault:string, pDataSize:string);
   ServerFillBuffer(uExtent:string, riid:string, pDataSize:string, pDataBuffer:string, hrFault:string);
}
declare class bIBindCtx extends bIUnknown {
   QueryInterface();
   RegisterObjectBound(punk:bIUnknown);
   RevokeObjectBound(punk:bIUnknown);
   ReleaseBoundObjects();
   RemoteSetBindOptions(pbindopts:string);
   RemoteGetBindOptions(pbindopts:string);
   GetRunningObjectTable(pprot:bIRunningObjectTable);
   RegisterObjectParam(pszKey:string, punk:bIUnknown);
   GetObjectParam(pszKey:string, ppunk:bIUnknown);
   EnumObjectParam(ppenum:bIEnumString);
   RevokeObjectParam(pszKey:string);
}
declare class bIClassFactory2 extends bIClassFactory {
   QueryInterface();
   GetLicInfo(pLicInfo:string);
   RequestLicKey(dwReserved:string, pBstrKey:string);
   RemoteCreateInstanceLic(riid:string, bstrKey:string, ppvObj:bIUnknown);
}
declare class bIAuthenticate extends bIUnknown {
   QueryInterface();
   Authenticate(phwnd:string, pszUsername:string, pszPassword:string);
}
declare class bIConnectionPoint extends bIUnknown {
   QueryInterface();
   GetConnectionInterface(pIID:string);
   GetConnectionPointContainer(ppCPC:bIConnectionPointContainer);
   Advise(pUnkSink:bIUnknown, pdwCookie:string);
   Unadvise(dwCookie:string);
   EnumConnections(ppenum:bIEnumConnections);
}
declare class bIConnectionPointContainer extends bIUnknown {
   QueryInterface();
   EnumConnectionPoints(ppenum:bIEnumConnectionPoints);
   FindConnectionPoint(riid:string, ppCP:bIConnectionPoint);
}
declare class bIContinue extends bIUnknown {
   QueryInterface();
   FContinue();
}
declare class bICodeInstall extends bIWindowForBindingUI {
   QueryInterface();
   OnCodeInstallProblem(ulStatusCode:string, szDestination:string, szSource:string, dwReserved:string);
}
declare class bICreateErrorInfo extends bIUnknown {
   QueryInterface();
   SetGuid(rguid:string);
   SetSource(szSource:string);
   SetDescription(szDescription:string);
   SetHelpFile(szHelpFile:string);
   SetHelpContext(dwHelpContext:string);
}
declare class bICreateTypeLib extends bIUnknown {
   QueryInterface();
   CreateTypeInfo(szName:string, tkind:string, ppCTInfo:bICreateTypeInfo);
   SetName(szName:string);
   SetVersion(wMajorVerNum:string, wMinorVerNum:string);
   SetGuid(guid:string);
   SetDocString(szDoc:string);
   SetHelpFileName(szHelpFileName:string);
   SetHelpContext(dwHelpContext:string);
   SetLcid(lcid:string);
   SetLibFlags(uLibFlags:string);
   SaveAllChanges();
}
declare class bICreateTypeInfo2 extends bICreateTypeInfo {
   QueryInterface();
   DeleteFuncDesc(index:string);
   DeleteFuncDescByMemId(memid:string, invkind:string);
   DeleteVarDesc(index:string);
   DeleteVarDescByMemId(memid:string);
   DeleteImplType(index:string);
   SetCustData(guid:string, pVarVal:string);
   SetFuncCustData(index:string, guid:string, pVarVal:string);
   SetParamCustData(indexFunc:string, indexParam:string, guid:string, pVarVal:string);
   SetVarCustData(index:string, guid:string, pVarVal:string);
   SetImplTypeCustData(index:string, guid:string, pVarVal:string);
   SetHelpStringContext(dwHelpStringContext:string);
   SetFuncHelpStringContext(index:string, dwHelpStringContext:string);
   SetVarHelpStringContext(index:string, dwHelpStringContext:string);
   Invalidate();
   SetName(szName:string);
}
declare class bICreateTypeInfo extends bIUnknown {
   QueryInterface();
   SetGuid(guid:string);
   SetTypeFlags(uTypeFlags:string);
   SetDocString(pStrDoc:string);
   SetHelpContext(dwHelpContext:string);
   SetVersion(wMajorVerNum:string, wMinorVerNum:string);
   AddRefTypeInfo(pTInfo:bITypeInfo, phRefType:string);
   AddFuncDesc(index:string, pFuncDesc:string);
   AddImplType(index:string, hreftype:string);
   SetImplTypeFlags(index:string, implTypeFlags:number);
   SetAlignment(cbAlignment:string);
   SetSchema(pStrSchema:string);
   AddVarDesc(index:string, pVarDesc:string);
   SetFuncAndParamNames(index:string, rgszNames:string, cNames:string);
   SetVarName(index:string, szName:string);
   SetTypeDescAlias(pTDescAlias:string);
   DefineFuncAsDllEntry(index:string, szDllName:string, szProcName:string);
   SetFuncDocString(index:string, szDocString:string);
   SetVarDocString(index:string, szDocString:string);
   SetFuncHelpContext(index:string, dwHelpContext:string);
   SetVarHelpContext(index:string, dwHelpContext:string);
   SetMops(index:string, bstrMops:string);
   SetTypeIdldesc(pIdlDesc:string);
   LayOut();
}
declare class bICreateTypeLib2 extends bICreateTypeLib {
   QueryInterface();
   DeleteTypeInfo(szName:string);
   SetCustData(guid:string, pVarVal:string);
   SetHelpStringContext(dwHelpStringContext:string);
   SetHelpStringDll(szFileName:string);
}
declare class bIDataAdviseHolder extends bIUnknown {
   QueryInterface();
   Advise(pDataObject:bIDataObject, pFetc:string, advf:string, pAdvise:bIAdviseSink, pdwConnection:string);
   Unadvise(dwConnection:string);
   EnumAdvise(ppenumAdvise:bIEnumSTATDATA);
   SendOnDataChange(pDataObject:bIDataObject, dwReserved:string, advf:string);
}
declare class bIDataObject extends bIUnknown {
   QueryInterface();
   RemoteGetData(pformatetcIn:string, pRemoteMedium:string);
   RemoteGetDataHere(pFormatetc:string, pRemoteMedium:string);
   QueryGetData(pFormatetc:string);
   GetCanonicalFormatEtc(pformatectIn:string, pformatetcOut:string);
   RemoteSetData(pFormatetc:string, pmedium:string, fRelease:string);
   EnumFormatEtc(dwDirection:string, ppenumFormatEtc:bIEnumFORMATETC);
   DAdvise(pFormatetc:string, advf:string, pAdvSink:bIAdviseSink, pdwConnection:string);
   DUnadvise(dwConnection:string);
   EnumDAdvise(ppenumAdvise:bIEnumSTATDATA);
}
declare class bIDispatch extends bIUnknown {
   QueryInterface();
   GetTypeInfoCount(pctinfo:string);
   GetTypeInfo(iTInfo:string, localeId:string, ppTInfo:bITypeInfo);
   GetIDsOfNames(piid:string, rgszNames:string, cNames:string, lcid:string, dispatchId:string);
   Invoke(dispIdMember:string, piid:string, localeId:string, wFlags:string, dispatchParms:string, pVarResult:string, pExcepInfo:string, puArgErr:string);
}
declare class bIContinueCallback extends bIUnknown {
   QueryInterface();
   FContinue();
   FContinuePrinting(nCntPrinted:string, nCurPage:string, pwszPrintStatus:string);
}
declare class bIClientSecurity extends bIUnknown {
   QueryInterface();
   QueryBlanket(pProxy:bIUnknown, pAuthnSvc:string, pAuthzSvc:string, pServerPrincName:string, pAuthnLevel:string, pImpLevel:string, pAuthInfo:string, pCapabilites:string);
   SetBlanket(pProxy:bIUnknown, AuthnSvc:string, AuthzSvc:string, pServerPrincName:string, AuthnLevel:string, ImpLevel:string, pAuthInfo:string, Capabilities:string);
   CopyProxy(pProxy:bIUnknown, ppCopy:bIUnknown);
}
declare class bIEnumCATEGORYINFO extends bIUnknown {
   QueryInterface();
   Next1(celt:string, rgelt:string, pceltFetched:string);
   Skip(celt:string);
   Reset();
   Clone1(ppenum:bIEnumCATEGORYINFO);
}
declare class bIEnumGUID extends bIUnknown {
   QueryInterface();
   Next1(celt:string, rgelt:string, pceltFetched:string);
   Skip(celt:string);
   Reset();
   Clone1(ppenum:bIEnumGUID);
}
declare class bIEnumFORMATETC extends bIUnknown {
   QueryInterface();
   RemoteNext(celt:string, rgelt:string, pceltFetched:string);
   Skip(celt:string);
   Reset();
   Clone1(ppenum:bIEnumFORMATETC);
}
declare class bIEnumConnections extends bIUnknown {
   QueryInterface();
   RemoteNext(cConnections:string, rgcd:string, lpcFetched:string);
   Skip(cConnections:string);
   Reset();
   Clone1(ppenum:bIEnumConnections);
}
declare class bIEnumHLITEM extends bIUnknown {
   QueryInterface();
   Next1(celt:string, rgelt:string, pceltFetched:string);
   Skip(celt:string);
   Reset();
   Clone1(ppienumhlitem:bIEnumHLITEM);
}
declare class bIEnumOleDocumentViews extends bIUnknown {
   QueryInterface();
}
declare class bIEnumOleUndoUnits extends bIUnknown {
   QueryInterface();
   RemoteNext(celt:string, rgelt:bIOleUndoUnit, pceltFetched:string);
   Skip(celt:string);
   Reset();
   Clone1(ppEnum:bIEnumOleUndoUnits);
}
declare class bIEnumMoniker extends bIUnknown {
   QueryInterface();
   RemoteNext(celt:string, rgelt:bIMoniker, pceltFetched:string);
   Skip(celt:string);
   Reset();
   Clone1(ppenum:bIEnumMoniker);
}
declare class bIEnumSTATDATA extends bIUnknown {
   QueryInterface();
   RemoteNext(celt:string, rgelt:string, pceltFetched:string);
   Skip(celt:string);
   Reset();
   Clone1(ppenum:bIEnumSTATDATA);
}
declare class bIEnumSTATPROPSETSTG extends bIUnknown {
   QueryInterface();
   RemoteNext(celt:string, rgelt:string, pceltFetched:string);
   Skip(celt:string);
   Reset();
   Clone1(ppenum:bIEnumSTATPROPSETSTG);
}
declare class bIEnumSTATPROPSTG extends bIUnknown {
   QueryInterface();
   RemoteNext(celt:string, rgelt:string, pceltFetched:string);
   Skip(celt:string);
   Reset();
   Clone1(ppenum:bIEnumSTATPROPSTG);
}
declare class bIEnumSTATSTG extends bIUnknown {
   QueryInterface();
   RemoteNext(celt:string, rgelt:string, pceltFetched:string);
   Skip(celt:string);
   Reset();
   Clone1(ppenum:bIEnumSTATSTG);
}
declare class bIEnumOLEVERB extends bIUnknown {
   QueryInterface();
   RemoteNext(celt:string, rgelt:string, pceltFetched:string);
   Skip(celt:string);
   Reset();
   Clone1(ppenum:bIEnumOLEVERB);
}
declare class bIEnumUnknown extends bIUnknown {
   QueryInterface();
   RemoteNext(celt:string, rgelt:bIUnknown, pceltFetched:string);
   Skip(celt:string);
   Reset();
   Clone1(ppenum:bIEnumUnknown);
}
declare class bIEnumVARIANT extends bIUnknown {
   QueryInterface();
   Next1(celt:string, rgvar:string, pceltFetched:string);
   Skip(celt:string);
   Reset();
   Clone1(ppenum:bIEnumVARIANT);
}
declare class bIErrorInfo extends bIUnknown {
   QueryInterface();
   GetGUID(pGUID:string);
   GetSource(pBstrSource:string);
   GetDescription(pBstrDescription:string);
   GetHelpFile(pBstrHelpFile:string);
   GetHelpContext(pdwHelpContext:string);
}
declare class bIErrorLog extends bIUnknown {
   QueryInterface();
   AddError(pszPropName:string, pExcepInfo:string);
}
declare class bIExternalConnection extends bIUnknown {
   QueryInterface();
   AddConnection(extconn:string, reserved:string):string;
   ReleaseConnection(extconn:string, reserved:string, fLastReleaseCloses:string):string;
}
declare class bIFillLockBytes extends bIUnknown {
   QueryInterface();
   RemoteFillAppend(pv:string, cb:string, pcbWritten:string);
   RemoteFillAt(ulOffset:string, pv:string, cb:string, pcbWritten:string);
   SetFillSize(ulSize:string);
   Terminate1(bCanceled:string);
}
declare class bIEnumString extends bIUnknown {
   QueryInterface();
   RemoteNext(celt:string, rgelt:string, pceltFetched:string);
   Skip(celt:string);
   Reset();
   Clone1(ppenum:bIEnumString);
}
declare class bIFont extends bIUnknown {
   QueryInterface();
   GetName(pname:string);
   SetName(pname:string);
   GetSize(psize:string);
   SetSize(psize:string);
   GetBold(pbold:boolean);
   SetBold(pbold:boolean);
   GetItalic(pitalic:boolean);
   SetItalic(pitalic:boolean);
   GetUnderline(punderline:boolean);
   SetUnderline(punderline:boolean);
   GetStrikethrough(pstrikethrough:boolean);
   SetStrikethrough(pstrikethrough:boolean);
   GetWeight(pweight:string);
   SetWeight(pweight:string);
   GetCharset(pcharset:string);
   SetCharset(pcharset:string);
   GethFont(phfont:string);
   Clone1(ppfont:bIFont);
   IsEqual(pfontOther:bIFont);
   SetRatio(cyLogical:string, cyHimetric:string);
   AddRefHfont(hFont:string);
   ReleaseHfont(hFont:string);
}
declare class bIHlinkBrowseContext extends bIUnknown {
   QueryInterface();
   Register(reserved:string, piunk:bIUnknown, pimk:bIMoniker, pdwRegister:string);
   GetObject(pimk:bIMoniker, fBindIfRootRegistered:string, ppiunk:bIUnknown);
   Revoke(dwRegister:string);
   SetBrowseWindowInfo(phlbwi:string);
   GetBrowseWindowInfo(phlbwi:string);
   SetInitialHlink(pimkTarget:bIMoniker, pwzLocation:string, pwzFriendlyName:string);
   OnNavigateHlink(grfHLNF:string, pimkTarget:bIMoniker, pwzLocation:string, pwzFriendlyName:string, puHLID:string);
   UpdateHlink(uHLID:string, pimkTarget:bIMoniker, pwzLocation:string, pwzFriendlyName:string);
   EnumNavigationStack(dwReserved:string, grfHLFNAMEF:string, ppienumhlitem:bIEnumHLITEM);
   QueryHlink(grfHLQF:string, uHLID:string);
   GetHlink(uHLID:string, ppihl:bIHlink);
   SetCurrentHlink(uHLID:string);
   Clone1(piunkOuter:bIUnknown, riid:string, ppiunkObj:bIUnknown);
   Close(reserved:string);
}
declare class bIHlinkFrame extends bIUnknown {
   QueryInterface();
   SetBrowseContext(pihlbc:bIHlinkBrowseContext);
   GetBrowseContext(ppihlbc:bIHlinkBrowseContext);
   Navigate(grfHLNF:string, pbc:bIBindCtx, pibsc:bIBindStatusCallback, pihlNavigate:bIHlink);
   OnNavigate(grfHLNF:string, pimkTarget:bIMoniker, pwzLocation:string, pwzFriendlyName:string, dwReserved:string);
   UpdateHlink(uHLID:string, pimkTarget:bIMoniker, pwzLocation:string, pwzFriendlyName:string);
}
declare class bIHlinkTarget extends bIUnknown {
   QueryInterface();
   SetBrowseContext(pihlbc:bIHlinkBrowseContext);
   GetBrowseContext(ppihlbc:bIHlinkBrowseContext);
   Navigate(grfHLNF:string, pwzJumpLocation:string);
   GetMoniker(pwzLocation:string, dwAssign:string, ppimkLocation:bIMoniker);
   GetFriendlyName(pwzLocation:string, ppwzFriendlyName:string);
}
declare class bILayoutStorage extends bIUnknown {
   QueryInterface();
   LayoutScript(pStorageLayout:string, nEntries:string, glfInterleavedFlag:string);
   BeginMonitor();
   EndMonitor();
   ReLayoutDocfile(pwcsNewDfName:string);
   ReLayoutDocfileOnILockBytes(pILockBytes:bILockBytes);
}
declare class bILockBytes extends bIUnknown {
   QueryInterface();
   RemoteReadAt(ulOffset:string, pv:number, cb:string, pcbRead:string);
   RemoteWriteAt(ulOffset:string, pv:string, cb:string, pcbWritten:string);
   Flush();
   SetSize(cb:string);
   LockRegion(libOffset:string, cb:string, dwLockType:string);
   UnlockRegion(libOffset:string, cb:string, dwLockType:string);
   Stat(pstatstg:string, grfStatFlag:string);
}
declare class bIMalloc extends bIUnknown {
   QueryInterface();
   Alloc(cb:string):string;
   Realloc(pv:string, cb:string):string;
   Free(pv:string);
   GetSize(pv:string):string;
   DidAlloc(pv:string):number;
   HeapMinimize();
}
declare class bIMallocSpy extends bIUnknown {
   QueryInterface();
   PreAlloc(cbRequest:string):string;
   PostAlloc(pActual:string):string;
   PreFree(pRequest:string, fSpyed:string):string;
   PostFree(fSpyed:string);
   PreRealloc(pRequest:string, cbRequest:string, ppNewRequest:string, fSpyed:string):string;
   PostRealloc(pActual:string, fSpyed:string):string;
   PreGetSize(pRequest:string, fSpyed:string):string;
   PostGetSize(cbActual:string, fSpyed:string):string;
   PreDidAlloc(pRequest:string, fSpyed:string):string;
   PostDidAlloc(pRequest:string, fSpyed:string, fActual:number):number;
   PreHeapMinimize();
   PostHeapMinimize();
}
declare class bIHttpNegotiate extends bIUnknown {
   QueryInterface();
   BeginningTransaction(szUrl:string, szHeaders:string, dwReserved:string, pszAdditionalHeaders:string);
   OnResponse(dwResponseCode:string, szResponseHeaders:string, szRequestHeaders:string, pszAdditionalRequestHeaders:string);
}
declare class bIMessageFilter extends bIUnknown {
   QueryInterface();
   HandleInComingCall(dwCallType:string, htaskCaller:string, dwTickCount:string, lpInterfaceInfo:string):string;
   RetryRejectedCall(htaskCallee:string, dwTickCount:string, dwRejectType:string):string;
   MessagePending(htaskCallee:string, dwTickCount:string, dwPendingType:string):string;
}
declare class bIMarshal extends bIUnknown {
   QueryInterface();
   GetUnmarshalClass(riid:string, pv:string, dwDestContext:string, pvDestContext:string, mshlflags:string, pCid:string);
   GetMarshalSizeMax(riid:string, pv:string, dwDestContext:string, pvDestContext:string, mshlflags:string, pSize:string);
   MarshalInterface(pstm:bIStream, riid:string, pv:string, dwDestContext:string, pvDestContext:string, mshlflags:string);
   UnmarshalInterface(pstm:bIStream, riid:string, ppv:string);
   ReleaseMarshalData(pstm:bIStream);
   DisconnectObject(dwReserved:string);
}
declare class bIMoniker extends bIPersistStream {
   QueryInterface();
   RemoteBindToObject(pbc:bIBindCtx, pmkToLeft:bIMoniker, riidResult:string, ppvResult:bIUnknown);
   RemoteBindToStorage(pbc:bIBindCtx, pmkToLeft:bIMoniker, riid:string, ppvObj:bIUnknown);
   Reduce(pbc:bIBindCtx, dwReduceHowFar:string, ppmkToLeft:bIMoniker, ppmkReduced:bIMoniker);
   ComposeWith(pmkRight:bIMoniker, fOnlyIfNotGeneric:string, ppmkComposite:bIMoniker);
   Enumerate(fForward:string, ppenumMoniker:bIEnumMoniker);
   IsEqual(pmkOtherMoniker:bIMoniker);
   Hash(pdwHash:string);
   IsRunning(pbc:bIBindCtx, pmkToLeft:bIMoniker, pmkNewlyRunning:bIMoniker);
   GetTimeOfLastChange(pbc:bIBindCtx, pmkToLeft:bIMoniker, pFileTime:string);
   InverseFunc(ppmk:bIMoniker);
   CommonPrefixWith(pmkOther:bIMoniker, ppmkPrefix:bIMoniker);
   RelativePathTo(pmkOther:bIMoniker, ppmkRelPath:bIMoniker);
   GetDisplayName(pbc:bIBindCtx, pmkToLeft:bIMoniker, ppszDisplayName:string);
   ParseDisplayName(pbc:bIBindCtx, pmkToLeft:bIMoniker, pszDisplayName:string, pchEaten:string, ppmkOut:bIMoniker);
   IsSystemMoniker(pdwMksys:string);
}
declare class bIMultiQI extends bIUnknown {
   QueryInterface();
   QueryMultipleInterfaces(cMQIs:string, pMQIs:string);
}
declare class bIObjectWithSite extends bIUnknown {
   QueryInterface();
   SetSite(pUnkSite:bIUnknown);
   GetSite(riid:string, ppvSite:string);
}
declare class bIHlinkSite extends bIUnknown {
   QueryInterface();
   QueryService(dwSiteData:string, guidService:string, riid:string, ppiunk:bIUnknown);
   GetMoniker(dwSiteData:string, dwAssign:string, dwWhich:string, ppimk:bIMoniker);
   ReadyToNavigate(dwSiteData:string, dwReserved:string);
   OnNavigationComplete(dwSiteData:string, dwReserved:string, hrError:string, pwzError:string);
}
declare class bIOleAdviseHolder extends bIUnknown {
   QueryInterface();
   Advise(pAdvise:bIAdviseSink, pdwConnection:string);
   Unadvise(dwConnection:string);
   EnumAdvise(ppenumAdvise:bIEnumSTATDATA);
   SendOnRename(pmk:bIMoniker);
   SendOnSave();
   SendOnClose();
}
declare class bIHlink extends bIUnknown {
   QueryInterface();
   SetHlinkSite(pihlSite:bIHlinkSite, dwSiteData:string);
   GetHlinkSite(ppihlSite:bIHlinkSite, pdwSiteData:string);
   SetMonikerReference(grfHLSETF:string, pimkTarget:bIMoniker, pwzLocation:string);
   GetMonikerReference(dwWhichRef:string, ppimkTarget:bIMoniker, ppwzLocation:string);
   SetStringReference(grfHLSETF:string, pwzTarget:string, pwzLocation:string);
   GetStringReference(dwWhichRef:string, ppwzTarget:string, ppwzLocation:string);
   SetFriendlyName(pwzFriendlyName:string);
   GetFriendlyName(grfHLFNAMEF:string, ppwzFriendlyName:string);
   SetTargetFrameName(pwzTargetFrameName:string);
   GetTargetFrameName(ppwzTargetFrameName:string);
   GetMiscStatus(pdwStatus:string);
   Navigate(grfHLNF:string, pibc:bIBindCtx, pibsc:bIBindStatusCallback, pihlbc:bIHlinkBrowseContext);
   SetAdditionalParams(pwzAdditionalParams:string);
   GetAdditionalParams(ppwzAdditionalParams:string);
}
declare class bIOleCache extends bIUnknown {
   QueryInterface();
   Cache(pFormatetc:string, advf:string, pdwConnection:string);
   Uncache(dwConnection:string);
   EnumCache(ppenumSTATDATA:bIEnumSTATDATA);
   InitCache(pDataObject:bIDataObject);
   SetData(pFormatetc:string, pmedium:string, fRelease:string);
}
declare class bIOleCacheControl extends bIUnknown {
   QueryInterface();
   OnRun(pDataObject:bIDataObject);
   OnStop();
}
declare class bIOleCache2 extends bIOleCache {
   QueryInterface();
   RemoteUpdateCache(pDataObject:bIDataObject, grfUpdf:string, pReserved:string);
   DiscardCache(dwDiscardOptions:string);
}
declare class bIOleCommandTarget extends bIUnknown {
   QueryInterface();
   QueryStatus(pguidCmdGroup:string, cCmds:string, prgCmds:string, pCmdText:string);
   Exec(pguidCmdGroup:string, nCmdID:string, nCmdexecopt:string, pvaIn:string, pvaOut:string);
}
declare class bIOleContainer extends bIParseDisplayName {
   QueryInterface();
   EnumObjects(grfFlags:string, ppenum:bIEnumUnknown);
   LockContainer(fLock:string);
}
declare class bIOleControl extends bIUnknown {
   QueryInterface();
   GetControlInfo(pCI:string);
   OnMnemonic(pMsg:string);
   OnAmbientPropertyChange(dispID:string);
   FreezeEvents(bFreeze:string);
}
declare class bIOleControlSite extends bIUnknown {
   QueryInterface();
   OnControlInfoChanged();
   LockInPlaceActive(fLock:string);
   GetExtendedControl(ppDisp:bIDispatch);
   TransformCoords(pPtlHimetric:string, pPtfContainer:string, dwFlags:string);
   TranslateAccelerator(pMsg:string, grfModifiers:string);
   OnFocus(fGotFocus:string);
   ShowPropertyFrame();
}
declare class bIOleDocumentView extends bIUnknown {
   QueryInterface();
}
declare class bIOleInPlaceActiveObject extends bIOleWindow {
   QueryInterface();
}
declare class bIOleInPlaceFrame extends bIOleInPlaceUIWindow {
   QueryInterface();
}
declare class bIOleDocumentSite extends bIUnknown {
   QueryInterface();
}
declare class bIOleClientSite extends bIUnknown {
   QueryInterface();
   SaveObject();
   GetMoniker(dwAssign:string, dwWhichMoniker:string, ppmk:bIMoniker);
   GetContainer(ppContainer:bIOleContainer);
   ShowObject();
   OnShowWindow(fShow:string);
   RequestNewObjectLayout();
}
declare class bIOleDocument extends bIUnknown {
   QueryInterface();
}
declare class bIOleInPlaceObjectWindowless extends bIOleInPlaceObject {
   QueryInterface();
   OnWindowMessage(msg:string, wParam:string, lParam:string, plResult:string);
   GetDropTarget(ppDropTarget:bIDropTarget);
}
declare class bIOleInPlaceSite extends bIOleWindow {
   QueryInterface();
}
declare class bIOleInPlaceSiteWindowless extends bIOleInPlaceSiteEx {
   QueryInterface();
}
declare class bIOleInPlaceObject extends bIOleWindow {
   QueryInterface();
   InPlaceDeactivate();
   UIDeactivate();
   SetObjectRects(lprcPosRect:string, lprcClipRect:string);
   ReactivateAndUndo();
}
declare class bIOleItemContainer extends bIOleContainer {
   QueryInterface();
   RemoteGetObject(pszItem:string, dwSpeedNeeded:string, pbc:bIBindCtx, riid:string, ppvObject:bIUnknown);
   RemoteGetObjectStorage(pszItem:string, pbc:bIBindCtx, riid:string, ppvStorage:bIUnknown);
   IsRunning(pszItem:string);
}
declare class bIOleLink extends bIUnknown {
   QueryInterface();
   SetUpdateOptions(dwUpdateOpt:string);
   GetUpdateOptions(pdwUpdateOpt:string);
   SetSourceMoniker(pmk:bIMoniker, rclsid:string);
   GetSourceMoniker(ppmk:bIMoniker);
   SetSourceDisplayName(pszStatusText:string);
   GetSourceDisplayName(ppszDisplayName:string);
   BindToSource(bindflags:string, pbc:bIBindCtx);
   BindIfRunning();
   GetBoundSource(ppunk:bIUnknown);
   UnbindSource();
   Update(pbc:bIBindCtx);
}
declare class bIOleObject extends bIUnknown {
   QueryInterface();
   SetClientSite(pClientSite:bIOleClientSite);
   GetClientSite(ppClientSite:bIOleClientSite);
   SetHostNames(szContainerApp:string, szContainerObj:string);
   Close(dwSaveOption:string);
   SetMoniker(dwWhichMoniker:string, pmk:bIMoniker);
   GetMoniker(dwAssign:string, dwWhichMoniker:string, ppmk:bIMoniker);
   InitFromData(pDataObject:bIDataObject, fCreation:string, dwReserved:string);
   GetClipboardData(dwReserved:string, ppDataObject:bIDataObject);
   DoVerb(iVerb:string, lpmsg:string, pActiveSite:bIOleClientSite, lindex:string, hwndParent:string, lprcPosRect:string);
   EnumVerbs(ppEnumOleVerb:bIEnumOLEVERB);
   Update();
   IsUpToDate();
   GetUserClassID(pClsid:string);
   GetUserType(dwFormOfType:string, pszUserType:string);
   SetExtent(dwDrawAspect:string, psizel:string);
   GetExtent(dwDrawAspect:string, psizel:string);
   Advise(pAdvSink:bIAdviseSink, pdwConnection:string);
   Unadvise(dwConnection:string);
   EnumAdvise(ppenumAdvise:bIEnumSTATDATA);
   GetMiscStatus(dwAspect:string, pdwStatus:string);
   SetColorScheme(pLogpal:string);
}
declare class bIOleParentUndoUnit extends bIOleUndoUnit {
   QueryInterface();
   Open(pPUU:bIOleParentUndoUnit);
   Close(pPUU:bIOleParentUndoUnit, fCommit:string);
   Add(pUU:bIOleUndoUnit);
   FindUnit(pUU:bIOleUndoUnit);
   GetParentState(pdwState:string);
}
declare class bIOleUndoManager extends bIUnknown {
   QueryInterface();
   Open(pPUU:bIOleParentUndoUnit);
   Close(pPUU:bIOleParentUndoUnit, fCommit:string);
   Add(pUU:bIOleUndoUnit);
   GetOpenParentState(pdwState:string);
   DiscardFrom(pUU:bIOleUndoUnit);
   UndoTo(pUU:bIOleUndoUnit);
   RedoTo(pUU:bIOleUndoUnit);
   EnumUndoable(ppEnum:bIEnumOleUndoUnits);
   EnumRedoable(ppEnum:bIEnumOleUndoUnits);
   GetLastUndoDescription(pBstr:string);
   GetLastRedoDescription(pBstr:string);
   Enable(fEnable:string);
}
declare class bIOleInPlaceUIWindow extends bIOleWindow {
   QueryInterface();
}
declare class bIOleWindow extends bIUnknown {
   QueryInterface();
   GetWindow(phwnd:string);
   ContextSensitiveHelp(fEnterMode:string);
}
declare class bIParseDisplayName extends bIUnknown {
   QueryInterface();
   ParseDisplayName(pbc:bIBindCtx, pszDisplayName:string, pchEaten:string, ppmkOut:bIMoniker);
}
declare class bIPerPropertyBrowsing extends bIUnknown {
   QueryInterface();
   GetDisplayString(dispID:string, pBstr:string);
   MapPropertyToPage(dispID:string, pClsid:string);
   GetPredefinedStrings(dispID:string, pCaStringsOut:string, pCaCookiesOut:string);
   GetPredefinedValue(dispID:string, dwCookie:string, pVarOut:string);
}
declare class bIPersist extends bIUnknown {
   QueryInterface();
   GetClassID(pClassID:string);
}
declare class bIPersistFile extends bIPersist {
   QueryInterface();
   IsDirty();
   Load(pszFileName:string, dwMode:string);
   Save1(pszFileName:string, fRemember:string);
   SaveCompleted(pszFileName:string);
   GetCurFile(ppszFileName:string);
}
declare class bIEnumConnectionPoints extends bIUnknown {
   QueryInterface();
   RemoteNext(cConnections:string, rgpcn:bIConnectionPoint, lpcFetched:string);
   Skip(cConnections:string);
   Reset();
   Clone1(ppenum:bIEnumConnectionPoints);
}
declare class bIOleUndoUnit extends bIUnknown {
   QueryInterface();
   Do(pUndoManager:bIOleUndoManager);
   GetDescription(pBstr:string);
   GetUnitType(pClsid:string, plID:string);
   OnNextAdd();
}
declare class bIRpcProxyBuffer extends bIUnknown {
   QueryInterface();
   Connect(pRpcChannelBuffer:bIRpcChannelBuffer);
   Disconnect();
}
declare class bIRpcStubBuffer extends bIUnknown {
   QueryInterface();
   Connect(pUnkServer:bIUnknown);
   Disconnect();
   Invoke(_prpcmsg:string, _pRpcChannelBuffer:bIRpcChannelBuffer);
   IsIIDSupported(riid:string):string;
   CountRefs():string;
   DebugServerQueryInterface(ppv:string);
   DebugServerRelease(pv:string);
}
declare class bIRunnableObject extends bIUnknown {
   QueryInterface();
   GetRunningClass(lpClsid:string);
   Run(pbc:bIBindCtx);
   RemoteIsRunning();
   LockRunning(fLock:string, fLastUnlockCloses:string);
   SetContainedObject(fContained:string);
}
declare class bIRunningObjectTable extends bIUnknown {
   QueryInterface();
   Register(grfFlags:string, punkObject:bIUnknown, pmkObjectName:bIMoniker, pdwRegister:string);
   Revoke(dwRegister:string);
   IsRunning(pmkObjectName:bIMoniker);
   GetObject(pmkObjectName:bIMoniker, ppunkObject:bIUnknown);
   NoteChangeTime(dwRegister:string, pFileTime:string);
   GetTimeOfLastChange(pmkObjectName:bIMoniker, pFileTime:string);
   EnumRunning(ppenumMoniker:bIEnumMoniker);
}
declare class bISequentialStream extends bIUnknown {
   QueryInterface();
   RemoteRead(pv:number, cb:string, pcbRead:string);
   RemoteWrite(pv:string, cb:string, pcbWritten:string);
}
declare class bIServiceProvider extends bIUnknown {
   QueryInterface();
   RemoteQueryService(guidService:string, riid:string, ppvObject:bIUnknown);
}
declare class bISimpleFrameSite extends bIUnknown {
   QueryInterface();
   PreMessageFilter(hwnd:string, msg:string, wp:string, lp:string, plResult:string, pdwCookie:string);
   PostMessageFilter(hwnd:string, msg:string, wp:string, lp:string, plResult:string, dwCookie:string);
}
declare class bIServerSecurity extends bIUnknown {
   QueryInterface();
   QueryBlanket(pAuthnSvc:string, pAuthzSvc:string, pServerPrincName:string, pAuthnLevel:string, pImpLevel:string, pPrivs:string, pCapabilities:string);
   ImpersonateClient();
   RevertToSelf();
   IsImpersonating():string;
}
declare class bISpecifyPropertyPages extends bIUnknown {
   QueryInterface();
   GetPages(pPages:string);
}
declare class bIStdMarshalInfo extends bIUnknown {
   QueryInterface();
   GetClassForHandler(dwDestContext:string, pvDestContext:string, pClsid:string);
}
declare class bIStorage extends bIUnknown {
   QueryInterface();
   CreateStream(pwcsName:string, grfMode:string, reserved1:string, reserved2:string, ppstm:bIStream);
   RemoteOpenStream(pwcsName:string, cbReserved1:string, reserved1:string, grfMode:string, reserved2:string, ppstm:bIStream);
   CreateStorage(pwcsName:string, grfMode:string, dwStgFmt:string, reserved2:string, ppstg:bIStorage);
   OpenStorage(pwcsName:string, pstgPriority:bIStorage, grfMode:string, snbExclude:string, reserved:string, ppstg:bIStorage);
   CopyTo(ciidExclude:string, rgiidExclude:string, snbExclude:string, pstgDest:bIStorage);
   MoveElementTo(pwcsName:string, pstgDest:bIStorage, pwcsNewName:string, grfFlags:string);
   Commit(grfCommitFlags:string);
   Revert();
   RemoteEnumElements(reserved1:string, cbReserved2:string, reserved2:string, reserved3:string, ppenum:bIEnumSTATSTG);
   DestroyElement(pwcsName:string);
   RenameElement(pwcsOldName:string, pwcsNewName:string);
   SetElementTimes(pwcsName:string, pctime:string, patime:string, pmtime:string);
   SetClass(clsid:string);
   SetStateBits(grfStateBits:string, grfMask:string);
   Stat(pstatstg:string, grfStatFlag:string);
}
declare class bIStream extends bISequentialStream {
   QueryInterface();
   RemoteSeek(dlibMove:string, dwOrigin:string, plibNewPosition:string);
   SetSize(libNewSize:string);
   RemoteCopyTo(pstm:bIStream, cb:string, pcbRead:string, pcbWritten:string);
   Commit(grfCommitFlags:string);
   Revert();
   LockRegion(libOffset:string, cb:string, dwLockType:string);
   UnlockRegion(libOffset:string, cb:string, dwLockType:string);
   Stat(pstatstg:string, grfStatFlag:string);
   Clone1(ppstm:bIStream);
}
declare class bITypeChangeEvents extends bIUnknown {
   QueryInterface();
   RequestTypeChange(changeKind:string, pTInfoBefore:bITypeInfo, pStrName:string, pfCancel:number);
   AfterTypeChange(changeKind:string, pTInfoAfter:bITypeInfo, pStrName:string);
}
declare class bISupportErrorInfo extends bIUnknown {
   QueryInterface();
   InterfaceSupportsErrorInfo(riid:string);
}
declare class bITypeInfo extends bIUnknown {
   QueryInterface();
   GetTypeAttr(ppTypeAttr:string);
   GetTypeComp(ppTComp:bITypeComp);
   GetFuncDesc(index:string, ppFuncDesc:string);
   GetVarDesc(index:string, ppVarDesc:string);
   GetNames(memid:string, rgBstrNames:string, cMaxNames:string, pcNames:string);
   GetRefTypeOfImplType(index:string, pRefType:string);
   GetImplTypeFlags(index:string, pImplTypeFlags:number);
   GetIDsOfNames(rgszNames:string, cNames:string, pMemId:string);
   Invoke(pvInstance:string, memId:string, wFlags:string, pDispParams:string, pVarResult:string, pExcepInfo:string, puArgErr:string);
   GetDocumentation(memid:string, pBstrName:string, pBstrDocString:string, pdwHelpContext:string, pBstrHelpFile:string);
   GetDllEntry(memid:string, invKind:string, pBstrDllName:string, pBstrName:string, pwOrdinal:string);
   GetRefTypeInfo(handleRefType:string, ppTInfo:bITypeInfo);
   AddressOfMember(memid:string, invKind:string, ppv:string);
   CreateInstance(pOuterUnknown:bIUnknown, riid:string, ppvObj:string);
   GetMops(memid:string, pBstrMops:string);
   GetContainingTypeLib(ppTlib:bITypeLib, pIndex:string);
   ReleaseTypeAttr(pTypeAttribute:string);
   ReleaseFuncDesc(pFunctionDesc:string);
   ReleaseVarDesc(pVariableDesc:string);
}
declare class bITypeLib extends bIUnknown {
   QueryInterface();
   GetTypeInfoCount():string;
   GetTypeInfo(index:string, ppTInfo:bITypeInfo);
   GetTypeInfoType(index:string, pTKind:string);
   GetTypeInfoOfGuid(ptrguid:string, ppTInfo:bITypeInfo);
   GetLibAttr(ppTLibAttr:string);
   GetTypeComp(ppTComp:bITypeComp);
   GetDocumentation(Index:number, pBstrName:string, pBstrDocString:string, pdwHelpContext:string, pBstrHelpFile:string);
   IsName(szNameBuf:string, lHashVal:string, pfName:string);
   FindName(szNameBuf:string, lHashVal:string, ppTInfo:bITypeInfo, rgMemId:string, pcFound:string);
   ReleaseTLibAttr(pTLibAttr:string);
}
declare class bIPropertyPage2 extends bIPropertyPage {
   QueryInterface();
   EditProperty(dispID:string);
}
declare class bIProvideClassInfo2 extends bIProvideClassInfo {
   QueryInterface();
   GetGUID(dwGuidKind:string, pGUID:string);
}
declare class bIQuickActivate extends bIUnknown {
   QueryInterface();
}
declare class bIROTData extends bIUnknown {
   QueryInterface();
   GetComparisonData(pbData:number, cbMax:string, pcbData:string);
}
declare class bIPersistMemory extends bIPersist {
   QueryInterface();
   IsDirty();
   RemoteLoad(pMem:string, cbSize:string);
   RemoteSave(pMem:string, fClearDirty:string, cbSize:string);
   GetSizeMax(pCbSize:string);
   InitNew();
}
declare class bIPersistStream extends bIPersist {
   QueryInterface();
   IsDirty();
   Load(pstm:bIStream);
   Save1(pstm:bIStream, fClearDirty:string);
   GetSizeMax(pcbSize:string);
}
declare class bIPersistStreamInit extends bIPersist {
   QueryInterface();
   IsDirty();
   Load(pstm:bIStream);
   Save1(pstm:bIStream, fClearDirty:string);
   GetSizeMax(pCbSize:string);
   InitNew();
}
declare class bIPersistStorage extends bIPersist {
   QueryInterface();
   IsDirty();
   InitNew(pStg:bIStorage);
   Load(pStg:bIStorage);
   Save1(pStgSave:bIStorage, fSameAsLoad:string);
   SaveCompleted(pStgNew:bIStorage);
   HandsOffStorage();
}
declare class bIPersistPropertyBag extends bIPersist {
   QueryInterface();
   InitNew();
   Load(pPropBag:bIPropertyBag, pErrorLog:bIErrorLog);
   Save1(pPropBag:bIPropertyBag, fClearDirty:string, fSaveAllProperties:string);
}
declare class bIPointerInactive extends bIUnknown {
   QueryInterface();
   GetActivationPolicy(pdwPolicy:string);
   OnInactiveMouseMove(pRectBounds:string, x:string, y:string, grfKeyState:string);
   OnInactiveSetCursor(pRectBounds:string, x:string, y:string, dwMouseMsg:string, fSetAlways:string);
}
declare class bIProgressNotify extends bIUnknown {
   QueryInterface();
   OnProgress(dwProgressCurrent:string, dwProgressMaximum:string, fAccurate:string, fOwner:string);
}
declare class bIPropertyPage extends bIUnknown {
   QueryInterface();
   SetPageSite(pPageSite:bIPropertyPageSite);
   Activate(hWndParent:string, pRect:string, bModal:string);
   Deactivate();
   GetPageInfo(pPageInfo:string);
   SetObjects(cObjects:string, ppUnk:string);
   Show(nCmdShow:string);
   Move(pRect:string);
   IsPageDirty();
   Apply();
   Help(pszHelpDir:string);
   TranslateAccelerator(pMsg:string);
}
declare class bIPropertyNotifySink extends bIUnknown {
   QueryInterface();
   OnChanged(dispID:string);
   OnRequestEdit(dispID:string);
}
declare class bIPropertyBag extends bIUnknown {
   QueryInterface();
   RemoteRead(pszPropName:string, pVar:string, pErrorLog:bIErrorLog, varType:string, pUnkObj:bIUnknown);
   Write(pszPropName:string, pVar:string);
}
declare class bIPrint extends bIUnknown {
   QueryInterface();
   SetInitialPageNum(nFirstPage:string);
   GetPageInfo(pnFirstPage:string, pcPages:string);
   RemotePrint(grfFlags:string, pptd:string, pppageset:string, pstgmOptions:string, pcallback:bIContinueCallback, nFirstPage:string, pcPagesPrinted:string, pnLastPage:string);
}
declare class bIPropertyStorage extends bIUnknown {
   QueryInterface();
   ReadMultiple(cpspec:string, rgpspec:string, rgpropvar:string);
   WriteMultiple(cpspec:string, rgpspec:string, rgpropvar:string, propidNameFirst:string);
   DeleteMultiple(cpspec:string, rgpspec:string);
   ReadPropertyNames(cpropid:string, rgpropid:string, rglpwstrName:string);
   WritePropertyNames(cpropid:string, rgpropid:string, rglpwstrName:string);
   DeletePropertyNames(cpropid:string, rgpropid:string);
   Commit(grfCommitFlags:string);
   Revert();
   Enumerate(ppenum:bIEnumSTATPROPSTG);
   SetTimes(pctime:string, patime:string, pmtime:string);
   SetClass(clsid:string);
   Stat(pstatpsstg:string);
}
declare class bIProvideClassInfo extends bIUnknown {
   QueryInterface();
   GetClassInfo(ppTI:bITypeInfo);
}
declare class bIRootStorage extends bIUnknown {
   QueryInterface();
   SwitchToFile(pszFile:string);
}
declare class bIRpcChannelBuffer extends bIUnknown {
   QueryInterface();
   GetBuffer(pMessage:string, riid:string);
   SendReceive(pMessage:string, pStatus:string);
   FreeBuffer(pMessage:string);
   GetDestCtx(pdwDestContext:string, ppvDestContext:string);
   IsConnected();
}
declare class bITypeComp extends bIUnknown {
   QueryInterface();
   RemoteBind(szName:string, lHashVal:string, wFlags:string, ppTInfo:bITypeInfo, pDescKind:string, ppFuncDesc:string, ppVarDesc:string, ppTypeComp:bITypeComp, pDummy:string);
   RemoteBindType(szName:string, lHashVal:string, ppTInfo:bITypeInfo);
}
declare class bIPSFactoryBuffer extends bIUnknown {
   QueryInterface();
   CreateProxy(pUnkOuter:bIUnknown, riid:string, ppProxy:bIRpcProxyBuffer, ppv:string);
   CreateStub(riid:string, pUnkServer:bIUnknown, ppStub:bIRpcStubBuffer);
}
declare class bITypeInfo2 extends bITypeInfo {
   QueryInterface();
   GetTypeKind(pTypeKind:string);
   GetTypeFlags(pTypeFlags:string);
   GetFuncIndexOfMemId(memid:string, invkind:string, pFuncIndex:string);
   GetVarIndexOfMemId(memid:string, pVarIndex:string);
   GetCustData(guid:string, pVarVal:string);
   GetFuncCustData(index:string, guid:string, pVarVal:string);
   GetParamCustData(indexFunc:string, indexParam:string, guid:string, pVarVal:string);
   GetVarCustData(index:string, guid:string, pVarVal:string);
   GetImplTypeCustData(index:string, guid:string, pVarVal:string);
   RemoteGetDocumentation2(memid:string, lcid:string, refPtrFlags:string, pbstrHelpString:string, pdwHelpStringContext:string, pbstrHelpStringDll:string);
   GetAllCustData(pCustData:string);
   GetAllFuncCustData(index:string, pCustData:string);
   GetAllParamCustData(indexFunc:string, indexParam:string, pCustData:string);
   GetAllVarCustData(index:string, pCustData:string);
   GetAllImplTypeCustData(index:string, pCustData:string);
}
declare class bIViewObject extends bIUnknown {
   QueryInterface();
   RemoteDraw(dwDrawAspect:string, lindex:string, pvAspect:string, ptd:string, hdcTargetDev:string, hdcDraw:string, lprcBounds:string, lprcWBounds:string, pContinue:bIContinue);
   RemoteGetColorSet(dwDrawAspect:string, lindex:string, pvAspect:string, ptd:string, hicTargetDev:string, ppColorSet:string);
   RemoteFreeze(dwDrawAspect:string, lindex:string, pvAspect:string, pdwFreeze:string);
   Unfreeze(dwFreeze:string);
   SetAdvise(aspects:string, advf:string, pAdvSink:bIAdviseSink);
   GetAdvise(pAspects:string, pAdvf:string, ppAdvSink:bIAdviseSink);
}
declare class bIViewObject2 extends bIViewObject {
   QueryInterface();
   GetExtent(dwDrawAspect:string, lindex:string, ptd:string, lpsizel:string);
}
declare class bIPropertyPageSite extends bIUnknown {
   QueryInterface();
   OnStatusChange(dwFlags:string);
   GetLocaleID(pLocaleID:string);
   GetPageContainer(ppUnk:bIUnknown);
   TranslateAccelerator(pMsg:string);
}
declare class bIPicture extends bIUnknown {
   QueryInterface();
   GetHandle(phandle:string);
   GethPal(phpal:string);
   GetType(ptype:string);
   GetWidth(pwidth:string);
   GetHeight(pheight:string);
   Render(hdc:number, x:string, y:string, cx:string, cy:string, xSrc:string, ySrc:string, cxSrc:string, cySrc:string, prcWBounds:string);
   SethPal(phpal:string);
   GetCurDC(phdcOut:number);
   SelectPicture(hdcIn:number, phdcOut:number, phbmpOut:string);
   GetKeepOriginalFormat(pfkeep:boolean);
   SetKeepOriginalFormat(pfkeep:boolean);
   PictureChanged();
   SaveAsFile(pstm:string, fSaveMemCopy:boolean, pcbSize:string);
   GetAttributes(pdwAttr:string);
   SetHdc(hdc:string);
}
declare class bIPropertySetStorage extends bIUnknown {
   QueryInterface();
   Create(rfmtid:string, pClsid:string, grfFlags:string, grfMode:string, ppprstg:bIPropertyStorage);
   Open(rfmtid:string, grfMode:string, ppprstg:bIPropertyStorage);
   Delete(rfmtid:string);
   Enumerate(ppenum:bIEnumSTATPROPSETSTG);
}
declare class bIPersistMoniker extends bIUnknown {
   QueryInterface();
   GetClassID(pClassID:string);
   IsDirty();
   Load(fFullyAvailable:string, pimkName:bIMoniker, pibc:bIBindCtx, grfMode:string);
   Save1(pimkName:bIMoniker, pbc:bIBindCtx, fRemember:string);
   SaveCompleted(pimkName:bIMoniker, pibc:bIBindCtx);
   GetCurMoniker(ppimkName:bIMoniker);
}
declare class bIOleInPlaceSiteEx extends bIOleInPlaceSite {
   QueryInterface();
}
declare class bIAdviseSinkEx extends bIAdviseSink {
   QueryInterface();
   RemoteOnViewStatusChange(dwViewStatus:string);
}
declare class bIViewObjectEx extends bIViewObject2 {
   QueryInterface();
   GetRect(dwAspect:string, pRect:string);
   GetViewStatus(pdwStatus:string);
   QueryHitPoint(dwAspect:string, pRectBounds:string, ptlLoc:string, lCloseHint:string, pHitResult:string);
   QueryHitRect(dwAspect:string, pRectBounds:string, pRectLoc:string, lCloseHint:string, pHitResult:string);
   GetNaturalExtent(dwAspect:string, lindex:string, ptd:string, hicTargetDev:string, pExtentInfo:string, pSizel:string);
}
declare class bITypeLib2 extends bITypeLib {
   QueryInterface();
   GetCustData(guid:string, pVarVal:string);
   RemoteGetLibStatistics(pcUniqueNames:string, pcchUniqueNames:string);
   RemoteGetDocumentation2(index:number, lcid:string, refPtrFlags:string, pbstrHelpString:string, pdwHelpStringContext:string, pbstrHelpStringDll:string);
   GetAllCustData(pCustData:string);
}
declare class bIDropTarget extends bIUnknown {
   QueryInterface();
   DragEnter(pDataObj:bIDataObject, grfKeyState:string, pt:string, pdwEffect:string);
   DragOver(grfKeyState:string, pt:string, pdwEffect:string);
   DragLeave();
   Drop(pDataObj:bIDataObject, grfKeyState:string, pt:string, pdwEffect:string);
}
declare class bIWindowForBindingUI extends bIUnknown {
   QueryInterface();
   GetWindow(rguidReason:string, phwnd:string);
}
declare class bPicture extends bIDispatch {
   QueryInterface();
}
declare class CategoryGeneralAgent extends aSplitViewAgent {
}
declare class CategoryCheckedOutAgent extends aUIAgent {
   CheckedOut: string ;
   CheckIn: string ;
   Deliver: string ;
   StaticText: string ;
   StaticText001: string ;
   GroupBox: string ;
   CheckInAll: string ;
   StaticText002: string ;
   StaticText003: string ;
   DeliverAll: string ;
   ShowModifOfEntityToCheckIn: string ;
   CheckedOut_Selected(:aUIAgent, SelectedRank:number):number;
   ShowModifOfEntityToCheckIn_Received(:aUIAgent, X:number, Y:number, Object:aFullObject):number;
   ShowModifOfEntityToCheckIn_CanReceive(:aUIAgent, X:number, Y:number, Object:aFullObject):number;
}
declare class CategoryDeliveredAgent extends aUIAgent {
   delivered: string ;
   Sync: string ;
   StaticText: string ;
   StaticText001: string ;
   GroupBox: string ;
   ShowRefDevHistory: string ;
   ShowRefDevHistoryOfEntity: string ;
   delivered_Selected(SelectedRank:number):number;
   ShowRefDevHistoryOfEntity_Received(X:number, Y:number, Object:aFullObject):number;
   ShowRefDevHistoryOfEntity_CanReceive(X:number, Y:number, Object:aFullObject):number;
}
declare class CategoryFreeAgent extends aUIAgent {
   free: string ;
   GroupBox: string ;
   CheckOut: string ;
   StaticText: string ;
   StaticText001: string ;
   free_Selected(:aUIAgent, SelectedRank:number):number;
}
declare class aCategoryOfInOutSync002Agent extends aSplitViewAgent {
}
declare class CategoryForRiskyCheckOutAgent extends aSplitViewAgent {
}
declare class aCategoryOfInOutSync001Agent extends aUIAgent {
   GroupBox: string ;
   CheckedOut: string ;
}
declare class aCategoryOfRiskyInOutSync extends aEntity {
   CheckedOut: string ;
   free: string ;
   myPresentor: string ;
   entityToCheckOut: string ;
   sort();
   purge();
   CheckOut();
}
declare class aRoleForCheckedOutOfRiskyInOut extends aSingleRoleType {
   IsDroppedObjectUsable();
   NewInstanceFromDroppedObject();
   ConsultThisObject();
}
declare class InOutSyncGeneralAgent extends aUIAgent {
   categories: string ;
   checkOutAll: string ;
   StaticText: string ;
   StaticText001: string ;
   SynchronizeAll: string ;
   checkInAll: string ;
   StaticText002: string ;
   StaticText003: string ;
   DeliverAll: string ;
}
declare class RiskyCheckOutAgent extends aUIAgent {
   categories: string ;
}
declare class onlyRefHistoryAgent extends aUIAgent {
   RefHistory: string ;
   HistoryKind: string ;
   HistoryKindGroupBox: string ;
   HistoryKind_Selected(SelectedRank:number):number;
}
declare class aCheckInOutSyncPresentor001Agent extends aFolderViewAgent {
}
declare class OneVersionOfRefConfigAgent extends aUIAgent {
   SelectedRefConfig: string ;
   DeltaWithPrevVersion: string ;
   showDifferenceWithPrevVersion: string ;
   DeltaWithPrevVersion_Selected(:aUIAgent, SelectedRank:number):number;
}
declare class aRiskyCheckInOutSyncPresentor extends aEntity {
   theLoggedUser: string ;
   theLocalConfig: string ;
   categories: string ;
   CategoryFromName(catName:string):aCategoryOfRiskyInOutSync;
   CategoryOf(thisEntity:aEntity):aCategoryOfRiskyInOutSync;
   refreshFromLocalConfig();
   refresh();
   CheckOut(thisEntity:aEntity);
   ParamInteract();
}
declare class aDeliveredRole extends aSingleRoleType {
   IsDroppedObjectUsable();
   NewInstanceFromDroppedObject();
   ConsultThisObject();
}
declare class aRoleForFreeOfRiskyInOut extends aSingleRoleType {
   ConsultThisObject();
}
declare class aOneVersionOfRefConfigRole extends aSingleRoleType {
   ConsultThisObject();
}
declare class aVesionAnalyserScenariosRole extends aSingleRoleType {
   ConsultThisObject();
}
declare class aVersionAnalyserImplemRole extends aSingleRoleType {
   SearchAndPick();
   canBreakLinkBetween();
}
declare class VersionAnalyzerMainAgent extends aUIAgent {
   theCI: string ;
   DefVersion: string ;
   DefVersionStaticText: string ;
   ImplemVersion: string ;
   ImplemVersionStaticText: string ;
   GroupBox: string ;
   MainSplitWithLeftAndRight: string ;
   RightIsProject: string ;
   HelpButton: string ;
   NbrOfVersions: string ;
   NbrOfVersionsStaticText: string ;
   MinVersionNumber: string ;
   MinVersionNumberStaticText: string ;
   MaxVersionNumber: string ;
   MaxVersionNumberStaticText: string ;
   RightIsWellParsed: string ;
   GlobalWD: string ;
   GenerateXMLDiff: string ;
   LoadValue();
}
declare class FolderForLeftVersionAgent extends aFolderViewAgent {
   NotifySelected();
}
declare class LeftMaskAgent extends aUIAgent {
   GroupBox: string ;
   GroupBox001: string ;
}
declare class LeftVarsAgent extends LeftMaskAgent {
   DeletedVars001: string ;
   FromChangedVars001: string ;
/**
*Portability Check: OK
*/
   FromChangedVars001_Selected(:aUIAgent, SelectedRank:number):number;
/**
*Portability Check: OK
*/
   DeletedVars001_Selected(:aUIAgent, SelectedRank:number):number;
}
declare class LeftMethsAgent extends LeftMaskAgent {
   DeletedMeths001: string ;
   FromChangedMeths001: string ;
   FromChangedImplems: string ;
/**
*Portability Check: OK
*/
   DeletedMeths001_Selected(:aUIAgent, SelectedRank:number):number;
/**
*Portability Check: OK
*/
   FromChangedMeths001_Selected(:aUIAgent, SelectedRank:number):number;
/**
*Portability Check: OK
*/
   FromChangedImplems_Selected(:aUIAgent, SelectedRank:number):number;
/**
*Portability Check: OK
*/
   FromChangedImplems_Executed(:aUIAgent, SelectedRank:number, Option:number):number;
}
declare class LeftTypesAgent extends LeftMaskAgent {
   DeletedTypes001: string ;
   FromChangedTypes001: string ;
/**
*Portability Check: OK
*/
   DeletedTypes001_Selected(:aUIAgent, SelectedRank:number):number;
/**
*Portability Check: OK
*/
   FromChangedTypes001_Selected(:aUIAgent, SelectedRank:number):number;
}
declare class LeftConstsAgent extends LeftMaskAgent {
   DeletedConstants001: string ;
   FromChangedConstants001: string ;
/**
*Portability Check: OK
*/
   DeletedConstants001_Selected(:aUIAgent, SelectedRank:number):number;
/**
*Portability Check: OK
*/
   FromChangedConstants001_Selected(:aUIAgent, SelectedRank:number):number;
}
declare class LeftScenariiAgent extends LeftMaskAgent {
   DeletedScens001: string ;
   FromChangedScens001: string ;
}
declare class LeftDefCommentAgent extends aUIAgent {
   LeftDefComment: string ;
}
declare class LeftImplemCommentAgent extends aUIAgent {
   LeftImplemComment: string ;
}
declare class DatesMaskAgent extends aUIAgent {
   LeftDefDateStaticText: string ;
   LeftImplemDateStaticText: string ;
   GroupBox: string ;
   StaticText: string ;
   StaticText001: string ;
   GroupBox001: string ;
}
declare class MainForLeftAgent extends aUIAgent {
   LeftImplemVersionStaticText: string ;
   LeftImplem001: string ;
   LeftDefVersion: string ;
   LeftDefVersionStaticText: string ;
   LeftSplit: string ;
   LeftImplemVersion001: string ;
   LeftImplemVersion002: string ;
   LeftImplemVersion001_ValueStored(:aUIAgent);
   LeftImplemVersion002_ValueStored(:aUIAgent);
}
declare class LeftSourceAgent extends aUIAgent {
   LeftSource: string ;
}
declare class LeftSplitAgent extends aSplitViewAgent {
   LoadValue();
}
declare class RightMaskAgent extends aUIAgent {
   GroupBox: string ;
   GroupBox001: string ;
}
declare class RightVarsAgent extends RightMaskAgent {
   ToChangedVars: string ;
   AddedVars: string ;
/**
*Portability Check: OK
*/
   ToChangedVars_Selected(:aUIAgent, SelectedRank:number):number;
/**
*Portability Check: OK
*/
   AddedVars_Selected(:aUIAgent, SelectedRank:number):number;
}
declare class RightMethsAgent extends RightMaskAgent {
   ToChangedMeths: string ;
   ToChangedImplems: string ;
   AddedMeths: string ;
/**
*Portability Check: OK
*/
   ToChangedMeths_Selected(:aUIAgent, SelectedRank:number):number;
/**
*Portability Check: OK
*/
   AddedMeths_Selected(:aUIAgent, SelectedRank:number):number;
/**
*Portability Check: OK
*/
   ToChangedImplems_Selected(:aUIAgent, SelectedRank:number):number;
}
declare class RightTypesAgent extends RightMaskAgent {
   ToChangedTypes: string ;
   AddedTypes: string ;
/**
*Portability Check: OK
*/
   ToChangedTypes_Selected(:aUIAgent, SelectedRank:number):number;
/**
*Portability Check: OK
*/
   AddedTypes_Selected(:aUIAgent, SelectedRank:number):number;
}
declare class RightConstsAgent extends RightMaskAgent {
   ToChangedConstants: string ;
   AddedConstants: string ;
/**
*Portability Check: OK
*/
   ToChangedConstants_Selected(:aUIAgent, SelectedRank:number):number;
/**
*Portability Check: OK
*/
   AddedConstants_Selected(:aUIAgent, SelectedRank:number):number;
}
declare class RightScensAgent extends RightMaskAgent {
   ToChangedScens: string ;
   AddedScens: string ;
}
declare class RightDefCommentAgent extends aUIAgent {
   RightDefComment: string ;
}
declare class RightImplemCommentAgent extends aUIAgent {
   RightImplemComment: string ;
}
declare class RightDatesAgent extends DatesMaskAgent {
   RightDefTime: string ;
   RightImplemTime: string ;
   RightImplemDate: string ;
   RightDefDate: string ;
   RightUser: string ;
}
declare class FolderForRightVersionAgent extends aFolderViewAgent {
   NotifySelected();
}
declare class LeftDatesAgent extends DatesMaskAgent {
   LeftDefTime: string ;
   LeftImplemTime: string ;
   LeftDefDate001: string ;
   LeftImplemDate001: string ;
   LeftUser: string ;
}
declare class RightSourceAgent extends aUIAgent {
   RightSource: string ;
}
declare class RightSplitAgent extends aSplitViewAgent {
   LoadValue();
}
declare class MainForRightAgent extends aUIAgent {
   RightSplit: string ;
   RightDefVersion: string ;
   RightDefVersionStaticText: string ;
   RightImplemVersionStaticText: string ;
   RightImplem001: string ;
   RightImplemVersion001: string ;
   RightImplemVersion002: string ;
   RightImplemVersion001_ValueStored(:aUIAgent);
   RightImplemVersion002_ValueStored(:aUIAgent);
}
declare class MainSplitWithLeftAndRightAgent extends aSplitViewAgent {
}
declare class LeftOnlyWithInfoAgent extends aUIAgent {
   LeftImplemVersion: string ;
   LeftImplemVersionStaticText: string ;
   LeftDefVersion: string ;
   LeftDefVersionStaticText: string ;
   LeftSplit: string ;
}
declare class RightOnlyWithInfoAgent extends aUIAgent {
   RightDefVersion: string ;
   RightDefVersionStaticText: string ;
   RightImplemVersion: string ;
   RightImplemVersionStaticText: string ;
   RightSplit: string ;
}
declare class VersionAnalyzerSimpleSplitAgent extends aSplitViewAgent {
}
declare class VersionAnalyserLightMainAgent extends aUIAgent {
   VersionAnalyzerSimpleSplit: string ;
   HelpButton: string ;
   RightIsWellParsed: string ;
   RightIsProject: string ;
   GlobalWD: string ;
   GenerateXMLDiff: string ;
   LoadValue();
}
declare class VersionAnalyzerMainForMdiAgent extends aOpenWhereClosedUIAgent {
   VersionAnalyzerMain: string ;
   NotifyCheck();
   NotifyPaint();
}
declare class aVersionAnalyzer extends aEntity {
   theImplem: string ;
   theDef: string ;
   DefVersion: string ;
   ImplemVersion: string ;
   LeftDefVersion: string ;
   LeftDef: string ;
   LeftImplemVersion: string ;
   PreviousLeftIV: string ;
   LeftImplem: string ;
   RightDefVersion: string ;
   RightDef: string ;
   RightImplemVersion: string ;
   PreviousRightIV: string ;
   RightImplem: string ;
   Modified: string ;
   DeletedVars: string ;
   FromChangedVars: string ;
   ToChangedVars: string ;
   AddedVars: string ;
   DeletedTypes: string ;
   FromChangedTypes: string ;
   ToChangedTypes: string ;
   AddedTypes: string ;
   DeletedConstants: string ;
   FromChangedConstants: string ;
   ToChangedConstants: string ;
   AddedConstants: string ;
   DeletedMeths: string ;
   FromChangedMeths: string ;
   ToChangedMeths: string ;
   AddedMeths: string ;
   DeletedScens: string ;
   FromChangedScens: string ;
   ToChangedScens: string ;
   AddedScens: string ;
   DeletedAPs: string ;
   FromChangedAPs: string ;
   ToChangedAPs: string ;
   AddedAPs: string ;
   FromChangedImplems: string ;
   ToChangedImplems: string ;
   LeftDefComment: string ;
   RightDefComment: string ;
   LeftImplemComment: string ;
   RightImplemComment: string ;
   LeftDefDate: string ;
   RightDefDate: string ;
   LeftImplemDate: string ;
   RightImplemDate: string ;
   LeftDefTime: string ;
   RightDefTime: string ;
   LeftImplemTime: string ;
   RightImplemTime: string ;
   LeftUser: string ;
   RightUser: string ;
   LeftSource: string ;
   RightSource: string ;
   AutomaticSelect: string ;
   RightIsProject: string ;
   Changed: string ;
   MinVersionNumber: string ;
   MaxVersionNumber: string ;
   NbrOfVersions: string ;
   theVersions: string ;
   RightIsWellParsed: string ;
   EnumClassId: string ;
   RecordClassId: string ;
   MethodTypeClassId: string ;
   Colored: string ;
   DeleteColor: string ;
   CreateColor: string ;
   ModifyColor: string ;
   FA: string ;
   FileName: string ;
   ColorInited: string ;
   ColorTexts();
   GenerateXMLDiffInFile(ClassDefNode:aXMLNamedNode);
   SearchEntityInImplem(thisEntity:aEntity, theImplem:aCUImplem, Found:boolean, TheInfo:string);
   GenerateListfOfInstancesDifferencesInXmlNode(inNode:aXMLNamedNode, NodeName:string, DeletedList:aListOfInstances, FromChangedList:aListOfInstances, ToChangedList:aListOfInstances, AddedList:aListOfInstances);
/**
*Portability Check: OK
*/
   GenerateListOfReftosDifferencesInXmlNode(inNode:aXMLNamedNode, NodeName:string, DeletedList:string, FromChangedList:string, ToChangedList:string, AddedList:string);
   GenerateChangedObjectInXmlNode(curNode:aXMLNamedNode, oldCurEntity:aFullObject, curEntity:aFullObject);
   LoadColors();
   Init();
   DateOf(theObj:aFullObject):string;
   MakeLegal(Nbr:number):number;
   ActuallyExists(Nbr:number):boolean;
   VersionAtOrBefore(Nbr:number):number;
   VersionAtOrAfter(Nbr:number):number;
   LoadVersion(VersNbr:number):aCUImplem;
   PrepareRightSide();
   ClearDiffLists();
   FindDifferencesBetween(LeftList:string, RightList:string, DeletedList:string, FromChangedList:string, ToChangedList:string, AddedList:string, Modified:boolean);
   CompareMethodsImplems();
   CompareCommentsAndUpdateSources();
   FindDifferences();
   PrepareLeftSide();
   DoLoadVersions();
   UpdateFromModuleImplem(theModImplem:aModuleImplem);
   Terminate();
   MakeLeftLegal();
   ComputeVersionsNumberThenLoadIfNecessary(WorkOnRightSide:boolean);
   ResetAll();
   ColorEntityInText(TheEntity:aEntity, ForImplem:aCUImplem, InAgent:aTextUIAgent, ForText:string, WithColor:string);
   StringExtract();
   PrepareRefDBAnalyze(FromModuleImplem:aModuleImplem, RefVersion:number);
   UpdateFolderAgent(theFolder:aUIAgent);
   SelectRightFolder(RankofFolder:number);
   SelectLeftFolder(RankofFolder:number);
   SelectInTextThisEntity(thisEntity:aEntity);
   InitAfterLoad();
   WinDiff();
   VisualDiff();
   WinMergeDiff();
   GlobalWD();
   doWDonMeths(FromLeft:boolean, thisEntity:aCUImplem);
   GenerateListofVarDifferencesInXmlNode(inNode:aXMLNamedNode, NodeName:string, varType:aType, OldValueAddress:string, NewValueAddress:string, Forced:boolean);
   MustPropagateOnChangedRefObject(varType:aReferenceType, oldEntity:aFullObject, OldValueAddress:string, newEntity:aFullObject, NewValueAddress:string):boolean;
   GenerateReftoVarDifferencesInXmlNode(interNode:aXMLNamedNode, NodeName:string, oldVarType:aReftoType, newVarType:aReftoType, oldEntity:aFullObject, OldValueAddress:string, newEntity:aFullObject, NewValueAddress:string, Forced:boolean);
   GenerateAnyVarDifferencesInXmlNode(inNode:aXMLNamedNode, NodeName:string, oldVarType:aType, newVarType:aType, oldEntity:aFullObject, OldValueAddress:string, newEntity:aFullObject, NewValueAddress:string, Forced:boolean);
   IsVarToBeSkipped(curEntity:aFullObject, theVarLink:string):boolean;
   GenerateMethodImplemChangesInXmlNode(ClassDefNode:aXMLNamedNode, NodeName:string, FromChangedList:string, ToChangedList:string);
   GenerateXMLDiff();
   XSDDateTime(thisObject:aFullObject):string;
   ColorTextsIfNotInited();
}
declare class aVersionAnalyserExtension001Agent extends aUIAgent {
   DoYourJob: string ;
   DoYourJob_CanReceive(X:number, Y:number, Object:aFullObject):number;
   DoYourJob_Received(X:number, Y:number, Object:aFullObject):number;
}
declare class aVersionAnalyserExtension extends aWideExtension {
   theVA: string ;
   theLocalDevHistorian: string ;
   FolderParentName();
   ButtonBMPName();
   MenuText();
   Analyse(ForImplem:aModuleImplem);
   RunLocalDevHistory();
   DoYourJob();
}
declare class aMail004Agent extends aUIAgent {
   aMail003: string ;
}
declare class aMail003Agent extends aFolderViewAgent {
}
declare class MailBodyScenarioAgent extends aUIAgent {
   Text: string ;
}
declare class MailHeaderScenarioAgent extends aUIAgent {
   Subject: string ;
   SubjectStaticText: string ;
   Date: string ;
   DateStaticText: string ;
   Orig: string ;
   OrigStaticText: string ;
   Dest: string ;
   DestStaticText: string ;
   RecipRequest: string ;
   Attachments: string ;
   AttachmentsGroupBox: string ;
}
declare class aMail extends aFullObject {
   Subject: string ;
   Corpus: string ;
   Date: string ;
   Orig: string ;
   Dest: string ;
   RecipRequest: string ;
   Attachments: string ;
   MailId: string ;
   TextIsSource: string ;
   myMB: string ;
   Priority: string ;
   PriorityFromCstring(TheString:string):string;
   SendMe();
   Dests():aListOfInstances;
}
declare class aMailAttachment001Agent extends aUIAgent {
   TheFile: string ;
   TheFileGroupBox: string ;
}
declare class aMailAttachment extends aFullObject {
   TheFile: string ;
}
declare class MAPIConnectionScenarioAgent extends aUIAgent {
   MAPIMessages: string ;
   Show();
}
declare class MAPIMessagesAgent extends aMicrosoftMAPIMessagesControlversion60Agent {
}
declare class aMapiConnection extends aMailConnection {
   SessionBroker: string ;
   MessageBroker: string ;
   TheUIAgent: string ;
   KeepMessagesInTheMAPIClient: string ;
   CurrentIndex: string ;
   GetMsgCount();
   PhysicalDisconnection();
   PhysicalConnection();
   SendMail();
   GetOneMail();
   NoModalInteract();
}
declare class aMicrosoftMAPISessionControlversion60 extends aLightObject {
   pIUnknown: string ;
   pbIUnknown: string ;
   pbIDispatch: string ;
   pbISupportErrorInfo: string ;
   pbIPersist: string ;
   pbIPersistStorage: string ;
   pbIDataObject: string ;
   pbIConnectionPointContainer: string ;
   pbIOleObject: string ;
   pbIOleWindow: string ;
   pbIOleInPlaceObject: string ;
   pbIViewObject: string ;
   pbIViewObject2: string ;
   pbIOleInPlaceActiveObject: string ;
   pbIProvideClassInfo: string ;
   pbIOleControl: string ;
   pbISpecifyPropertyPages: string ;
   pbIPersistStreamInit: string ;
   pbIPersistPropertyBag: string ;
   pbIOleInPlaceObjectWindowless: string ;
   pbIViewObjectEx: string ;
   pbIPointerInactive: string ;
   pbIPerPropertyBrowsing: string ;
   pbIQuickActivate: string ;
   pIMapiSession: string ;
   CreateInstance(CreateInstanceMode:number);
   Init();
   Terminate();
   IUnknown():bIUnknown;
   IDispatch():bIDispatch;
   ISupportErrorInfo():bISupportErrorInfo;
   IPersist():bIPersist;
   IPersistStorage():bIPersistStorage;
   IDataObject():bIDataObject;
   IConnectionPointContainer():bIConnectionPointContainer;
   IOleObject():bIOleObject;
   IOleWindow():bIOleWindow;
   IOleInPlaceObject():bIOleInPlaceObject;
   IViewObject():bIViewObject;
   IViewObject2():bIViewObject2;
   IOleInPlaceActiveObject():bIOleInPlaceActiveObject;
   IProvideClassInfo():bIProvideClassInfo;
   IOleControl():bIOleControl;
   ISpecifyPropertyPages():bISpecifyPropertyPages;
   IPersistStreamInit():bIPersistStreamInit;
   IPersistPropertyBag():bIPersistPropertyBag;
   IOleInPlaceObjectWindowless():bIOleInPlaceObjectWindowless;
   IViewObjectEx():bIViewObjectEx;
   IPointerInactive():bIPointerInactive;
   IPerPropertyBrowsing():bIPerPropertyBrowsing;
   IQuickActivate():bIQuickActivate;
   GetDownLoadMail(pbDownloadMail:string):string;
   SetDownLoadMail(DownLoadMail:boolean):string;
   GetLogonUI(pbLogonUI:string):string;
   SetLogonUI(LogonUI:boolean):string;
   GetNewSession(pbNewSession:string):string;
   SetNewSession(NewSession:boolean):string;
   GetAction(psAction:string):string;
   SetAction(Action:number):string;
   GetSessionID(plSessionID:string):string;
   SetSessionID(SessionID:number):string;
   GetPassword(pbstrPassword:string):string;
   SetPassword(Password:string):string;
   GetUserName(pbstrUserName:string):string;
   SetUserName(UserName:string):string;
   SignOn():string;
   SignOff():string;
   AboutBox():string;
}
declare class aMicrosoftMAPIMessagesControlversion60 extends aLightObject {
   pIUnknown: string ;
   pbIUnknown: string ;
   pbIDispatch: string ;
   pbISupportErrorInfo: string ;
   pbIPersist: string ;
   pbIPersistStorage: string ;
   pbIDataObject: string ;
   pbIConnectionPointContainer: string ;
   pbIOleObject: string ;
   pbIOleWindow: string ;
   pbIOleInPlaceObject: string ;
   pbIViewObject: string ;
   pbIViewObject2: string ;
   pbIOleInPlaceActiveObject: string ;
   pbIProvideClassInfo: string ;
   pbIOleControl: string ;
   pbISpecifyPropertyPages: string ;
   pbIPersistStreamInit: string ;
   pbIPersistPropertyBag: string ;
   pbIOleInPlaceObjectWindowless: string ;
   pbIViewObjectEx: string ;
   pbIPointerInactive: string ;
   pbIPerPropertyBrowsing: string ;
   pbIQuickActivate: string ;
   pIMapiMessages: string ;
   CreateInstance(CreateInstanceMode:number);
   Init();
   Terminate();
   IUnknown():bIUnknown;
   IDispatch():bIDispatch;
   ISupportErrorInfo():bISupportErrorInfo;
   IPersist():bIPersist;
   IPersistStorage():bIPersistStorage;
   IDataObject():bIDataObject;
   IConnectionPointContainer():bIConnectionPointContainer;
   IOleObject():bIOleObject;
   IOleWindow():bIOleWindow;
   IOleInPlaceObject():bIOleInPlaceObject;
   IViewObject():bIViewObject;
   IViewObject2():bIViewObject2;
   IOleInPlaceActiveObject():bIOleInPlaceActiveObject;
   IProvideClassInfo():bIProvideClassInfo;
   IOleControl():bIOleControl;
   ISpecifyPropertyPages():bISpecifyPropertyPages;
   IPersistStreamInit():bIPersistStreamInit;
   IPersistPropertyBag():bIPersistPropertyBag;
   IOleInPlaceObjectWindowless():bIOleInPlaceObjectWindowless;
   IViewObjectEx():bIViewObjectEx;
   IPointerInactive():bIPointerInactive;
   IPerPropertyBrowsing():bIPerPropertyBrowsing;
   IQuickActivate():bIQuickActivate;
   GetAddressCaption(pbstrAddressCaption:string):string;
   SetAddressCaption(AddressCaption:string):string;
   GetAddressEditFieldCount(psAddressEditFieldCount:string):string;
   SetAddressEditFieldCount(AddressEditFieldCount:number):string;
   GetAddressLabel(pbstrAddressLabel:string):string;
   SetAddressLabel(AddressLabel:string):string;
   GetAddressModifiable(pbAddressModifiable:string):string;
   SetAddressModifiable(AddressModifiable:boolean):string;
   GetAddressResolveUI(pbAddressResolveUI:string):string;
   SetAddressResolveUI(AddressResolveUI:boolean):string;
   GetAttachmentCount(plAttachmentCount:string):string;
   SetAttachmentCount(AttachmentCount:number):string;
   GetAttachmentIndex(plAttachmentIndex:string):string;
   SetAttachmentIndex(AttachmentIndex:number):string;
   GetAttachmentName(pbstrAttachmentName:string):string;
   SetAttachmentName(AttachmentName:string):string;
   GetAttachmentPathName(pbstrAttachmentPathName:string):string;
   SetAttachmentPathName(AttachmentPathName:string):string;
   GetAttachmentPosition(plAttachmentPosition:string):string;
   SetAttachmentPosition(AttachmentPosition:number):string;
   GetAttachmentType(psAttachmentType:string):string;
   SetAttachmentType(AttachmentType:number):string;
   GetFetchMsgType(pbstrFetchMsgType:string):string;
   SetFetchMsgType(FetchMsgType:string):string;
   GetFetchSorted(pbFetchSorted:string):string;
   SetFetchSorted(FetchSorted:boolean):string;
   GetFetchUnreadOnly(pbFetchUnreadOnly:string):string;
   SetFetchUnreadOnly(FetchUnreadOnly:boolean):string;
   GetMsgConversationID(pbstrMsgConversationID:string):string;
   SetMsgConversationID(MsgConversationID:string):string;
   GetMsgCount(plMsgCount:string):string;
   SetMsgCount(MsgCount:number):string;
   GetMsgDateReceived(pbstrMsgDateReceived:string):string;
   SetMsgDateReceived(MsgDateReceived:string):string;
   GetMsgID(pbstrMsgID:string):string;
   SetMsgID(MsgID:string):string;
   GetMsgIndex(plMsgIndex:string):string;
   SetMsgIndex(MsgIndex:number):string;
   GetMsgNoteText(pbstrMsgNoteText:string):string;
   SetMsgNoteText(MsgNoteText:string):string;
   GetMsgOrigAddress(pbstrMsgOrigAddress:string):string;
   SetMsgOrigAddress(MsgOrigAddress:string):string;
   GetMsgOrigDisplayName(pbstrMsgOrigDisplayName:string):string;
   SetMsgOrigDisplayName(MsgOrigDisplayName:string):string;
   GetMsgRead(pbMsgRead:string):string;
   SetMsgRead(MsgRead:boolean):string;
   GetMsgReceiptRequested(pbMsgReceiptRequested:string):string;
   SetMsgReceiptRequested(MsgReceiptRequested:boolean):string;
   GetMsgSent(pbMsgSent:string):string;
   SetMsgSent(MsgSent:boolean):string;
   GetRecipAddress(pbstrRecipAddress:string):string;
   SetRecipAddress(RecipAddress:string):string;
   GetRecipCount(plRecipCount:string):string;
   SetRecipCount(RecipCount:number):string;
   GetRecipDisplayName(pbstrRecipDisplayName:string):string;
   SetRecipDisplayName(RecipDisplayName:string):string;
   GetRecipIndex(plRecipIndex:string):string;
   SetRecipIndex(RecipIndex:number):string;
   GetRecipType(psRecipType:string):string;
   SetRecipType(RecipType:number):string;
   GetSessionID(plSessionID:string):string;
   SetSessionID(SessionID:number):string;
   GetMsgSubject(pbstrMsgSubject:string):string;
   SetMsgSubject(MsgSubject:string):string;
   GetMsgType(pbstrMsgType:string):string;
   SetMsgType(MsgType:string):string;
   GetAction(psAction:string):string;
   SetAction(Action:number):string;
   Compose():string;
   Copy():string;
   Delete(vObj:string):string;
   Fetch1():string;
   Forward1():string;
   Reply():string;
   ReplyAll():string;
   ResolveName():string;
   Save1():string;
   Show(vDetails:string):string;
   AboutBox():string;
   Send(vDialog:string):string;
}
declare class aMapiProfileConnection extends aMapiConnection {
   LastUserId: string ;
   SwitchToIdentityFromIdAndName(IdentityId:string, Name:string, NameLength:number, hkIdentities:string);
   SwitchToIdentityFromName(Name:string);
   SwitchToIdentityFromId(IdentityId:string, hkIdentities:string);
   SwitchBack();
}
declare class aMailConnection extends aLightObject {
   MailBoxesConnectedToMe: string ;
   GetMsgCount():number;
   PhysicalConnection(ThisMailBox:aMailBox):boolean;
   NotifyConnection(ThisMailBox:aMailBox):boolean;
   PhysicalDisconnection(ThisMailBox:aMailBox);
   NotifyDisconnection(ThisMailBox:aMailBox);
   SendMail(ThisMail:aMail);
   GetOneMail(Index:number, LeavingItInServer:boolean):aMail;
}
declare class aMailBox001Agent extends aUIAgent {
   StaticText: string ;
}
declare class aMailBox extends aFullObject {
   Name: string ;
   JustReceived: string ;
   History: string ;
   ToSend: string ;
   Sent: string ;
   Deleted: string ;
   BeingPrepared: string ;
   Connection: string ;
   Login: string ;
   Password: string ;
   WorkingOffLine: string ;
   SetMailDefaults(onThisMail:aMail);
   NewMail():aMail;
   NewConnection():aMailConnection;
   Connect();
   Disconnect();
   SendOne(Mail:aMail);
   SendAll();
   HowManyMailsWaiting():number;
   MailWaiting():boolean;
   CollectMails():number;
   AckAllMailsJustReceived();
   ForwardThisMail(Mail:aMail, Dest:string, Immediately:boolean);
   SetReadOne(mail:aMail);
   SetReadAll();
   BeforeAccept();
   InitAfterNewVersion();
   IsWorkingOffLine():boolean;
   WorkOffLine();
   WorkOnLine();
   ActionValid();
   ActionSaveAndClose();
   Terminate();
}
declare class aMailApp001Agent extends aUIAgent {
   NbMails: string ;
   NbMailsStaticText: string ;
   CheckCount: string ;
   GetLastMail: string ;
}
declare class aMailApplication extends aApplication {
   UserName: string ;
   UserPW: string ;
   MB: string ;
   NbMails: string ;
   DoItSimple();
   DoItDouble();
   CheckMail();
   CheckMailCount();
   HowMany():number;
   ReadOneMail(Index:number);
   Init();
   Terminate();
   CheckCount();
   GetLastMail();
}
declare class aMicrosoftMAPIMessagesControlversion60Agent extends aXXXAsOleControlUIAgent {
   GetAddressCaption():string;
   SetAddressCaption(AddressCaption:string);
   GetAddressEditFieldCount():number;
   SetAddressEditFieldCount(AddressEditFieldCount:number);
   GetAddressLabel():string;
   SetAddressLabel(AddressLabel:string);
   GetAddressModifiable():boolean;
   SetAddressModifiable(AddressModifiable:boolean);
   GetAddressResolveUI():boolean;
   SetAddressResolveUI(AddressResolveUI:boolean);
   GetAttachmentCount():number;
   SetAttachmentCount(AttachmentCount:number);
   GetAttachmentIndex():number;
   SetAttachmentIndex(AttachmentIndex:number);
   GetAttachmentName():string;
   SetAttachmentName(AttachmentName:string);
   GetAttachmentPathName():string;
   SetAttachmentPathName(AttachmentPathName:string);
   GetAttachmentPosition():number;
   SetAttachmentPosition(AttachmentPosition:number);
   GetAttachmentType():number;
   SetAttachmentType(AttachmentType:number);
   GetFetchMsgType():string;
   SetFetchMsgType(FetchMsgType:string);
   GetFetchSorted():boolean;
   SetFetchSorted(FetchSorted:boolean);
   GetFetchUnreadOnly():boolean;
   SetFetchUnreadOnly(FetchUnreadOnly:boolean);
   GetMsgConversationID():string;
   SetMsgConversationID(MsgConversationID:string);
   GetMsgCount():number;
   SetMsgCount(MsgCount:number);
   GetMsgDateReceived():string;
   SetMsgDateReceived(MsgDateReceived:string);
   GetMsgID():string;
   SetMsgID(MsgID:string);
   GetMsgIndex():number;
   SetMsgIndex(MsgIndex:number);
   GetMsgNoteText():string;
   SetMsgNoteText(MsgNoteText:string);
   GetMsgOrigAddress():string;
   SetMsgOrigAddress(MsgOrigAddress:string);
   GetMsgOrigDisplayName():string;
   SetMsgOrigDisplayName(MsgOrigDisplayName:string);
   GetMsgRead():boolean;
   SetMsgRead(MsgRead:boolean);
   GetMsgReceiptRequested():boolean;
   SetMsgReceiptRequested(MsgReceiptRequested:boolean);
   GetMsgSent():boolean;
   SetMsgSent(MsgSent:boolean);
   GetRecipAddress():string;
   SetRecipAddress(RecipAddress:string);
   GetRecipCount():number;
   SetRecipCount(RecipCount:number);
   GetRecipDisplayName():string;
   SetRecipDisplayName(RecipDisplayName:string);
   GetRecipIndex():number;
   SetRecipIndex(RecipIndex:number);
   GetRecipType():number;
   SetRecipType(RecipType:number);
   GetSessionID():number;
   SetSessionID(SessionID:number);
   GetMsgSubject():string;
   SetMsgSubject(MsgSubject:string);
   GetMsgType():string;
   SetMsgType(MsgType:string);
   GetAction():number;
   SetAction(Action:number);
   Compose();
   Copy();
   Delete(vObj:string);
   Fetch1();
   Forward1();
   Reply();
   ReplyAll();
   ResolveName();
   Save1();
   Show1(vDetails:string);
   AboutBox();
   Send(vDialog:string);
}
declare class aMicrosoftMAPIMessagesControlversion60Scenario extends aXXXAsOleControl {
   Init();
   DefaultUIAgentClassId();
}
declare class aMicrosoftMAPISessionControlversion60Agent extends aXXXAsOleControlUIAgent {
   GetDownLoadMail():boolean;
   SetDownLoadMail(DownLoadMail:boolean);
   GetLogonUI():boolean;
   SetLogonUI(LogonUI:boolean);
   GetNewSession():boolean;
   SetNewSession(NewSession:boolean);
   GetAction():number;
   SetAction(Action:number);
   GetSessionID():number;
   SetSessionID(SessionID:number);
   GetPassword():string;
   SetPassword(Password:string);
   GetUserName():string;
   SetUserName(UserName:string);
   SignOn();
   SignOff();
   AboutBox();
}
declare class aMicrosoftMAPISessionControlversion60Scenario extends aXXXAsOleControl {
   Init();
   DefaultUIAgentClassId();
}
declare class aWConsistencyCheckerAllClassesRole extends aWReparserAllClassesRole {
   IsDroppedObjectUsable();
}
declare class aCppEntitiesCppGeneratorRole extends aMultiRoleType {
   AskForActions();
}
declare class FirstPageForGenDeliveriesBundleAgent extends ReturnFirstPageGenCppEntityAgent {
   ChangeOfCppPackages: string ;
   NotifyInit();
}
declare class FolderForGenDeliveriesBundleAgent extends aFolderViewAgent {
}
declare class GenCppPackagesForBundleAgent extends aUIAgent {
   GenCppPackages: string ;
   GenCppPackages001: string ;
   FolderForGenCppPackage: string ;
   SetDefaultOptions: string ;
   GenCppPackages_Selected(SelectedRank:number):number;
}
declare class aGenDeliveriesBundle extends aGenCppEntity {
   GenCppPackages: string ;
   BundleSignature: string ;
   NewPackageFromListAndName(Name:string, theListOfEntity:aListOfInstances, UIAgentsToBeAdded:boolean, RolesToBeAdded:boolean);
   InitFromInstalledBundle(theBundle:aDeliveriesBundle);
   InitFromPreparedBundle(theBundlePreparer:aDeliveriesBundlePreparer);
   InitFromBundle(NewBundle:aEntity);
   BundleIsPrepared(bundle:aDeliveriesBundle):boolean;
   getBundle():aEntity;
   getMyBundle():aEntity;
   SetDefaultOptions();
   ChangeOfCppPackages();
   GenerateHeader();
   GenerateCpp();
   Compile();
   Link();
   CanGenerateHeader();
   CanGenerateCpp();
   CanCompile();
   CanLink();
   KnowsWhatToDoWith();
   LineExecuted();
   ResetDoneFlags();
   PutModulesToGenerate();
   GenCppEntityKind();
   ContainsReimplem();
}
declare class aInstalledOrPreparedBundleToGenerateRole extends aSingleRoleType {
   pickInMemOnly();
   canBreakLinkBetween();
   SearchAndPick();
}
declare class GraphCreaterAgent extends aUIAgent {
}
declare class aReftoAsComboBoxUIAgent extends aUIAgent {
   ComboBoxEntry: string ;
   candidates: string ;
   Picker: string ;
   pickscen: string ;
   inSelected: string ;
   MoreString: string ;
   range: string ;
   StringExtractKind: string ;
   StringExtractParam: string ;
   StringExtractMaxSize: string ;
   GetStringExtractKind():string;
   GetStringExtractParam():number;
   GetStringExtractMaxSize():number;
   refObjectStringExtract(RefObject:aLightObject):string;
   Init();
   Terminate();
   NotifyInit();
   InitCBList();
   LoadFromPicker():number;
   ComboBoxEntry_Executed(SelectedRank:number, Option:number):number;
   ComboBoxEntry_Selected(SelectedRank:number):number;
   ComboBoxEntry_LoseFocus():number;
   LoadValue();
   SetRange();
   SetForeColor();
   SetBackColor();
   GetForeColor();
   GetBackColor();
   RefreshTranslation();
}
declare class aReftoAsComboBoxScenario extends aScenario {
   DefaultUIAgentClassId();
   GetBitmap();
   HTMLAgentAccepted();
   IsXMLorXSLSelfProduced();
}
declare class ReftoAsComboBoxEntryAgent extends aReftoAsComboBoxUIAgent {
   ComboBoxEntry001: string ;
   NotifyInit();
   ComboBoxEntry001_Executed(:aUIAgent, SelectedRank:number, Option:number):number;
   ComboBoxEntry001_Selected(:aUIAgent, SelectedRank:number):number;
   ComboBoxEntry001_LoseFocus(:aUIAgent):number;
   ComboBoxEntry001_ButtonDown(:aUIAgent, No:number, X:number, Y:number):number;
   ComboBoxEntry001_ButtonDblClk(:aUIAgent, No:number, X:number, Y:number):number;
}
declare class aListOfAsGridColumnQualifier extends aColumnQualifier {
   WidthGivenByCell: string ;
   HeightGivenByCell: string ;
   TitleFontName: string ;
   TitleFontSize: string ;
   TitleFontSels: string ;
   Init();
   SelectFont();
   isAlive();
}
declare class aListOfAsGridScenario extends aGridScenario {
   NewQVarPresentor();
   DefaultUIAgentClassId();
   CanReceiveDropObject();
   InsertNewColumn(thisQVarPresentor:aQVPListOfAsGridScenario, theVar:aIdentifierDesc, theVarScenario:aScenario, X:number, Y:number, theScenarioAsDesignWindowAgent:aScenarioAsDesignWindowAgent);
   ReceiveDropObject();
   GetQVarPresentorOnDrop();
   PresentDraggableEntitiesFor(theType:aType);
   GetRefClassDef():aClassDef;
   QVPHasBeenSelected();
   GetIteratorOnQVars():aListIterator;
   Paint();
   AddFrames();
   IsConsistent();
   CanDisplayThisType();
   BuildSubComponents();
   InitEvents();
   IsMain();
   GetQVarPresentor(forThisVar:aIdentifierDesc, forThisType:aType):aQVPListOfAsGridScenario;
   IsXMLorXSLSelfProduced();
}
declare class aListOfAsGridUIAgent extends aGridUIAgent {
   VisibleObjects: string ;
   Projects: string ;
   IsInActions: string ;
   MakeProjectEventProcAddr: string ;
   CancelProjectEventProcAddr: string ;
   ProjectHasChangedEventProcAddr: string ;
   SetProjectInListForEventProcAddr: string ;
   NotifyMakeProject(thisObject:aFullObject):number;
   NotifyCancelProject(thisObject:aFullObject):number;
   NotifyProjectHasChanged(thisObject:aFullObject, HasChanged:boolean):number;
   NotifySetProjectInListFor(thisObject:aFullObject):number;
   MakeProject(thisObject:aFullObject):number;
   CancelProject(thisObject:aFullObject):number;
   ProjectHasChanged(thisObject:aFullObject, HasChanged:boolean):number;
   SetProjectInListFor(thisObject:aFullObject):number;
   SetObjectToCol(theObject:aLightObject, Col:number);
   SetObjectToLine(theObject:aLightObject, Line:number);
   ResizeRowsOrColumns();
   LoadValue();
   NotifyRangeHasChanged();
   InitWith(Qualifier:aQVPListOfAsGridScenario);
   NotifyCornerExecuted();
   Selection();
   NotifyInit();
   NotifyTerminate();
   StoreValue();
   ColResized();
   RowResized();
   GetSelectedObject();
}
declare class aListOfAsHLinkScenario extends aXXXAsListCtrl {
   DefaultUIAgentClassId();
   NewQVarPresentor();
   GetQVarPresentor();
}
declare class aListOfAsHLinkUIAgent extends aListCtrlUIAgent {
   LoadValue();
   NotifyExecuted();
   NotifyButtonUp();
}
declare class aQVPListOfAsGridScenario001Agent extends MoreQVPGridScenarioAgent {
   StringExtractKind: string ;
   StringExtractKindStaticText: string ;
   StringExtractParam: string ;
   StringExtractParamStaticText: string ;
   IsHorizontal: string ;
   RowsOrLinesResizeable: string ;
   NotifyInit();
}
/**
*

*/
declare class aQVPListOfAsGridScenarioColumnsAgent extends aUIAgent {
   myColumns: string ;
   Width: string ;
   WidthStaticText: string ;
   Fraction: string ;
   FractionStaticText: string ;
   RelativeWidth: string ;
   Width001: string ;
   Resizable: string ;
   WidthGivenByCell: string ;
   HeightGivenByCell: string ;
   myText: string ;
   myTextStaticText: string ;
   TitleForeColor: string ;
   TitleForeColorStaticText: string ;
   TitleBackColor: string ;
   TitleBackColorStaticText: string ;
   TitleJustification: string ;
   SelectFont: string ;
   MouseX: string ;
   MouseY: string ;
   myColumns_Executed(SelectedRank:number, Option:number):number;
   myColumns_ButtonUp(No:number, X:number, Y:number):number;
}
declare class aQVPListOfAsGridScenario002Agent extends aFolderViewAgent {
}
declare class aQVPListOfAsGridScenario extends aQVPGridScenario {
   myColumns: string ;
   myClassDef: string ;
   StringExtractKind: string ;
   StringExtractParam: string ;
   ColSelected: string ;
   IsHorizontal: string ;
   RowsOrLinesResizeable: string ;
   GetSelectedQVar(AtRank:number):aQVarPresentor;
   ShowAssociatedQVarPresentor(ColumnRank:number, ExecMode:string);
   ConsultAssociatedQVarPresentor();
   ModifyAssociatedQVarPresentor();
   MoveUp();
   MoveDown();
   Delete();
   IsConsistent();
}
declare class aQVPListOfAsHLinkScenario extends aQVPXXXAsExtendedListCtrl {
   StringExtractKind: string ;
   StringExtractParam: string ;
}
declare class aQVPReftoAsHLink001Agent extends aUIAgent {
   StringExtractKind: string ;
   StringExtractKindStaticText: string ;
   StringExtractParam: string ;
   StringExtractParamStaticText: string ;
   NoneValue: string ;
   NoneValueStaticText: string ;
   GroupBox: string ;
   NotifyInit();
}
declare class aQVPReftoAsHLink002Agent extends aUIAgent {
}
declare class aQVPReftoAsHLink extends aQVPXXXAsPushButton {
   StringExtractKind: string ;
   StringExtractParam: string ;
   NoneString: string ;
   GetMyTranslatedNoneString():string;
}
declare class aReftoAsHLink001Agent extends aUIAgent {
   DefaultStringExtractKind: string ;
   DefaultStringExtractKindStaticText: string ;
   DefaultStringExtractParam: string ;
   DefaultStringExtractParamStaticText: string ;
   DefaultNoneValue: string ;
   DefaultNoneValueStaticText: string ;
}
declare class aReftoAsHLink extends aXXXAsPushButton {
   DefaultStringExtractKind: string ;
   DefaultStringExtractParam: string ;
   DefaultNoneString: string ;
   Init();
   DefaultUIAgentClassId();
   NewQVarPresentor();
   GetQVarPresentor();
   GetLabelForThisQVarPresentor();
}
declare class aReftoAsHLinkAgent extends aExecutableControlAgent {
   IsDragging: string ;
   LoadValue();
   NotifyExecuted();
   NotifyButtonDown();
   NotifyButtonUp();
   NotifyMouseMove();
   NotifyCanReceiveDroppedObject();
   NotifyDroppedObject();
   InteractWithUser();
}
declare class aRoleFormyColumnsInLOAGC extends aSingleRoleType {
   PrepareNestedObject();
   canBreakLinkBetween();
}
declare class aSetAsListCtrl extends aXXXAsListCtrl {
   DefaultUIAgentClassId();
   GetQVarPresentor();
}
declare class aSetAsListCtrlUIAgent extends aListCtrlUIAgent {
   Finalize();
   LoadValue();
   NotifyItemChecked();
   RefreshTranslation();
}
declare class FancySetAsListCtrlAgent extends aSetAsListCtrlUIAgent {
}
declare class ListOfAsGridAgent extends aListOfAsGridUIAgent {
}
declare class ListofAsHLinksScenarioAgent extends aListOfAsHLinkUIAgent {
}
declare class ReftoHLinkAgent extends aReftoAsHLinkAgent {
}
declare class SetAsListCtrlAgent extends aSetAsListCtrlUIAgent {
}
declare class DaySpinButtonAgent extends aCStringControlAgent {
   MinDate: string ;
   MaxDate: string ;
   GetMinAndMaxDate();
   LoadValue(VarAddress:string, theVarType:aType);
   UpdateDateWithDayValue(TheDate:string, TheDayValue:number);
   StoreValue(VarAddress:string, theVarType:aType);
   NotifySelected();
   NotifyInit();
}
declare class MonthSpinButtonAgent extends aCStringControlAgent {
   LoadValue(VarAddress:string, theVarType:aType);
   UpdateDateWithMonthValue(TheDate:string, TheMonthValue:number);
   StoreValue(VarAddress:string, theVarType:aType);
   NotifySelected();
   NotifyInit();
}
declare class YearSpinButtonAgent extends aCStringControlAgent {
   LoadValue(VarAddress:string, theVarType:aType);
   UpdateDateWithYearValue(TheDate:string, TheYearValue:number);
   StoreValue(VarAddress:string, theVarType:aType);
   NotifySelected();
   NotifyInit();
}
declare class WydeCPPToolsAgent extends aUIAgent {
   CreatePackagesFromInstalledBundles: string ;
   CreatePackagesFromTextFileForAllBundles: string ;
}
declare class OnlyCPPGeneratorAgent extends aUIAgent {
   OnlyGenCppEntities: string ;
}
declare class aGenCPPPackageRole extends aMultiRoleType {
   AuthorizeAction();
}
declare class aGenDeliveryBundleRole extends aSingleRoleType {
   BundleIsPrepared(bundle:aDeliveriesBundle):boolean;
   NewAcceptedInstance();
}
declare class ScenarioInGraphAgent extends aGraphFrameForScenarioUIAgent {
}
declare class aCLSIDDesc001Agent extends aUIAgent {
   TypeLib: string ;
   TypeLibStaticText: string ;
   CreateTypeLib: string ;
}
declare class aCLSIDDesc extends aCOMDesc {
   TypeLib: string ;
   DllFile: string ;
/**
*Portability Check: OK, this is really a word (16 bits)
passed in a pointer-sized variable
*/
   CreateBitmap();
   IdRootKeyName();
   CreateTypeLib();
   CreateDllFileReference();
   GetIdRootHKEY();
}
declare class aTYPELIBDesc001Agent extends aUIAgent {
   ComponentId: string ;
   ComponentIdStaticText: string ;
   VersionString: string ;
   VersionStringStaticText: string ;
   hkVersion: string ;
   hkVersionStaticText: string ;
   Name: string ;
   NameStaticText: string ;
   CreateName: string ;
   TypeLibFile: string ;
   TypeLibFileStaticText: string ;
}
declare class aTYPELIBDesc extends aCOMDesc {
   VersionString: string ;
   TypeLibFile: string ;
   hkVersion: string ;
   MajorAndMinorVersion(MajorVersion:number, MinorVersion:number);
   IdRootKeyName();
   GetVersionHKEY():string;
   ReleaseHKEYS();
   KeyForValues();
   GetIdRootHKEY();
   CreateTypeLibFileReference();
   IdAccessRight();
}
declare class aCOMWrapperExtension005Agent extends aUIAgent {
   theAllComGallery: string ;
   COMRegistry: string ;
   COMRegistryGroupBox: string ;
}
declare class aAllComGallery001Agent extends aUIAgent {
   BuildCOMRegistry: string ;
}
declare class lbCategoryDeliveredAgent extends aUIAgent {
   delivered: string ;
   deliveredGroupBox: string ;
   Sync: string ;
}
declare class lbCategoryFreeAgent extends aUIAgent {
   free: string ;
   freeGroupBox: string ;
}
declare class lbCategoryFreeDeliveredAgent extends aSplitViewAgent {
}
declare class lbOutFreeDeliveredAgent extends aSplitViewAgent {
}
declare class lbCatAsFolderAgent extends aUIAgent {
   categories: string ;
}
declare class aInOutSyncCategory001Agent extends aSplitViewAgent {
}
declare class RefDevSelectorAgent extends aUIAgent {
   Target: string ;
   TargetStaticText: string ;
   SelectFromNames: string ;
   AllCount: string ;
   FreeCount: string ;
   SelectedAll: string ;
   CheckOut: string ;
   Sync: string ;
   StaticText001: string ;
   ShowRefDevHistoryOfEntity: string ;
   StaticText002: string ;
   GroupBox: string ;
   StaticText003: string ;
   StaticText004: string ;
   GroupBox001: string ;
   CheckOutAll: string ;
   SyncAll: string ;
   SortAll_Executed(:aUIAgent, SelectedRank:number, Option:number):number;
   SelectFromNames_Executed(:aUIAgent, SelectedRank:number, Option:number):number;
   SelectedAll_Selected(:aUIAgent, SelectedRank:number):number;
   ShowRefDevHistoryOfEntity_Executed(:aUIAgent, SelectedRank:number, Option:number):number;
   ShowRefDevHistoryOfEntity_CanReceive(X:number, Y:number, Object:aFullObject):number;
   ShowRefDevHistoryOfEntity_Received(X:number, Y:number, Object:aFullObject):number;
}
declare class CheckedOutCategoryAgent extends aUIAgent {
   CheckedOut: string ;
   CheckIn: string ;
   Deliver: string ;
   CheckInAll: string ;
   DeliverAll: string ;
   ShowModifOfEntityToCheckIn: string ;
   ShowRefDevHistoryOfEntity: string ;
   LocalTarget: string ;
   LocalTargetStaticText: string ;
   LocalSelectFromNames: string ;
   StaticText004: string ;
   ShowModifiedOnly: string ;
   GroupBox: string ;
   GroupBox001: string ;
   StaticText005: string ;
   StaticText006: string ;
   GenerateXMLDiffForAll: string ;
   CheckedOut_Selected(SelectedRank:number):number;
   ShowModifOfEntityToCheckIn_CanReceive(:aUIAgent, X:number, Y:number, Object:aFullObject):number;
   ShowModifOfEntityToCheckIn_Received(:aUIAgent, X:number, Y:number, Object:aFullObject):number;
   ShowRefDevHistoryOfEntity_CanReceive(:aUIAgent, X:number, Y:number, Object:aFullObject):number;
   ShowRefDevHistoryOfEntity_Received(:aUIAgent, X:number, Y:number, Object:aFullObject):number;
   LocalSelectFromNames_Executed(:aUIAgent, SelectedRank:number, Option:number):number;
   ShowModifiedOnly_ValueStored(:aUIAgent);
}
declare class aInOutCategory extends aEntity {
   myPresentor: string ;
   AllLocalEntities: string ;
   LocalSelectedEntities: string ;
   localSelectedCount: string ;
   AllRefDevFakes: string ;
   AllCount: string ;
   FreeCount: string ;
   RefDevSelectedFakes: string ;
   RefDevSelectedCount: string ;
   SelectedRefDev: string ;
   SelectedLocal: string ;
   RefDevTarget: string ;
   LocalTarget: string ;
   LoggedOutHasBeenMarked: string ;
   NotLoaded: string ;
   BitMapFree: string ;
   BitMapLocked: string ;
   ShowModifiedOnly: string ;
   pMyOriginalList():string;
   GetActualEntity(forThisFake:aFakeEntity):aEntity;
   MyAll():aListOfInstances;
   SortAll();
   EntityToCheckIn():aEntity;
   entityToCheckOut():aEntity;
   entityToSync():aEntity;
   ShowModifOfEntityToCheckIn();
   purge();
   SelectByUser(username:string);
   SelectFromNames();
   isInSync(thisEntity:aEntity):boolean;
   LocalSelectFromNames();
   CheckIn();
   CheckInAll();
   CheckOut();
   CheckOutAll();
   Sync();
   SyncAll();
   Deliver();
   DeliverAll();
   ShowRefDevHistoryOfEntity();
   MarkLoggedOut(forUser:aUser);
   MarkFreeToLoggedOut();
   MarkAllLoggedOut();
   refresh();
   FindBitMaps();
   Init();
   Terminate();
   AcceptableXMLCategoryName():string;
   GenerateXMLDiffNodeAllObjects(inNode:aXMLNamedNode);
   GenerateXMLDiffForAll();
}
declare class aInOutCatModAndClasses extends aInOutCategory {
   moduleBitmaplocked: string ;
   moduleBitmapfree: string ;
   pMyOriginalList();
   oldGetActualEntity(forThisFake:aFakeEntity):aEntity;
/**
*Portability Check: OK
*/
   MakeFakeList(fromList:string, FakeList:aListOfInstances);
   EliminateDeletedButNeverDelivered(LoggedUser:aUser);
   refresh();
   FindBitMaps();
}
declare class aInOutLocalRole extends aSingleRoleType {
   IsDroppedObjectUsable();
   NewInstanceFromDroppedObject();
   ConsultThisObject();
}
declare class aInOutPresentor001Agent extends aUIAgent {
   aInOutPresentorMain: string ;
   checkOutAll: string ;
   SynchronizeAll: string ;
   DeliverAll: string ;
   checkInAll: string ;
   StaticText002: string ;
   StaticText003: string ;
}
declare class aInOutPresentorMainAgent extends aFolderViewAgent {
   NotifySelected();
}
declare class OnlyModAndClassesAgent extends aUIAgent {
   ModAndClasses: string ;
   OnlyCatModAndClasses: string ;
}
declare class OtherCategoriesAgent extends aUIAgent {
   OtherCategories: string ;
}
declare class RefDevHistoryAgent extends aUIAgent {
   Historian: string ;
   aRefDevHistoryPresentor001: string ;
}
declare class LogsAdminAgent extends aUIAgent {
   historyCount: string ;
   historyCountStaticText: string ;
   TruncDate: string ;
   TruncDateGroupBox: string ;
   TruncCount: string ;
   TruncateHistoryByDate: string ;
   TruncateHistoryByNumber: string ;
   StaticText: string ;
   DoRefreshHistory: string ;
}
/**
*The purposes of this new implementation of InOutSync tools are
   - make it faster to connect to the RefDev
   - make it easier when the user wants only to manipulate Modules and Classes
   - make it less memory hungry
   - prove to our users that we care
*/
declare class aInOutPresentor extends aEntity {
   DBMgrForRefDev: string ;
   theLoggedUser: string ;
   theRefConfig: string ;
   theLocalConfig: string ;
   ModAndClasses: string ;
   categories: string ;
   SelectedModuleImplem: string ;
   Historian: string ;
   NotLoaded: string ;
   CurrentlySelected: string ;
   myVersion: string ;
   FolderVersion: string ;
   RefDevTgvPath: string ;
   historyCount: string ;
   TruncDate: string ;
   TruncCount: string ;
   DoInOutSync();
   ViewHistory();
   Refresh();
   DoSyncAll();
   OnRefDataBase():boolean;
   CategoryFromName(catName:string):aInOutCategory;
   CategoryOf(thisEntity:aEntity):aInOutCategory;
   CheckOut(thisEntity:aEntity);
   CheckOutList(theList:aListOfInstances);
   checkOutAll();
   CheckIn(thisEntity:aEntity);
   CheckInList(theList:aListOfInstances);
   checkInAll();
   SyncList(theList:aListOfInstances);
   Sync(thisEntity:aEntity);
   SynchronizeAll();
   Deliver(thisEntity:aEntity);
   DeliverList(theList:aListOfInstances);
   DeliverAll();
   getSyncVersion(thisentity:aEntity):number;
   showDifferenceWithSynchVersion(theModuledef:aModuleDef);
   showDifferenceWithPrevVersion();
   doVAOnRefDev(theModuledef:aModuleDef);
   InitHistory();
   RefreshHistory(loading:boolean);
   DoRefreshHistory();
   CheckRefDev(path:string):boolean;
   ApplyRiskyAndGo(theUser:aUser, theRefConfig:aRefConfig):boolean;
   DoYourShow();
   Init();
   Terminate();
   NewFakeFrom(entity:aEntity, rankinlist:number):aFakeEntity;
   MarkOtherFreeToLoggedOut();
   MarkOtherLoggedOut(forUser:aUser);
   RefreshOtherCategories();
   RefreshIfNeeded(Folder:number);
   TruncateHistoryByDate();
   TruncateHistoryByNumber();
   JustSyncAll();
}
declare class aInOutRefDevRole extends aSingleRoleType {
   IsDroppedObjectUsable();
   NewInstanceFromDroppedObject();
   ConsultThisObject();
}
/**
*Beware that a few methods are used by name from the c++
*/
declare class aLogBroker extends aLightObject {
   myLastAddress: string ;
   isInited: string ;
   isComitted: string ;
   isCancelled: string ;
   myRefConfig: string ;
   RefDevDB: string ;
   RefProxyAddress: string ;
   RefProxy: string ;
   curUserProxyaddress: string ;
   curUserProxy: string ;
   curUserId: string ;
   CommentTitle: string ;
   CommentText: string ;
   Reference: string ;
   AddThisLog(Action:string, theUser:aUser, theEntity:aEntity, theRefConfig:aRefConfig, theTransaction:aTransaction);
   CommitAllLogs(theRefconfig:aRefConfig);
   CancelAllLogs(theRefconfig:aRefConfig);
   NotifyNewRefConfig(theRefconfig:aRefConfig);
   CleanUpOnExit(theRefconfig:aRefConfig);
   AddThisLogEx(Action:string, theUser:aUser, theEntity:aEntity, theRefConfig:aRefConfig, theTransaction:aTransaction, AskForComment:boolean, pCommentId:string);
   InstallRefProxy();
   InstallCurUser(theUser:aUser);
   LogAlert(coment:string);
   Init();
   Terminate();
}
declare class RefDevHistoryExtensionOverrideAgent extends aUIAgent {
   DoYourJob: string ;
}
declare class aRefDevHistoryExtension extends aWideExtension {
   FolderParentName();
   MenuText();
   ButtonBMPName();
   DoYourJob();
}
declare class aRefDevHistoryPresentor001Agent extends aUIAgent {
   ViewByUser: string ;
   ViewAllHistory: string ;
   Selection001: string ;
   SelectionGroupBox: string ;
   StaticText: string ;
   NbrLogsLoaded: string ;
   tmpList: string ;
   count001: string ;
   SelectedUser: string ;
   GroupBox: string ;
   GroupBox002: string ;
   EntityList: string ;
   theList001: string ;
   StaticText001: string ;
   HistoryCount: string ;
   tmpList001: string ;
   GenerateXMLDiff: string ;
   SetToWhite();
   Selection001_Selected(:aUIAgent, SelectedRank:number):number;
   theList001_Executed(:aUIAgent, SelectedRank:number, Option:number):number;
   tmpList001_Executed(:aUIAgent, SelectedRank:number, Option:number):number;
}
declare class aRefDevHistoryPresentor extends aFullObject {
   myInOut: string ;
   StartHistory: string ;
   HistoryCount: string ;
   theLoggedUser: string ;
   HistoryList: string ;
   NbrLogsLoaded: string ;
   tmpList: string ;
   SelectUser: string ;
   SelectEntity: string ;
   Selection: string ;
   Actions: string ;
   OlderDate: string ;
   Older: string ;
   NearerDate: string ;
   Nearer: string ;
   Ascending: string ;
   ViewBy: string ;
   BetweenDates: string ;
   SelectedUser: string ;
   DB: string ;
   EntityList: string ;
   Users: string ;
   SelectedUserId():number;
   InitOnRefConfig(theRefConfig:aRefConfig);
   ListToView():aListOfInstances;
   EntityListToView():aListOfInstances;
   BuildActions(fromSelection:string):string;
   meetsSelection(event:aLightEvent):boolean;
   comments();
   UserFromId(Id:number):aUser;
   BuildDistinctEntitiesList();
   LoadMoreLogsFromAddress(StartingAddr:number, InThisList:aListOfInstances, MaxItems:number);
   LoadHistory(Count:number, presentWholelist:boolean);
   ReLoadHistory(Count:number, presentWholelist:boolean);
   ViewByUser();
   ViewAllHistory();
   ViewByEntity();
   Useragrees(coment:string):boolean;
/**
*Portability Check: OK
*/
   TruncateCurrentPositionAndAfter(it:aIteratorInTGV, curlog:string);
   TruncateHistoryByDate(Before:string);
   TruncateHistoryByNumber(ItemsKept:number);
   Init();
   Terminate();
   UIRefresh();
   GenerateXMLDiffNode(inNode:aXMLNamedNode);
   GenerateXMLDiff();
}
declare class aFakeEntity extends aFullObject {
   Name: string ;
   myOwner: string ;
   realClassId: string ;
   RankInList: string ;
   RankInFreeList: string ;
   SmallId: string ;
   BitMapFree: string ;
   BitMapLocked: string ;
   isKilled: string ;
   isFreeForCheckOut: string ;
   theTrueEntity: string ;
   IsFree():boolean;
   IsInSync():boolean;
   GetBitmap();
   ActualEntity():aEntity;
   StringExtract();
}
declare class LightEventMainAgent extends aUIAgent {
   Log: string ;
   Action001: string ;
   myTime: string ;
   UserNameStaticText: string ;
   StaticText: string ;
   GetUserName: string ;
   GetEntityNameAndClassName: string ;
   StaticText001: string ;
   GetDayAndDate: string ;
   StaticText002: string ;
   DoVersionAnalysis001: string ;
   StaticText003: string ;
   StaticText004: string ;
   GetComment: string ;
   GetReference: string ;
   StaticText005: string ;
   StaticText006: string ;
   GetCommentText: string ;
   DoVersionAnalysis001_ValueLoaded();
}
/**
*This class used to build presentable objects from Logs stored in RefDevTGV

We try to avoid loading objects as much as we can...

Currently in the tLog, HistoryId is zero or meaningless
                       PrevUserEvent is not used ( created problems on risky situation, and not needed)
*/
declare class aLightEvent extends aLightObject {
   Date: string ;
   Time: string ;
   Log: string ;
   User: string ;
   Entity: string ;
   UserName: string ;
   EntityName: string ;
   Comment: string ;
   myDate():string;
   myTime():string;
   GetDayAndDate():string;
   EntityFromIds(IDs:string):aEntity;
   EntityNameFromIds(IDs:string):string;
   StringExtract();
   PrepareVA(theVA:aVersionAnalyzer, forImplem:aModuleImplem);
   Analyse(forImplem:aModuleImplem);
   DoVersionAnalysis();
   GetBitmap();
   GetUserName():string;
   GetEntityName():string;
   GetEntityClassName():string;
   GetEntityNameAndClassName():string;
   GetAction():string;
   canDoVersionAnalyse():boolean;
   GetComment():string;
   GetReference():string;
   GetCommentText():string;
   GenerateXMLEvent(inNode:aXMLNamedNode, theVA:aVersionAnalyzer);
   EntityVersion():number;
}
declare class OnlySyncAllAgent extends aUIAgent {
   DoYourJob: string ;
}
declare class aInOutOnlySynchronizeAllExtension extends aWideExtension {
   FolderParentName();
   MenuText();
   ButtonBMPName();
   DoYourJob();
}
declare class aRefUserRole extends aSingleRoleType {
   pickInMemOnly();
}
declare class aHistoryEntityRole extends aSingleRoleType {
   pickInMemOnly();
}
declare class VAForSyncVersionAgent extends aUIAgent {
   VersionAnalyserLightMain: string ;
   StaticText: string ;
   StaticText001: string ;
   NotifyInit();
}
declare class VAForRefDevAgent extends aUIAgent {
   VersionAnalyzerMain: string ;
   StaticText: string ;
}
declare class VAOptionOverrideAgent extends aUIAgent {
   DeleteColor: string ;
   DeleteColorStaticText: string ;
   ModifyColot: string ;
   ModifyColotStaticText: string ;
   CreateColor: string ;
   CreateColorStaticText: string ;
   CustomDiff: string ;
   CustomDiffTool: string ;
   CustomDiffToolGroupBox: string ;
   CustomDiff_Init():number;
   CustomDiffTool_Init():number;
   CustomDiffToolGroupBox_Init():number;
}
declare class aVersionAnaOption extends aOption {
   DeleteColor: string ;
   ModifyColor: string ;
   CreateColor: string ;
   CustomDiff: string ;
   CustomDiffTool: string ;
   Init();
}
declare class MMBrowserSelectedEntityAgent extends aUIAgent {
   GetPresentedEntity: string ;
   ComboBox: string ;
   loading: string ;
   ComboBox_Executed(SelectedRank:number, Option:number):number;
   ComboBox_Selected(SelectedRank:number):number;
   LoadValue();
   ComboBox_LoseFocus(:aUIAgent):number;
}
declare class MMBrowserOnlyFoundEntitiesAgent extends aUIAgent {
   FoundEntities: string ;
   FoundEntities_Executed1(SelectedRank:number, Option:number):number;
   FoundEntities_Popup(Param1:string):number;
   FoundEntities_Received(X:number, Y:number, Object:aFullObject):number;
   FoundEntities_CanReceive(X:number, Y:number, Object:aFullObject):number;
   FoundEntities_ValueLoaded(:aUIAgent);
   FoundEntities_ComputeLine(theArrayOfStrings:string, ObjectIndex:number, theListOfReftos:aListOfInstances):number;
   FoundEntities_SortColumn(Data1:number, Data2:number):number;
}
declare class MMBrowserDOmainsAgent extends aUIAgent {
   Domains: string ;
}
declare class newMMBrowserAgent extends aOpenWhereClosedUIAgent {
   aMMBrowser001: string ;
   aMMBrowser001_ShortKey(Ch:number, VKey:string, theCount:number, Flags:string):number;
}
declare class aMMBrowser001Agent extends aSplitViewAgent {
}
declare class newSelectionMMBrowserAgent extends aUIAgent {
   ExecuteSelection: string ;
   BrowseAbleEntitys: string ;
   ComboBoxEntry: string ;
   NoUIAgents: string ;
   NoInLineTypes: string ;
   NoInLineConsts: string ;
   MatchWholeWord: string ;
   MatchCase: string ;
   StaticText001: string ;
   MMBrowserOnlyFoundEntities: string ;
   OnlyReimplem: string ;
   FillCriteriaHistoryInCB(andSelectCritera:string);
   ComboBoxEntry_Executed(SelectedRank:number, Option:number):number;
   ComboBoxEntry_Selected(SelectedRank:number):number;
   ComboBoxEntry_Changed(:aUIAgent):number;
   ComboBoxEntry_LoseFocus(:aUIAgent):number;
   ComboBoxEntry_CanReceive(X:number, Y:number, Object:aFullObject):number;
   ComboBoxEntry_Received(X:number, Y:number, Object:aFullObject):number;
   BrowseAbleEntitys_ValueLoaded(:aUIAgent);
   BrowseAbleEntitys_ValueStored(:aUIAgent);
   ComboBoxEntry_ValueLoaded(:aUIAgent);
   NotifyInit();
}
declare class aMMBrowserOptionsAgent extends aUIAgent {
   Domains: string ;
   DomainsStaticText: string ;
   MaxCountInFoundEntities: string ;
   MaxCountInFoundEntitiesStaticText: string ;
   InMemWhereUsed: string ;
   DefaultInImplem: string ;
   DefaultInDef: string ;
   DefaultInScenarios: string ;
   DefaultInSharableObjects: string ;
   StaticText: string ;
   CreateAndDisplayAnotherMMBrowser: string ;
}
declare class aMMBrowser004Agent extends aFolderViewAgent {
   NotifySelected();
}
declare class ModalBrowsingAgent extends aUIAgent {
   StaticText: string ;
   aMMBrowser001: string ;
}
declare class MMBrowserInModalModeAgent extends aUIAgent {
   aMMBrowser001: string ;
}
declare class aMMBrowser extends aEntity {
   BrowseAbleEntitys: string ;
   NoUIAgents: string ;
   MaxCountInFoundEntities: string ;
   Domains: string ;
   NoInLineTypes: string ;
   NoInLineConsts: string ;
   MatchWholeWord: string ;
   MatchCase: string ;
   InMemWhereUsed: string ;
   FoundEntities: string ;
   Criterium: string ;
   CurrentEntity: string ;
   theReference: string ;
   Number: string ;
   lastSelectedEntity: string ;
   SelectedCallBack: string ;
   ObjectCallBack: string ;
   allCheckOutEntities: string ;
   DefaultInImplem: string ;
   DefaultInDef: string ;
   DefaultInScenarios: string ;
   DefaultInSharableObjects: string ;
   ExecutingSelection: string ;
   ExecuteSelectionUIAgent: string ;
   NoReimplem: string ;
   OnlyReimplem: string ;
   GetPresentedEntity():aEntityMMViewer;
   InitAfterLoad();
   InitAfterNewVersion();
   cleanUpDomains();
   GetCurrentEntity():aEntity;
   setCurrentEntity(theEntity:aEntity);
   cleanup();
   Init();
   Terminate();
   CheckOutSelectedEntity();
   CheckInSelectedEntity();
   SyncSelectedEntity();
   DeliverSelectedEntity();
   IsOk(curEntity:aEntity, forKind:string):boolean;
   AppendAliveEntity(curEntity:aEntity, forKind:string);
   AppendAliveEntityFrom(theList:aListOfInstances, forKind:string);
   SelectFromClassId(theId:number, theClassId:number, AcceptsDescendants:boolean, ForKind:string);
   SelectFromSource();
   CleanUpFoundEntities();
   BuildStrLikeCriteria():string;
   CompareInMemory(thisString:string, strLikeCrit:string, exactSearch:boolean):boolean;
   SelectFromOtherSharableObjects();
   SelectFromMyCheckOutEntities();
   FillMyCheckOutEntitiesHashTable();
   Select();
   UpdateCriteriaHistory();
   ExecuteSelection(theUIAgent:aUIAgent);
   FoundEntitiesNumber():number;
   IsSystemCloseAccepted();
   CanReceive(thisObj:aEntity):boolean;
   Receive(thisObj:aEntity);
   WhereUsed(theEntity:aEntity);
   LaunchSudokuCalculator();
   CreateAndDisplayAnotherMMBrowser();
}
declare class aEntityMMViewerMainAgent extends aUIAgent {
   Entity: string ;
   myText: string ;
   myTextStaticText: string ;
   myOwner: string ;
   myOwnerStaticText: string ;
}
declare class aEntityMMViewerCommentAgent extends aUIAgent {
   Entity: string ;
   OnlyComment: string ;
}
declare class aEntityMMViewer001Agent extends aFolderViewAgent {
}
declare class EntityMMViewerMainScenAgent extends aUIAgent {
   aEntityMMViewer001: string ;
   Entity: string ;
   myText: string ;
   myTextStaticText: string ;
   GroupBox: string ;
   MMViewerButtons: string ;
}
declare class EntityMMViewerWhereUsedAgent extends aUIAgent {
   WhereUsedReference: string ;
   InDef: string ;
   InImplem: string ;
   InScenarios: string ;
   getGauge: string ;
   WhereUsed005: string ;
   TmpWhereUsed001: string ;
   InSharableObjects: string ;
   WhereUsed005_Popup(Param1:string):number;
   TmpWhereUsed001_Init():number;
   WhereUsed005_ValueLoaded();
   TmpWhereUsed001_ValueLoaded();
   InDef_ValueStored(:aUIAgent);
   InImplem_ValueStored(:aUIAgent);
   InScenarios_ValueStored(:aUIAgent);
   InSharableObjects_ValueStored(:aUIAgent);
   WhereUsed005_ComputeLine(theArrayOfStrings:string, ObjectIndex:number, theListOfReftos:aListOfInstances):number;
   WhereUsed005_SortColumn(Data1:number, Data2:number):number;
}
declare class aEntityMMViewer extends aEntity {
   Entity: string ;
   MMBrowser: string ;
   WhereUsed: string ;
   InImplem: string ;
   InDef: string ;
   InScenarios: string ;
   InSharableObjects: string ;
   gauge: string ;
   number: string ;
   theSearcher: string ;
   SearchingWhereUsed: string ;
   TmpWhereUsed: string ;
   FromUIAgent: string ;
   getGauge():aGauge;
   Refresh();
   Terminate();
   Init();
   initOnEntity();
   LoadWhereUserFullObject(theNsId:number, theId:number, theVersion:number):aFullObject;
   ReleaseObject(Object:aFullObject);
   ReleaseMemory(theList:aListOfInstances);
   canReference(theMainObject:aFullObject, theVarLink:string, theReference:aFullObject):boolean;
   UpdateListWithObjectReferencing(curEntity:aEntity, Reference:aEntity, theList:aListOfInstances, loadedEntitites:aListOfInstances);
   UpdateListWithImplemReferencing(curImplem:aModuleImplem, Reference:aEntity, FoundEntities:aListOfInstances);
   WhereUsedReferenceOf(it:aListIterator);
   WhereUsedReference(theUIAgent:aUIAgent);
   ConsultSelectedEntity();
   ModifySelectedEntity();
   CheckOutSelectedEntity();
   CheckInSelectedEntity();
   SyncSelectedEntity();
   DeliverSelectedEntity();
   SelectClassInTree();
   FindEntityInDeliveriesBundle(thisDelBundle:aDeliveriesBundle, Entity:aEntity, CandidateRank:number):number;
   SearchInBundles();
   SearchInContainers();
   StringExtract();
   Analyse(ForImplem:aModuleImplem);
   ShowVersionAnalyzer();
   WhereUsedInMMBrowser();
   Cut();
   Copy();
   Paste();
   ManageReimplems();
   UpDateButtons();
   SetEntity(theEntity:aEntity);
   ResetBrowserDefault();
}
declare class aMMBrowserContainersRole extends aSingleRoleType {
   pickInMemOnly();
}
declare module tmpForRisky {
   function ExtractInfoFrom(theDesignedScenario:aScenario, DropObject:string, ForMenu:boolean, theVar:aIdentifierDesc, theVarType:aType, theVarScenario:aScenario, IsForTheType:boolean):boolean;
   function MakeANewVersionOfTheScenario(theScenarioAsDesignWindowAgent:string, theScenario:string):string;
   function GetNewVersionOfThisScenario(thisScenario:aScenario):aScenario;
   function GetNewVersionOfThisQVarPresentor(thisQVarPresentor:aQVarPresentor):aQVarPresentor;
}
declare module wWamIde {
   var RunningContextCatalog: string ;
   function appendUIAgentClassDefsOf(thisType:aType, inThisList:aListOfInstances);
   function GetDevNsIdAndIdFromRefDev(RefNsId:number, RefId:number, DevNsId:number, DevId:number);
   function RefreshRunningContextCatalog();
   function CheckOut(thisEntity:aEntity);
   function CheckIn(thisEntity:aEntity);
   function Deliver(thisEntity:aEntity);
   function Synchronize(thisEntity:aEntity);
   function ManageReimplem(ForThis:aModuleDef, ExecMode:string);
   function GetIDE():string;
   function getDataBreakPointsList():aListOfInstances;
   function AppendDataBreakPoint(Address:string, Len:number, Desc:string);
   function hasDataBreakPointOn(Address:string):boolean;
   function removeDataBreakPoint(Address:string);
   function ResetDataBreakPoints();
   function setDataBreakPointMode(OnOff:boolean);
   function getDataBreakPointMode():boolean;
   function isSystemEntity(theEntity:aEntity):boolean;
   function ShowNodeOf(theTree:aXXXAsTreeBoxUIAgent, theClassDef:aClassDef, root:aClassDef);
   function SelectEntityInTree(theTarget:aEntity, showingOwnerIfNotFeasible:boolean);
   function UIAgentClassDefFor(thisEntity:aEntity):aClassDef;
   function ModifiableEntityFor(thisEntity:aEntity):aEntity;
   function IsAuthorized(onThis:aFullObject, action:string):boolean;
   function IsActionAuthorized(onThis:aFullObject, Action:string):boolean;
   function getRefDevDef(thisModuleDef:aModuleDef):aModuleDef;
   function VaI(version:number):number;
   function StoredVersionsOf(thisObject:aFullObject, theVersions:aListOfInstances, MaxVersions:number):number;
   function VersionsOf(thisObject:aFullObject, theVersions:aListOfInstances, MaxVersions:number):number;
   function CommonAncestorFor(FirstClass:aClassDef, SecondClass:aClassDef):aClassDef;
   function CommonAncestorForAcceptedClassOf(Arg1:aSingleRoleType, Arg2:aSingleRoleType):aClassDef;
   function FirstCommonAncestorForListOfSingleRoleType(theListOfClass:aListOfInstances):aClassDef;
   function LoggedUserIsAWydeDevelopper():boolean;
   function EntityMustBeDelivered(thisEntity:aEntity):boolean;
   function SetCheckInSourceEntity(thisEntity:aEntity);
   function NotifyCheck(theEntity:aEntity):boolean;
   function Duplicate(thisMasterEntity:aEntity);
   function IsADevelopperEntity(theEntity:aEntity):boolean;
   function appendUIAgentClassDefsOfScenario(thisScenario:aScenario, inThisList:aListOfInstances);
   function EntityCreatorName(thisEntity:aEntity):string;
   function ThingCreator(thisEntity:aEntity):string;
   function EntityModifierName(thisEntity:aEntity):string;
   function VersionCreator(thisEntity:aEntity):string;
   function EmptyIsOwnerLinks(thisEntity:aEntity);
   function DisableSynchro(FromObject:aLightObject);
   function EnableSynchro(FromObject:aLightObject);
   function GetMMBrowser():aMMBrowser;
   function WhereUsed(theEntity:aEntity);
   function PopupEntity(theEntity:aEntity, theUIAgent:aUIAgent);
   function ModificationState(Entity:aEntity):string;
   function FillEntitiesFromDeliveryPreparer(theSelf:aDeliveryPreparer, inList:aListOfInstances);
   function FillEntitiesFromBundlePreparer(theSelf:aDeliveriesBundlePreparer, inList:aListOfInstances);
   function FillEntitiesFromDelivery(theSelf:aDelivery, inList:aListOfInstances);
   function FillEntitiesFromDeliveriesBundle(theSelf:aDeliveriesBundle, inList:aListOfInstances);
   function FillEntitiesFromDeliveriesBundleInstaller(theSelf:aDeliveriesBundleInstaller, inList:aListOfInstances);
   function FillEntitiesFromWAMContainer(theSelf:aWAMContainer, inList:aListOfInstances);
   function FillEntitiesFromDBDef(theSelf:aDBDef, inList:aListOfInstances);
   function IsACatalogueEntity(theSelf:aEntity):boolean;
   function FillEntitiesFromEntity(theself:aEntity, inList:aListOfInstances);
/**
*Portability Check: OK
*/
   function CompareLightEventsByDate(thisIsInferior:string, toThat:string):boolean;
   function SetEWamAuthorizationManager(theMgr:aLightObject):aLightObject;
   function ToggleIDEComments(disableIDEComments:boolean);
}
declare class RadioButtonsSkippingDummyAgent extends aUIAgent {
   QVPtcmInprocServer: string ;
   QVPtcmInprocHandler: string ;
   CheckBox002: string ;
   QVPtcmRemoteServer: string ;
   NotifySubUIAgentSelected();
   LoadValue();
}
declare module xCommonCOMDesign {
   var TypeToVTHash: string ;
   var ModulesRegisteredInSystemTransaction: string ;
   var TheSystemTransaction: string ;
   var RegisteredTypeLibraries: string ;
   function ParseModule(TheModule:aModuleDef):boolean;
   function FindStoredAndNotStoredRegisteredModuleFromName(TheName:string):aModuleDef;
   function CreateTypeToVTHash();
   function InitModule();
   function CleanModule();
   function VTToChar(VT:string):number;
   function TypeToVT(TheType:aType):string;
   function TypeToChar(TheType:aType):number;
   function ParamToChar(Parameter:aParameterDesc):number;
   function TypeDescToChar(pTypeDesc:string):number;
   function PointerToVar(TheVarName:string):string;
   function BSTRConversion(pInitialization:string, Cleaning:string, IsOut:boolean, GoldTypeVar:string, OriginalTypeVar:string):string;
   function VARIANTConversion(pInitialization:string, Cleaning:string, IsOut:boolean, GoldTypeVar:string, OriginalTypeVar:string):string;
   function BOOLConversion(pInitialization:string, Cleaning:string, IsOut:boolean, GoldTypeVar:string, OriginalTypeVar:string):string;
   function ToBrokerConversion(pInitialization:string, Cleaning:string, IsOut:boolean, GoldTypeVar:string, OriginalTypeVar:string, BrokerClass:aClassDef):string;
   function ChangeAndFreeBSTR(bstrString:string, str:string);
   function NameInNS(NameSpace:string, TheName:string):string;
   function TYPEDESCtoLocalizedString(pTypeInfo:string, pTypeDesc:string, IsPushed:boolean):string;
   function GetLessLocalizedString(TheString:string, NameMap:aNameMapForCOMMapper):string;
   function TYPEDESCtoString(pTypeInfo:string, pTypeDesc:string, IsPushed:boolean, NameMap:aNameMapForCOMMapper):string;
   function BrokerClassForType(TheType:aType):aClassDef;
   function TypeConversion(pInitialization:string, Cleaning:string, IsOut:boolean, GoldTypeVar:string, OriginalTypeVar:string, TheParameterType:aType, ConversionOptions:string, ConvertedToType:string, Brokers:aListOfInstances);
   function ProduceParameterConversionText(MethodDeclaration:string, VariablesDeclaration:string, Initialization:string, Invocation:string, Cleaning:string, TheParameterType:aType, ParameterName:string, ExpectedLocalName:string, ByAddress:string, ConversionOptions:string, ConversionEffective:boolean, Brokers:aListOfInstances);
   function ProduceConversionMethod(IntoText:string, TheMethodType:aMethodType, MethodToCreate:string, MethodToCall:string, NameMap:aNameMapForCOMMapper, ConversionOptions:string, ThereAreSomeConversion:boolean, Brokers:aListOfInstances);
   function NewModuleVersion(TheModule:aModuleDef);
   function NewMethodVersion(Themodule:aModuleDef, TheMethod:aMethodDesc);
   function ProduceConversionMethods(TheClass:aClassDef, NameMap:aNameMapForCOMMapper, ConversionOptions:string);
   function ProduceDoc(pTypeInfo:string, pTypeAttr:string, Index:number, theCommentText:string);
   function GetAcceptableClassName(ClassName:string):string;
   function IsAnInterfaceDesc(pTypeInfo:string, pTypeDesc:string):boolean;
   function AppendUsedModules(TheUsesList:aListOfRefTos, TheModule:aModuleDef);
   function SetRemoveUnnecessaryUses(NewValue:boolean):boolean;
   function FillNameMapScopeWithRecord(NameMap:aNameMapForCOMMapper, TheRecord:aRecordDesc);
   function FillNameMapScopeWithModuleDef(NameMap:aNameMapForCOMMapper, TheModuleDef:aModuleDef);
   function TYPEDESCtoPredefinedString(MoreTypeDeclaration:string, pTypeInfo:string, pTypeDesc:string, IsPushed:boolean, NameMap:aNameMapForCOMMapper);
   function GetNewSystemTransaction():aTransaction;
   function NewSystemTransaction(Gauge:aGauge);
   function RegisterModuleInSystemTransaction(TheModule:aModuleDef);
   function NewModule(theName:string, theAncestor:aClassDef):aModuleDef;
   function RegisterTypeLibrary(TheModule:aModuleDef, TheTypeLibIdString:string);
   function GetSystemTransactionGaugeAddress():string;
   function CleanSystemTransaction();
   function CancelSystemTransaction();
   function AcceptSystemTransaction();
}
declare module xCOMLibImporter {
   var ForceInvoke: string ;
   function GetOrCreateTypeLibModule(pTypeLib:string, NameMap:aNameMapForCOMMapper):aModuleDef;
/**
*Portability Check: OK
*/
   function CreateTypeLibModule(pTypeLib:string, pLibAttr:string, NameMap:aNameMapForCOMMapper):aModuleDef;
   function CreateTypeLibModuleAndForwards(pTypeLib:string, pLibAttr:string, NameMap:aNameMapForCOMMapper, TheModule:aModuleDef, Forwards:aModuleDef);
   function QueryPathOfRegTypeLib(REFGUID:string, wVerMajor:string, wVerMinor:string, LocaleId:string, bstrPathName:string):string;
   function AppendTypeLib(TypeLibs:aListOfInstances, TypeLibAttr:string);
   function AppendContainingTypeLib(TypeLibs:aListOfInstances, pTypeInfo:string);
   function NameInMoreNS(NameSpace:string, TheString:string):string;
   function InitWithSomeInterface(NameMap:aNameMapForCOMMapper);
   function StripLeadingMarks(UserDefinedVariable:string);
   function DumpFuncForMoreTypeDeclarations(pTypeInfo:string, pAttr:string, index:string, ForVirtualTable:boolean, IntoText:string, NameMap:aNameMapForCOMMapper, Offsets:aListOfInstances);
   function DumpFunc(pTypeInfo:string, pAttr:string, index:string, ForVirtualTable:boolean, IntoText:string, EntityTexts:string, NameMap:aNameMapForCOMMapper);
   function DumpVar(pTypeInfo:string, pAttr:string, index:string, IntoText:string, EntityTexts:string, NameMap:aNameMapForCOMMapper):string;
   function DumpConst(pTypeInfo:string, pAttr:string, index:number, fConst:boolean, ForwardDeclarations:string, IntoText:string, EntityTexts:string, NameMap:aNameMapForCOMMapper);
   function GetDependantsFromRefTypeInfo(pTypeInfo:string, HandleRefType:string, DependentNames:aListOfInstances, TypeLibs:aListOfInstances);
   function GetDependentsFromTypeDesc(pTypeInfo:string, pTypeDesc:string, DependentNames:aListOfInstances, TypeLibs:aListOfInstances, NameMap:aNameMapForCOMMapper, SkipPointed:boolean);
   function GetDependentsForEnum(pTypeInfo:string, pAttr:string, DependentNames:aListOfInstances, TypeLibs:aListOfInstances, NameMap:aNameMapForCOMMapper);
   function GenerateEnum(pTypeInfo:string, pAttr:string, TypeDefName:string, ForwardDeclarations:string, IntoText:string, EntityTexts:string, NameMap:aNameMapForCOMMapper);
   function GetDependentsForAlias(pTypeInfo:string, pAttr:string, DependentNames:aListOfInstances, TypeLibs:aListOfInstances, NameMap:aNameMapForCOMMapper);
   function GenerateAlias(pTypeInfo:string, pAttr:string, TypeDefName:string, ForwardDeclarations:string, IntoText:string, EntityTexts:string, NameMap:aNameMapForCOMMapper);
   function GenerateInterfaceTypes(pTypeInfo:string, pAttr:string, TypeDefName:string, ForwardDeclarations:string, IntoText:string, EntityTexts:string, NameMap:aNameMapForCOMMapper);
   function GenerateDispInterfaceTypes(pTypeInfo:string, pAttr:string, TypeDefName:string, ForwardDeclarations:string, IntoText:string, EntityTexts:string, NameMap:aNameMapForCOMMapper);
   function GetDependentsForRecordOrUnion(pTypeInfo:string, pAttr:string, DependentNames:aListOfInstances, TypeLibs:aListOfInstances, NameMap:aNameMapForCOMMapper);
   function GenerateRecordOrUnion(pTypeInfo:string, pAttr:string, TypeDefName:string, ForwardDeclarations:string, IntoText:string, EntityTexts:string, NameMap:aNameMapForCOMMapper, IsUnion:boolean);
   function LastFuncOffset(pTypeInfo:string):number;
/**
*Portability Check: OK
*/
   function GenerateTable(pTypeInfo:string, pAttr:string, IntoText:string, TableName:string, ForVirtualTable:boolean, EntityTexts:string, NameMap:aNameMapForCOMMapper);
   function GetDependentsForDISPInterfaceOrDUALInterface(pTypeInfo:string, pAttr:string, InterfaceName:string, ExpectedMethodTableName:string, DependentNames:aListOfInstances, TypeLibs:aListOfInstances, NameMap:aNameMapForCOMMapper);
   function GetDependentsForInterface(pTypeInfo:string, pAttr:string, DependentNames:aListOfInstances, TypeLibs:aListOfInstances, NameMap:aNameMapForCOMMapper);
   function GenerateInterface(pTypeInfo:string, ConstIdStrsDeclaration:string, TypesDeclaration:string, EntityTexts:string, NameMap:aNameMapForCOMMapper);
   function GetDependentsForDispInterface(pTypeInfo:string, pAttr:string, DependentNames:aListOfInstances, TypeLibs:aListOfInstances, NameMap:aNameMapForCOMMapper);
   function GenerateDispInterface(pTypeInfo:string, ConstIdStrsDeclaration:string, TypesDeclaration:string, EntityTexts:string, NameMap:aNameMapForCOMMapper);
   function GetDependentsForCoClass(pTypeInfo:string, pAttr:string, DependentNames:aListOfInstances, TypeLibs:aListOfInstances, NameMap:aNameMapForCOMMapper);
   function GenerateCoClass(pTypeInfo:string, pAttr:string, TypeDefName:string, ForwardDeclarations:string, TypesDeclaration:string, ConstIdStrsDeclaration:string, EntityTexts:string, NameMap:aNameMapForCOMMapper);
   function GenerateType(pTypeInfo:string, pAttr:string, ForwardDeclarations:string, TypesDeclaration:string, ConstIdStrsDeclaration:string, VirtualTablesDeclaration:string, EntityTexts:string, NameMap:aNameMapForCOMMapper);
   function FillHashWithStringAndDependentStrings(CurTransitiveDependancy:aStringHashTable, CurDependency:aListOfInstances, DependanciesFromString:aDataByStringHashTable);
/**
*Portability Check: OK
*/
   function SortDependentStrings(Dependencies:aListOfInstances, TheOrder:aListOfInstances);
   function GetTypeInfosOrder(pTypeLib:string, TypeInfosOrder:aListOfInstances, TypeLibs:aListOfInstances, NameMap:aNameMapForCOMMapper);
   function CleanEntityTexts(TheTexts:string);
/**
*Portability Check: OK
*/
   function FinalizeCreatedEntities(TheModule:aModuleDef, TheMethodTablesModule:aModuleDef, ModuleEntitiesTexts:string, TypeKinds:aListOfInstances, NameMap:aNameMapForCOMMapper);
   function MapNamesFromAlreadyImportedModule(TheModule:aModuleDef, NameMap:aNameMapForCOMMapper);
   function CoGetClassObject(TheCLSID:string, dwClsContext:string, pServerInfo:string, InterfaceID:string, pInterface:string):string;
   function CoGetPSClsid(InterfaceID:string, TheCLSID:string):string;
   function TryGettingpTypeLib(TheCOMIdString:string, CoCreateInstanceInspectionModeSet:string, TypeLibIdString:string, TypeLibMajorVersion:number, TypeLibMinorVersion:number, TypeLibFileName:string, DllFileName:string, AlternateDllFileName:string, pTypeLib:string, pLibAttr:string);
   function FindModuleFromTypeLibId(TypeLibIdString:string):aModuleDef;
   function GetOrCreateModuleFromRegistryInfos(TheCOMIdString:string, CoCreateInstanceInspectionModeSet:string, TypeLibIdString:string, TypeLibMajorVersion:number, TypeLibMinorVersion:number, TypeLibFileName:string, DllFileName:string, AlternateDllFileName:string):aModuleDef;
   function ModuleForwards(TheModule:aModuleDef):aModuleDef;
   function GetOrCreateTypeLibModuleForTLIBATTRAndForwards(pLibAttr:string, NameMap:aNameMapForCOMMapper, TheModule:aModuleDef, Forwards:aModuleDef);
   function GetOrCreateTypeLibModuleForTLIBATTR(pLibAttr:string, NameMap:aNameMapForCOMMapper):aModuleDef;
   function ImportTypeLib(TheFile:string):aModuleDef;
   function TurnAllPointerTypeToSimplePointerType(TheText:string);
}
declare module xCOMBrokerGenerator {
   function GetOrCreateBrokerFromEntities(TheModule:aModuleDef, TheVtblRecordDesc:aRecordDesc, TheConstIdStr:aConstString, InterfaceName:string, NameMap:aNameMapForCOMMapper):aClassDef;
   function MethodTableIsVirtualTable(MethodTable:aRecordDesc):boolean;
   function GetVtblRecordDescFromInterfaceName(IntoModule:aModuleDef, InterfaceName:string):aRecordDesc;
   function GetConstIdStrFromInterfaceName(IntoModule:aModuleDef, InterfaceName:string):aConstString;
   function GetInterfaceNameFromVtblRecordDesc(theVtblRecordDesc:aRecordDesc):string;
   function GetInterfaceNameFromConst(theConst:aConstString):string;
   function GetVtblFromVar(TheVar:aIdentifierDesc):aRecordDesc;
   function AddInvokeMethodFromTable(theVarDesc:aIdentifierDesc, TheSelfString:string, theText:string, NameMap:aNameMapForCOMMapper);
   function AddMethodFromVtbl(theVarDesc:aIdentifierDesc, theText:string, NameMap:aNameMapForCOMMapper);
   function CopyDocumentation(FromVirtualTable:aRecordDesc, ToClass:aClassDef, NameMap:aNameMapForCOMMapper);
   function CreateBrokersForModule(TheModule:aModuleDef);
   function GetSuffixValueOfPrefixInLinesOfText(TheText:string, ThePrefix:string):string;
   function GetConstantsModuleFromTablesModule(TheModule:aModuleDef):aModuleDef;
   function GetFowardsModuleFromOriginalModule(TheModule:aModuleDef):aModuleDef;
}
declare class aDataByStringUpcaseHashcodedTable extends aDataByStringHashTable {
   KeyIsOriginalCase: string ;
   TurnToUpcaseSaveOriginal(pKey:string):string;
   RestoreOriginalCase(pKey:string, OriginalCaseString:string);
   Compare(pHashElement:string, pKey:string):boolean;
   HashCode(pKey:string):number;
   Find(pKey:string):string;
   Delete(pKey:string);
}
declare class aNameMapForCOMMapper extends aLightObject {
   NameMapLevels: string ;
   WeakPoint: string ;
   LockWeakLevels: string ;
   TheNullString: string ;
   Terminate();
   OneMoreLevel();
   ReleaseOneLevel();
   FindpReferenceNameOfWordInNameMap(TheWord:string, LevelNumber:number):string;
   WordForbidden(TheWord:string, LevelNumber:number):boolean;
   MostLocalMappedName(TheWord:string):string;
   GetNameNotInLevels(TheName:string, LevelNumber:number);
   ChangeWordInWeakLevels(TheWord:string);
   MapName(ReferenceName:string, NewName:string);
   GetAndMapName(ReferenceName:string, TheName:string);
   Init();
   CurrentDepth():number;
   WeakDepth():number;
   IncreaseWeakDepth(Increment:number);
   DecreaseWeakDepth(Decrement:number);
   GetName(TheName:string);
}
declare class aWAMContainersExtension001Agent extends aUIAgent {
   DoYourJob: string ;
}
declare class aWAMContainersExtension extends aWideExtension {
   theCatalog: string ;
   FolderParentName();
   MenuText();
   GetExistingCatalog():aWAMContainerCatalog;
   DoYourJob();
   ButtonBMPName();
}
declare class WAMContainerMDIAgent extends aOpenWhereClosedUIAgent {
   MenuItem: string ;
   aWAMContainer003: string ;
   Contents: string ;
   Contents_Selected(SelectedRank:number):number;
}
declare class aWAMContainer001Agent extends aToolBarUIAgent {
   SaveSaveAndCloseClose: string ;
}
declare class WAMContainerActionsPrefixBarAgent extends aToolBarUIAgent {
   WAMContainerFolderActions: string ;
}
declare class WAMContainerMultiUserAcionsAgent extends aUIAgent {
   checkInAll: string ;
   checkOutAll: string ;
   SyncAll: string ;
   DeliverAll: string ;
   NotifyInit();
}
declare class WAMContainerFillActionAgent extends aUIAgent {
   GetAllUserModulesAndClasses: string ;
   GetAllModulesAndClasses: string ;
   getAllDescendantsOfSelectedEntity: string ;
   purge: string ;
   SearchInMM: string ;
   GetAllUserEntities001: string ;
   GetAllOthers001: string ;
   FillFromWhereUsed: string ;
   DisplayDependancies: string ;
}
declare class WAMContainerFolderActionsAgent extends aFolderViewAgent {
}
declare class WAMContainerCheckingAgent extends aUIAgent {
   CheckConsistency: string ;
   CheckConsistencyWithUIAgentAndRoles: string ;
}
declare class aWAMContainerSortingAgent extends aUIAgent {
   SortByName: string ;
}
declare class aWAMContainerSeeAgent extends aUIAgent {
   selectClassInTree: string ;
   ActionHistory: string ;
}
declare class aWAMContainer extends aEntity {
   Contents: string ;
   LastOwnedId: string ;
   selectedEntity: string ;
   myMMB: string ;
   myDependancySet: string ;
   parentContainer: string ;
   debug_h: string ;
   Append(ThisEntity:aEntity);
   FillFromWhereUsed();
   SearchInMM();
   SearchReimplemInMM();
   PurgeDeletedEntities();
   ContainsDeletedEntities():boolean;
   selectClassInTree();
   SortByName();
   Confirmed(Action:string):boolean;
   checkInAll();
   checkOutAll();
   SyncAll();
   DeliverAll();
   GetAllUserModulesAndClasses();
   GetAllUserEntities();
   GetAllModulesAndClasses();
   GetAllOthers();
   CheckConsistency();
   AppendRoleClassDefOf(theRole:aRoleType, List:aListOfInstances);
   CheckConsistencyWithUIAgentAndRoles();
   getDescendantsOf(thisClassDef:aClassDef);
   getAllDescendantsOfSelectedEntity();
   purge();
   GetWAMCatalog():aWAMContainerCatalog;
   GetIDAllocater();
   GetNsIdAndIdforOwnedEntity();
   IsAnInOutSyncEntity();
   InOutSyncCategory();
   NotifyDeletion();
   RegisterYourselfInIDE();
   IsAnExportableEntity();
   Save();
   UIConsult();
   UIModify();
   FillWithSubContainers(l:aListOfInstances);
   DeleteMyself();
   IsSystemCloseAccepted();
   GetBitmap();
   IsConsistent();
   NameIsUnique():boolean;
   IsValid();
   CheckDeletion();
   CheckDependancies();
   DisplayDependancies();
   ActionHistory();
}
declare class WAMCatalogAgent extends aOpenWhereClosedUIAgent {
   Entities: string ;
}
declare class WAMCatalogBundleCreationAgent extends aUIAgent {
   BundleInitKind001: string ;
   StaticText: string ;
}
declare class aWAMContainerCatalog extends aEntity {
   Entities: string ;
   BundleInitKind: string ;
   SelectedContainer: string ;
   RefreshAfterSynchronization();
   InitAfterLoad();
   createContainerFromBundle(Bundle:aDeliveriesBundle, t:aTransaction):aWAMContainer;
   createContainerFromBundlePreparer(Bundle:aDeliveriesBundlePreparer, t:aTransaction):aWAMContainer;
   createContainerFromDelivery(Delivery:aDelivery, t:aTransaction):aWAMContainer;
   createContainerFromDeliveryPreparer(Delivery:aDeliveryPreparer, t:aTransaction):aWAMContainer;
   NameValid(thisName:string):boolean;
   InitFromBundleInstaller(theBundleInstaller:aDeliveriesBundleInstaller):boolean;
   InitFromBundlePreparer(theBundlePreparer:aDeliveriesBundlePreparer):boolean;
   GetBitmap();
}
declare class aWAMCatalogRole extends aSingleRoleType {
   NewAcceptedInstance();
   canBreakLinkBetween();
   ModifyThisObject();
   ConsultThisObject();
   AuthorizeAction();
   AskForActions();
   NewInstanceFromDroppedObject();
   IsDroppedObjectUsable();
}
declare class aWAMContainerRole extends aInOutSyncRole {
   ConsultThisObject();
   ModifyThisObject();
   IsDroppedObjectUsable();
   NewInstanceFromDroppedObject();
   AuthorizeAction();
   NewAcceptedInstance();
   AskForActions();
}
declare class aClassOrModuleMMViewerusedAgent extends aUIAgent {
   usedEntities: string ;
}
declare class aClassOrModuleMMViewer001Agent extends aFolderViewAgent {
}
declare class aClassOrModuleMMViewer extends aEntityMMViewer {
   usedEntities: string ;
   userEntities: string ;
   initOnEntity();
   WhereUsedThisClassInThatDef(Reference:aModuleDef, Target:aModuleDef, theList:aListOfInstances);
   WhereUsedThisClassInThatImplem(Reference:aModuleDef, Target:aModuleImplem, theList:aListOfInstances);
   WhereUsedThisClass(Reference:aModuleDef, it:aListIterator);
   WhereIsUsed(theUIAgent:aUIAgent);
   ThingCreator():string;
   VersionCreator():string;
}
/**
*LoadTempFullObject : returns a Fully Functionnal FullObject, which is NOT registered in Motor.
                     This would install the Classes needed, install a Pb, etc..
                     This object can be killed.
                     
LoadedMainIsFake : returns True if it has loaded a fake main. Needs to be Freemem'ed
                   the Class has been installed.the VMT is OK, and methods will work
                   (at least some, those which do not need other vars than in main) 
                   returns False if the Object was already there. 
                       the FakeObject var is equal to the object 
                       Do Not Freemem it       
                   
FastLoadMain returns a pointer to a record which is aligned on the main. Needs to be freemem'ed.
                 If the object was already loaded, a copy of the existing main is performed.                                 
                 Minimal footprint. does NOT install the class if object was not here. 
                 Only the vars can be accessed; TheVMT is NOT uptodate, but contains the CLASSID.

FastLoadMainPartially returns only the FIRST MAXSIZE bytes of the Main ( including ClassiD in the VMT )
                 Behaves as FastLoadMain , needs to be freememed.. 

FastLoadMainPartiallyInBuffer
                 Assumes that a buffer pre-exists to the call, so that it can be newed once
                 by the caller (when traversing a list for example..) and disposed by caller too   

RiskyLoadMainPartiallyInBuffer
         Same as Fast, Objective is fullspeed so no caution taken to make less TGV calls
         Takes aTGV as param, address must be <>0, etc..                
         
*/
declare module xTGVTricks {
   function ZeroCompress(SrcBuff:string, DestBuff:string, Size:number):number;
   function ZeroUnCompress(SrcBuff:string, DestBuff:string, MaxWrittenSize:number):number;
   function PartialZeroUnCompress(SrcBuff:string, DestBuff:string, MaxChars:number):number;
   function ZeroUnCompressedSize(SrcBuff:string):number;
   function LoadMainForFullId(theFullId:string, theGoodDBMgr:aDBMgr):aFullObject;
   function CanSynchronize():boolean;
   function GetDevNsIdAndIdFromRefDev(RefNsId:number, RefId:number, DevNsId:number, DevId:number);
   function PBOf(thisObject:aFullObject):aPB;
   function DBmgrOf(thisObject:aFullObject):aDBMgr;
   function TGVAddressOf(thisObject:aFullObject):number;
   function TGV_DSVOf(thisObject:aFullObject):string;
   function DBMgrForTGV(Number:number):aDBMgr;
   function TGVheaderAddress(forTGV:aTGV):string;
   function TGVAlert(procName:string, Comment:string);
   function StoreFlatRec(thisRecord:string, Size:number, myDB:aDBMgr):number;
   function UpdateFlatRec(atThisAddress:number, thisRecord:string, Size:number, myDB:aDBMgr);
   function LoadFlatRec(FromThisAddress:number, thisRecord:string, thisDB:aDBMgr):boolean;
   function LoadDateTimeFlatRec(FromThisAddress:number, DateTimeRecord:string, thisDB:aDBMgr):boolean;
   function UpdateFlatRecord(atThisAddress:number, thisRecord:string, Size:number, WithDateAndTime:boolean, Param:number, Flushing:boolean, myDB:aDBMgr);
   function StoreFlatRecord(thisRecord:string, Size:number, WithDateAndTime:boolean, Param:number, Flushing:boolean, myDB:aDBMgr):number;
   function LoadFlatRecord(FromThisAddress:number, thisRecord:string, thisDB:aDBMgr):boolean;
/**
*Portability Check: OK
*/
   function ZapFlatRecord(FromThisAddress:number, thisDB:aDBMgr);
   function FlatRecordHasDateTime(FromThisAddress:number, date:number, Time:number, thisDB:aDBMgr):boolean;
   function RefEntityOf(DevEntity:aEntity):aEntity;
   function DevEntityOf(RefEntity:aEntity):aEntity;
   function ThingFromRefDev(atAddress:number):aFullObject;
/**
*Portability Check: OK
*/
   function LoadedMainIsFake(FakeObject:string, id:string, theSelf:aDBMgr):boolean;
   function FastLoadMain(id:string, theSelf:aDBMgr):string;
   function FastLoadMainPartially(id:string, MaxSize:number, ThingIsKilled:boolean, theSelf:aDBMgr):string;
   function LoadTempFullObject(theNsId:number, theId:number, theVersion:number):aFullObject;
   function FastLoadMainPartiallyInBuffer(Buffer:string, id:string, MaxSize:number, ThingIsKilled:boolean, theSelf:aDBMgr):boolean;
   function FastLoadMainPartiallyInBufferFromAddress(Buffer:string, TgvAddress:string, MaxSize:number, ThingIsKilled:boolean, theSelf:aDBMgr):boolean;
   function RiskyLoadMainPartiallyInBufferFromAddress(Buffer:string, TgvAddress:string, MaxSize:number, ThingIsKilled:boolean, theTGV:aTGV):boolean;
}
declare class aIteratorInTGV extends aLightObject {
   PrevAddr: string ;
   VarOffset: string ;
   myDBmgr: string ;
   isFlatRec: string ;
   curAddr: string ;
   curRank: string ;
   ResetOn(InitialAddress:number, DBMgr:aDBMgr);
   AttachToVarInObject(ThisVar:string, InThisObject:aLightObject);
   AttachToVarInFlatRecord(ThisVar:string, thisFlatRecord:string);
   MovePrevAndDateTimeLoad(theDateTimeRecord:string):boolean;
   MovePrevAndLoad(theRecord:string):boolean;
   MovePrevAndGet(theObject:aFullObject):boolean;
   GetCurRecordDateTime(date:number, time:number);
   GetCurAddress():number;
   currentRank():number;
}
declare module wMultiThread {
   function InitCritSection(theCritSectionHandle:string);
   function KillCritSection(theCritSectionHandle:string);
   function EnterInCritSection(theCritSectionHandle:string);
   function LeaveCritSection(theCritSectionHandle:string);
   function CurThreadIndex():number;
   function wCurrentProcessId():number;
   function wCurrentThreadId():number;
   function NewSharedInst(theClassId:number):string;
   function wGetCurrentThread():number;
   function wGetThreadTime(ThreadHandle:string):number;
   function wPostThreadMessage(ThreadId:number, msg:number, Param1:number, Param2:number):boolean;
   function WaitForSingleMessage(msg:number);
   function CheckInstallAllPreInstalled();
}
declare class aXMLAttrib extends aLightObject {
   pName: string ;
   theFile: string ;
   Kill();
   SetName(Name:string);
   GetName():string;
   WriteValueInFile(theFile:aXMLFile);
   WriteInFile(theFile:aXMLFile);
   WriteValueInText(theText:string);
   WriteInText(theText:string);
   AsCString():string;
   AsInt():number;
   StringExtract();
}
declare class aXMLCStringAttribute extends aXMLAttrib {
   Value: string ;
   WriteValueInFile();
   AsCString();
   AsInt();
   WriteValueInText();
}
declare class aXMLCStringNode extends aXMLNode {
   Value: string ;
   Init();
   AsCString();
   AsInt();
   SetValue();
   WriteValueOnlyInText();
   ContainsNotAllowedChars();
}
declare class XMLFileAsTextAgent extends aUIAgent {
   theText: string ;
}
declare class aXMLFile extends aLightObject {
   Nodes: string ;
   Attributes: string ;
   InText: string ;
   OutText: string ;
   IndentString: string ;
   MustIndent: string ;
   NodeDefinitionSeparators: string ;
   AttributValueSeparators: string ;
   NodeSeparators: string ;
   LoadOnDemand: string ;
   WithCR: string ;
   NamesHashTable: string ;
   FileAsNode: string ;
   CreateOnlyCStringAttributes: string ;
   EncodingKind: string ;
   ForceBOMForUTF_8: string ;
   NoUTFEncInAttribute: string ;
   ParseNode(InThisNode:aXMLNamedNode, pChar:string);
   FindAttributeByName(Name:string):aXMLAttrib;
   Indent();
   Unindent();
   Init();
   GetHashEntryFor(Name:string):string;
   AddNamedNode(NodeName:string):aXMLNamedNode;
   AddStringAttribute(AttributName:string, AttributValue:string):aXMLCStringAttribute;
   AddCommentNode(Comment:string):aXMLCommentNode;
   AddDocTypeNode(name:string, ExternalId:string):aXMLDocTypeNode;
   CodePageFromEncodingString(Encoding:string):number;
   ConvertPCharInPlace(FromEncoding:string, ToEncoding:string, pInChars:string, NbInBytes:number);
   ConvertPChar(FromEncoding:string, ToEncoding:string, pInChars:string, NbInBytes:number, pOutChars:string, AllocatedBytes:number);
   ConvertText(FromEncoding:string, ToEncoding:string, Src:string):string;
   GetBOMIfNeeded():string;
   HandleOutputEncoding();
   WriteInFile();
   PrepareToWrite();
   Write(FileName:string);
   ParseAttribute(InThisNode:aXMLNamedNode, pChar:string);
   ParseInNode(InThisNode:aXMLNamedNode, pChar:string);
   ParseXMLAttributes(pChar:string);
   AdjustInputTextSkipBOM(BOMLength:number);
   ConvertSkipBom(BOMLength:number);
   HandleBOM();
   LoadFromText();
   Load(FileName:string);
   LoadXML(FromXML:string);
   SearchForEndOfNode(pChar:string):string;
   Terminate();
   Kill();
   StringExtract();
   FindNodeByName(Name:string):aXMLNamedNode;
   FindNextNodeByName(Name:string, Iterator:aListIterator):aXMLNamedNode;
   FindNextAttributeByName(Name:string, Iterator:aListIterator):aXMLAttrib;
   FindNextNodeByNameUpcase(Name:string, Iterator:aListIterator):aXMLNamedNode;
   FindNextAttributeByNameUpcase(Name:string, Iterator:aListIterator):aXMLAttrib;
   FindNodeByNameUpcase(Name:string):aXMLNamedNode;
   FindAttributeByNameUpcase(Name:string):aXMLAttrib;
   FindSubNodeByName(Name:string):aXMLNamedNode;
   FindSubNodeByNameUpcase(Name:string):aXMLNamedNode;
   IsLetter(TheChar:number):boolean;
}
declare class aXMLIntAttribute extends aXMLAttrib {
   Value: string ;
   WriteValueInFile();
   AsCString();
   AsInt();
   WriteValueInText();
}
declare class aXMLNamedCStringNode extends aXMLNamedNode {
   Value: string ;
   ContainsNotAllowedChars();
   AsCString();
   AsInt();
   StringExtract();
   SetValue();
   WriteValueOnlyInText();
}
declare class aXMLNamedIntNode extends aXMLNamedNode {
   Value: string ;
   AsCString();
   AsInt();
   SetValue();
   WriteValueOnlyInText();
}
declare class aXMLNamedNode extends aXMLNode {
   pName: string ;
   SubNodes: string ;
   Attributes: string ;
   NodeText: string ;
   theFile: string ;
   HostNode: string ;
   OpenSubNodes();
   Init();
   SetName(Name:string);
   GetName():string;
   SingleLine();
   CreateSubNodesIfNeccesary();
   CreateAttributesIfNeccesary();
   AddIntAttribute(AttributeName:string, AttributeValue:number):aXMLIntAttribute;
   AddStringAttribute(AttributeName:string, AttributeValue:string):aXMLCStringAttribute;
   AddNamedStringNode(NodeName:string, NodeValue:string):aXMLNamedCStringNode;
   AddStringNode(NodeValue:string):aXMLCStringNode;
   AddTextNode(theText:string):aXMLTextNode;
   AddTextNodeFromChars(pChars:string):aXMLTextNode;
   AddNamedIntNode(NodeName:string, NodeValue:number):aXMLNamedIntNode;
   AddNamedTextNode(NodeName:string, theText:string):aXMLNamedTextNode;
   AddNamedTextNodeFromChars(NodeName:string, theChars:string):aXMLNamedTextNode;
   AddNamedNode(NodeName:string):aXMLNamedNode;
   WriteEndNameInText(TheText:string, WithCR:boolean);
   WriteSubNodesInText(TheText:string, WithCR:boolean, CheckNotAllowedChars:boolean);
   WriteAttributesInText(TheText:string);
   WriteNameInText(TheText:string, WithCR:boolean);
   WriteInText();
   FindNodesByName();
   WriteAttributesInFile(theFile:aXMLFile);
   WriteSubNodesInFile(theFile:aXMLFile);
   WriteNameInFile(theFile:aXMLFile);
   WriteEndNameInFile(theFile:aXMLFile);
   WriteInFile();
   RequalifyNode(theSubNode:aXMLNamedNode);
   FindNodeByName();
   FindAttributeByName();
   FindNextNodeByName();
   FindNextAttributeByName();
   FindNextNodeByNameUpcase();
   FindNextAttributeByNameUpcase();
   GetAttributeCStringValueByName(Name:string):string;
   GetAttributeIntValueByName(Name:string):number;
   FindNodeByAttributeNameAndValue(AttributeName:string, AttributeValue:string):aXMLNamedNode;
   FindNodeByNameUpcase();
   FindAttributeByNameUpcase();
   GetAttributeCStringValueByNameUpcase(Name:string):string;
   GetAttributeIntValueByNameUpcase(Name:string):number;
   FindNodeByAttributeNameUpcaseAndValue(AttributeName:string, AttributeValue:string):aXMLNamedNode;
   IsNamedNode();
   AsCString();
   AsInt();
   AsText();
   Terminate();
   StringExtract();
   GetNameIfAny();
   FindSubNodeByName();
   FindSubNodeByNameUpcase();
   SetFile(TheFile:aXMLFile);
   ChangeHostNode(NewHostNode:aXMLNamedNode);
   FindNodesByNameInNextLevel(Name:string, InList:aListOfInstances);
}
declare class aXMLNamedTextNode extends aXMLNamedNode {
   Value: string ;
   CData: string ;
   Init();
   ContainsNotAllowedChars();
   SingleLine();
   AsText();
   AsCString();
   ForceUseOfCData();
   WriteValueOnlyInText();
}
declare class aXMLNode extends aLightObject {
   WriteInFile(theFile:aXMLFile);
   Kill();
   SingleLine():boolean;
   IsNamedNode():boolean;
   FindNodeByName(Name:string):aXMLNamedNode;
   FindNextNodeByName(Name:string, Iterator:aListIterator):aXMLNamedNode;
   FindNextAttributeByName(Name:string, Iterator:aListIterator):aXMLAttrib;
   FindNextNodeByNameUpcase(Name:string, Iterator:aListIterator):aXMLNamedNode;
   FindNextAttributeByNameUpcase(Name:string, Iterator:aListIterator):aXMLAttrib;
   FindAttributeByName(Name:string):aXMLAttrib;
   FindNodeByNameUpcase(Name:string):aXMLNamedNode;
   FindAttributeByNameUpcase(Name:string):aXMLAttrib;
   FindSubNodeByName(Name:string):aXMLNamedNode;
   FindSubNodeByNameUpcase(Name:string):aXMLNamedNode;
   AsCString():string;
   AsInt():number;
   AsText(theText:string);
   GetNameIfAny():string;
   StringExtract();
   SetValue(Value:string);
   ProduceValueIntext(TheText:string, WithCR:boolean, UseCData:boolean);
   ForceUseOfCData():boolean;
   ContainsNotAllowedChars():boolean;
   ShouldUseCData():boolean;
   WriteValueOnlyInText(TheText:string, InCData:boolean);
   WriteValueInText(TheText:string, WithCR:boolean, CheckNotAllowedChars:boolean);
   WriteInText(TheText:string, WithCR:boolean, CheckNotAllowedChars:boolean);
   FindNodesByName(Name:string, InList:aListOfInstances);
   WriteValueInFile(theFile:aXMLFile);
   CharNotAllowed(c:number):boolean;
   StringContainsNotAllowedChars(TheString:string):boolean;
   TextContainsNotAllowedChars(TheText:string):boolean;
}
declare class aXMLTextNode extends aXMLNode {
   Value: string ;
   CData: string ;
   Init();
   ContainsNotAllowedChars();
   AsText();
   AsCString();
   ForceUseOfCData();
   WriteValueOnlyInText();
}
declare module XMLMod {
   function SubChars(Separators:string, pChar:string, SeparatorFound:number):string;
   function SubCharsAndRemoveSpace(Separators:string, pChar:string, SeparatorFound:number):string;
   function VarLinkFromName(FromThisInstance:string, Name:string):string;
   function FindChars(StringToFind:string, InString:string):string;
   function Int8Abs(Value:number):number;
   function NewXMLDBDef(FileName:string, ForImpExp:boolean):aDBDef;
   function XMLStringFromString(Value:string):string;
   function XMLTextFromString(Value:string, xmlText:string);
   function StringFromXMLString(Value:string):string;
}
declare class aSearchOnListBoxScenAgent extends aUIAgent {
   ListCtrl: string ;
   myX: string ;
   myOldX: string ;
   myY: string ;
   myOldY: string ;
   OldMLENeededEvent: string ;
   LoadValue();
   ListCtrl_GetChar(Ch:number, VKey:string, theCount:number, Flags:string):number;
   ListCtrl_Executed(:aUIAgent, SelectedRank:number, Option:number):number;
   NotifyTimer();
   NotifyInit();
   NotifyTerminate();
}
declare class aSearchOnListBox extends aListOfInstances {
   theFancyCodeAgent: string ;
   Width: string ;
   Height: string ;
   isFake: string ;
   IRTyp: string ;
   Selection():number;
   Select(Rank:number);
   RelativeSelect(Movement:number);
   HelpMe(Rank:number);
   Terminate();
}
declare class aFancyGOLDAgent extends aCUimplemCodeAgent {
   theEntityType: string ;
   theFieldsList: string ;
   theAuxiliary: string ;
   Init();
   Terminate();
   ListIsKillable():boolean;
   NotifyGetChar();
   NotifyLoseFocus();
   NotifyButtonDown();
   HelpOn();
   IsChar(theChar:number):boolean;
   WhereDefined();
   WhereUsed();
   NotifyButtonUp();
}
declare class aNameSuggesterGOLDParser extends aGOLDParser {
   StringToFind: string ;
   IRForStringFound: string ;
   MMForStringFound: string ;
   ParseForStringToFind: string ;
   CurrentPosInSource: string ;
   TheCurrentSource: string ;
   WantMethodDesc: string ;
   FirstRoutineLine: string ;
   Fakes: string ;
   Disactivate();
   ResetTheSearch();
   NextIdentifier(QualifiedName:string):string;
   SearchIRFromString();
   AsLoI(TList:aList):aListOfInstances;
   FullFieldList(FromIR:aIRAny):aSearchOnListBox;
   FindOrBuildMMTypeFromIR(theIR:aIRType):aType;
   BuildFakeMMParamFromIR(theIR:aIRIdParameter):aParameterDesc;
   BuildFakeMMMethodFromIR(theIR:aIRIdTyped):aEntity;
   SearchMMFromIR();
   SpecializedParseRoutineImplem();
   Init();
   Terminate();
}
declare class aFancyAuxiliary extends aLightObject {
   theAgent: string ;
   theImplem: string ;
   theLine: string ;
   FieldSuffix: string ;
   DotColumn: string ;
   DotLineInSource: string ;
   DotLineInCtrl: string ;
   CurPosInLine: string ;
   pCurParser: string ;
   WantToSee: string ;
   IncludingInherited: string ;
   leftOfSuffix: string ;
   ForceLinePosInSource: string ;
   ForcedLinePosInSource: string ;
   IsExternal: string ;
   DllName: string ;
   ProvideSuggestion(Ch:number, Flags:string):number;
   HelpMeFor(thisEntity:aEntity);
   HelpMeAt(Rank:number);
   CloseDownEntityType();
   ProvideMethodDefinition(theMethodDesc:aMethodDesc);
   SkipBlanksBackwards(S:string, curPosInLine:number);
   SkipBlanksBackwardsEx(S:string);
   GetTokenBackwards(S:string, Starting:number):string;
   FindMatchingLeft(leftChar:number, RightChar:number, curpos:number);
   QualifiedNameFromLine(Line:string, DotPosition:number, Delimiter:number):string;
   DereferencerFromLine(Line:string, DotPosition:number, Delimiter:number):string;
   GetScenariosListBeginningWith(theEntityType:aType, theFieldsList:aListOfInstances, theBeginning:string);
   FillSearchOnListBox();
   InsertFieldSelectedFromListBox(IndexSelected:number);
   ParamIsSelfOrResult(theParam:aParameterDesc):boolean;
   VisibleParamCount(theMethodType:aMethodType):number;
   ActualRankForParam(theMethodType:aMethodType, apparentRank:number):number;
   CallBrowserFor(theseKinds:string);
   VarDecl(curpos:number);
   ParamNameCharCount(theParamName:string):number;
   ClosingBracket(curpos:number);
   isRefto(curpos:number):boolean;
   isListof(curpos:number):boolean;
   isNE(curpos:number):boolean;
   isIN(curpos:number):boolean;
   isMember(curpos:number):boolean;
   isMMEntityOf(curpos:number):boolean;
   ClosingParen(curpos:number);
   ProcParmList(curpos:number, ParamRank:number);
   Comma(curpos:number);
   TryLocalsOrMembers();
   Dot(curpos:number);
   AssignOrNE(curpos:number, FieldOwner:string);
   Assign(curpos:number);
   NotEqualTo(curpos:number);
   ProcessRequestForHelp(theCUImplem:aCUImplem):number;
   ToggleVarsAndOrMeths(flags:string):number;
   FilterForFieldsOfThisClassOrNot(flags:string):number;
   KillFieldsList();
   ClosePickingList();
   ForwardToSearchListBox(theCUImplem:aCUImplem, Ch:number, VKey:string, Flags:string, MustAlsoBeHandleBySelf:boolean):number;
   Init();
}
declare class PickerWithArgumentForOneCriteriumAgent extends aUIAgent {
   SelectionArgument: string ;
   SelectionArgument_Changed():number;
}
declare class aGraph009Agent extends aFolderViewAgent {
}
declare class aGridScenario001Agent extends aUIAgent {
   DefaultColWidth: string ;
   DefaultColWidthStaticText: string ;
   DefaultRowHeight: string ;
   DefaultRowHeightStaticText: string ;
   DefaultTitleFontName: string ;
   DefaultTitleFontNameStaticText: string ;
   DefaultTitleFontSize: string ;
   DefaultTitleFontSizeStaticText: string ;
   DefaultTitleFontSels: string ;
   DefaultTitleFontSelsGroupBox: string ;
   DefaultBorderKinds: string ;
   DefaultBorderKindsGroupBox: string ;
   DefaultTextKinds: string ;
   DefaultTextKindsGroupBox: string ;
   DefaultTitleForeColor: string ;
   DefaultTitleForeColorStaticText: string ;
   DefaultTitleBackColor: string ;
   DefaultTitleBackColorStaticText: string ;
   DefaultColTitleHeight: string ;
   DefaultColTitleHeightStaticText: string ;
   DefaultRowTitleWidth: string ;
   DefaultRowTitleWidthStaticText: string ;
   DefaultGridWidth: string ;
   DefaultGridWidthStaticText: string ;
   DefaultGridHeight: string ;
   DefaultGridHeightStaticText: string ;
   DefaultGridForeColor: string ;
   DefaultGridForeColorStaticText: string ;
   DefaultGridBackColor: string ;
   DefaultGridBackColorStaticText: string ;
   DefaultUnusedGridBackColor: string ;
   DefaultUnusedGridBackColorStaticText: string ;
   DefaultNbCols: string ;
   DefaultNbColsStaticText: string ;
   DefaultNbRows: string ;
   DefaultNbRowsStaticText: string ;
   Bmp: string ;
   BmpStaticText: string ;
}
declare class aQVPListOfAsGridScenarioColumnsPopUpAgent extends aMenuItemControlAgent {
   ConsultAssociatedQVarPresentor: string ;
   ModifyAssociatedQVarPresentor: string ;
   MoveUp: string ;
   MoveDown: string ;
   Delete001: string ;
   NotifyInit();
}
declare class aScenarioForOwnerAsHLink extends aScenario {
}
declare class SubRangeAsComboBoxAgent extends aSubRangeAsComboBoxAgent {
}
declare class aSubRangeAsComboBoxAgent extends aCStringControlAgent {
   theRangeType: string ;
   LoadValue();
   NotifyInit();
   StoreValue();
   NotifyLoseFocus();
   NotifySelected();
}
declare class aSubRangeTypeAsComboBox extends aXXXAsComboBox {
   DefaultUIAgentClassId();
}
declare class QVPListOfAsListCtrlFolderAgent extends aFolderViewAgent {
}
declare class QVPListOfAsListCtrlSettingsAgent extends QVPListOfAsListCtrlSettingsVirtualAgent {
   theStringExtractKind: string ;
   theStringExtractKindStaticText: string ;
   theBMPKind: string ;
   theBMPKindStaticText: string ;
   AllowToChangeStyleAtRunTime: string ;
   WithBMP: string ;
   WithBMPGroupBox: string ;
   SendMultiSelectionAsList: string ;
   AddUIAgentInSentList: string ;
   SortKind: string ;
   SortKindStaticText: string ;
   theStringExtractParam: string ;
   theStringExtractParamStaticText: string ;
   myAcceptedClassDef: string ;
   myAcceptedClassDefStaticText: string ;
}
declare class QVPListOfAsListCtrlColumnsWithListCtrlAgent extends QVPListOfAsListCtrlColumnsAgent {
   myColumns001: string ;
   myText: string ;
   myTextStaticText: string ;
   Width: string ;
   WidthStaticText: string ;
   Fraction: string ;
   FractionStaticText: string ;
   RelativeWidth: string ;
   theBMPKind: string ;
   theBMPKindStaticText: string ;
   theBMPParam: string ;
   theBMPParamStaticText: string ;
   CalculatedAtRunTime: string ;
   TitleJustification: string ;
   TitleJustificationStaticText: string ;
   WithBMP: string ;
   WithBMPGroupBox: string ;
   myColumns002: string ;
   SortKind: string ;
   SortKindStaticText: string ;
   myColumns002_Selected(:aUIAgent, SelectedRank:number):number;
}
declare class QVPListOfAsListCtrlColumnsAgent extends aUIAgent {
}
declare class QVPListOfAsListCtrlSettingsVirtualAgent extends aUIAgent {
}
declare class myColumnsAsListCtrlAgent extends aListCtrlUIAgent {
   myColumns001: string ;
   myText: string ;
   myTextStaticText: string ;
   Width: string ;
   WidthStaticText: string ;
   Fraction: string ;
   FractionStaticText: string ;
   RelativeWidth: string ;
   theBMPKind: string ;
   theBMPKindStaticText: string ;
   theBMPParam: string ;
   theBMPParamStaticText: string ;
   CalculatedAtRunTime: string ;
   TitleJustification: string ;
   TitleJustificationStaticText: string ;
   WithBMP: string ;
   WithBMPGroupBox: string ;
   MemoryOfSelectedObject: string ;
   prevSelection: string ;
   NotifyInit();
   LoadValue();
   NotifyGetChar();
   NotifyButtonDblClk();
   NotifyExecuted();
   NotifyButtonDown();
   NotifySelected();
}
declare class aQVPListOfAsListCtrl extends aQVPXXXAsExtendedListCtrl {
   myColumns: string ;
   theStringExtractKind: string ;
   theStringExtractParam: string ;
   WithBMP: string ;
   theBMPKind: string ;
   AllowToChangeStyleAtRunTime: string ;
   SendMultiSelectionAsList: string ;
   AddUIAgentInSentList: string ;
   SortKind: string ;
   myAcceptedClassDef: string ;
   AllowMoveAfterSort: string ;
   IsConsistent();
   Init();
}
declare class aListKindsMenuScenAgent extends aMenuItemControlAgent {
   CurrentStyle: string ;
}
declare class aListOfAsListCtrlUIAgent extends aListCtrlUIAgent {
   CurrentStyle: string ;
   ComputeLineEventProcAddr: string ;
   ComputeColumnEventProcAddr: string ;
   ColumnExecutedEventProcAddr: string ;
   BuildDraggableSelectionEventProcAddr: string ;
   SortColumnEventProcAddr: string ;
   ComputeColumnTitleEventProcAddr: string ;
   IsDragging: string ;
   IsStartingToDrag: string ;
   theDraggedObjects: string ;
   ExecutedColumnNbr: string ;
   LastExecutedColumn: string ;
   SortDescending: string ;
   CurrentColumn: string ;
   CurrentSortingType: string ;
   AuxiliaryItemList: string ;
   OriginalIndexes: string ;
   myListOfType: string ;
   MemoryOfMySelection: string ;
   StartDragX: string ;
   StartDragY: string ;
   TestLeftButton: string ;
   OldNeededEvent: string ;
/**
*Portability Check: OK
*/
   GetIndexInCtrFromList_DEPRECATED(RankInList:number):number;
   GetIndexInListFromCtrl_DEPRECATED(RankInCtrl:number):number;
/**
*Portability Check: OK
*/
   GetIndexInCtrFromList(RankInList:number):number;
   GetIndexInListFromCtrl(RankInCtrl:number):number;
   NotifyComputeLine(theArrayOfStrings:string, ObjectIndex:number, theListOfReftos:aListOfInstances):number;
   ComputeLine(theArrayOfStrings:string, ObjectIndex:number, theListOfReftos:aListOfInstances):number;
   NotifySortColumn(Data1:number, Data2:number):number;
   SortColumn(Data1:number, Data2:number):number;
/**
*Portability Check: OK
*/
   UpdateIndexesFromCtrl();
   DoSortColumn();
   DefaultSortColumn(Column:number);
   NotifyColumnExecuted();
   NotifyComputeColumn(theCellContent:string, ColIndex:number, LineIndex:number, theListofReftos:aListOfInstances):number;
   ComputeColumn(theCellContent:string, ColIndex:number, LineIndex:number, theListofReftos:aListOfInstances):number;
   NotifyComputeColumnTitle(pArrayOfTitles:string, theListofReftos:aListOfInstances):number;
   ComputeColumnTitle(pArrayOfTitles:string, theListofReftos:aListOfInstances):number;
   NotifyBuildDraggableSelection(theDraggableList:aListOfInstances, theListOfReftos:aListOfInstances):number;
   BuildDraggableSelection(theDraggableList:aListOfInstances, theListOfReftos:aListOfInstances):number;
   WydeToMSJustification(WydeJustification:string):number;
   Finalize();
   NotifyInit();
   RefreshTranslation();
   EvalAsCString(Desc:aIdentifierDesc, Element:aLightObject):string;
   LoadValue();
   SelectAll();
   UnSelectAll();
   NotifyGetChar();
   newChoice(theString:string, Enable:boolean):aEntity;
   NotifyRightDblClk(theUIComponent:string, x:number, y:number):number;
   HandleAction(theVarType:aListofReftosType);
/**
*Portability Check: OK
*/
   NotifyButtonDblClk();
/**
*Portability Check: OK
*/
   NotifyExecuted();
   NotifySelected();
   GetItemFromXY(x:number, y:number):number;
   NotifyButtonDown();
/**
*Portability Check: OK
*/
   NotifyButtonUp();
   NotifyMouseMove();
   NotifyPopup();
   NotifyLoseFocus();
   NotifyCanReceiveDroppedObject();
   NotifyDroppedObject();
   Terminate();
   IsObjectSelected(thisObject:aLightObject):boolean;
   NotifyRangeHasChanged();
   GetSelectedObject();
}
declare class aListOfAsListCtrlScenario extends aXXXAsListCtrl {
   Init();
   DefaultUIAgentClassId();
   NewQVarPresentor();
   CanReceiveDropObject();
   InsertNewColumn(thisQVarPresentor:aQVPListOfAsListCtrl, theVar:aIdentifierDesc, X:number, Y:number, theScenarioAsDesignWindowAgent:aScenarioAsDesignWindowAgent);
   ReceiveDropObject();
   PresentDraggableEntitiesFor(theType:aType);
   GetRefClassDef(thisQVarPresentor:aQVarPresentor):aClassDef;
   QVPHasBeenSelected();
   ColumnJustificationToDrawTextAlignement(ColumnJustification:string):string;
   Paint();
   CanDisplayThisType();
   GetLine(theLine:aListOfInstances):number;
   InitEvents();
   GetQVarPresentor();
   IsMain();
   GetQVarPresentorOnDrop();
}
declare class aListOfAsListCtrlColumnQualifier001Agent extends aUIAgent {
   Width: string ;
   WidthStaticText: string ;
   Fraction: string ;
   FractionStaticText: string ;
   RelativeWidth: string ;
   TitleJustification: string ;
   TitleJustificationStaticText: string ;
   CalculatedAtRunTime: string ;
   theBMPKind: string ;
   theBMPKindStaticText: string ;
   theBMPParam: string ;
   theBMPParamStaticText: string ;
   Width001: string ;
   myText: string ;
   myTextStaticText: string ;
   SortKind: string ;
   SortKindStaticText: string ;
   WithBMP: string ;
   WithBMPGroupBox: string ;
   myVar001: string ;
   myVarStaticText: string ;
}
declare class aListOfAsListCtrlColumnQualifier extends aColumnQualifier {
   ComputeAtRunTime: string ;
   WithBMP: string ;
   theBMPKind: string ;
   theBMPParam: string ;
   SortKind: string ;
   Init();
   isAlive();
}
declare class ListOfAsListCtrlAgent extends aListOfAsListCtrlUIAgent {
}
declare class FolderAsEFWithButtonAgent extends aUIAgent {
   PushButton: string ;
   EntryField: string ;
   PushButton_Executed(:aUIAgent, SelectedRank:number, Option:number):number;
   EntryField_LoseFocus():number;
   LoadValue();
   StoreValue();
   EntryField_Changed():number;
   SetExecMode();
}
declare class WydeCPPGeneratorToolsAgent extends aUIAgent {
   CreatePackagesFromInstalledBundles: string ;
}
declare class CPPGeneratorForOneProjectAgent extends aSplitViewAgent {
}
declare class aCPPGenerator001Agent extends aUIAgent {
   CurrentEntity: string ;
}
declare class aCPPGeneratorCPPProjectToGenerateAgent extends aUIAgent {
   GenCppEntitiesToGenerate: string ;
   GenerateAndCompileSelectedCPPProjects: string ;
   GenerateSelectedCPPProjects: string ;
   CompileSelectedCPPProjects001: string ;
   LinkSelectedCPPProjects: string ;
   CompileAndLinkSelectedCPPProjects: string ;
   Mode: string ;
   SelectAll: string ;
   MustAdjustLang: string ;
   ProductName: string ;
   ProductNameStaticText: string ;
   ProductVersion: string ;
   ProductVersionStaticText: string ;
   GroupBox: string ;
   ProductName_ValueStored(:aUIAgent);
   ProductVersion_ValueStored(:aUIAgent);
}
declare class aCPPGeneratorCPPProjectsAgent extends aSplitViewAgent {
}
declare class CPPGeneratorAllCPPProjectsAgent extends aUIAgent {
   GenCppEntities: string ;
   SelectDone: string ;
   GenCppEntities_Selected(SelectedRank:number):number;
   GenCppEntities_ValueLoaded(:aUIAgent);
}
declare class CPPProjectsAndSelectedOneAgent extends aSplitViewAgent {
}
declare class CPPGenRemoveClassesAgent extends aUIAgent {
   ClassesToRemove: string ;
   StaticText: string ;
}
declare class aCPPImplicitUsesIRProcessor extends aIRProcessor {
   ImplicitUses: string ;
   Init();
   Terminate();
   AddDescendantsOf(thisClassDef:aClassDef);
   HandleOpNode();
}
declare class aGenCPPGauge001Agent extends aUIAgent {
   BitMap: string ;
   ActionValid001: string ;
   GroupBox: string ;
   ThisDummyEFIsGettingFocusFirst: string ;
   LoadValue();
   BitMap_Init(:aUIAgent):number;
}
declare class aGenCPPGauge extends aGauge {
   BMPName: string ;
   bmpNumber: string ;
   lastT: string ;
   Init();
   currentBMPName():string;
   inc();
}
declare class FirstPageForRenamingSQLDBDefAgent extends aUIAgent {
   RenamedDBDef: string ;
   RenamedDBDefStaticText: string ;
   DataBaseName: string ;
   DataBaseNameStaticText: string ;
   UserName: string ;
   UserNameStaticText: string ;
   PassWord: string ;
   PassWordStaticText: string ;
   DataSetVersionStaticText: string ;
   fromNSId: string ;
   fromNSIdStaticText: string ;
   toNsId: string ;
   toNsIdStaticText: string ;
   MaxConnections: string ;
   MaxConnectionsStaticText: string ;
   Shared: string ;
   DataSetId: string ;
   DataSetIdStaticText: string ;
   DataSetVersion001: string ;
   OpenedByApplication: string ;
   DBMgrClassDef: string ;
   DBMgrClassDefStaticText: string ;
   IsAccessInfoStoredInConfigFile: string ;
   StoreAccessInfoToConfigFile: string ;
   StaticStmtsKept: string ;
   StaticStmtsKeptStaticText: string ;
   UpdateField(connectInfoInXMLFile:boolean);
   IsAccessInfoStoredInConfigFile_Selected(:aUIAgent, SelectedRank:number):number;
   IsAccessInfoStoredInConfigFile_Init(:aUIAgent):number;
}
declare class aTopOkCancelForRenamingSQLDBDefAgent extends aUIAgent {
   aDBDefActions: string ;
}
declare class FolderForRenamingSQLDBDefAgent extends aFolderViewAgent {
}
declare class ButtonsForRenamingSQLDBDefAgent extends aUIAgent {
   CheckCompatibilityWithDB: string ;
   CreateDefaultTablesInDB: string ;
   ActionDropDB: string ;
}
declare class aRenamingSQLDBDef extends aODBCDBDef {
   RenamedDBDef: string ;
   IsConnectInfoStoredInConfigFile: string ;
   IsValid();
   NewDBMgr();
   GetConfigFileName():string;
   EncryptPW(PW:string, cypherPW:string);
   DecryptPW(cypherPW:string, PW:string);
   StoreConnectInfoToExternalConfig(theUIagent:aUIAgent);
   GetConnectInfoFromExternalConfig(DBName:string, userName:string, PW:string);
   OpenDB();
   ClassDefRepresentationClassId();
   GetLegalNameFrom();
   InitAccessPlanDescriptorsList();
   PrepareMappingOf();
   AnalyseMapping();
   CheckCompatibilityWithDB();
   BuildNsIdAndIdForClassDBRep();
   ClassDBRepFromClassId();
   CreateClassDBRepFor();
   ProduceCPPExternalPredefinitions();
   CreateDefaultTableDescs();
   CreateDefaultTablesInDB();
   DropDB();
   CheckDefaultTables();
   WriteTitle();
   DeleteAllTableDesc();
   ProduceIndexDDL();
   InitTypes();
   BestFitDBType();
   AddReservedNames();
   SqlTypeIsCompatibleWithMMType();
   SqlTypeAndDataFromDBValues();
   UpdateDDL();
   FindDBClassDefRepresentation();
   GetSqlLikeWildCard();
   SqlPlaceHolderString();
   ColumnDescription();
   ExternalType();
   BestMMTypeForData();
   GoodOne();
   GetDDLEndLineCharsForDDLSript();
   IsConsistent();
   ColumnTypeDDLProducedAtEnd();
   CanBindSmallInt8ToInt();
   SqlNestedRequestOnTupleMayUseIN();
   PRBGeneratorClassName();
   GetEncryptionBrokerClassId();
   GetListOfSqlEncryptionData();
   IsAccentSensitive();
   IndexAccentCaseSensitivity();
   IsCaseSensitive();
   HasVirtualPrecision();
}
declare class FirstPageForOracleDBDefAgent extends aUIAgent {
   EnableServerTrace: string ;
   StaticStmtsKept: string ;
   StaticStmtsKeptStaticText: string ;
}
declare class aGraphOfClasses005Agent extends aFolderViewAgent {
}
declare class aClassDiagramIDEFinder extends aEntityIDEFinder {
   FindEntityInIDE();
   ManageEntity();
}
declare class modulesPickerAgent extends aUIAgent {
   modulesList: string ;
   modulesList001: string ;
   theList001: string ;
   theList001_Executed(SelectedRank:number, Option:number):number;
   Terminate();
   Init();
}
declare class ClassAndModulesDefPickerAgent extends aFolderViewAgent {
}
declare class PickerWithArgumentForEntityAgent extends aUIAgent {
   SelectionArgument: string ;
   SelectionArgument_Changed():number;
}
declare class aRecordIntrospector001Agent extends DefaultIntrospectorAgent {
   VarAsTreeBox: string ;
}
declare class aRecordIntrospector extends aVarIntrospector {
   GetVarAddress(varDesc:aVarDesc):string;
   createForAncestor(rootnode:string, theType:aType, TreeBox:aVoidAsTreeBoxUIAgent, presentedObjects:aListOfInstances, Ancestor:aRecordDesc);
   UpdateForAncestor(rootnode:string, curTypeNode:string, theType:aType, TreeBox:aVoidAsTreeBoxUIAgent, presentedObjects:aListOfInstances, Ancestor:aRecordDesc);
   CreateTreeForType();
   UpdateTreeForType();
   expandNodesIfNecessary();
}
declare class ObjectIntrospectorGeneralAgent extends aUIAgent {
   ObjectClassName: string ;
   StaticText: string ;
   StaticText001: string ;
   ObjectClassId: string ;
   ObjectAddress: string ;
   StaticText002: string ;
   GroupBox: string ;
   FullObjectNsId: string ;
   FullObjectId: string ;
   ObjectStatus: string ;
   FullObjectVersion: string ;
   ObjectIsPhantom: string ;
}
declare class MainIntrospectorAgent extends DefaultIntrospectorAgent {
   selfForLightObject: string ;
   selfForFullObject: string ;
   selfForNilObject: string ;
}
declare class LightObjectIntrospectorFolderAgent extends aFolderViewAgent {
   LoadValue();
}
declare class ObjectIntrospectorUIAgent extends aUIAgent {
   ObjectVarAgent: string ;
}
declare class ObjectIntrospectorHasTransactionAgent extends aUIAgent {
   TransactionStatus: string ;
   ObjectTransaction: string ;
}
declare class ObjectIntrospectorDBAgent extends aUIAgent {
   ObjectStored: string ;
}
declare class FullObjectIntrospectorFolderAgent extends aFolderViewAgent {
}
declare class aObjectIntrospector extends aRecordIntrospector {
   HasTIntrospector: string ;
   InTIntrospector: string ;
   myObject():aLightObject;
   ObjectValid():boolean;
   FullObjectValid():boolean;
   changePresentedTypeIfNecessary();
   selfForLightObject():aObjectIntrospector;
   selfForFullObject():aObjectIntrospector;
   selfForNilObject():aObjectIntrospector;
   ObjectClassName():string;
   PresentedScenario():aScenario;
   ObjectClassId():string;
   ObjectAddress():string;
   ObjectVarAgent():aVarAgent;
   ObjectStatus():string;
   ObjectIsPhantom():string;
   HasTransactionStatus():string;
   InTransactionStatus():string;
   ObjectHasTransactionIntrospector():aTransactionIntrospectorViewer;
   ObjectInTransactionIntrospector():aTransactionIntrospectorViewer;
   ObjectStored():string;
   FullObjectNsId():string;
   FullObjectId():string;
   FullObjectVersion():string;
   FullObjectFullId():string;
   GetVarAddress();
   ObjectNotAlreadyPresented(presentedObjects:aListOfInstances):boolean;
   CreateTreeForType();
   UpdateTreeForType();
   createForAncestor();
   UpdateForAncestor();
   NotifyDoubleClick();
   Terminate();
}
declare class aReftoIntrospector001Agent extends DefaultIntrospectorAgent {
   VarAsTreeBox: string ;
}
declare class aReftoIntrospector extends aVarIntrospector {
   CreateTreeForType();
   UpdateTreeForType();
   GetRefObject():aFullObject;
   GetObjectIntrospector(Obj:aFullObject):aObjectIntrospector;
   NotifyDoubleClick();
   CreateTreeInNode();
}
declare class aVarIntrospector001Agent extends DefaultIntrospectorAgent {
   VarContents: string ;
}
declare class DefaultIntrospectorAgent extends aUIAgent {
}
declare class VarAsTreeBoxAgent extends aUIAgent {
   TreeBox: string ;
   AlreadyInitialized: string ;
   curPresentedType: string ;
   BitMap: string ;
   AcceptModifications: string ;
   AcceptModifications001: string ;
   InlineHash: string ;
   IsExpanding: string ;
   NodeBeingEdited: string ;
   Init();
   Terminate();
   initBitMap();
   LoadValue();
   BitMap_Executed(:aUIAgent, SelectedRank:number, Option:number):number;
   TreeBox_Selected(:aUIAgent, SelectedRank:number):number;
   IsNodeForceChild(Node:string):boolean;
   SetNodeForceChild(Node:string, NewForceChild:boolean);
   AlreadyExpanded(intro:aVarIntrospector):boolean;
   ExpandInline(intro:aVarIntrospector, InNode:string);
   TreeBox_Executed(:aUIAgent, SelectedRank:number, Option:number):number;
   Kill(mySelf:VarAsTreeBoxAgent);
/**
*Portability Check: OK
*/
   TreeBox_BeginLabelEdit(:aUIAgent, Item:number):number;
/**
*Portability Check: OK
*/
   TreeBox_EndLabelEdit(:aUIAgent, Item:number, NewText:string):number;
/**
*Portability Check: OK
*/
   TreeBox_GetChar(:aUIAgent, Ch:number, VKey:string, theCount:number, Flags:string):number;
}
declare class aVarIntrospector extends aLightObject {
   pVar: string ;
   VarType: string ;
   VarName: string ;
   VarContents():string;
   ClassIdFromData();
   expandNodesIfNecessary(rootnode:string, TreeBox:aVoidAsTreeBoxUIAgent);
   GetNodeLabel(ForType:aType):string;
   CreateTreeForType(rootnode:string, theType:aType, TreeBox:aVoidAsTreeBoxUIAgent, presentedObjects:aListOfInstances);
   UpdateTreeForType(rootnode:string, curTypeNode:string, theType:aType, TreeBox:aVoidAsTreeBoxUIAgent, presentedObjects:aListOfInstances);
   _To_delete_CreateList(RootNode:string, pVar:string, TreeBox:aVoidAsTreeBoxUIAgent);
   _To_delete_UpdateList(RootNode:string, pvar:string, TreeBox:aVoidAsTreeBoxUIAgent);
   changePresentedTypeIfNecessary(thetype:aType):aType;
   NotifyDoubleClick();
   HasDataBreakPoint():boolean;
   SetUnSetDataBreakPoint();
   NotifyBeginLabelEdit(OldText:string):boolean;
   NotifyEndLabelEdit(Newtext:string):boolean;
   CreateTreeInNode(Node:string, TreeBox:aVoidAsTreeBoxUIAgent);
}
declare class aArrayIntrospector001Agent extends DefaultIntrospectorAgent {
   VarAsTreeBox: string ;
}
declare class aArrayIntrospector extends aVarIntrospector {
   CreateTreeForType();
   UpdateTreeForType();
}
declare class DefaultIntrospectorForTextAgent extends DefaultIntrospectorAgent {
   GetText: string ;
}
declare class aTextIntrospector extends aVarIntrospector {
   GetText():string;
   SetUnSetDataBreakPoint();
   HasDataBreakPoint();
}
/**
*this Broker is usefull to find and show in wam ide where an entity is defined

entities managed by this broker are these that are modified in wam in a non modal mode :

- Class
- Module
- Class diagrams
- Containers
- ...

-----------------------------------------------------------------------------------------------
When you want to implement a new descendant of this broker

you must override the method ManageEntity so as your class is choosen for a special entity
you must implement FindEntityInIde so as to display the ide catalog where your entity is defined and select it

*/
declare class aEntityIDEFinder extends aLightObject {
   EntityToFind: string ;
   FindEntityInIDE();
   ManageEntity(thisEntity:aEntity):boolean;
   IDEFinderClassId(curClassDef:aClassDef, givenEntityToFind:aEntity):number;
   ClassIdFromData();
}
declare class aModuleIDEFinder extends aEntityIDEFinder {
   ManageEntity();
   FindEntityInIDE();
}
declare class aClassIDEFinder extends aEntityIDEFinder {
   ManageEntity();
   ShowNodeOf(theTree:aXXXAsTreeBoxUIAgent, theClassDef:aClassDef, root:aClassDef);
   FindEntityInIDE();
}
declare class DefaultTransactionIntrospectorForWatchAgent extends aFolderViewAgent {
}
declare class TransactionIntrospectorContentsAgent extends aUIAgent {
   allObjects001: string ;
   allObjects001_ComputeColumn(theCellContent:string, ColIndex:number, LineIndex:number, theListofReftos:aListOfInstances):number;
   allObjects001_Executed(:aUIAgent, SelectedRank:number, Option:number):number;
}
declare class TransactionIntrospectorConsistencyAgent extends aUIAgent {
   comment: string ;
   UICheckConsistency: string ;
   comment_Init(:aUIAgent):number;
}
declare class TransactionIntrospectorWhenErrorAgent extends aFolderViewAgent {
}
declare class TransactionIntrospectorStatusAgent extends aUIAgent {
   TransactionHasBeenAccepted: string ;
   TransactionHasBeenWellAccepted: string ;
   TransactionDBErrorMsg: string ;
   StaticText: string ;
   TransactionDBError001: string ;
   StaticText001: string ;
   LoadValue();
}
declare class aTransactionIntrospectorViewer extends aFullObject {
   theTransaction: string ;
   allObjects: string ;
   objectsToDelete: string ;
   objectsToSetPhantom: string ;
   comment: string ;
   TransactionHasBeenAccepted():boolean;
   TransactionHasBeenWellAccepted():boolean;
   TransactionDBError():number;
   TransactionDBErrorMsg():string;
   RefreshContentsForDisplay();
   ReportDescOf(fromObject:aFullObject);
   PrevVersionsSavedOrInSameTransaction(theObject:aFullObject):boolean;
   CheckPrevVersionsSavedOrInSameTransaction():boolean;
   CheckRefObject(fromObject:aFullObject, refObject:aFullObject, exactVersion:boolean):boolean;
   CheckRefOfObject(theObject:aFullObject):boolean;
   CheckReferences():boolean;
   CheckConsistency():boolean;
   UICheckConsistency();
   ParamInteract();
   StringExtract();
   Terminate();
}
declare class DataCheckingPopUp001Agent extends aUIAgent {
   Len: string ;
   LenStaticText: string ;
   append: string ;
   reset: string ;
   getDataBreakPointMode: string ;
   ChangeBreakPointMode: string ;
   Description: string ;
   DescriptionStaticText: string ;
   datas: string ;
   varAddressPStaticText: string ;
   varAddress001: string ;
}
declare class DataBreakPointsAgent extends aUIAgent {
   varAddress001: string ;
   varAddressStaticText: string ;
   Len: string ;
   LenStaticText: string ;
}
declare class aDataBreakPointsPopUp extends aWideExtension {
   datas: string ;
   varAddress: string ;
   Len: string ;
   Description: string ;
   BreakPointMode: string ;
   PresentedVarAddress():string;
   RefreshDataBreakPointMode();
   RefreshDatas();
   append();
   reset();
   ChangeBreakPointMode();
   getDataBreakPointMode():string;
   DoYourJob();
   FolderParentName();
   MenuText();
}
declare class aDataBreakPointsRole extends aSingleRoleType {
   ModifyThisObject();
   canBreakLinkBetween();
}
declare class aRunningContextCatalogRole extends aSingleRoleType {
   canBreakLinkBetween();
   AskForActions();
   AuthorizeAction();
   NewAcceptedInstance();
   Accepts();
}
declare class aRunningContextCatalog001Agent extends aOpenWhereClosedUIAgent {
   Entities: string ;
}
declare class aRunningContextCatalog extends aEntity {
   Entities: string ;
   StringExtract();
   GetBitmap();
}
declare class aRunningContextListExtension001Agent extends aUIAgent {
   DoYourJob: string ;
}
declare class aRunningContextListExtension extends aWideExtension {
   initit();
   DoYourJob();
   FolderParentName();
   MenuText();
   ButtonBMPName();
}
declare class aListOfIntrospector extends aVarIntrospector {
   CreateBitmaps(bmpChanged:number, EmptyBMP:number, bmp:number, ListOfBMP:number);
   SetNodeForceChild(TreeBox:aVoidAsTreeBoxUIAgent, Node:string, NewForceChild:boolean);
   BuildTreeNodes(l:aListOfRefTos, ListOfNode:string, TreeBox:aVoidAsTreeBoxUIAgent, presentedObjects:aListOfInstances);
   BuildListTreeForType(rootnode:string, theType:aType, TreeBox:aVoidAsTreeBoxUIAgent, presentedObjects:aListOfInstances, DeleteFirst:boolean);
   CreateTreeForType();
   UpdateTreeForType();
   SetUnSetDataBreakPoint();
   CreateTreeInNode();
}
declare class aTransactionIntrospector001Agent extends DefaultIntrospectorAgent {
   TViewer: string ;
   TransactionIsNil: string ;
}
declare class TransactionIntrospectorNonValidTAgent extends aUIAgent {
   StaticText: string ;
}
declare class aTransactionIntrospector extends aObjectIntrospector {
   theTViewer: string ;
   TViewer():aTransactionIntrospectorViewer;
   TransactionIsNil():aTransactionIntrospector;
   Kill();
}
declare class WAMContainerForMultiSelectionAgent extends aUIAgent {
   Contents001: string ;
}
declare class EntityMMViewerWhereUsedOverrideAgent extends EntityMMViewerWhereUsedAgent {
   WhereIsUsed: string ;
}
declare class aContainerIDEFinder extends aEntityIDEFinder {
   FindEntityInIDE();
   ManageEntity();
}
declare class XMLFileNodesTreeAgent extends aXMLListAsTreeBoxUIAgent {
   GetList();
}
declare class XMLFileAttributesTreeAgent extends aXMLListAsTreeBoxUIAgent {
   GetList();
}
declare class XMLFileFolderAgent extends aFolderViewAgent {
}
declare class XMLFileAgent extends aUIAgent {
   XMLFileFolder: string ;
   Load001: string ;
   Write: string ;
}
declare class XMLFileNodesAgent extends aUIAgent {
   XMLFileNodesTreeBox: string ;
}
declare class XMLFileAttributesAgent extends aUIAgent {
   XMLFileAttributesTreeBox: string ;
}
declare class XMLFileAsNodeAgent extends aUIAgent {
   FileAsNode: string ;
}
declare class XMLNamedNodeAgent extends XMLNodeAgent {
   XMLNamedNodeFolder: string ;
}
declare class XMLNamedNodeSubNodesTreeAgent extends aXMLListAsTreeBoxUIAgent {
   GetList();
}
declare class XMLNamedNodeAttributesTreeAgent extends aXMLListAsTreeBoxUIAgent {
   GetList();
}
declare class XMLNamedNodeFolderAgent extends aFolderViewAgent {
}
declare class XMLNamedNodeSubNodesAgent extends aUIAgent {
   XMLNamedNodeSubNodesTree: string ;
}
declare class XMLNamedNodeAttributesAgent extends aUIAgent {
   XMLNamedNodeAttributesTree: string ;
}
declare class XMLNamedNodeHostNodeAgent extends aUIAgent {
   HostNode: string ;
   HostNodeStaticText: string ;
}
declare class XMLNodeAgent extends aUIAgent {
}
declare class aXMLListAsTreeBoxUIAgent extends aXXXAsTreeBoxUIAgent {
   SetObjectToNode();
/**
*Portability Check: OK
*/
   NotifyExecuted();
   GetList(FromObject:aLightObject):aListOfInstances;
   AddNode(InNode:string, FromObject:aLightObject);
   LoadValue();
}
declare class aXMLNodesListAsTreeBoxUIAgent extends aXMLListAsTreeBoxUIAgent {
   GetList(FromObject:aXMLNamedNode):aListOfInstances;
}
declare module wServicesManager {
   function tpInit(Config:string):number;
   function tpAddTemporaryService(ServiceName:string, Host:string, Port:number);
   function tpConnectionTime(ServiceName:string):number;
   function tpGetHostName():string;
   function tpGetIPAddressByName(HostName:string):string;
   function tpGetNetConfFileName():string;
   function tpModifyConfiguration(XML:string):boolean;
   function tpAlloc(AllocStyle:string, Param:string, Size:number):string;
   function tpRealloc(BufferToRealloc:string, Size:number):string;
   function tpFree(Buffer:string);
   function tpServerSize(Buffer:string):number;
   function tpServerAlloc(Size:number):string;
   function tpServerRealloc(BufferToRealloc:string, Size:number):string;
   function tpServerFree(Buffer:string);
   function tpServerLock(Buffer:string):boolean;
   function tpSendProcessId(ServiceName:string, ProcessId:number, SendBuffer:string, SendBufferSize:number, Socket:string, ConnectionKindSet:string):number;
   function tpSend(ServiceName:string, SendBuffer:string, SendBufferSize:number, Socket:string, ConnectionKindSet:string):number;
   function tpReceiveProcessId(Socket:string, ProcessId:number, ReceiveBuffer:string, ReceiveBufferSize:number, WaitUntilReceived:boolean, ConnectionKindSet:string):boolean;
   function tpReceive(Socket:string, ReceiveBuffer:string, ReceiveBufferSize:number, WaitUntilReceived:boolean, ConnectionKindSet:string):boolean;
   function tpCallProcessId(ServiceName:string, ProcessId:number, SendBuffer:string, SendBufferSize:number, ReceiveBuffer:string, ReceiveBufferSize:number, ConnectionKindSet:string):number;
   function tpCall(ServiceName:string, SendBuffer:string, SendBufferSize:number, ReceiveBuffer:string, ReceiveBufferSize:number, ConnectionKindSet:string):number;
   function tpAsyncCallProcessId(ServiceName:string, pProcessId:string, SendBuffer:string, SendBufferSize:number, pReceiveBuffer:string, pReceiveBufferSize:string, ConnectionKindSet:string, pAsyncCallDone:string, pAsyncCallResult:string, OnlyAsyncReceive:boolean, UserData:string, AsyncCallProcessIdCallBack:string):number;
   function tpGetCalledServicesManager(Socket:string, Host:string, Port:number);
   function tpTerm();
   function tpError(Buffer:string):number;
   function tpTime(Buffer:string):number;
   function tpAsyncCall(ServiceName:string, SendBuffer:string, SendBufferSize:number):number;
   function tpConfigure(HostWindow:string, Service:string, WithRootNode:boolean, OnlyOneRemoteServicesManager:boolean):string;
   function tpSaveConfiguration(AskUser:boolean, WarnUser:boolean);
   function tpTimerCallProcessIdEx(ServiceName:string, pProcessId:string, SendBuffer:string, SendBufferSize:number, pReceiveBuffer:string, pReceiveBufferSize:string, ConnectionKindSet:string, TimerCallProcessIdHandle:number, Frequency:number, CallAtStart:boolean, UserData:string, TimerCallProcessIdCallBack:string):number;
   function tpTimerCallProcessId(ServiceName:string, pProcessId:string, SendBuffer:string, SendBufferSize:number, pReceiveBuffer:string, pReceiveBufferSize:string, ConnectionKindSet:string, TimerCallProcessIdHandle:number):number;
   function tpStopTimerCallProcessId(TimerCallProcessIdHandle:number):boolean;
   function tpResetTimerCallProcessId(TimerCallProcessIdHandle:number);
   function tpSuspendTimerCallProcessId(TimerCallProcessIdHandle:number);
   function tpResumeTimerCallProcessId(TimerCallProcessIdHandle:number);
   function GetErrorMsg(ErrorCode:number):string;
}
declare class aArraySorter extends aSequenceSorter {
   HighestRank: string ;
   InitOnSequence();
   SaveOrder();
   sort();
   SortAlternate();
}
declare class aCommonSorterRoot extends aListSorter {
   mySortParam: string ;
   myVarOffset: string ;
   mySortingType: string ;
   DescendingNextTime: string ;
   AttachToVarInStruct(thisVar:string, inSomeStruct:string, theVarType:aType);
   AttachTo(thisVarDesc:aIdentifierDesc);
   SortAlternate();
   SortUp();
   SortDown();
}
declare class aListOfInstancesSorter extends aCommonSorterRoot {
   DealWithObject: string ;
   IsInferior(PtrTo_ThisIsInferior:string, PtrTo_toThat:string, OrderingFunction:string):boolean;
   AttachToObject();
   AttachToVarInStruct();
   CheckVarSorting():boolean;
   SortAlternate();
   SortUp();
   SortDown();
}
declare class aListOfRecordsSorter extends aListOfInstancesSorter {
   AttachToObject();
   AttachToVarInStruct();
   IsInferior(PtrTo_ThisIsInferior:string, PtrTo_toThat:string, OrderingFunction:string):boolean;
   SortAlternate();
   sort();
}
declare class aListOfReftosSorter extends aListOfInstancesSorter {
   IsInferior();
}
declare class aSequenceSorter extends aCommonSorterRoot {
   mypSeq: string ;
   myType: string ;
   myElemType: string ;
   SavedSequence: string ;
   SavedType: string ;
   InitOn();
   InitOnSequence(theSequenceVar:string, theSequenceType:aType);
   SortAlternate();
   IsInferior(PtrTo_ThisIsInferior:string, PtrTo_toThat:string, OrderingFunction:string):boolean;
   sort();
   SaveOrder();
   RestoreOrder();
   Terminate();
}
declare class aAPPickerArgumentsWithSearchButtonAgent extends aUIAgent {
   APPickerArguments: string ;
   Select001: string ;
}
declare class aGraphQVP extends aQVarPresentor {
   Master: string ;
   GetPresentedObject():aLightObject;
   NotifyDeleteFromGraph();
   HideShow(FrameAgent:aGraphFrameUIAgent, Hide:boolean);
   BeforeAccept();
   CalcRectFromPos(xMin:number, yMin:number, xMax:number, yMax:number);
}
declare class aQVPLinkKind extends aQVPForClone {
   GetDrawTextKind():string;
   SetDrawTextKind(DrawTextKind:string);
   GetExtractKind():string;
   SetExtractKind(ExtractKind:string);
   GetAutoHide():string;
   SetAutoHide(AutoHide:string);
   GetAddLink():string;
   SetAddLink(AddLink:string);
   GetLinkKind():string;
   SetLinkKind(LinkKind:string);
   GetLineKind():string;
   SetLineKind(LineKind:string);
   GetNbSymbols():number;
   SetNbSymbols(NbSymbols:number);
   GetSymbolsAtMiddle():string;
   SetSymbolsAtMiddle(SymbolsAtMiddle:string);
   GetLinkForeColor():string;
   SetLinkForeColor(LinkForeColor:string);
   GetLinkBackColor():string;
   SetLinkBackColor(LinkBackColor:string);
   GetNotOldVersion():boolean;
   SetNotOldVersion(NotOldVersion:boolean);
   GetVisibleState():string;
   SetVisibleState(VisibleState:string);
   GetLinkText():string;
   SetLinkText(LinkText:string);
   GetVerticalAutoSize():boolean;
   SetVerticalAutoSize(VerticalAutoSize:boolean);
   GetLinkFromMiddle():string;
   SetLinkFromMiddle(LinkFromMiddle:string);
}
declare class aQVPRefToAsAutoSizeScenario extends aQVPSingleLinkScenario {
}
declare class aLinkKindUIAgent extends aGraphUIAgent {
   IsHidden();
   GetAutoHide();
   GetAddLink();
   GetLinkKind();
   GetLineKind();
   GetNbSymbols();
   GetSymbolsAtMiddle();
   GetLinkForeColor();
   GetLinkBackColor();
   GetLinkText();
   CalcAutoWidthHeight();
}
declare class aExtGraphScenario extends aScenario {
   DefaultUIAgentClassId();
   ScenarioKindSet();
   GetLabelForThisQVarPresentor();
   BuildSubComponents();
   CanUse();
}
declare class aExtGraphUIAgent extends aGraphUIAgent {
   GetExtUIAgent():aGraphFrameUIAgent;
   SetExtUIAgentVar(UIAgent:aGraphFrameUIAgent);
   SetExtUIAgent(UIAgent:aGraphFrameUIAgent);
   FinalizeFrameUIAgent(QVarPresentor:aQVarPresentor, UIAgent:aGraphFrameUIAgent);
   CalcAutoWidthHeight();
   AutoWidth();
   AutoHeight();
   SetExtDefaultSize(QVP:aQVarPresentor);
   SetExtDefaultPos(QVP:aQVarPresentor);
   SetExtDefaults(QVP:aGraphEntity);
   GetExtQVPProject(QVP:aGraphEntity);
   OutputExtFrame():aGraphFrameUIAgent;
   InputExtFrame();
   LoadValue();
   NotifyTerminate();
}
declare class aAutoSizeBuildInMethodTypeScenario extends aBuildInMethodTypeScenario {
   DefaultUIAgentClassId();
   ScenarioKindSet();
   GetLabelForThisQVarPresentor();
   GetQVarPresentorOnDrop();
   CanDisplayThisType();
}
declare class aAutoSizeBuildInMethodTypeUIAgent extends aBuildInMethodTypeUIAgent {
   Width: string ;
   Height: string ;
   ZoomFactor: string ;
   CharWidth: string ;
   CharHeight: string ;
   MyGraphFrameUIAgent():aGraphFrameUIAgent;
   GetWidth();
   GetHeight();
   AutoWidth();
   AutoHeight();
   CalcAutoWidthHeight();
   NotifyRangeHasChanged();
   NotifyButtonDblClk();
   NotifyHostRangeHasChanged();
   ChangePos();
   Finalize();
}
declare class aQVPLinkBetweenTwoFrames extends aQVPSingleLinkScenario {
}
declare class aQVPLinkPolyLineScenario extends aQVPLinkScenario {
   PointsCreationEnabled: string ;
}
declare class aLinkBetweenTwoFrameScenario extends aScenario {
   DefaultUIAgentClassId();
   ScenarioKindSet();
   GetLabelForThisQVarPresentor();
   CanUse();
   NewQVarPresentor():aQVPLinkBetweenTwoFrames;
   ModifyKinds();
   GetQVarPresentor();
   AuthorizedDwFor();
   AuthorizedDhFor();
   CanChangeWidth();
   CanChangeHeight();
   BuildSubComponents();
}
declare class aLinkBetweenTwoFrameUIAgent extends aLinkKindUIAgent {
   GetFromObject():aLightObject;
   GetToObject():aLightObject;
   GetFromFrameUIAgent();
   GetToFrameUIAgent();
   GetLinkUIAgent():aLinkUIAgent;
   CheckLinks();
   GetFromPoint():aPoint;
   GetToPoint():aPoint;
   GetRectangle(MinX:number, MaxX:number, MinY:number, MaxY:number);
}
declare class aLinkPolyLineScenario extends aLinkScenario {
   DefaultUIAgentClassId();
   NewQVarPresentor():aQVPLinkPolyLineScenario;
}
declare class aLinkPolyLineUIAgent extends aLinkUIAgent {
   DraggedLineFirstPoint: string ;
   DragX: string ;
   DragY: string ;
   AddPointWithName(Rank:number, X:number, Y:number, FrameAgent:aGraphFrameUIAgent, Name:string):aPointUIAgent;
   AddPoint();
   Finalize();
   MarkPointsToDeleted();
   NotifyButtonDblClk(theUIComponent:aUIComponent, no:number, x:number, y:number):number;
   MaxDistToLine():number;
   MinDistToLine():number;
   Sqr(i:number):number;
   Dist(dx:number, dy:number):number;
   NotifyButtonDown(theUIComponent:aPoint, no:number, x:number, y:number):number;
   NotifyButtonUp();
   NotifyMouseMove();
   MarkPointsToDestroy();
}
declare class aQVPGridScenario001Agent extends aUIAgent {
   TitleFontName: string ;
   TitleFontNameStaticText: string ;
   TitleFontSize: string ;
   TitleFontSizeStaticText: string ;
   TitleFontSels: string ;
   SelectFont: string ;
   TitleForeColor: string ;
   TitleForeColorStaticText: string ;
   TitleBackColor: string ;
   TitleBackColorStaticText: string ;
}
declare class aQVPGridScenario002Agent extends aFolderViewAgent {
}
declare class aQVPGridScenario003Agent extends aUIAgent {
   aQVPGridScenario002: string ;
}
declare class aColorisedReportOnlyReportAgent extends aUIAgent {
   ReportText: string ;
   ReportText_Init():number;
}
declare class aColorisedReport extends aFullObject {
   ReportText: string ;
   HeaderSize: string ;
   NoReportCleaning: string ;
   Title: string ;
   reportTextSize: string ;
   Init();
   initIfNecessary();
   Blank();
   writeText(t:string, color:string);
   writelnText(t:string, color:string);
   ConcatWithText(theText:string, color:string);
   UpdateUI();
   CleanUp();
   StringExtract();
   UnColorize(intoText:string);
   SaveToFile(fileName:string);
}
declare class aListCtrlLineFormat001Agent extends aScenarioAsDesignWindowAgent {
   NotifyButtonDown();
   NotifyDroppedObject();
   NotifyCanReceiveDroppedObject();
   NotifyGetChar();
   InteractWithUser();
}
declare class aListCtrlLineFormat extends aScenario {
   PresentedVar: string ;
   PresentedType: string ;
   Init();
   ParamInteract(theScenario:aScenario, ExecMode:string, InModalMode:boolean, UseDefaultScenario:boolean, theFatherUIAgent:string, BuildingKind:string, X:number, Y:number, Width:number, Height:number, BuiltUIAgent:string):string;
   getExternalQVP():aQVPListOfAsListCtrl;
   AppendColumnsOf(theQVP:aQVPListOfAsListCtrl, externalQVP:aQVPListOfAsListCtrl);
   BuildColumnsList(theQVP:aQVPListOfAsListCtrl);
   getRTQVP():aQVPListOfAsListCtrl;
   prepareForPaint(tmpQVP:aQVPListOfAsListCtrl, oldList:string);
   restoreAfterPaint(tmpQVP:aQVPListOfAsListCtrl, oldList:string);
   ScenarioKindSet();
   IsConsistent();
   GetBitmap();
   BuildClassDef();
}
declare class MoreQVPVirtualOverrideAgent extends aQVPXXXAsListCtrl001ForaQVPXXXAsExtendedListCtrlAgent {
   ExternalLineScenario: string ;
   ExternalLineScenarioStaticText: string ;
}
declare class aQVPListOfAsExternalListCtrl extends aQVPListOfAsListCtrl {
   ExternalLineScenario: string ;
}
declare class aListofAsExternalListCtrl extends aListOfAsListCtrlScenario {
   NewQVarPresentor();
   DefaultUIAgentClassId();
   Paint();
   GetRefClassDefAtRunTime(thisQVarPresentor:aQVarPresentor, PresentedObject:aLightObject):aClassDef;
}
declare class aListOfAsExternalListCtrlAgent extends aListOfAsListCtrlUIAgent {
   AcceptedClassDef: string ;
   originalQVP: string ;
   originalLineScen: string ;
   CurrentLineScen: string ;
   originalLineScenWasEmpty: string ;
/**
*Portability Check: OK
*/
   GetAcceptedClassDef(QVP:aQVPListOfAsListCtrl):aClassDef;
/**
*Portability Check: OK
*/
   GetAcceptedClassDefAtRunTime(QVP:aQVPListOfAsListCtrl, PresentedObject:aLightObject):aClassDef;
   AppendColumnsOf(theQVP:aQVPListOfAsListCtrl, externalQVP:aQVPListOfAsListCtrl);
   BuildColumnsList(LineScen:aListCtrlLineFormat, theQVP:aQVPListOfAsListCtrl);
   getNewQVP(LineScen:aListCtrlLineFormat):aQVPListOfAsListCtrl;
   FirstLineScenFor(thisClassDef:aClassDef):string;
   TranslateLineScenario(LineScenario:aListCtrlLineFormat);
   Finalize();
   LevelOf(thisClassDef:aClassDef):number;
   GetDeepestCommonParent(FirstClass:aClassDef, SecondClass:aClassDef):aClassDef;
   GetDeepestCommonClass(List:aListOfRefTos):aClassDef;
   LoadValue();
}
declare class ListOfAsExternalListCtrlAgent extends aListOfAsExternalListCtrlAgent {
}
declare class aDiffControlAgent extends aXXXAsOleControlUIAgent {
   LastResult: string ;
   pInterface: string ;
   COMDiffTwoFiles(LeftFilename:string, RightFilename:string, hwndParent:string);
   AboutBox();
   COMGetVisualDiffRect():string;
   COMSetVisualDiffRect(VisualDiffRect:string);
   COMGetDiffFormat():string;
   COMSetDiffFormat(DiffFormat:string);
   COMGetDiffIgnore():string;
   COMSetDiffIgnore(DiffIgnore:string);
   GetDiffWidth():string;
   SetDiffWidth(DiffWidth:string);
   GetDiffContext():string;
   SetDiffContext(DiffContext:string);
   GetVisualDiffMax():boolean;
   SetVisualDiffMax(VisualDiffMax:boolean);
   GetVisualDiffModal():boolean;
   SetVisualDiffModal(VisualDiffModal:boolean);
   DiffTwoFiles(LeftFilename:string, RightFilename:string, hwndParent:string);
   GetVisualDiffRect():string;
   SetVisualDiffRect(VisualDiffRect:string);
   GetDiffFormat():string;
   SetDiffFormat(DiffFormat:string);
   GetDiffIgnore():string;
   SetDiffIgnore(DiffIgnore:string);
   NotifyInit();
   NotifyTerminate();
}
declare class aDiffControlScenario extends aXXXAsOleControl {
   Init();
   DefaultUIAgentClassId();
}
declare module DIFFMERGECTLLib {
}
declare class aTypeExtension extends aRenamingType {
   ProduceIRPass1();
   ProduceIRPass2();
   UpdateIR();
   GoodOne();
   IsValid();
   ProduceCPP();
   VarSize();
}
declare class aRenamingDBDefToRenamedDBDefRoleType extends aSingleRoleType {
   pickInMemOnly();
}
declare class aSqlDateTimeType001Agent extends aUIAgent {
   WhatToStore001: string ;
   WhatToStoreGroupBox001: string ;
   NotifyWhatToStore_ValueStored();
   WhatToStore001_ValueStored(:aUIAgent);
   NotifyWhatToStore_Init();
   WhatToStore001_Init(:aUIAgent):number;
}
declare class aSqlDateTimeType extends aSqlType {
   WhatToStore: string ;
   IsTypeaCompatibleDate(MMType:aType):boolean;
   IsTypeaCompatibleTime(MMType:aType):boolean;
   IsCompatibleWithMMType();
   SetToUndefDBDateValue(y:number, m:number, d:number);
   IsUndefDBDateValue(y:number, m:number, d:number):boolean;
   SetToUndefDBTimeValue(h:number, min:number, s:number);
   IsUndefDBTimeValue(h:number, min:number, s:number):boolean;
   AsYearMonthDay(VarAddress:string, y:number, m:number, d:number, MMType:aType, isUndef:boolean);
   AsHourMinSec(VarAddress:string, h:number, min:number, s:number, MMType:aType, isUndef:boolean);
   AsYearMonthDayHourMinSec(VarAddress:string, y:number, m:number, d:number, h:number, min:number, s:number, MMType:aType, isDateUndef:boolean, isTimeUndef:boolean);
   ConvertFromYearMonthDay(y:number, m:number, d:number, MMType:aType, VarAddress:string);
   ConvertFromHourMinSec(h:number, min:number, s:number, MMType:aType, VarAddress:string);
   ConvertFromYearMonthDayHourMinSec(y:number, m:number, d:number, h:number, min:number, s:number, MMType:aType, VarAddress:string);
   IsUserDefinedSqlType();
   StringExtract();
}
declare class aSQLServerDBDefSpecificAgent extends aUIAgent {
   DoMapInt8ToBigInt: string ;
   StaticText: string ;
   StaticText001: string ;
   StaticText002: string ;
   UseLongNameForDBEntity: string ;
   GroupBox: string ;
   SupportClusterServer: string ;
   AllowRefetchOnFailover: string ;
   Use_Sp_getapplockForLockNewVersion: string ;
   UseExplicitTransaction: string ;
   DefaultTableFileGroup: string ;
   DefaultTableFileGroupStaticText: string ;
   DefaultTextImageFileGroup: string ;
   DefaultTextImageFileGroupStaticText: string ;
   DefaultIndexFileGroup: string ;
   DefaultIndexFileGroupStaticText: string ;
   CanMapSmallInt8ToInt: string ;
   DoMapCharToUnicode: string ;
   EncryptionBrokerClassDef: string ;
   EncryptionBrokerClassDefStaticText: string ;
   UseMaxDataTypesForDefaultMapping: string ;
   AccentInsensitive: string ;
   CaseInsensitive: string ;
   IndexAccentCase: string ;
   IndexAccentCaseStaticText: string ;
}
declare class aSQLServerDBDef001Agent extends aFolderViewAgent {
}
declare class TutorialsWithTextAgent extends aUIAgent {
}
declare class TutorialsListAgent extends aUIAgent {
   Tutorials: string ;
   Tutorials_Selected(:aUIAgent, SelectedRank:number):number;
   Tutorials_Executed(:aUIAgent, SelectedRank:number, Option:number):number;
}
declare class SelectedTutorialAgent extends aUIAgent {
   Tutorials: string ;
   TutorialDescription: string ;
}
declare class TutorialsSplitAgent extends aSplitViewAgent {
}
declare class TutorialDescriptionAgent extends aUIAgent {
   Comment: string ;
   InstallStart: string ;
   InstallEnd: string ;
   LoadValue();
}
declare class aTutorialDescription extends aEntity {
   HtmlFile: string ;
   StartConfiguration: string ;
   EndConfiguration: string ;
   StringExtract();
   SubNodeValue(XMLField:string, XMLNode:aXMLNamedNode):string;
   SubNodeAsText(XMLField:string, XMLNode:aXMLNamedNode, TheText:string);
   InitFromXMLNode(Node:aXMLNamedNode);
   Loadtutorial();
   ConfigurationFile(Configuration:string):string;
   CanInstallConfiguration(Configuration:string):boolean;
   InstallConfig(Configuration:string);
   InstallStart();
   InstallEnd();
}
declare class xxxToBeDeletedxxxEntityFrameFinderGraphAgent extends aGraphModifierUIAgent {
   Init();
   GetZoomFactor();
   NotifySelectedFramesChanged();
   NotifyButtonUp();
   NotifyButtonDblClk();
   Finalize();
   ChangePos();
   NotifyHostRangeHasChanged();
}
declare class xxxToBeDeletedxxxEntityFrameFinderAgent extends aUIAgent {
   EntityFrameFinderGraph: string ;
   Entities: string ;
   Entities001: string ;
   theList: string ;
   DoneOnce: string ;
   SetDoubleZoom001: string ;
   SetHalfZoom001: string ;
   Init();
   Terminate();
   LoadFromVar();
   theList_Selected(:aUIAgent, SelectedRank:number):number;
/**
*Portability Check: OK
*/
   EntityFrameFinderGraph_Selected(SelectedRank:number):number;
   theList_Executed(:aUIAgent, SelectedRank:number, Option:number):number;
   EntityFrameFinderGraph_ButtonDblClk(No:number, X:number, Y:number):number;
   SetDoubleZoom(theUIAgent:aUIAgent);
   SetHalfZoom(theUIAgent:aUIAgent);
}
declare class ModifyConsultDeleteAgent extends aMenuItemControlAgent {
   Modify: string ;
   Consult: string ;
   Separator: string ;
   Delete001: string ;
   Separator001: string ;
   SelectClassInTree: string ;
}
declare class CheckInDeliverAgent extends ModifyConsultDeleteAgent {
   CheckIn: string ;
   Deliver: string ;
   Separator002: string ;
}
declare class CheckOutSynchronizeAgent extends ModifyConsultDeleteAgent {
   CheckOut: string ;
   Synchronize: string ;
   Separator002: string ;
}
declare class ConcultModifyDeleteMenuForModuleAgent extends aMenuItemControlAgent {
   Consult: string ;
   Modify: string ;
   Separator: string ;
   Delete001: string ;
}
declare class CheckInDeliverMenuForModuleAgent extends ConcultModifyDeleteMenuForModuleAgent {
   Separator001: string ;
   CheckIn: string ;
   Deliver: string ;
}
declare class CheckOutSynchronizeMenuForModuleAgent extends ConcultModifyDeleteMenuForModuleAgent {
   Separator001: string ;
   CheckOut: string ;
   Synchronize: string ;
}
declare class FileAnalyzerVisualDiffOCXAgent extends aDiffControlAgent {
   NotifyInit();
}
declare class FileAnalyzerOCXPresenterAgent extends aUIAgent {
   FileAnalyzerVisualDiffOCX: string ;
   Finalize();
}
declare class aVisualFileAnalyzer extends aFileAnalyzer {
   OCX: string ;
   OCXInstalled():boolean;
   FindThisFile(File:string):string;
   RegisterDll(Dll:string);
   CheckOCX():boolean;
   RegisterOCX();
   DoVisualDiffOnFiles(OCX:aDiffControlAgent);
   DoVisualDiffOnTexts(OCX:aDiffControlAgent);
}
declare class ObjectIntrospectorInTransactionAgent extends aUIAgent {
   InTransactionStatus: string ;
   ObjectInTransactionIntrospector: string ;
}
declare class ObjectIntrospectorTransactionsAgent extends aSplitViewAgent {
}
declare class TransactionIntrospectorDeleteThingsContentAgent extends aUIAgent {
   objectsToDelete: string ;
   BuildNsIdIdFromNamedObject(thisNamedObject:aNamedObject, NsId:number, Id:number);
   objectsToDelete_ComputeColumn(theCellContent:string, ColIndex:number, LineIndex:number, theListofReftos:aListOfInstances):number;
   objectsToDelete_Executed(SelectedRank:number, Option:number):number;
}
declare class TransactionIntrospectorViewerObjectsToHideAgent extends aUIAgent {
   objectsToHideForOQL: string ;
   BuildNsIdIdValueObjectFromNamedObject(thisNamedObject:aNamedObject, NsId:number, Id:number, Value:string, Object:string);
   objectsToHideForOQL_ComputeColumn(theCellContent:string, ColIndex:number, LineIndex:number, theListofReftos:aListOfInstances):number;
   objectsToHideForOQL_Executed(SelectedRank:number, Option:number):number;
}
declare class aObjectIntrospectorExtension extends aWideExtension {
   DoYourJob();
   MenuText();
   FolderParentName();
}
declare class aIndexesHeap extends aHeap {
   Offsets: string ;
   InverseOrder: string ;
/**
*Portability Check: OK : the problem is that appends on aHeap are not
typed, so there is no way to be absolutely sure that this won't be
abused in client code, but at least it's safe in the way we use it.
*/
   IsInferior();
}
declare class aHeap extends aLightObject {
   TheList: string ;
   IsInferior(First:number, Second:number):boolean;
   ArrangeToLittle(Index:number);
   ArrangeToMuch(Index:number, Count:number);
   Append(Item:string);
   Delete(Index:number);
   TurnListToHeap();
   TurnHeapToSortedList();
   SortList(TheList:aListOfInstances);
}
declare class aTypedHeap extends aHeap {
   TheType: string ;
   IsInferior();
}
declare module wInternetAccess {
   var ProxyName: string ;
   var ProxyBypass: string ;
   function OpenInternetSession(Context:number, Flags:number, AccessType:number, ProxyName:string, ProxyBypass:string):string;
   function CloseInternetSession(ForSession:string);
   function OpenURL(WithSession:string, URL:string, Context:number, Flags:number):string;
   function QueryInfoStatusCode(theFile:string):number;
   function OpenFtpConnection(InternetSession:string, ServerName:string, UserName:string, PassWord:string, Port:number, Passive:boolean):string;
   function CloseFtpConnection(theConnection:string);
   function GetFtpFile(WithConnection:string, RemoteFile:string, LocalFile:string, FailIfExists:boolean, Attributes:number, Flags:number, Context:number):boolean;
   function CreateFtpDirectory(WithConnection:string, DirName:string):boolean;
   function GetCurrentFtpDirectory(WithConnection:string, DirName:string, DirLength:number):boolean;
   function SetCurrentFtpDirectory(WithConnection:string, DirName:string):boolean;
   function PutFtpFile(WithConnection:string, LocalFile:string, RemoteFile:string, Flags:number, Context:number):boolean;
   function RemoveFtpFile(WithConnection:string, FileName:string):boolean;
   function RemoveFtpDirectory(WithConnection:string, DirName:string):boolean;
   function RenameFtpFile(WithConnection:string, OldName:string, NewName:string):boolean;
   function NewFtpFindHandle(WithConnection:string, Context:number):string;
   function FindFtpFile(WithFinder:string, Name:string, Flags:number):boolean;
   function FindNextFtpFile(WithFinder:string):boolean;
   function GetFtpFileURL(WithFinder:string, theURL:string);
   function GetErrorMessage():string;
   function GetHttpConnection(WithSession:string, ServerName:string, Port:number, UserName:string, PassWord:string):string;
   function OpenHttpRequest(WithConnection:string, Verb:string, ObjectName:string, Referer:string, Context:number, AcceptTypes:string, Version:string, Flags:number):string;
   function SetHttpOption(WithSession:string, Option:number, OptionValue:number, Flags:number):boolean;
   function AddHttpRequestHeaders(withFile:string, Headers:string, Flags:number, HeadersLen:number):boolean;
   function CloseHttpFile(withFile:string);
   function EndHttpRequest(withFile:string, Flags:number, BuffIn:string, Context:number):boolean;
   function GetHttpFileURL(withFile:string, URL:string);
   function GetHttpObject(withFile:string, Object:string);
   function GetHttpVerb(withFile:string, Verb:string);
   function QueryHttpInfo(withHttpFile:string, InfoLevel:number, Buffer:string, BufferLength:number, Index:number):boolean;
   function SendHttpRequest(withFile:string, Headers:string, HeadersLen:number, Optional:string, OptionalLen:number):boolean;
   function SendHttpRequestEx(withFile:string, BufferIn:string, BufferOut:string, Flags:number, Context:number):boolean;
   function ReadHttpFileString(withFile:string, theLine:string, MaxChars:number):boolean;
   function ReadHttpFile(withFile:string, Buffer:string, BufferSize:number):number;
   function ProtocolFromName(URL:string):string;
   function InternetFileExists(URL:string):boolean;
   function OpenFastFTPConnection(ServerName:string, UserName:string, PassWord:string, theISession:string):string;
}
declare class IdEntityOverrideAgent extends aUIAgent {
   EntryField: string ;
   WidthFactor: string ;
   WidthFactorStaticText: string ;
   EntryField_ValueLoaded(:aUIAgent);
   EntryField_ValueStored(:aUIAgent);
   EntryField_LoseFocus(:aUIAgent):number;
}
declare class TopOkCancelOverrideAgent extends aUIAgent {
   ShowEvents: string ;
   ShowFont: string ;
}
declare class GraphEntityFolderAgent extends aFolderViewAgent {
}
declare class GraphModifierForWFAgent extends aUIAgent {
   GraphAsControl: string ;
}
declare class GraphForDebugAgent extends aUIAgent {
   SaveSmallestRectangle: string ;
}
declare class FrameFinderGraphAgent extends aGraphModifierUIAgent {
   Init();
   GetZoomFactor();
   NotifySelectedFramesChanged();
   NotifyButtonUp();
   NotifyButtonDblClk();
   Finalize();
   ChangePos();
   NotifyHostRangeHasChanged();
}
declare class FrameFinderAgent extends aUIAgent {
   FrameFinderGraph: string ;
   Entities: string ;
   Entities001: string ;
   theList: string ;
   DoneOnce: string ;
   SetDoubleZoom001: string ;
   SetHalfZoom001: string ;
   Entities002: string ;
   SetDoubleZoom002: string ;
   SetHalfZoom002: string ;
   Init();
   Terminate();
   LoadFromVar();
   theList_Selected(SelectedRank:number):number;
/**
*Portability Check: OK
*/
   FrameFinderGraph_Selected(SelectedRank:number):number;
   FrameFinderGraph_SelectedObject(SelectedObject:string):number;
   theList_Executed(SelectedRank:number, Option:number):number;
   FrameFinderGraph_ButtonDblClk(No:number, X:number, Y:number):number;
   SetDoubleZoom(theUIAgent:aUIAgent);
   SetHalfZoom(theUIAgent:aUIAgent);
}
declare class aQVPForClone extends aQVarPresentor {
   MustCloneScenario: string ;
   ClonedQVP: string ;
   ClonedScenario: string ;
   CloneAll():aQVPForClone;
   BuildAgents();
}
declare class aGraphSplitScenario extends aScenario {
   DefaultUIAgentClassId();
}
declare class aGraphSplitUIAgent extends aGraphUIAgent {
   Paint();
   GetLineKind();
}
declare class aIsoFrameUIAgent extends aGraphFrameUIAgent {
   Init();
   WillCalcLinkFromCenters();
   MinAutoWidthHeight();
   GiveForm();
   RestoreForm();
}
declare class aAttachedFrameAgentsIterator extends aListIterator {
   GetFrameAgent(Frame:aFrame):aUIAgent;
   current();
   MoveNextAndGet();
   MovePrevAndGet();
   moveCurrent();
   moveCurrentItemAddress();
}
declare class aSplitFrameScenario extends aGraphFrameScenario {
   DefaultUIAgentClassId();
}
declare class aSplitFrameUIAgent extends aGraphFrameUIAgent {
   PrevFrame: string ;
   NextFrame: string ;
   PrevPos(x:number, Width:number);
   NextPos(x:number, Width:number);
   AdjustFromPrev();
   AdjustFromNext();
   AdjustPrev();
   AdjustNext();
   AdjustPrevAndNext();
   TopSplit(ps:string):number;
   CanChangeWidth();
   CanChangeHeight();
   CanBeSelected();
   Paint();
   MovingOperation();
   NotifyButtonDown();
   NotifyButtonUp();
   NotifyMouseMove();
   NotifyMasterChanged();
   CalcExpectedReposFromMaster();
   RestoreForm();
}
declare class ListOfInstancesAsExternalListCtrlAgent extends aListOfAsExternalListCtrlAgent {
   Finalize();
}
declare class aListofWithTreeDefinedByGetParentEvent extends aXXXAsTreeBox {
   DefaultUIAgentClassId();
   InitEvents();
   NewQVarPresentor();
}
declare class aListofWithTreeDefinedByGetParentEventUIAgent extends aXXXAsTreeBoxUIAgent {
   GetParentEventProcAddr: string ;
   MoveToNewParentProcAddr: string ;
   UIComponent: string ;
   GetParent(ForThisObject:aLightObject):aLightObject;
   MoveToNewParent(ForThisObject:aFullObject, newParent:aLightObject):boolean;
   SetBMPToNode(Node:string, ForThisObject:aLightObject);
   DescOf(thisObject:aLightObject):string;
   LoadValue();
   Action();
/**
*Portability Check: OK
*/
   NotifyExecuted();
   NotifyButtonDblClk();
   IsAChildOf(Child:aLightObject, Parent:aLightObject):boolean;
   NotifyCanReceiveDroppedObject();
   NotifyDroppedObject();
/**
*Portability Check: OK
*/
   NotifyButtonUp();
   NotifyPopup();
}
declare class QVPListoftreeGetParentMoreQVPVirtualAgent extends aUIAgent {
   extractBMPFolder: string ;
   RootLabel: string ;
   RootLabelStaticText: string ;
   ShowRoot: string ;
   ParentRefto: string ;
   ParentReftoStaticText: string ;
   CanMoveByDragAndDrop: string ;
}
declare class aQVPListOfTreeDefinedByGetParentEvent extends aQVPListof {
   ShowRoot: string ;
   RootLabel: string ;
   ParentRefto: string ;
   CanMoveByDragAndDrop: string ;
}
declare class aQVPListOfTreeDefinedByGetParentEventRole extends aSingleRoleType {
   pickInMemOnly();
}
declare class ListOfAsTreeFromEventAgent extends aListofWithTreeDefinedByGetParentEventUIAgent {
}
declare class BooleanAsBitmapAgent extends aBooleanAsBitmapUIAgent {
}
declare class aBooleanAsBitmap extends aXXXAsBitMap {
   DefaultUIAgentClassId();
}
declare class aBooleanAsBitmapUIAgent extends aBitMapControlAgent {
   LoadValue(VarAddress:string, theVarType:aBooleanType);
   NotifyExecuted();
}
declare class aListOfAsExtListCtrlRole extends aSingleRoleType {
   pickInMemOnly();
}
declare class RTFTextEditorInMSSansSerif8Agent extends aUIAgent {
   RTFMLE: string ;
   aRTFToolBarDT: string ;
   RTFToolBarInMSSansSerif8: string ;
   theRTFToolBar: string ;
   aRTFToolBarDT_Init():number;
   aRTFToolBarDT_Terminate():number;
   RTFMLE_Selected(SelectedRank:number):number;
   RTFMLE_ButtonUp(No:number, X:number, Y:number):number;
}
declare class aIntTypeAsCBAgent extends aCStringControlAgent {
   StoreValue();
   LoadValue();
   NotifySelected();
}
declare class ArrayAsGridAgent extends aGridUIAgent {
   NotifyInit();
   NotifyHostRangeHasChanged();
   Init();
}
declare class RTFToolBarInMSSansSerif8Agent extends aUIAgent {
   FontNames: string ;
   FontSize: string ;
   FontSize001: string ;
   ForeColor: string ;
   Align: string ;
   Bold: string ;
   Italic: string ;
   Underscore: string ;
   FontName: string ;
   InSelected: string ;
   InsertImage: string ;
   NotifyInit();
   NotifyStoreToVar();
   FontName_Init():number;
   FontName_Changed():number;
   FontNames_Selected(SelectedRank:number):number;
}
declare class aProducedTextWithCheckSum extends aProducedText {
   WritelnIndent(s:string);
   WritelnUnIndent(s:string);
   GetSum():number;
   ComputeCheckSumOnLine(CurrentSum:number, CurrentLine:string):number;
   CheckSum():boolean;
   SumLine(Sum:number):string;
   flushWithCheckSum();
}
declare class aGenCppPackage003Agent extends GenCppPackageModulesToGenerateAgent {
   ModulesToGenerate001: string ;
}
declare class GenCppPackageModulesToGenerateAgent extends aUIAgent {
}
declare class DeliveriesCPPPackageDeliveriesAgent extends aUIAgent {
   Deliveries: string ;
}
declare class aDeliveriesCPPPackage002Agent extends aFolderViewAgent {
}
declare class GenCppPackageModulesToGenerateOverrideAgent extends GenCppPackageModulesToGenerateAgent {
   aDeliveriesCPPPackage002: string ;
}
declare class DeliveriesCPPPackageMoreClassesAgent extends aUIAgent {
   MoreModules: string ;
}
declare class aCPPBundlesAndDeliveriesPackage extends aGenCppPackage {
   BundleDelivery: string ;
   MoreModules: string ;
   AppendModuleAndClassFromCatalog(Cat:aListOfInstances, l:aListOfInstances);
   AppendModuleAndClassFromDeliveryPreparer(d:aDeliveryPreparer, l:aListOfInstances);
   AppendModuleAndClassFromDelivery(d:aDelivery, l:aListOfInstances);
   BuildModulesToGenerate(l:aListOfInstances);
   CheckDependencies();
   ResetDoneFlags();
   PrepareClassesOrModulesToGenerate();
   GenerateHeader();
   GenerateCpp();
   ContainsReimplem();
}
declare class aCPPTargetRole extends aSingleRoleType {
   NewInstanceFromDroppedObject();
   IsDroppedObjectUsable();
}
declare class aMappingImpactOnOQLAnalyserEntitiesAgent extends aUIAgent {
   EntitiesToAnalyse: string ;
   EntitiesToAnalyseStaticText: string ;
   OQLAnalysisMany: string ;
   ShowOQL: string ;
   ShowSQL: string ;
   AnalyseMappingOnly: string ;
   DetectQueriesOnBigVolumeClasses: string ;
   SaveOnlyReportToFile: string ;
   SaveToFile: string ;
   AnalyseMappingOnly_Selected(:aUIAgent, SelectedRank:number):number;
   AnalyseMappingOnly_Init(:aUIAgent):number;
}
declare class aMemoryViewer001Agent extends aFolderViewAgent {
}
declare class MemoryViewerMemoryBlocksAgent extends aUIAgent {
   MarkDebugMemory: string ;
   UnMarkDebugMemory: string ;
   MemBlocksSum: string ;
   MemBlocksSumStaticText: string ;
   MemBlocksCount: string ;
   MemBlocksCountStaticText: string ;
   MemFullObjects: string ;
   MemLightObjects: string ;
   MemGoldSpaces: string ;
   MemPresentedList: string ;
   BuildMemoryInfo: string ;
   FullObjectCount: string ;
   FullObjectCountStaticText: string ;
   LightObjectCount: string ;
   LightObjectCountStaticText: string ;
   OnlyByClass: string ;
   RefreshDisposeMemInfo: string ;
   DODisposeMem: string ;
   NotifyViewSelectedMemoryBlock001: string ;
   ViewCallStackSelectedMemoryBlock001: string ;
   TraceDisposeMem: string ;
   ActionWriteToFile: string ;
   UnloadReferenceWhileDisposeMem: string ;
   GroupBox: string ;
   SecureDisposeMem: string ;
   MarkDebugMemory_Executed(:aUIAgent, SelectedRank:number, Option:number):number;
   UnMarkDebugMemory_Executed(:aUIAgent, SelectedRank:number, Option:number):number;
   UnMarkDebugMemory_ValueLoaded(:aUIAgent);
   ViewSelectedMemoryBlock();
   ViewCallStackSelectedMemoryBlock();
   MemPresentedList_Executed(:aUIAgent, SelectedRank:number, Option:number):number;
   SetUnsetKillBreakPoint();
}
declare class aMemoryViewerItem001Agent extends aUIAgent {
}
declare class aMemoryViewerItem extends aLightObject {
   theObject: string ;
   ObjectClassName():string;
   ObjectName():string;
   ObjectNsId():number;
   ObjectId():number;
   ObjectVersion():number;
}
declare class aMemoryBlockLineFormatAgent extends aUIAgent {
}
declare class aMemoryBlockReferenceAgent extends aUIAgent {
   ReferencedBy: string ;
   ReferencedByStaticText: string ;
   ObjIntrospector: string ;
   DefaultIntrospector: string ;
   ReferenceTo: string ;
   ReferenceToStaticText: string ;
   ReferencedBy_Executed(:aUIAgent, SelectedRank:number, Option:number):number;
   ReferenceTo_Executed(:aUIAgent, SelectedRank:number, Option:number):number;
}
declare class aMemoryBlockRefByModuleAgent extends aUIAgent {
   RefByModule: string ;
   RefByModuleStaticText: string ;
   ObjIntrospector: string ;
   DefaultIntrospector: string ;
   ReferenceTo: string ;
   ReferenceToStaticText: string ;
   ReferenceTo_Executed(:aUIAgent, SelectedRank:number, Option:number):number;
}
declare class aMemoryBlockRefByVarAgentAgent extends aUIAgent {
   RefByVarAgent: string ;
   RefByVarAgentStaticText: string ;
   ObjIntrospector: string ;
   DefaultIntrospector: string ;
   ReferenceTo: string ;
   ReferenceToStaticText: string ;
   ReferenceTo_Executed(:aUIAgent, SelectedRank:number, Option:number):number;
}
declare class aMemoryBlock extends aPickableCandidate {
   Address: string ;
   isAnObject: string ;
   NonValidObject: string ;
   ObjectClassName: string ;
   BlockKind: string ;
   Comment: string ;
   ObjectTechnicalExtract: string ;
   CallStack: string ;
   BlockSize: string ;
   Nbre: string ;
   ObjectSize: string ;
   GarbageStatus: string ;
   DummyForBmp: string ;
   ReferencedBy: string ;
   ReferenceTo: string ;
   RefByModule: string ;
   ObjIntrospector: string ;
   RefByVarAgent: string ;
   DisplayCallStack();
   ParamInteract();
   GetBitmap();
   SetGCStatus(thisStatus:string);
   Terminate();
   WriteToText(T:string, sep:number, onlyTitles:boolean);
}
declare class aMemoryViewerGarbageCollector extends aGarbageCollector {
   MemViewer: string ;
   FindCandidateByObject(thisObject:aLightObject):aMemoryBlock;
   MustKeepAlive();
   NotifyGarbageMark();
   DODisposeMem();
   SimulDisposeMemKillObject();
}
declare class aGarbageCollector extends aLightObject {
   TraceDisposeMem: string ;
   IsToBeNotifiedOfGarbageMark: string ;
   UnloadReferences: string ;
   Secure: string ;
   FileTrace: string ;
   TechnicalExtract: string ;
   GetOneInstanceOf: string ;
   FirstLoadedVersionOf: string ;
   DisposeMemKillObject: string ;
   SimulateDisposeMem: string ;
   DODisposeMem();
   GarbageMarkAllRefOf(thisImage:string);
   NotifyGarbageMark(FromThisObject:aLightObject, theVar:string, pVarLink:string, toThisObject:aLightObject):boolean;
   IsSystemEntity(thisEntity:string):boolean;
   IsToBeGCReport(thisObject:aLightObject):boolean;
   GCReportObject(thisObject:aLightObject, Comment:string);
   GCReportObject2(firstObject:aLightObject, Comment:string, secondObject:aLightObject);
   MustKeepAlive(thisImageM:string):boolean;
   SimulDisposeMemKillObject(theObject:aFullObject);
   ParamDisposeMem(HowManyDisposedObjects:number);
   Init();
}
declare class EntityInClassDiagramAgent extends aGraphFrameUIAgent {
}
declare class aUserCheckedOutEntitiesExtension001Agent extends aUIAgent {
   DoYourJob: string ;
}
declare class aUserCheckedOutEntitiesExtension extends aWideExtension {
   FolderParentName();
   MenuText();
   DoYourJob();
   ButtonBMPName();
}
declare class InDeliverPresentorMainAgent extends aUIAgent {
   categories: string ;
   checkInAll: string ;
   DeliverAll: string ;
}
declare class aInDeliverPresentor extends aEntity {
   categories: string ;
   CategoryFromName(catName:string):aInDeliverCategory;
   CategoryOf(thisEntity:aEntity):aInDeliverCategory;
   UIRefrechAll();
   NotAliveButNeverDelivered(Entity:aEntity, theLoggedUser:aUser):boolean;
   RemoveNotAliveButNeverDelivered();
   RefreshCategories();
   Display();
   Confirmed(Action:string):boolean;
   checkInAll();
   DeliverAll();
}
declare class InDeliverCategoryMainScenAgent extends aUIAgent {
   checkInSelected: string ;
   DeliverSelection: string ;
   GroupBox: string ;
   checkInAll: string ;
   DeliverAll: string ;
   GroupBox001: string ;
   showDifferenceWithSynchVersion: string ;
   showDifferenceWithPrevVersion: string ;
   NameCriterium: string ;
   NameCriteriumStaticText: string ;
   SelectFromNames: string ;
   InDeliverCategoryListVirtualScen: string ;
   GenerateXMLDiffFileAllObjects: string ;
   showDifferenceWithSynchVersion_Init(:aUIAgent):number;
   showDifferenceWithPrevVersion_Init(:aUIAgent):number;
}
declare class InDeliverCategoryListScenAgent extends InDeliverCategoryListVirtualScenAgent {
   Entities: string ;
   Entities_Init():number;
   Entities_ComputeColumn(theCellContent:string, ColIndex:number, LineIndex:number, theListofReftos:aListOfInstances):number;
   Entities_SortColumn(Data1:number, Data2:number):number;
   Entities_Executed(SelectedRank:number, Option:number):number;
}
declare class InDeliverCategoryListVirtualScenAgent extends aUIAgent {
}
declare class aInDeliverCategory extends aEntity {
   myPresentor: string ;
   Entities: string ;
   ListAgent: string ;
   AllEntities: string ;
   NameCriterium: string ;
   CanAnalyse():boolean;
   SelectedObject():aFullObject;
   FillListOfSelectedEntities(theList:aListOfInstances);
   Purge();
   AppendObject(Object:aEntity);
   Confirmed(Action:string):boolean;
   UIRefreshAll();
   checkInAll();
   DeliverAll();
   checkInSelected();
   DeliverSelection();
   SyncVersion(Entity:aEntity):number;
   ModificationState(Entity:aEntity):string;
   showDifferenceWithSynchVersion();
   AcceptableXMLCategoryName():string;
   GenerateXMLDiffNodeAllObjects(inNode:aXMLNamedNode);
   GenerateXMLDiffFileAllObjects();
   showDifferenceWithPrevVersion();
   Init();
   Terminate();
   SelectFromNames();
   ConsultEntity(Entity:aEntity);
}
declare class aSearchInSourceMMViewer001Agent extends aEntityMMViewerMainAgent {
   Source: string ;
   Source_ValueLoaded();
}
declare class aSearchInSourceMMViewer extends aClassOrModuleMMViewer {
   ModuleImplem: string ;
   Pos: string ;
   Line: string ;
   LineNbre: string ;
   ColumnNbre: string ;
   len: string ;
   CorrectedLine: string ;
   Source: string ;
   Crit: string ;
   initOnEntity();
   StringExtract();
   GetBitmap();
   ModifySelectedEntity();
   ConsultSelectedEntity();
}
declare class aMUserRunningContext extends aRunningContext {
   LastOwnedId: string ;
   GetIDAllocater();
   GetNsIdAndIdforOwnedEntity();
   IsAnInOutSyncEntity();
   InOutSyncCategory();
   NotifyDeletion();
   IsAnExportableEntity();
   UIRefresh();
   GetBitmap();
}
declare class aParameterList extends aLightObject {
   CompleteParameterHash(Variables:aDataByStringHashTable);
   PrefixChars():string;
   Separators():string;
   InitParams();
   Init();
   Test();
}
declare class aWAMIdeStandardCatalog001Agent extends aOpenWhereClosedUIAgent {
   Catalog: string ;
}
declare class aWAMIdeStandardCatalog extends aEntity {
   Catalog: string ;
   AcceptedClassDef: string ;
   UIRefresh();
   StringExtract();
}
declare class aWAMIdeStandardRole extends aWideIDERole {
   CreateNewInstance(FromThisObject:aWAMIdeStandardCatalog):aFullObject;
   NewAcceptedInstance(FromThisObject:aWAMIdeStandardCatalog, FromThisVar:string, fromThisUIAgent:aUIAgent, atThisRank:number):aEntity;
   ConsultThisObject(FromThisObject:aFullObject, toThisObject:aEntity, fromThisUIAgent:aUIAgent);
   ModifyThisObject(FromThisObject:aFullObject, toThisObject:aEntity, fromThisUIAgent:aUIAgent, theNewVersion:aFullObject, FromThisVar:string, atThisRank:number):string;
   VisibleMethodDescFor(thisMethodDesc:aMethodDesc):aMethodDesc;
   AskForActions();
   canBreakLinkBetween(FromThisObject:aFullObject, toThisObject:aEntity, fromThisVar:string):boolean;
   AuthorizeAction(FromThisObject:aFullObject, toThisObject:aEntity, fromThisUIAgent:aUIAgent, ActionKind:string, FromThisExecMode:string):boolean;
}
declare class aInOutSyncRole extends aSingleRoleType {
   AskForActions();
}
declare class aWAMContainerDependanciesAgent extends aUIAgent {
   myDependancySet: string ;
   myDependancySetGroupBox: string ;
}
declare class aWAMContainerCatalogNewLookAgent extends aOpenWhereClosedUIAgent {
   Entities: string ;
   Entities_GetParent(ForThisObject:aLightObject):aLightObject;
   Entities_CanReceive(X:number, Y:number, Object:aFullObject):number;
   Entities_MoveToNewParent(ForThisObject:aFullObject, newParent:aLightObject):boolean;
}
declare class aEntityMMViewerMainOverrideAgent extends aEntityMMViewerMainAgent {
   ThingCreator: string ;
   VersionCreator: string ;
}
declare module CRunTime {
   function memset(Destination:string, withChar:number, Size:number);
   function memmove(Destination:string, Source:string, Size:number);
   function strcmp(P1:string, P2:string):number;
   function strncmp(P1:string, P2:string, count:number):number;
   function atol(P:string):number;
   function atof(P:string):string;
   function strtod(P:number, PError:string):string;
}
declare class AutoSizeParamsAgent extends aUIAgent {
   ExtractKind: string ;
   NbSymbols: string ;
   LinkForeColor: string ;
   LinkBackColor: string ;
   LinkText: string ;
   SymbolsAtMiddle: string ;
   AutoHide: string ;
   AddLink: string ;
   LinkKind: string ;
   LineKind: string ;
   VisibleState: string ;
   ExtractKind001: string ;
   ExtractKindStaticText: string ;
   NbSymbols001: string ;
   NbSymbolsStaticText: string ;
   LinkForeColor001: string ;
   LinkForeColorStaticText: string ;
   LinkBackColor001: string ;
   LinkBackColorStaticText: string ;
   LinkText001: string ;
   LinkTextStaticText: string ;
   SymbolsAtMiddle001: string ;
   AutoHide001: string ;
   AddLink001: string ;
   SymbolsAtMiddleStaticText: string ;
   AutoHideStaticText: string ;
   AddLinkStaticText: string ;
   LinkKind001: string ;
   LinkKindStaticText: string ;
   LineKind001: string ;
   LineKindStaticText: string ;
   VisibleState001: string ;
   FontName: string ;
   FontNameStaticText: string ;
   FontSize: string ;
   FontSizeStaticText: string ;
   FontSels: string ;
   VisibleState001_ValueStored(:aUIAgent);
   ExtractKind001_ValueStored(:aUIAgent);
   NbSymbols001_ValueStored(:aUIAgent);
   LinkForeColor001_ValueStored(:aUIAgent);
   LinkBackColor001_ValueStored(:aUIAgent);
   LinkText001_ValueStored(:aUIAgent);
   SymbolsAtMiddle001_ValueStored(:aUIAgent);
   AutoHide001_ValueStored(:aUIAgent);
   AddLink001_ValueStored();
   LinkKind001_ValueStored(:aUIAgent);
   LineKind001_ValueStored(:aUIAgent);
   LoadValues();
   LoadValue();
}
declare class FolderForGraphForaQVPLinkKindAgent extends aFolderViewAgent {
}
declare class aColorisedReportReportAndButtonsAgent extends aUIAgent {
   aColorisedReportOnlyReport: string ;
   NoReportCleaning: string ;
   Blank: string ;
}
declare class RoleTypeForReftoTypeInGraphAgent extends aAutoSizeUIAgent {
}
declare class RoleTypeForListOfTypeInGraphAgent extends aAutoSizeUIAgent {
}
declare class MultiRoleForRefToInGraphAgent extends RoleTypeForListOfTypeInGraphAgent {
   theSingleRoleList001: string ;
   SingleRoleTypeForReftoInGraph008: string ;
   theSingleRoleList002: string ;
   SingleRoleTypeForReftoInGraph009: string ;
   theSingleRoleList003: string ;
   theSingleRoleList004: string ;
   theSingleRoleList005: string ;
   theSingleRoleList006: string ;
   theSingleRoleList007: string ;
   SingleRoleTypeForReftoInGraph010: string ;
   SingleRoleTypeForReftoInGraph011: string ;
   SingleRoleTypeForReftoInGraph012: string ;
   SingleRoleTypeForReftoInGraph013: string ;
   SingleRoleTypeForReftoInGraph014: string ;
}
declare class MultiRoleForListOfTypeInGraphAgent extends RoleTypeForListOfTypeInGraphAgent {
   theSingleRoleList001: string ;
   theSingleRoleList002: string ;
   theSingleRoleList003: string ;
   theSingleRoleList004: string ;
   theSingleRoleList005: string ;
   theSingleRoleList006: string ;
   theSingleRoleList007: string ;
   SingleRoleTypeForListofInGraph008: string ;
   SingleRoleTypeForListofInGraph009: string ;
   SingleRoleTypeForListofInGraph010: string ;
   SingleRoleTypeForListofInGraph011: string ;
   SingleRoleTypeForListofInGraph012: string ;
   SingleRoleTypeForListofInGraph013: string ;
   SingleRoleTypeForListofInGraph014: string ;
}
declare class aGoldErrorReport extends aGoldStandardReport {
   BindNewOptions();
}
declare class StandardReportMainScenAgent extends aUIAgent {
   Report001: string ;
   Clear: string ;
   MenuItem: string ;
   SaveAsDefault: string ;
   SaveAsFile: string ;
   MenuItem001: string ;
   MustRefresh: string ;
   Refresh001: string ;
   DisplayOptions: string ;
   DisplayFind: string ;
   CloseAllReports: string ;
   StartRefreshTimer();
   StartTitleTimer();
   KillTitleTimer();
   KillRefreshTimer();
   NotifyInit();
   NotifyTerminate();
   NotifyTimer();
   Report001_CanReceive(:aUIAgent, X:number, Y:number, Object:aFullObject):number;
/**
*Portability Check: OK
*/
   Report001_Received(:aUIAgent, X:number, Y:number, Object:aFullObject):number;
   Report001_GetChar(:aUIAgent, Ch:number, VKey:string, theCount:number, Flags:string):number;
}
declare class ReportFileNameScenAgent extends aUIAgent {
   FileName: string ;
   StaticText: string ;
}
declare class SearchScenAgent extends aUIAgent {
   TextSearcher: string ;
   WantedString: string ;
   WantedStringStaticText: string ;
   WholeWord: string ;
   UpCaseDependent: string ;
   Find001: string ;
   SearchNext: string ;
   SearchPrev: string ;
}
declare class aGoldStandardReport extends aReport {
   Report: string ;
   ScenarioAgent: string ;
   ReportAgent: string ;
   MustRefresh: string ;
   NbCharsInLastLine: string ;
   Options: string ;
   FileName: string ;
   TextSearcher: string ;
   StartTime: string ;
   StartHiResTime: string ;
   File: string ;
   ReportHasChanged: string ;
   RefreshHiResTime: string ;
   TitleSpot: string ;
   MustStayDisabled: string ;
   RefreshOnTimer: string ;
   MustRefreshOnTimer():boolean;
   Find();
   DisplayFind();
   BindNewOptions():boolean;
   ChangeFont();
   CreateReportWindow();
   Init();
   WriteSubString(theString:string, NbLinesToWrite:number, ResidualString:string);
   ComputeNbLines(theString:string):number;
   UpdateAndRefreshReport();
   UpdateAndRefreshReportIfNecessary();
   GetDefaultFileName():string;
   WriteInFile(theString:string);
   WriteLnInFile(theString:string);
   Write();
   WriteLn();
   Clear();
   SaveAsDefault();
   SaveAsFile();
   Refresh();
   DisplayOptions();
   CloseReportWindow();
   SetFocusOnReportWindow();
   NotifyReportWindowClose();
   Pause();
   StringExtract();
}
declare class aErrorReportOption extends aStandardReportOption {
   Init();
   StringExtract();
}
declare class ReportOptionScenAgent extends aUIAgent {
   FontName: string ;
   FontNameStaticText: string ;
   FontSize: string ;
   FontSizeStaticText: string ;
   FontSels: string ;
   FontColorStaticText: string ;
   MaxCharByLine: string ;
   MaxCharByLineStaticText: string ;
   DefaultFileName: string ;
   SelectFont: string ;
   StaticText: string ;
   ForeColor: string ;
   DefaultWidth: string ;
   DefaultWidthStaticText: string ;
   DefaultHeight: string ;
   DefaultHeightStaticText: string ;
   DefaultWidth001: string ;
   DefaultHeight001: string ;
   FontSize001: string ;
   MaxCharByLine001: string ;
   MaxLineVisible: string ;
   MaxLineVisibleStaticText: string ;
   MaxLineVisible001: string ;
   MaxLines: string ;
   MaxLinesStaticText: string ;
   MaxLines001: string ;
   RefreshOnTimer: string ;
   RefreshFrequenceStaticText: string ;
   DisplayTime: string ;
   DisplayMilli: string ;
   WriteInFile: string ;
   RefreshingRate001: string ;
   AlertOnErrorLevel: string ;
   AlertOnErrorLevelStaticText: string ;
   MaxLineBeforeRefreshOnTimer: string ;
   MaxLineBeforeRefreshOnTimerStaticText: string ;
   MaxLineBeforeRefreshOnTimer001: string ;
   EnableMilli(Enable:boolean);
   EnableRate(Enable:boolean);
   RefreshOnTimer_Executed(:aUIAgent, SelectedRank:number, Option:number):number;
   DisplayTime_Executed(:aUIAgent, SelectedRank:number, Option:number):number;
   LoadValue();
}
declare class OptionInModalForaStandardReportOptionAgent extends aUIAgent {
}
declare class aStandardReportOption extends aOption {
   MaxCharByLine: string ;
   DefaultFileName: string ;
   FontName: string ;
   FontSize: string ;
   FontSels: string ;
   ForeColor: string ;
   DefaultWidth: string ;
   DefaultHeight: string ;
   MaxLines: string ;
   MaxLineVisible: string ;
   MaxLineBeforeRefreshOnTimer: string ;
   RefreshOnTimer: string ;
   RefreshingRate: string ;
   DisplayTime: string ;
   DisplayMilli: string ;
   WriteInFile: string ;
   AlertOnErrorLevel: string ;
   Init();
   SelectFont();
   StringExtract();
   BeforeAccept();
   InitAfterNewVersion();
}
declare class WydeNoteForConsultAgent extends aSplitViewAgent {
}
declare class WydeNoteForModifAgent extends aSplitViewAgent {
}
declare class WydeNoteGraphAgent extends aUIAgent {
   DraggableTools: string ;
   WydeNoteGraphAsControl: string ;
}
declare class WydeNoteGraphAsControlAgent extends aGraphModifierInDlgWindowAgent {
   Finalize();
}
declare class WydeNoteCommentAgent extends aUIAgent {
   Comment: string ;
   GroupBox: string ;
   StaticText: string ;
}
declare class WydeNoteGraphForConsultAgent extends aUIAgent {
   WydeNoteGraphAsControl: string ;
}
declare class WydeNoteScenarioDescriptionAgent extends aUIAgent {
   ScenarioDesc: string ;
   ScenarioDescStaticText: string ;
   GroupBox: string ;
}
declare class MainWydeNoteForModifAgent extends aUIAgent {
   WydeNoteForModif: string ;
   Name: string ;
   NameStaticText: string ;
}
declare class MainWydeNoteForConsultAgent extends aUIAgent {
   Name: string ;
   NameStaticText: string ;
   WydeNoteForConsult: string ;
}
declare class aWydeNote extends aGraph {
   BmpText: string ;
   Bmp: string ;
   ScenarioDesc: string ;
   Init();
   IsAnInOutSyncEntity();
   InitOnFileName(Bitmap:string);
   PaintBack();
   ParamInteract();
}
declare class WydePopUpNoteMainAgent extends aUIAgent {
   WydePopUpNoteScenAndComment: string ;
}
declare class WydePopUpNoteScenAndCommentAgent extends aFolderViewAgent {
}
declare class WydePopUpNoteScenarioDescriptionAgent extends aUIAgent {
   WindowDesc: string ;
}
declare class WydePopUpNoteCommentAgent extends aUIAgent {
   mytext: string ;
}
declare class WydePopUpNoteDrawAgent extends aUIAgent {
   Init();
}
declare class WydePopUpNoteMenuAgent extends aMenuItemControlAgent {
   newNote: string ;
   ViewNotes: string ;
}
declare class WydePopUpNoteAllNotesAgent extends aUIAgent {
   Notes: string ;
}
declare class aWydePopUpNote extends aWideExtension {
   WindowDesc: string ;
   Comment: string ;
   DrawWindow: string ;
   Graph: string ;
   UIAgent: string ;
   Notes: string ;
   SaveScenarioAsBitmap(theUIAgent:aUIAgent, FileName:string);
   StoreInTGV(Note:aWydeNote);
   DoYourJob();
   ViewNotes();
   newNote();
   FolderParentName();
   MenuText();
}
declare class ClientConfigurationTreeAgent extends aWSMClientConfigurationTreeUIAgent {
}
declare class aWSMClientConfigurationTreeScenario extends aXXXAsTreeBox {
   DefaultUIAgentClassId();
   DefaultUIComponentClassId();
   NewQVarPresentor():aQVPWSMClientConfiguration;
   GetQVarPresentor();
}
declare class aWSMClientConfigurationTreeUIAgent extends aUIAgent {
   Service():string;
   Finalize();
}
declare class aWSMConfigurationTreeCtrl extends aDlgWindow {
   Create(ParentHandle:string, Service:string, WithRootNode:boolean);
   Init();
   Terminate();
   Kill();
}
declare class aQVarPresentorAsWindowForaQVPWSMClientConfigurationAgent extends aUIAgent {
   MustNotDisplayRootNode: string ;
}
declare class aQVPWSMClientConfiguration extends aQVarPresentor {
   MustNotDisplayRootNode: string ;
}
declare module wHashTable {
   function UpcaseComparepString(pFirst:string, pSecond:string):number;
   function MotorWitness(motorclass:string):aLightObject;
   function Witness(TheClass:aClassDef):aLightObject;
   function ClassWitness(Object:aLightObject):aLightObject;
   function StartWorkingInMem(Manager:string, NSId:number, Id:number);
   function StopWorkingInMem(Manager:string, NSId:number, Id:number);
   function PatchClass(MotorClass:string, ByClass:string);
   function RestoreClass(MotorClass:string);
   function PatchClassId(TheClassId:number, ByClass:number):string;
   function PatchClassDef(TheClass:aClassDef, ByClass:aClassDef):string;
}
declare class aObjectFromExtractHashTable extends aHashTable {
   IsUpcase: string ;
   Kind: string ;
   Param: string ;
   MaxSize: string ;
   Reallocating: string ;
   Allocate(pKey:string):string;
   Free(pHashElement:string);
   ObjectExtract(Object:aLightObject):string;
   Compare(pHashElement:string, pKey:string):boolean;
   AppendObjectEx(Object:aLightObject):string;
   AppendObject(Object:aLightObject);
   GetObjectFromExtract(Extract:string):aLightObject;
   HashCode(pKey:string):number;
   SetHashArraySize();
   Append();
}
/**
*helpfile : C:\WIN2000\System32\cdosys.chm
Defines abstract methods and properties used to manage a message body part
*/
declare class aCDOBodyPart extends bIDispatch {
   COMGetBodyParts():string;
   COMGetContentTransferEncoding():string;
   COMSetContentTransferEncoding(pContentTransferEncoding:string);
   COMGetContentMediaType():string;
   COMSetContentMediaType(pContentMediaType:string);
   COMGetFields():string;
   COMGetCharset():string;
   COMSetCharset(pCharset:string);
   COMGetFileName():string;
   COMGetDataSource():string;
   COMGetContentClass():string;
   COMSetContentClass(pContentClass:string);
   COMGetContentClassName():string;
   COMSetContentClassName(pContentClassName:string);
   COMGetParent():string;
   COMAddBodyPart(Index:string):string;
   COMSaveToFile(FileName:string);
   COMGetEncodedContentStream():string;
   COMGetDecodedContentStream():string;
   COMGetStream():string;
   COMGetFieldParameter(FieldName:string, Parameter:string):string;
   COMCOMGetInterface(Interface:string):string;
   GetBodyParts():aCDOBodyPartCollection;
   GetContentTransferEncoding():string;
   SetContentTransferEncoding(pContentTransferEncoding:string);
   GetContentMediaType():string;
   SetContentMediaType(pContentMediaType:string);
   GetFields():aCDOFields;
   GetCharset():string;
   SetCharset(pCharset:string);
   GetFileName():string;
   GetDataSource():aCDODataSource;
   GetContentClass():string;
   SetContentClass(pContentClass:string);
   GetContentClassName():string;
   SetContentClassName(pContentClassName:string);
   GetParent():aCDOBodyPart;
   AddBodyPart(Index:string):aCDOBodyPart;
   SaveToFile(FileName:string);
   GetEncodedContentStream():aCDO_Stream;
   GetDecodedContentStream():aCDO_Stream;
   GetStream():aCDO_Stream;
   GetFieldParameter(FieldName:string, Parameter:string):string;
   COMGetInterface(Interface:string):bIDispatch;
   QueryInterface();
}
/**
*helpfile : C:\WIN2000\System32\cdosys.chm
Defines abstract methods and properties used to manage a collection of BodyPart objects
*/
declare class aCDOBodyPartCollection extends bIDispatch {
   GetCount():string;
   COMGetItem(Index:string):string;
   COMGet_NewEnum():string;
   COMCOMDelete(varBP:string);
   DeleteAll();
   COMAdd(Index:string):string;
   GetItem(Index:string):aCDOBodyPart;
   Get_NewEnum():bIUnknown;
   COMDelete(varBP:string);
   Add(Index:string):aCDOBodyPart;
   QueryInterface();
}
declare class aCDOConfiguration extends aLightObject {
   LastResult: string ;
   pInterface: string ;
   pIUnknown: string ;
   pbIUnknown: string ;
   pbIDispatch: string ;
   pbISupportErrorInfo: string ;
   pbIMarshal: string ;
   pbIConfiguration: string ;
   CreateInstance(CreateInstanceMode:number);
   MapInstance(pInterface:string);
   Init();
   Terminate();
   IUnknown():bIUnknown;
   IDispatch():bIDispatch;
   ISupportErrorInfo():bISupportErrorInfo;
   IMarshal():bIMarshal;
   IConfiguration():aCDOIConfiguration;
   COMGetFields():string;
   COMLoad(LoadFrom:string, URL:string);
   COMGetInterface(Interface:string):string;
   GetFields():aCDOFields;
   Load(LoadFrom:string, URL:string);
   GetInterface(Interface:string):bIDispatch;
}
/**
*helpfile : C:\WIN2000\HELP\ado210.chm

*/
declare class aCDOConnection15 extends aCDO_ADO {
   COMGetConnectionString():string;
   COMSetConnectionString(pbstr:string);
   GetCommandTimeout():string;
   SetCommandTimeout(plTimeout:string);
   GetConnectionTimeout():string;
   SetConnectionTimeout(plTimeout:string);
   COMGetVersion():string;
   Close();
   COMExecute(CommandText:string, RecordsAffected:string, Options:string):string;
   BeginTrans():string;
   CommitTrans();
   RollbackTrans();
   COMOpen(ConnectionString:string, UserID:string, Password:string, Options:string);
   COMGetErrors():string;
   COMGetDefaultDatabase():string;
   COMSetDefaultDatabase(pbstr:string);
   GetIsolationLevel():string;
   SetIsolationLevel(Level:string);
   GetAttributes():string;
   SetAttributes(plAttr:string);
   GetCursorLocation():string;
   SetCursorLocation(plCursorLoc:string);
   GetMode():string;
   SetMode(plMode:string);
   COMGetProvider():string;
   COMSetProvider(pbstr:string);
   GetState():string;
   COMOpenSchema(Schema:string, Restrictions:string, SchemaID:string):string;
   GetConnectionString():string;
   SetConnectionString(pbstr:string);
   GetVersion():string;
   Execute(CommandText:string, RecordsAffected:string, Options:string):aCDO_Recordset;
   Open(ConnectionString:string, UserID:string, Password:string, Options:string);
   GetErrors():aCDOErrors;
   GetDefaultDatabase():string;
   SetDefaultDatabase(pbstr:string);
   GetProvider():string;
   SetProvider(pbstr:string);
   OpenSchema(Schema:string, Restrictions:string, SchemaID:string):aCDO_Recordset;
   QueryInterface();
}
/**
*helpfile : C:\WIN2000\System32\cdosys.chm
Defines abstract methods and properties used to extract messages from or embed messages into other CDO message body parts
*/
declare class aCDODataSource extends bIDispatch {
   COMGetSourceClass():string;
   COMGetSource():string;
   GetIsDirty():boolean;
   SetIsDirty(pIsDirty:boolean);
   COMGetSourceURL():string;
   COMGetActiveConnection():string;
   COMSaveToObject(Source:string, InterfaceName:string);
   COMOpenObject(Source:string, InterfaceName:string);
   COMSaveTo(SourceURL:string, ActiveConnection:string, Mode:string, CreateOptions:string, Options:string, UserName:string, Password:string);
   COMOpen(SourceURL:string, ActiveConnection:string, Mode:string, CreateOptions:string, Options:string, UserName:string, Password:string);
   COMSave();
   COMSaveToContainer(ContainerURL:string, ActiveConnection:string, Mode:string, CreateOptions:string, Options:string, UserName:string, Password:string);
   GetSourceClass():string;
   GetSource():bIUnknown;
   GetSourceURL():string;
   GetActiveConnection():aCDO_Connection;
   SaveToObject(Source:bIUnknown, InterfaceName:string);
   OpenObject(Source:bIUnknown, InterfaceName:string);
   SaveTo(SourceURL:string, ActiveConnection:bIDispatch, Mode:string, CreateOptions:string, Options:string, UserName:string, Password:string);
   Open(SourceURL:string, ActiveConnection:bIDispatch, Mode:string, CreateOptions:string, Options:string, UserName:string, Password:string);
   SaveToContainer(ContainerURL:string, ActiveConnection:bIDispatch, Mode:string, CreateOptions:string, Options:string, UserName:string, Password:string);
   QueryInterface();
}
/**
*helpfile : C:\WIN2000\HELP\ado210.chm

*/
declare class aCDOError extends bIDispatch {
   GetNumber():string;
   COMGetSource():string;
   COMGetDescription():string;
   COMGetHelpFile():string;
   GetHelpContext():string;
   COMGetSQLState():string;
   GetNativeError():string;
   GetSource():string;
   GetDescription():string;
   GetHelpFile():string;
   GetSQLState():string;
   QueryInterface();
}
/**
*helpfile : C:\WIN2000\HELP\ado210.chm

*/
declare class aCDOErrors extends aCDO_Collection {
   COMGetItem(Index:string):string;
   Clear();
   GetItem(Index:string):aCDOError;
   QueryInterface();
}
/**
*helpfile : C:\WIN2000\HELP\ado210.chm

*/
declare class aCDOField extends aCDOField20 {
   GetStatus():string;
   QueryInterface();
}
/**
*helpfile : C:\WIN2000\HELP\ado210.chm

*/
declare class aCDOField20 extends aCDO_ADO {
   GetActualSize():string;
   GetAttributes():string;
   GetDefinedSize():string;
   COMGetName():string;
   GetType():string;
   COMGetValue():string;
   COMSetValue(pvar:string);
   GetPrecision():string;
   GetNumericScale():string;
   COMAppendChunk(Data:string);
   COMGetChunk(COMLength:string):string;
   COMGetOriginalValue():string;
   COMGetUnderlyingValue():string;
   COMGetDataFormat():string;
   COMSetRefDataFormat(ppiDF:string);
   SetPrecision(pbPrecision:string);
   SetNumericScale(pbNumericScale:string);
   SetType(pDataType:string);
   SetDefinedSize(pl:string);
   SetAttributes(pl:string);
   GetName():string;
   GetValue():string;
   SetValue(pvar:string);
   AppendChunk(Data:string);
   GetChunk(COMLength:string):string;
   GetOriginalValue():string;
   GetUnderlyingValue():string;
   GetDataFormat():bIUnknown;
   SetRefDataFormat(ppiDF:bIUnknown);
   QueryInterface();
}
/**
*helpfile : C:\WIN2000\HELP\ado210.chm

*/
declare class aCDOFields extends aCDOFields20 {
   COMAppend(Name:string, COMType:string, DefinedSize:string, Attrib:string, FieldValue:string);
   Update();
   Resync(ResyncValues:string);
   CancelUpdate();
   Append(Name:string, COMType:string, DefinedSize:string, Attrib:string, FieldValue:string);
   QueryInterface();
}
/**
*helpfile : C:\WIN2000\HELP\ado210.chm

*/
declare class aCDOFields15 extends aCDO_Collection {
   COMGetItem(Index:string):string;
   GetItem(Index:string):aCDOField;
   QueryInterface();
}
/**
*helpfile : C:\WIN2000\HELP\ado210.chm

*/
declare class aCDOFields20 extends aCDOFields15 {
   COM_Append(Name:string, COMType:string, DefinedSize:string, Attrib:string);
   COMCOMDelete(Index:string);
   _Append(Name:string, COMType:string, DefinedSize:string, Attrib:string);
   COMDelete(Index:string);
   QueryInterface();
}
/**
*helpfile : C:\WIN2000\System32\cdosys.chm
Defines abstract methods and properties used to manage configuration information for CDO objects
*/
declare class aCDOIConfiguration extends bIDispatch {
   COMGetFields():string;
   COMLoad(LoadFrom:string, URL:string);
   COMCOMGetInterface(Interface:string):string;
   GetFields():aCDOFields;
   Load(LoadFrom:string, URL:string);
   COMGetInterface(Interface:string):bIDispatch;
   QueryInterface();
}
/**
*helpfile : C:\WIN2000\System32\cdosys.chm
Defines abstract methods and properties used to manage a complete message
*/
declare class aCDOIMessage extends bIDispatch {
   COMGetBCC():string;
   COMSetBCC(pBCC:string);
   COMGetCC():string;
   COMSetCC(pCC:string);
   COMGetFollowUpTo():string;
   COMSetFollowUpTo(pFollowUpTo:string);
   COMGetFrom():string;
   COMSetFrom(pFrom:string);
   COMGetKeywords():string;
   COMSetKeywords(pKeywords:string);
   GetMimeFormatted():boolean;
   SetMimeFormatted(pMimeFormatted:boolean);
   COMGetNewsgroups():string;
   COMSetNewsgroups(pNewsgroups:string);
   COMGetOrganization():string;
   COMSetOrganization(pOrganization:string);
   GetReceivedTime():string;
   COMGetReplyTo():string;
   COMSetReplyTo(pReplyTo:string);
   GetDSNOptions():string;
   SetDSNOptions(pDSNOptions:string);
   GetSentOn():string;
   COMGetSubject():string;
   COMSetSubject(pSubject:string);
   COMGetTo():string;
   COMSetTo(pTo:string);
   COMGetTextBody():string;
   COMSetTextBody(pTextBody:string);
   COMGetHTMLBody():string;
   COMSetHTMLBody(pHTMLBody:string);
   COMGetAttachments():string;
   COMGetSender():string;
   COMSetSender(pSender:string);
   COMGetConfiguration():string;
   COMSetConfiguration(pConfiguration:string);
   COMSetRefConfiguration(pConfiguration:string);
   GetAutoGenerateTextBody():boolean;
   SetAutoGenerateTextBody(pAutoGenerateTextBody:boolean);
   COMGetEnvelopeFields():string;
   COMGetTextBodyPart():string;
   COMGetHTMLBodyPart():string;
   COMGetBodyPart():string;
   COMGetDataSource():string;
   COMGetFields():string;
   GetMDNRequested():boolean;
   SetMDNRequested(pMDNRequested:boolean);
   COMAddRelatedBodyPart(URL:string, Reference:string, ReferenceType:string, UserName:string, Password:string):string;
   COMAddAttachment(URL:string, UserName:string, Password:string):string;
   COMCreateMHTMLBody(URL:string, Flags:string, UserName:string, Password:string);
   COMCOMForward():string;
   Post();
   COMPostReply():string;
   COMReply():string;
   COMReplyAll():string;
   Send();
   COMGetStream():string;
   COMCOMGetInterface(Interface:string):string;
   GetBCC():string;
   SetBCC(pBCC:string);
   GetCC():string;
   SetCC(pCC:string);
   GetFollowUpTo():string;
   SetFollowUpTo(pFollowUpTo:string);
   GetFrom():string;
   SetFrom(pFrom:string);
   GetKeywords():string;
   SetKeywords(pKeywords:string);
   GetNewsgroups():string;
   SetNewsgroups(pNewsgroups:string);
   GetOrganization():string;
   SetOrganization(pOrganization:string);
   GetReplyTo():string;
   SetReplyTo(pReplyTo:string);
   GetSubject():string;
   SetSubject(pSubject:string);
   GetTo():string;
   SetTo(pTo:string);
   GetTextBody():string;
   SetTextBody(pTextBody:string);
   GetHTMLBody():string;
   SetHTMLBody(pHTMLBody:string);
   GetAttachments():aCDOBodyPartCollection;
   GetSender():string;
   SetSender(pSender:string);
   GetConfiguration():aCDOIConfiguration;
   SetConfiguration(pConfiguration:aCDOIConfiguration);
   SetRefConfiguration(pConfiguration:aCDOIConfiguration);
   GetEnvelopeFields():aCDOFields;
   GetTextBodyPart():aCDOBodyPart;
   GetHTMLBodyPart():aCDOBodyPart;
   GetBodyPart():aCDOBodyPart;
   GetDataSource():aCDODataSource;
   GetFields():aCDOFields;
   AddRelatedBodyPart(URL:string, Reference:string, ReferenceType:string, UserName:string, Password:string):aCDOBodyPart;
   AddAttachment(URL:string, UserName:string, Password:string):aCDOBodyPart;
   CreateMHTMLBody(URL:string, Flags:string, UserName:string, Password:string);
   COMForward():aCDOIMessage;
   PostReply():aCDOIMessage;
   Reply():aCDOIMessage;
   ReplyAll():aCDOIMessage;
   GetStream():aCDO_Stream;
   COMGetInterface(Interface:string):bIDispatch;
   QueryInterface();
}
declare class aCDOMessage extends aLightObject {
   LastResult: string ;
   pInterface: string ;
   pIUnknown: string ;
   pbIUnknown: string ;
   pbIDispatch: string ;
   pbISupportErrorInfo: string ;
   pbIMarshal: string ;
   pbIMessage: string ;
   pbIDataSource: string ;
   pbIBodyPart: string ;
   CreateInstance(CreateInstanceMode:number);
   MapInstance(pInterface:string);
   Init();
   Terminate();
   IUnknown():bIUnknown;
   IDispatch():bIDispatch;
   ISupportErrorInfo():bISupportErrorInfo;
   IMarshal():bIMarshal;
   IMessage():aCDOIMessage;
   IDataSource():aCDODataSource;
   IBodyPart():aCDOBodyPart;
   COMGetBCC():string;
   COMSetBCC(pBCC:string);
   COMGetCC():string;
   COMSetCC(pCC:string);
   COMGetFollowUpTo():string;
   COMSetFollowUpTo(pFollowUpTo:string);
   COMGetFrom():string;
   COMSetFrom(pFrom:string);
   COMGetKeywords():string;
   COMSetKeywords(pKeywords:string);
   GetMimeFormatted():boolean;
   SetMimeFormatted(pMimeFormatted:boolean);
   COMGetNewsgroups():string;
   COMSetNewsgroups(pNewsgroups:string);
   COMGetOrganization():string;
   COMSetOrganization(pOrganization:string);
   GetReceivedTime():string;
   COMGetReplyTo():string;
   COMSetReplyTo(pReplyTo:string);
   GetDSNOptions():string;
   SetDSNOptions(pDSNOptions:string);
   GetSentOn():string;
   COMGetSubject():string;
   COMSetSubject(pSubject:string);
   COMGetTo():string;
   COMSetTo(pTo:string);
   COMGetTextBody():string;
   COMSetTextBody(pTextBody:string);
   COMGetHTMLBody():string;
   COMSetHTMLBody(pHTMLBody:string);
   COMGetAttachments():string;
   COMGetSender():string;
   COMSetSender(pSender:string);
   COMGetConfiguration():string;
   COMSetConfiguration(pConfiguration:string);
   COMSetRefConfiguration(pConfiguration:string);
   GetAutoGenerateTextBody():boolean;
   SetAutoGenerateTextBody(pAutoGenerateTextBody:boolean);
   COMGetEnvelopeFields():string;
   COMGetTextBodyPart():string;
   COMGetHTMLBodyPart():string;
   COMGetBodyPart():string;
   COMGetDataSource():string;
   COMGetFields():string;
   GetMDNRequested():boolean;
   SetMDNRequested(pMDNRequested:boolean);
   COMAddRelatedBodyPart(URL:string, Reference:string, ReferenceType:string, UserName:string, Password:string):string;
   COMAddAttachment(URL:string, UserName:string, Password:string):string;
   COMCreateMHTMLBody(URL:string, Flags:string, UserName:string, Password:string);
   COMCOMForward():string;
   Post();
   COMPostReply():string;
   COMReply():string;
   COMReplyAll():string;
   Send();
   COMGetStream():string;
   COMGetInterface(Interface:string):string;
   GetBCC():string;
   SetBCC(pBCC:string);
   GetCC():string;
   SetCC(pCC:string);
   GetFollowUpTo():string;
   SetFollowUpTo(pFollowUpTo:string);
   GetFrom():string;
   SetFrom(pFrom:string);
   GetKeywords():string;
   SetKeywords(pKeywords:string);
   GetNewsgroups():string;
   SetNewsgroups(pNewsgroups:string);
   GetOrganization():string;
   SetOrganization(pOrganization:string);
   GetReplyTo():string;
   SetReplyTo(pReplyTo:string);
   GetSubject():string;
   SetSubject(pSubject:string);
   GetTo():string;
   SetTo(pTo:string);
   GetTextBodyCString():string;
   SetTextBodyCString(TextBody:string);
   GetTextBody():string;
   SetTextBody(TextBody:string);
   GetHTMLBody():string;
   SetHTMLBody(pHTMLBody:string);
   GetAttachments():aCDOBodyPartCollection;
   GetSender():string;
   SetSender(pSender:string);
   GetConfiguration():aCDOIConfiguration;
   SetConfiguration(pConfiguration:aCDOIConfiguration);
   SetRefConfiguration(pConfiguration:aCDOIConfiguration);
   GetEnvelopeFields():aCDOFields;
   GetTextBodyPart():aCDOBodyPart;
   GetHTMLBodyPart():aCDOBodyPart;
   GetBodyPart():aCDOBodyPart;
   GetDataSource():aCDODataSource;
   GetFields():aCDOFields;
   AddRelatedBodyPart(URL:string, Reference:string, ReferenceType:string, UserName:string, Password:string):aCDOBodyPart;
   AddAttachment(URL:string, UserName:string, Password:string):aCDOBodyPart;
   CreateMHTMLBody(URL:string, Flags:string, UserName:string, Password:string);
   COMForward():aCDOIMessage;
   PostReply():aCDOIMessage;
   Reply():aCDOIMessage;
   ReplyAll():aCDOIMessage;
   GetStream():aCDO_Stream;
   GetInterface(Interface:string):bIDispatch;
}
/**
*helpfile : C:\WIN2000\HELP\ado210.chm

*/
declare class aCDOProperties extends aCDO_Collection {
   COMGetItem(Index:string):string;
   GetItem(Index:string):aCDOProperty;
   QueryInterface();
}
/**
*helpfile : C:\WIN2000\HELP\ado210.chm

*/
declare class aCDOProperty extends bIDispatch {
   COMGetValue():string;
   COMSetValue(pval:string);
   COMGetName():string;
   GetType():string;
   GetAttributes():string;
   SetAttributes(plAttributes:string);
   GetValue():string;
   SetValue(pval:string);
   GetName():string;
   QueryInterface();
}
/**
*helpfile : C:\WIN2000\HELP\ado210.chm

*/
declare class aCDORecordset15 extends aCDO_ADO {
   GetAbsolutePosition():string;
   SetAbsolutePosition(pl:string);
   COMSetRefActiveConnection(pvar:string);
   COMSetActiveConnection(pvar:string);
   COMGetActiveConnection():string;
   GetBOF():boolean;
   COMGetBookmark():string;
   COMSetBookmark(pvBookmark:string);
   GetCacheSize():string;
   SetCacheSize(pl:string);
   GetCursorType():string;
   SetCursorType(plCursorType:string);
   GetEOF():boolean;
   COMGetFields():string;
   GetLockType():string;
   SetLockType(plLockType:string);
   GetMaxRecords():string;
   SetMaxRecords(plMaxRecords:string);
   GetRecordCount():string;
   COMSetRefSource(pvSource:string);
   COMSetSource(pvSource:string);
   COMGetSource():string;
   COMAddNew(FieldList:string, Values:string);
   CancelUpdate();
   Close();
   COMDelete(AffectRecords:string);
   COMGetRows(Rows:string, Start:string, COMFields:string):string;
   COMCOMMove(NumRecords:string, Start:string);
   MoveNext();
   MovePrevious();
   MoveFirst();
   MoveLast();
   COMOpen(Source:string, ActiveConnection:string, CursorType:string, LockType:string, Options:string);
   Requery(Options:string);
   _xResync(AffectRecords:string);
   COMUpdate(COMFields:string, Values:string);
   GetAbsolutePage():string;
   SetAbsolutePage(pl:string);
   GetEditMode():string;
   COMGetFilter():string;
   COMSetFilter(Criteria:string);
   GetPageCount():string;
   GetPageSize():string;
   SetPageSize(pl:string);
   COMGetSort():string;
   COMSetSort(Criteria:string);
   GetStatus():string;
   GetState():string;
   COM_xClone():string;
   UpdateBatch(AffectRecords:string);
   CancelBatch(AffectRecords:string);
   GetCursorLocation():string;
   SetCursorLocation(plCursorLoc:string);
   COMNextRecordset(RecordsAffected:string):string;
   Supports(CursorOptions:string):boolean;
   COMGetCollect(Index:string):string;
   COMSetCollect(Index:string, pvar:string);
   GetMarshalOptions():string;
   SetMarshalOptions(peMarshal:string);
   COMFind(Criteria:string, SkipRecords:string, COMSearchDirection:string, Start:string);
   SetRefActiveConnection(pvar:bIDispatch);
   SetActiveConnection(pvar:string);
   GetActiveConnection():string;
   GetBookmark():string;
   SetBookmark(pvBookmark:string);
   GetFields():aCDOFields;
   SetRefSource(pvSource:bIDispatch);
   SetSource(pvSource:string);
   GetSource():string;
   AddNew(FieldList:string, Values:string);
   GetRows(Rows:string, Start:string, COMFields:string):string;
   COMMove(NumRecords:string, Start:string);
   Open(Source:string, ActiveConnection:string, CursorType:string, LockType:string, Options:string);
   Update(COMFields:string, Values:string);
   GetFilter():string;
   SetFilter(Criteria:string);
   GetSort():string;
   SetSort(Criteria:string);
   _xClone():aCDO_Recordset;
   NextRecordset(RecordsAffected:string):aCDO_Recordset;
   GetCollect(Index:string):string;
   SetCollect(Index:string, pvar:string);
   Find(Criteria:string, SkipRecords:string, COMSearchDirection:string, Start:string);
   QueryInterface();
}
/**
*helpfile : C:\WIN2000\HELP\ado210.chm

*/
declare class aCDORecordset20 extends aCDORecordset15 {
   Cancel();
   COMGetDataSource():string;
   COMSetRefDataSource(ppunkDataSource:string);
   COM_xSave(FileName:string, PersistFormat:string);
   COMGetActiveCommand():string;
   SetStayInSync(pbStayInSync:boolean);
   GetStayInSync():boolean;
   COMGetString(StringFormat:string, NumRows:string, ColumnDelimeter:string, RowDelimeter:string, NullExpr:string):string;
   COMGetDataMember():string;
   COMSetDataMember(pbstrDataMember:string);
   COMCompareBookmarks(Bookmark1:string, Bookmark2:string):string;
   COMCOMClone(LockType:string):string;
   Resync(AffectRecords:string, ResyncValues:string);
   GetDataSource():bIUnknown;
   SetRefDataSource(ppunkDataSource:bIUnknown);
   _xSave(FileName:string, PersistFormat:string);
   GetActiveCommand():bIDispatch;
   GetString(StringFormat:string, NumRows:string, ColumnDelimeter:string, RowDelimeter:string, NullExpr:string):string;
   GetDataMember():string;
   SetDataMember(pbstrDataMember:string);
   CompareBookmarks(Bookmark1:string, Bookmark2:string):string;
   COMClone(LockType:string):aCDO_Recordset;
   QueryInterface();
}
/**
*helpfile : C:\WIN2000\HELP\ado210.chm

*/
declare class aCDORecordset21 extends aCDORecordset20 {
   COMSeek(KeyValues:string, SeekOption:string);
   COMSetIndex(pbstrIndex:string);
   COMGetIndex():string;
   Seek(KeyValues:string, SeekOption:string);
   SetIndex(pbstrIndex:string);
   GetIndex():string;
   QueryInterface();
}
/**
*helpfile : C:\WIN2000\HELP\ado210.chm

*/
declare class aCDO_ADO extends bIDispatch {
   COMGetProperties():string;
   GetProperties():aCDOProperties;
   QueryInterface();
}
/**
*helpfile : C:\WIN2000\HELP\ado210.chm

*/
declare class aCDO_Collection extends bIDispatch {
   GetCount():string;
   COM_NewEnum():string;
   Refresh();
   _NewEnum():bIUnknown;
   QueryInterface();
}
/**
*helpfile : C:\WIN2000\HELP\ado210.chm

*/
declare class aCDO_Connection extends aCDOConnection15 {
   Cancel();
   QueryInterface();
}
/**
*helpfile : C:\WIN2000\HELP\ado210.chm

*/
declare class aCDO_Recordset extends aCDORecordset21 {
   COMCOMSave(Destination:string, PersistFormat:string);
   COMSave(Destination:string, PersistFormat:string);
   QueryInterface();
}
/**
*helpfile : C:\WIN2000\HELP\ado210.chm

*/
declare class aCDO_Stream extends bIDispatch {
   GetSize():string;
   GetEOS():boolean;
   GetPosition():string;
   SetPosition(pPos:string);
   GetType():string;
   SetType(ptype:string);
   GetLineSeparator():string;
   SetLineSeparator(pLS:string);
   GetState():string;
   GetMode():string;
   SetMode(pMode:string);
   COMGetCharset():string;
   COMSetCharset(pbstrCharset:string);
   COMRead(NumBytes:string):string;
   COMOpen(Source:string, Mode:string, Options:string, UserName:string, Password:string);
   Close();
   SkipLine();
   COMWrite(Buffer:string);
   SetEOS();
   COMCopyTo(DestStream:string, CharNumber:string);
   Flush();
   COMSaveToFile(FileName:string, Options:string);
   COMLoadFromFile(FileName:string);
   COMReadText(NumChars:string):string;
   COMWriteText(Data:string, Options:string);
   Cancel();
   GetCharset():string;
   SetCharset(pbstrCharset:string);
   Read(NumBytes:string):string;
   Open(Source:string, Mode:string, Options:string, UserName:string, Password:string);
   Write(Buffer:string);
   CopyTo(DestStream:aCDO_Stream, CharNumber:string);
   SaveToFile(FileName:string, Options:string);
   LoadFromFile(FileName:string);
   ReadText(NumChars:string):string;
   WriteText(Data:string, Options:string);
   QueryInterface();
}
declare module ADODB {
}
declare module CDO {
}
declare class aSqlDateTimeType001ForaOracleSqlDateTypeAgent extends aSqlDateTimeType001Agent {
   NewTimeFormatWithValidDate: string ;
   NotifyWhatToStore_Init();
   NotifyWhatToStore_ValueStored();
}
declare class aXMLCommentNode extends aXMLNode {
   Comment: string ;
   WriteInText();
   StringExtract();
   WriteInFile();
}
declare class aEntityChoice extends aEntity {
   Method: string ;
   SetChoice(Title:string, Separator:boolean, Method:aMethodDesc);
   SetChoiceFromMethod(Separator:boolean, Method:aMethodDesc);
   SetChoiceFromAction(Action:string, Separator:boolean, Method:aMethodDesc);
   Execute(Object:aLightObject, Node:string);
}
declare class ListForPickMainWithButtonAgent extends ListForPickMainAgent {
   ListForPickListCtrl: string ;
   ActionValid001: string ;
   Selection();
}
declare class ListForPickMainAgent extends aUIAgent {
   SelectionAddress: string ;
   NotifyTerminate();
}
declare class ListStringsForPickAgent extends ListForPickListCtrlAgent {
   MaxValueWidth: string ;
   FullWidth: string ;
   ColumnTitle():string;
   NotifyInit();
   GetColumnWidth(Column:number):number;
   SetColumnWidth(Column:number, Width:number);
   LoadValue();
   NotifyRangeHasChanged();
}
declare class ListForPickListCtrlAgent extends aListCtrlUIAgent {
   NotifyExecuted();
}
declare class aFlatListForPick extends aListForPick {
   PickOne():number;
   SingleColumnFullWidth():boolean;
   SingleColumnTitle():string;
   AsCStringAt(Rank:number):string;
   AsStringAt();
}
declare class aHomogeonousTreeForPick extends aTreeForPick {
   Nodes: string ;
   Init();
   NewNode(Title:string):aHomogeonousTreeForPick;
   NodeExtract(Node:string):string;
   PickObject():aLightObject;
   GetList(Node:string):aListOfInstances;
   Terminate();
}
declare class aListForPick extends aListOfInstances {
   Pick():string;
   Title():string;
   StringExtract();
}
declare class TreeForPickPopupAgent extends aMenuItemControlAgent {
   TreeForPickMenuItem: string ;
}
declare class TreeForPickMenuItemAgent extends aListOfInstancesAsTreeMenuItemAgent {
   NodeExtract();
   GetList();
}
declare class aTreeForPick extends aListForPick {
   NodeTitle: string ;
   Pick();
   NodeExtract(Node:string):string;
   GetList(Node:string):aListOfInstances;
   Title();
}
declare class aQVarPresentorDOCProducer extends aEntityDocProducer {
   Produce(where:aDocProducedText, options:string);
}
declare class OwnedReftoLinkOptionAgent extends aUIAgent {
   OwnedReftoLinkOption: string ;
}
declare class OwnedListofLinkOptionAgent extends aUIAgent {
   OwnedListofLinkOption: string ;
}
declare class aLogBroker001Agent extends aUIAgent {
   CommentTitle: string ;
   CommentTitleStaticText: string ;
   CommentText: string ;
   StaticText: string ;
   Reference: string ;
   ReferenceStaticText: string ;
   aLogBrokerDT: string ;
   TopOkCancel: string ;
   TmpEntity: string ;
   NotifyInit();
   NotifyTerminate();
}
declare class VarIntrospectorChangeVarAgent extends aUIAgent {
   VarName: string ;
   VarValue: string ;
   VarValue001: string ;
   LoadFromVar();
}
declare class aObjectHashTable extends aHashTable {
   Reallocating: string ;
   AppendObject(Object:aLightObject);
   ObjectExists(Object:aLightObject):boolean;
   Allocate(pKey:aLightObject):string;
   Free(pHashElement:string);
   Compare(pHashElement:string, pKey:aLightObject):boolean;
/**
*Portability Check: OK
*/
   HashCode(pKey:aLightObject):number;
   GetObject(pHashElement:string):aLightObject;
   SetHashArraySize();
   Append();
}
declare class aListOfCStringPointer extends aFlatListForPick {
   AsCStringAt();
   SingleColumnFullWidth();
}
declare class aFolderScenario extends aXXXAsFolder {
   DefaultUIAgentClassId();
   InitEvents();
}
declare class aFolderUIAgent extends aXXXAsFolderUIAgent {
   EmptyEventProcAddr: string ;
   CreateRefUIAgent(TheObject:aLightObject, WithThisScenario:aScenario, ExecMode:string):aUIAgent;
   GetObjectTitle(TheObject:aLightObject, WithThisScenario:aScenario, ExecMode:string):string;
   AppendObject(TheObject:aLightObject, WithThisScenario:aScenario, ExecMode:string, SelectIt:boolean):aUIAgent;
   InsertObjectAt(TheObject:aLightObject, WithThisScenario:aScenario, ExecMode:string, SelectIt:boolean, Rank:number):aUIAgent;
   DeleteObjectAt(Rank:number);
   NotifySelected();
   NotifyRangeHasChanged();
   Finalize();
   NotifyHostRangeHasChanged();
   NotifyEmpty():number;
   Empty():number;
   KillSubUIAgent();
}
declare class aXXXProducingApplicationModulesandClassesRole extends aSingleRoleType {
   IsDroppedObjectUsable();
   NewInstanceFromDroppedObject();
}
declare class aDataBaseDesignerCloneDBDefAgent extends aUIAgent {
   EntitiesToCloneDBDefFor: string ;
   ComboBox: string ;
   GroupBox: string ;
   aDataBaseDesignerMergeDBDefs: string ;
   GroupBox001: string ;
   ComboBox_Init(:aUIAgent):number;
   ComboBox_Selected(:aUIAgent, SelectedRank:number):number;
   ComboBox_ValueLoaded();
}
declare class aDataBaseDesignerMergeDBDefsAgent extends aUIAgent {
   DBDefsToMerge: string ;
}
declare class MMBrowserWhereUsedAgent extends aUIAgent {
   Loading: string ;
   ComboBox: string ;
   CurrentEntity: string ;
   EntityMMViewerWhereUsed: string ;
   ComboBox_Executed(SelectedRank:number, Option:number):number;
   ComboBox_Selected(SelectedRank:number):number;
   LoadValue();
   ComboBox_LoseFocus():number;
   ComboBox_CanReceive(X:number, Y:number, Object:aFullObject):number;
   ComboBox_Received(X:number, Y:number, Object:aFullObject):number;
   ComboBox_GetChar(:aUIAgent, Ch:number, VKey:string, theCount:number, Flags:string):number;
   ComboBox_ButtonUp(:aUIAgent, No:number, X:number, Y:number):number;
}
declare class MMBrowserVerticalViewAgent extends aFolderViewAgent {
}
declare class newMMBrowserDockedAgent extends aUIAgent {
   MMBrowserVerticalView: string ;
}
declare class MMBrowserToolBarWithDockingButtonsAgent extends aToolBarUIAgent {
}
declare class MMViewerButtonsAgent extends aUIAgent {
   ShowVersionAnalyzer: string ;
   MMViewerButtonsButtonsBase: string ;
   ManageReimplems: string ;
   LoadValue();
}
declare class EntityMMViewerPopupAgent extends aMenuItemControlAgent {
   ConsultSelectedEntity: string ;
   ModifySelectedEntity: string ;
   Separator: string ;
   CheckOutSelectedEntity: string ;
   CheckInSelectedEntity: string ;
   Separator001: string ;
   SyncSelectedEntity: string ;
   DeliverSelectedEntity: string ;
   Separator002: string ;
   SelectClassInTree: string ;
   SearchInContainers: string ;
   SearchInBundles: string ;
   Separator003: string ;
   ShowVersionAnalyzer: string ;
   WhereUsedInMMBrowser: string ;
   OwnerEntityMMViewer: string ;
   Separator004: string ;
   Separator005: string ;
   Cut001: string ;
   Copy001: string ;
   Paste001: string ;
   ManageReimplems: string ;
   NotifyInit();
   LoadValue();
   Terminate();
}
declare class aRunningContextCatalog002Agent extends aToolBarUIAgent {
}
declare class aRunningContextCatalog001DockedAgent extends aUIAgent {
   Entities: string ;
}
declare class aWAMIdeStandardCatalog002Agent extends aToolBarUIAgent {
}
declare class aWAMIdeStandardCatalog001DockedAgent extends aUIAgent {
   Catalog: string ;
}
declare class WideIDEDockedToolsAgent extends aUIAgent {
   aWideIDELeftToolBar002: string ;
   aWideIDELeftToolBar002_Executed(:aUIAgent, SelectedRank:number, Option:number):number;
   aWideIDELeftToolBar002_Empty():number;
}
declare class WideIDEDockedToolsFolderAgent extends aFolderUIAgent {
}
declare class aWideIDEDockedTools extends aEntity {
   GetFolderUIAgent():aFolderUIAgent;
   Dock(TheEntity:aEntity, WithThisScenarioName:string, ExecMode:string);
   IsEmpty():boolean;
   GetDockedUIAgents():aListOfInstances;
   SelectEntity(TheEntity:aEntity, theUIAgent:aUIAgent);
}
declare class WAMContainerMDIDockedAgent extends aUIAgent {
   Contents: string ;
   WAMContainerActionsPrefixBar: string ;
   WAMContainerDockedTopToolBar: string ;
   Contents_Selected(SelectedRank:number):number;
}
declare class WAMContainerDockedTopToolBarAgent extends aToolBarUIAgent {
   SaveSaveAndCloseClose: string ;
}
declare class aWAMContainerCatalog001Agent extends aToolBarUIAgent {
}
declare class aWAMContainerCatalogNewLookDockedAgent extends aUIAgent {
   Entities: string ;
   Entities_GetParent(ForThisObject:aLightObject):aLightObject;
   Entities_CanReceive(X:number, Y:number, Object:aFullObject):number;
   Entities_MoveToNewParent(ForThisObject:aFullObject, newParent:aLightObject):boolean;
   Entities_Selected(:aUIAgent, SelectedRank:number):number;
}
declare class FancyGOLDAgentPopupAgent extends aMenuItemControlAgent {
   HelpOn: string ;
   Separator: string ;
   WhereDefined: string ;
   WhereUsed: string ;
}
declare module wDllEPSuggester {
   function GetPEFormat(File:number, PEFormat:string):boolean;
   function ReadDosHeader(File:number, DosHeader:string):boolean;
   function ReadImageFileHeader(File:number, ImageFileHeader:string):boolean;
   function CheckSignature(ImageFileHeader:string):boolean;
   function ReadImageOptionalHeader(File:number, ImageOptionalHeader:string, HeaderSize:number):boolean;
   function ReadImageOptionalHeader64(File:number, ImageOptionalHeader64:string, HeaderSize:number):boolean;
   function ReadSectionHeader(File:number, SectionHeader:string):boolean;
   function ReadExportDir(File:number, ExportDir:string):boolean;
   function ArrayIsLikeString(Left:string, Right:string):boolean;
   function GetOffsetInSection(SectionHeader:string, Address:number):number;
   function ReadNameAddresses(File:number, Addr:number, Size:number, SectionHeader:string, NameAddresses:aListOfInstances):boolean;
   function ReadCString(File:number, Addr:number):string;
   function ParseExports(File:number, Addr:number, Size:number, SectionHeader:string, ListToFill:aListOfInstances, BeginWith:string):boolean;
   function ParseDLL(FileName:string, ListToFill:aListOfInstances, BeginWith:string):boolean;
   function GetModuleFileName(HModule:string, FileName:string, Size:number):number;
   function GetModuleFileNameFromName(ModuleName:string):string;
   function GetList(DllName:string, ListToFill:aListOfInstances, BeginWith:string);
}
declare module wFancyGold {
   var LastButtonUpTime: string ;
}
declare class aEntityFromNameHashTable extends aObjectFromExtractHashTable {
   Init();
}
declare class aEntityFromTextHashTable extends aObjectFromExtractHashTable {
   Init();
}
declare class SudokuCalculatorAgent extends aUIAgent {
   GridCtrl: string ;
   Reset: string ;
   Compute: string ;
   RealtimeComputing: string ;
   OnlyShowPossibleValue: string ;
   NoRefresh: string ;
   LoadFromText: string ;
   NotifyInit();
   NotifyStoreToVar();
}
declare class tSudokuCell001Agent extends aUIAgent {
   EntryField: string ;
   ChangedByUser: string ;
   LoadValue();
   EntryField_GetChar(:aUIAgent, Ch:number, VKey:string, theCount:number, Flags:string):number;
   EntryField_Changed(:aUIAgent):number;
   NotifyInit();
   EntryField_LoseFocus(:aUIAgent):number;
}
declare class aSudokuCalculator extends aFullObject {
   Sudoku: string ;
   RealtimeComputing: string ;
   OnlyShowPossibleValue: string ;
   NoRefresh: string ;
   ComputeUntilStabilisation(CalculateSimpleValue:boolean);
   NbPotentialValues(PotentialValue:string):number;
   FirstValue(PotentialValue:string):string;
   LastValue(PotentialValue:string):string;
   Reinit();
   Reset();
   ResetComputing();
   CellValue(Col:number, Row:number):number;
   RemoveValueInRow(Col:number, Row:number, Value:number);
   RemoveValueInCol(Col:number, Row:number, Value:number);
   RemoveValueInBlock(Col:number, Row:number, Value:number);
   ComputePotentialValues();
   UIRefresh();
   Refresh();
   CalculateCells();
   CalculateUniqueValueInRow(Col:number, Row:number);
   CalculateUniqueValueInCol(Col:number, Row:number);
   CalculateUniqueValueInBlock(Col:number, Row:number);
   RemoveDoubletInRow(Col:number, Row:number);
   RemoveDoubletInCol(Col:number, Row:number);
   RemoveDoubletInBlock(Col:number, Row:number);
   Daniel();
   Calculate();
   IsFinished():boolean;
   IsConsistent():boolean;
   CalculateUntilStabilisation();
   SpeculateCells();
   Choose();
   Compute(Refresh:boolean);
   RefreshCompute();
   Init();
   LoadFromText(Txt:string);
}
declare class LeftAPsAgent extends LeftMaskAgent {
   DeletedAPs: string ;
   FromChangedAPs: string ;
}
declare class RightApsAgent extends RightMaskAgent {
   ToChangedAPs: string ;
   AddedAPs: string ;
}
declare class aCandidateCategoryExtended001Agent extends aUIAgent {
   Candidates: string ;
}
/**
*This classe is used in Bundle preparer.
It display the list of candidates with a multi selection ListCtrl.

*/
declare class aCandidateCategoryExtended extends aCandidateCategory {
}
declare class WReParserPickContainerAgent extends aUIAgent {
   ContainerCatalog: string ;
   aWAMContainerCatalogNewLookDocked: string ;
   NotifyInit();
}
declare class aDBDefDocProducer extends aEntityDocProducer {
   Init();
   WriteHTMLFooter();
   WriteDBDefInfoMain();
   WriteDBDefInfoComment();
   WriteDBDefInfoContext();
   WriteMappedClassDefList();
   WriteTableList();
   WriteDBDefInfo();
   Produce(where:aDocProducedText, options:aHTMLDocProducingApplication);
   asHREF();
   ProduceIndex(ListIndex:aDocProducedText, Context:aHTMLDocProducingApplication);
   KindOfEntity();
}
declare class aDBEntityDocProducer extends aEntityDocProducer {
}
declare class aODBCDBDefDocProducer extends aDBDefDocProducer {
   WriteDBDefInfoTableSpecific();
   WriteDBDefInfoDatabaseSpecific();
   WriteDBDefInfoMain();
   WriteDBDefInfo();
   WriteMappedClassDefList();
   WriteTableList();
   KindOfEntity();
}
declare class aSqlClassDefRepresentationDocProducer extends aDBEntityDocProducer {
   FindBundle(ForClass:aClassDef, BundleName:string, DeliveryName:string, SearchInstalled:boolean);
   ColCount(ColSet:aSqlColumnSetDesc):number;
   BuildNSID(curClass:aClassDef, curDBDef:aDBDef):number;
   FindParentSqlTableDesc(curClassDef:aClassDef, curDBDef:aDBDef, parentTable:aSqlTableDesc, parentClassDef:aClassDef);
   ProduceWithNSID(where:aDocProducedText, options:aHTMLDocProducingApplication, curDBDef:aDBDef);
}
declare class aSqlColumnDescDocProducer extends aSqlDescDocProducer {
   ProduceInTable();
}
declare class aSqlColumnSetDescDocProducer extends aSqlDescDocProducer {
   ProduceInTable();
}
declare class aSqlDescDocProducer extends aDBEntityDocProducer {
   ProduceInTable(where:aDocProducedText, options:aHTMLDocProducingApplication, columnNumber:number);
}
declare class aSqlRecordDescDocProducer extends aSqlColumnSetDescDocProducer {
}
declare class aSqlRefToColumnSetDescDocProducer extends aSqlRecordDescDocProducer {
   ProduceInTable();
}
declare class aSqlListOfColumnSetDescDocProducer extends aSqlRecordDescDocProducer {
   ProduceInTable();
}
declare class aSQLServerDBDefDocProducer extends aODBCDBDefDocProducer {
   WriteDBDefInfoDatabaseSpecific();
   KindOfEntity();
}
declare class aSqlTableDescDocProducer extends aSqlColumnSetDescDocProducer {
   Produce(where:aDocProducedText, options:aHTMLDocProducingApplication);
}
declare class aRenamingSqlDBDefDocProducer extends aODBCDBDefDocProducer {
   WriteDBDefInfoDatabaseSpecific();
   KindOfEntity();
}
declare class aOverrideInstanceVarDescDocProducer extends aVarDescDocProducer {
   WriteMyText();
   WriteComment();
}
declare class aOverrideMethodDescDocProducer extends aMethodDescDocProducer {
   WriteMyText();
   WriteComment();
}
declare class aDataBaseDesignerCompareAgent extends aUIAgent {
   ComboBox: string ;
   StaticText: string ;
   CompareDatabases: string ;
   StaticText001: string ;
   StaticText002: string ;
   StaticText003: string ;
   ComboBox_Init():number;
   ComboBox_Selected(SelectedRank:number):number;
   ComboBox_ValueLoaded();
}
declare class aDataBaseDesignerToolBarAgent extends aUIAgent {
   DefaultTableKind: string ;
   DefaultTableKindStaticText: string ;
   DefaultClassesMonoVersionned: string ;
   AutomaticMapping: string ;
}
declare class aDataBaseDesignerVirtPartAndCommentAgent extends aSplitViewAgent {
   LoadFromVar();
}
declare class aDataBaseDesignerNonVirtForVirtPartAgent extends aUIAgent {
   virtualPartofDesigner: string ;
}
declare class aDataBaseDesignerAppRootVirtualAgent extends aUIAgent {
}
declare class aDataBaseDesignerFullObjectRootVirtualAgent extends aUIAgent {
}
declare class aDataBaseDesignerExpImpXMLAgent extends aUIAgent {
}
declare class aSql128BitEncrytionBroker extends aSqlEncryptionBroker {
   KEYASBIN: string ;
   KEYASINT: string ;
   MaxCryptedSizeFor();
   GetMeTheHexEquivalentOfThisBin(pHex:string):string;
   GetMeTheBinEquivalentOfThisHex(pHex:string):string;
   RotateRight(pstring:string):string;
   RotateLeft(pstring:string):string;
   XORStrings(pstring1:string, pstring2:string):string;
   InitKey();
   EncryptUsing128BitEncryption(pPassword:string):string;
   DecryptUsing128BitEncryption(pPassword:string):string;
   EncryptBigString(ToEncrypt:string, Encrypted:string, MaxLen:number);
   EncryptBin(ToEncrypt:string, Encrypted:string, Size:number, Skip:number);
   DecryptBigString(Encrypted:string, Decrypted:string, MaxSize:number);
   DecryptBin(Encrypted:string, Decrypted:string, Size:number, Skip:number);
   Encrypt();
   Decrypt();
}
declare class SqlTypeDataForaSqlTypeDataWithEncryptionAgent extends aUIAgent {
   EncryptionBrokerClassDef: string ;
   EncryptionBrokerClassDefStaticText: string ;
   EncryptionBrokerData: string ;
   EncryptionBrokerDataStaticText: string ;
}
declare class aSqlTypeDataWithEncryption extends aSqlTypeData {
   EncryptionBrokerClassDef: string ;
   EncryptionBrokerData: string ;
   CloneYourSelfInNewDBDef();
   GetEncryptionBrokerClassId();
   GetEncryptionBrokerData();
   SetEncryption();
}
declare class aSqlTypeDataForNumberWithEncryptionAgent extends aSqlTypeDataForNumber001Agent {
   EncryptionBrokerClassDef: string ;
   EncryptionBrokerClassDefStaticText: string ;
   EncryptionBrokerData: string ;
   EncryptionBrokerDataStaticText: string ;
}
declare class aSqlTypeDataForNumberWithEncryption extends aSqlTypeDataForNumber {
   EncryptionBrokerClassDef: string ;
   EncryptionBrokerData: string ;
   CloneYourSelfInNewDBDef();
   GetEncryptionBrokerClassId();
   GetEncryptionBrokerData();
   SetEncryption();
}
declare class aSqlTypeDataWithPrecisionWithEncryptionAgent extends aSqlTypeDataWithPrecision001Agent {
   EncryptionBrokerClassDef: string ;
   EncryptionBrokerClassDefStaticText: string ;
   EncryptionBrokerData: string ;
   EncryptionBrokerDataStaticText: string ;
}
declare class aSqlTypeDataWithPrecisionWithEncryption extends aSqlTypeDataWithPrecision {
   EncryptionBrokerClassDef: string ;
   EncryptionBrokerData: string ;
   CloneYourSelfInNewDBDef();
   GetEncryptionBrokerClassId();
   GetEncryptionBrokerData();
   SetEncryption();
}
/**
*This class is used to change a MonoVersionned mapping to a Versionned Mapping.
- Have to change the MainTable : add IsCurVers column and set existing to value  = 1
- Have to change ListOf : add column LOVERSION 

UPDATE <LISTOFTABLE> SET LOVERSION = SELECT <MAINTABLE>.VERSION from <MAINTABLE> where <MAINTABLE>.NSID = <LISTOFTABLE>.NSID and <MAINTABLE>.ID = <LISTOFTABLE>.ID 

*/
declare class aSqlDBChangeToVersionedProcessor extends aSqlDBMappingProcessor {
   DDL: string ;
   GenerateAddColumnDDL(table:aSqlTableDesc, newColDesc:aSqlColumnDesc);
   NewVersionOf(thisObject:aFullObject);
   ProcessClassInfo();
   ProcessListOf();
   ProcessClassTable();
   ProcessRefTo();
   ProcessClassRepresentation();
}
declare class aSqlDBMappingProcessor extends aLightObject {
   ProjectsInT: string ;
   ProcessSingleRole(colSet:aSqlColumnSetDesc, referenceType:aReferenceType, roleType:aSingleRoleType);
   ProcessRole(colSet:aSqlColumnSetDesc, referenceType:aReferenceType, roleType:aRoleType);
   ProcessReferenceType(colSet:aSqlColumnSetDesc);
   ProcessRefTo(RefToSet:aSqlRefToColumnSetDesc);
   ProcessListOf(ListOfSet:aSqlListOfColumnSetDesc);
   ProcessClassInfo(classInfoSet:aSqlClassInfoColumnSetDesc);
   ProcessColumn(Column:aSqlColumnDesc);
   ProcessColumnSet(SqlColumnSet:aSqlColumnSetDesc);
   ProcessClassTable(Table:aSqlTableDesc);
   ProcessClassRepresentation(SQLRepresentation:aSqlClassDefRepresentation);
   ProcessDefaultTableDesc(curTable:aSqlTableDesc);
   ProcessDBDef(DBDef:aODBCDBDef);
}
declare class aSqlDBMonoVersionedToVersionedImpactProcessor extends aSqlDBMappingProcessor {
   ImpactedClassRep: string ;
   DBDef: string ;
   Flag: string ;
   TestOnSelected: string ;
   ProcessClassRepresentation();
   ExProcessClassRepresentation(SQLRepresentation:aSqlClassDefRepresentation, fromReftoAcceptDescendant:boolean);
   ProcessSingleRole();
   Init();
   Terminate();
   TestIt();
}
declare class aDBComparer extends aLightObject {
   DefaultDBMgr: string ;
   OldDefaultDBMgr: string ;
   OldContext: string ;
   DBDesigner: string ;
   Log(Comment:string);
   LogText(Comment:string);
   CountAllInstancesOfClassDef(fromClassdef:aClassDef, counter:number);
   CheckConsistencySqlMappingFromTGVInstances(thisClassDef:aClassDef, TheDBDef:aODBCDBDef);
   OpenDBDef(DB:aDBDef):boolean;
   CloseDBDef(DB:aDBDef);
   CompareClassVars(DBDef1:aDBDef, DBDef2:aDBDef, Name:string, Entity1:aFullObject, VarType1:aType, Address1:string, Entity2:aFullObject, VarType2:aType, Address2:string, Comment:string):boolean;
   IsVarToBeSkipped(curEntity:aFullObject, theVarLink:string):boolean;
   CompareClassReps(DBDef1:aDBDef, DBDef2:aDBDef, ClassRep1:aDBClassDefRepresentation, ClassRep2:aDBClassDefRepresentation, Log:string):boolean;
   WriteOutSummary(DBDef1:aDBDef, ClassRep1:aDBClassDefRepresentation);
   CompareDBDefs(DBDef1:aDBDef, DBDef2:aDBDef, AlreadyCompared:aStringHashTable, IgnoreMonoVersioning:boolean);
   RunDBCompare(TheDBDef1:aODBCDBDef, TheDBDef2:aODBCDBDef, IgnoreMonoVersioning:boolean);
   CompareTGVDatabaseToSQLDatabaseMapping(TGVDB:aTGVDBDef, SQLDB:aODBCDBDef);
   CompareTwoDatabases(DB1:aDBDef, DB2:aDBDef, DBDesigner:aEntity, IgnoreMonoVersioning:boolean);
}
declare class aSqlEncryptionBrokerRole extends aSingleRoleType {
   pickInMemOnly();
}
declare class aSqlEncryptionBrokerDataRole extends aSingleRoleType {
   pickInMemOnly();
   NewAcceptedInstance();
   AuthorizeAction();
}
declare class aOracleDBDefSpecificAgent extends aUIAgent {
   EncryptionBrokerClassDef: string ;
   EncryptionBrokerClassDefStaticText: string ;
}
declare class FolderForODBCDBDefForaOracleDBDefAgent extends aFolderViewAgent {
}
declare class aODBCDBDefoverridingTopOKCancelForaSQLServerDBDefAgent extends aUIAgent {
}
declare class aLocalRefDevHistoryPresentor001Agent extends aUIAgent {
   History: string ;
   MinDate: string ;
   d001: string ;
   mm: string ;
   mmStaticText: string ;
   MinDate001: string ;
   MaxDate: string ;
   d002: string ;
   dStaticText: string ;
   MaxDate001: string ;
   ComboBoxEntry: string ;
   SearchHistory: string ;
   DoSearch001: string ;
   actionSearch: string ;
   CompareSelectedVersions: string ;
   mm001: string ;
   ShowIntermediateVersions: string ;
   ActionGenerateXMLDiffReport: string ;
   OnlyMyModifications: string ;
   EntityViewerDT: string ;
   MMViewerButtonsButtonsBase: string ;
   Init();
   Terminate();
   ComboBoxEntry_Selected(SelectedRank:number):number;
   ComboBoxEntry_Changed():number;
   ComboBoxEntry_LoseFocus(:aUIAgent):number;
   ComboBoxEntry_Executed(SelectedRank:number, Option:number):number;
   actionSearch_Executed(:aUIAgent, SelectedRank:number, Option:number):number;
   History_Selected(:aUIAgent, SelectedRank:number):number;
}
declare class aLocalDevHistoryPresentor extends aEntity {
   SearchScope: string ;
   HistoryResult: string ;
   MinDate: string ;
   MaxDate: string ;
   MaxHistoryPerClass: string ;
   Criterium: string ;
   ShowIntermediateVersions: string ;
   OnlyMyEntities: string ;
   Init();
   AppendCandidateId(curFullId:string);
   AppendCandidate(curEntity:aEntity);
   Terminate();
   MeetsNameCriteria(thisString:string, strLikeCrit:string):boolean;
   InitCandidateFromListIterator(it:aListIterator, candidateFullIds:aListOfInstances, minDateInt:number, maxDateInt:number);
   InitCandidatesFromLocalConfig(candidateFullIds:aListOfInstances, minDateInt:number, maxDateInt:number);
   InitCandidatesFromSearchScope(candidateFullIds:aListOfInstances, minDateInt:number, maxDateInt:number);
   BuildStrLikeCriteria():string;
   ActionSearchHistory();
   GenerateXMLDiffNode(inNode:aXMLNamedNode);
   GenerateXMLDiff();
   CompareSelectedVersions();
   RunFromVersionAnalyserExtension();
   GenerateXMLDiffReport(xmlFile:aXMLFile);
   ActionGenerateXMLDiffReport();
}
declare class aXMLDocTypeNode extends aXMLNode {
   Name: string ;
   ExternalId: string ;
   WriteInText();
   StringExtract();
   WriteInFile();
}
declare class aGoldHashRoot extends aLightObject {
}
declare class aGoldHashTable extends aGoldHashRoot {
   pArray: string ;
   Size: string ;
   Count: string ;
   AutoResize: string ;
   NewElement():string;
   InitElement(pItemIn:string, pElement:string);
   Allocate(pItemIn:string):string;
   AllocateFromKey(pKey:string, pItemIn:string):string;
   Free(pElement:string);
   pItemInFromItemOut(pItemOut:string):string;
   pItemOutFromElement(pElement:string):string;
   pKeyFromItemIn(pItemIn:string):string;
   ReleaseKey(pKey:string);
   Code(pKey:string):number;
   Compare(pFirstKey:string, pSecondKey:string):boolean;
   pKeyFromElement(pElement:string):string;
   Rank(pKey:string):number;
   ppFirstElement(pKey:string):string;
   ReleaseElementKey(pKey:string);
   CompareElementKey(pKey:string, pElement:string):boolean;
   ppNextElement(pKey:string, ppElement:string);
   ppElementWithFirst(pKey:string, ppFirstElement:string):string;
   ppElement(pKey:string):string;
   AllocateArray();
   MinSize():number;
   DefaultAutoResize():boolean;
   Init();
   Terminate();
   ppFirstElementFromElement(pElement:string):string;
   UpdateElement(pElement:string);
   SetSize(Size:number);
   InitArray();
   AppendFromKey(pKey:string, pItemIn:string):string;
   FindFromKey(pKey:string):string;
   FindOrAppendFromKey(pKey:string, pItemIn:string):string;
   FindOrAppendElement(pItemIn:string):string;
   FindOrAppend(pItemIn:string):string;
   Append(pItemIn:string);
   Exists(pKey:string):boolean;
   Find(pKey:string):string;
   AppendInexisting(pItemIn:string);
   RemoveElement(pElement:string);
   Remove(pKey:string):boolean;
   CodeString(pValue:string):number;
   UpcaseCodeString(pValue:string):number;
   CompareString(pFirst:string, pSecond:string):boolean;
   UpcaseCompareString(pFirst:string, pSecond:string):boolean;
   AppendIfNew(pItemIn:string):boolean;
   NewIterator():aGoldHashTableIterator;
   Iterate(Action:aGoldHashTableAction);
   IterateDefault();
   DefaultAction(pItemOut:string);
   FillList(List:aListOfInstances);
   AppendToList(List:aListOfInstances, pItemOut:string);
}
declare class aGoldHashTableAction extends aGoldHashRoot {
   ProcessItemOut(pItemOut:string);
   ProcessElement(pElement:string);
   ProcessIterator(Iterator:aGoldHashTableIterator);
   ProcessHashTable(HashTable:aGoldHashTable);
}
declare class aGoldHashTableDefaultAction extends aGoldHashTableAction {
   HashTable: string ;
   ProcessItemOut();
}
declare class aGoldHashTableFillList extends aGoldHashTableAction {
   HashTable: string ;
   List: string ;
   ProcessItemOut();
}
declare class aGoldHashTableIterator extends aGoldHashRoot {
   HashTable: string ;
   Rank: string ;
   pElement: string ;
   Reset();
   InitOn(Hash:aGoldHashTable);
   MoveNext():boolean;
   MoveNextAndGetElement(pElement:string):boolean;
   MoveNextAndGetItemOut(pItemOut:string):boolean;
   IterateElements(Action:aGoldHashTableAction);
   IterateItems(Action:aGoldHashTableAction);
}
declare class aRaiseErrorException extends aSystemException {
   Seriousness: string ;
}
declare class RenamingSQLDBDefFileUserPWAgent extends aUIAgent {
}
declare class ClassDefPickerTreeFirstAgent extends aFolderViewAgent {
}
declare class aSynchronizeGaugeAgent extends aUIAgent {
   bSynchronizeAuto: string ;
   Laps: string ;
   Laps001: string ;
   Percent: string ;
   theString: string ;
   NotifyInit();
}
/**
*;Class called from WIDEDLL CPP code.
;Do not change the name.
*/
declare class aSynchronizeGauge extends aGauge {
   bSynchronizeAuto: string ;
   theString: string ;
   theBooleanUIAgent: string ;
   UpdateBoolSynchroAuto();
   Init();
}
declare class LocalDevHistoryPresentorMainForMDIAgent extends aOpenWhereClosedUIAgent {
}
declare class MMViewerButtonsButtonsBaseAgent extends aUIAgent {
   ConsultSelectedEntity: string ;
   ModifySelectedEntity: string ;
   CheckOutSelectedEntity: string ;
   CheckInSelectedEntity: string ;
   SyncSelectedEntity: string ;
   DeliverSelectedEntity: string ;
   SelectClassInTree: string ;
   SearchInContainers: string ;
   SearchInBundles: string ;
   LoadValue();
}
declare class ClassScenarioMainAgent extends aUIAgent {
   ScenarioToCloneStaticText: string ;
   ClassDefToChange: string ;
   ClassDefToChangeStaticText: string ;
   ScenarioToClone001: string ;
   UserWantReport: string ;
}
declare class ScenarioClonerTestFromExtAgent extends aUIAgent {
   ClassDefToChange: string ;
   ClassDefToChangeStaticText: string ;
   ScenarioToClone: string ;
   ScenarioToCloneStaticText: string ;
   ClonedScenario: string ;
   ClonedScenarioStaticText: string ;
   MakeClone: string ;
}
declare class ScenarioClonerDebugOnlyAgent extends aUIAgent {
   SearchScenarioWithRefOwner: string ;
}
declare class ClassScenarioClonerOnlyReportAgent extends aUIAgent {
   Comment: string ;
   ActionClose001: string ;
   MainErrorMessage: string ;
}
declare class aClassScenarioCloner extends aFullObject {
   ClassDefToChange: string ;
   ScenarioToClone: string ;
   ClonedScenario: string ;
   UserWantReport: string ;
   MainErrorMessage: string ;
   Comment: string ;
   NbErrors: string ;
   CloneScenario(TheScenario:aScenario):aScenario;
   CloneQVP(inCloneScenario:aScenario, TheQVP:aQVarPresentor):aQVarPresentor;
   AppendComment(msg:string);
   AppendError(msg:string);
   CanCloneScenario(thisScenario:aScenario, msg:string):boolean;
   ResetComments();
   ShowReportIfAsked();
   MakeClone();
   PropagateSearchScenarioWithRefOwner(theClass:aClassDef);
   SearchScenarioWithRefOwner();
   IsScenarioNameAlreadyUsed(scenarioName:string):boolean;
   MakeBestNameForNewScenario(originalScenario:aScenario, clonedScenario:aScenario);
   GetCorrespondingQVPOfAgentVar(TheScenario:aScenario, thisVar:aIdentifierDesc):aQVarPresentor;
   UIRunFromSelectedScenario(theScenario:aScenario);
   IsAnEvent(curIdentifier:aIdentifierDesc):boolean;
   AddVarInUIAgentClass(uiAgentClassDef:aClassDef, thisOriginalIdentifier:aIdentifierDesc);
   AddMethodSignatureInUIAgentClass(uiAgentClassDef:aClassDef, thisOriginalIdentifier:aMethodDesc, implemsToProduce:aListOfInstances);
   ProduceMethodImplemInUIAgentClass(uiAgentClassDef:aClassDef, thisOriginalIdentifier:aMethodDesc);
}
declare class aClassScenarioClonerTargetClassRoleType extends aSingleRoleType {
   AuthorizeAction();
   SearchAndPick();
}
declare class aReimplemManagerRole extends aTransientModuleListRole {
   AskForActions(ActionsDescriptionList:aListOfInstances, atX:number, atY:number, FromThisObject:aReimplemManager, fromThisUIAgent:aUIAgent, PtrTo_FromThisVar:string):number;
   CreateNewInstance(FromThisObject:aReimplemManager):aFullObject;
   canBreakLinkBetween(FromThisObject:aReimplemManager, toThisObject:aFullObject, fromThisVar:string):boolean;
   Accepts(FromThisObject:aReimplemManager, toThisObject:aFullObject):boolean;
}
declare class ReimplemMgrMDIAgent extends aOpenWhereClosedUIAgent {
   Reimplems: string ;
   ReimplemMgrActionsPrefixBar: string ;
   Reimplems_Selected(SelectedRank:number):number;
}
declare class ReimplemMgrGenericToolBarWithDockingAgent extends aToolBarUIAgent {
   ActionClose001: string ;
}
declare class ReimplemMgrMDIDockedAgent extends aUIAgent {
   Reimplems: string ;
   ReimplemMgrActionsPrefixBar: string ;
   Reimplems_Selected(SelectedRank:number):number;
}
declare class ReimplemMgrActionsPrefixBarAgent extends aToolBarUIAgent {
   DeleteSelectedReimplem: string ;
   CreateReimplem: string ;
}
declare class aReimplemManager extends aEntity {
   Reimplementing: string ;
   Reimplems: string ;
   AuthorisedReimplemKind: string ;
   SelectedReimplem: string ;
   StringExtract();
   IdNameSpaceId();
   UIConsult();
   UIModify();
   BuildListOfReimplems();
   InitAfterLoad();
   CreateNewReimplem():aModuleDef;
   CreateReimplem();
   DeleteSelectedReimplem();
}
declare class XMLCStringNodeAgent extends XMLNodeAgent {
   Value: string ;
   ValueStaticText: string ;
}
declare class XMLNamedNodeBaseForaXMLNamedCStringNodeAgent extends XMLNamedNodeBaseAgent {
   Value: string ;
   ValueStaticText: string ;
}
declare class XMLNamedNodeBaseForaXMLNamedIntNodeAgent extends XMLNamedNodeBaseAgent {
   Value: string ;
   ValueStaticText: string ;
}
declare class XMLNamedNodeBaseAgent extends aUIAgent {
   GetName: string ;
   StaticText: string ;
}
declare class XMLNamedNodeBaseForaXMLNamedTextNodeAgent extends XMLNamedNodeBaseAgent {
   Value: string ;
   ValueStaticText: string ;
   CData: string ;
}
declare class XMLNodeForaXMLTextNodeAgent extends XMLNodeAgent {
   Value: string ;
   ValueStaticText: string ;
   CData: string ;
}
declare class XMLCommentNodeAgent extends aUIAgent {
   Comment: string ;
   CommentStaticText: string ;
}
declare class XMLNodeForaXMLDocTypeNodeAgent extends XMLNodeAgent {
   Name: string ;
   NameStaticText: string ;
   ExternalId: string ;
   ExternalIdStaticText: string ;
}
declare class MethodIntrospector_InputParametersAgent extends aUIAgent {
   VarAsTreeBox: string ;
}
declare class aMethodIntrospector extends aVarIntrospector {
   ParemetersToDisplay: string ;
   Init();
   GetParameterAddress(varDesc:aParameterDesc):string;
   CanParameterBeDisplayed(thisParameter:aParameterDesc):boolean;
   CreateTreeForType();
}
declare class aSequenceIntrospector extends aArrayIntrospector {
   CreateTreeForType();
   UpdateTreeForType();
}
declare module wXAML {
   function GetMFCScenarioHostClassName():string;
   function GetXAMLScenarioHostClassName():string;
   function GetScenarioHostKeyword():string;
   function GetWydeXMLNamespaceName():string;
   function GetWydeXMLNamespacePrefix():string;
   function GetMultiLangTextKeyword():string;
   function GetAttributeBindingKeyword():string;
   function GetEventDescPropertyKeyword():string;
   function GetEventDescPropertyName():string;
   function GetEventsDescKeyword():string;
   function GetEventsDescClassName():string;
   function GetEventDescKeyword():string;
   function GetImageSourceKeyword():string;
   function GetEventDescClassName():string;
   function GetFullNamePrefix(fullName:string):string;
   function GetFullNamePrefixAndName(fullName:string, prefix:string, name:string);
   function ComputeXTVBWithScenScore(leftItem:aXAMLTemplateItem, rigthItem:aXAMLTemplateItem):string;
   function ComputeXTMLTextScore(leftItem:aXAMLTemplateItem, rigthItem:aXAMLTemplateItem):string;
}
declare class qvpListAgent extends aUIAgent {
   SubComponents: string ;
   SubComponentsStaticText: string ;
   boundAttributeQVPs: string ;
   boundAttributeQVPsStaticText: string ;
   AddScenarioQVP001: string ;
   RemoveScenarioQVP001: string ;
   AddBoundAttributeQVP001: string ;
   RemoveBoundAttributeQVP001: string ;
   InternalAddVarsToCandidates(forType:aType, picker:aInListPicker, parentCandidateIndex:number, selfVarDesc:aVarDesc, withAgentVars:boolean, withAncestors:boolean, filter:aVariablePickerCandidateFilterPredicate, isForTheType:string):number;
   AddVarsToCandidates(forType:aType, picker:aInListPicker, parentCandidateIndex:number, selfVarDesc:aVarDesc, withAgentVars:boolean, withAncestors:boolean, filter:aVariablePickerCandidateFilterPredicate):number;
   PickQVPVariable(selfVarDesc:aVarDesc, isForTheType:string, filter:aVariablePickerCandidateFilterPredicate):aVarDesc;
   AddScenariosToCandidates(forType:aType, picker:aInListPicker, parentCandidateIndex:number, withTypeScens:boolean, withAncestors:boolean):number;
   PickQVPScenario(forType:aType):aScenario;
   AddScenarioQVP();
   RemoveScenarioQVP();
   AddBoundAttributeQVP();
   RemoveBoundAttributeQVP();
}
declare class templateXAMLAgent extends aUIAgent {
   parseStatusString: string ;
   parseErrorMessage: string ;
   parseErrorLine: string ;
   parseErrorPosition: string ;
   currentXAMLText: string ;
   ParseWithWarning001: string ;
   RegenerateWithWarning001: string ;
   parseStatusString001: string ;
   parseStatusStringStaticText: string ;
   ProduceTextFromTemplate();
   ParseText():boolean;
   NotifyInit();
   name_ValueStored();
   RegenerateWithWarning();
   ParseWithWarning();
   currentXAMLText_Changed():number;
   Kill();
}
declare class itemListAgent extends aUIAgent {
   items: string ;
   itemsStaticText: string ;
   items001: string ;
   ItemForSidePanel: string ;
   oldRank: string ;
   Init();
   items_ButtonUp(No:number, X:number, Y:number):number;
}
declare class templateFolderAgent extends aFolderViewAgent {
}
declare class templateAndQVPsAgent extends aUIAgent {
   templateFolder: string ;
   qvpList: string ;
}
declare class topLevelTabsAgent extends aFolderViewAgent {
}
declare class okCancelAgent extends aUIAgent {
   ActionValid001: string ;
   ActionCancel001: string ;
}
declare class tabsAndButtonsAgent extends aUIAgent {
   topLevelTabs: string ;
   OkCancelTry: string ;
   myCodeAndDefOrImplem: string ;
}
declare class aXAMLTemplateScen_G extends aXAMLTemplateScen {
   currentXAMLText: string ;
   xamlTextChanged: string ;
   xamlParseStatus: string ;
   nodeParser: string ;
   parsedItems: string ;
   AddScenarioQVPToList(qvp:aQVarPresentor);
   RemoveScenarioQVPFromList(qvp:aQVarPresentor);
   AddBoundAttributeQVPToList(qvp:aQVarPresentor);
   RemoveBoundAttributeQVPFromList(qvp:aQVarPresentor);
   GetNodeParser():aXAMLNodeParser;
   CommitFragment(fragmentText:string, tabLevel:number);
   WriteTabs(inText:string, tabLevel:number);
   IsWydeExtAttribute(attrib:aXMLAttrib):boolean;
   GenerateInternal(curNode:aXMLNode, curFragmentText:string, tabLevel:number, parseErrorMessage:string):boolean;
   FindMatchesInLists(leftList:aListOfInstances, rightList:aListOfInstances, scoringFunctionPtr:string, leftToRightMap:aDataByObjectHashTable, rightToLeftMap:aDataByObjectHashTable);
   ApplyParseResults();
   PostParseEvents(eventsDesc:aXTComponentEventsDesc, parseErrorMessage:string):boolean;
   PostParse(parseErrorMessage:string):boolean;
   GenerateFromNode(rootNode:aXMLNamedNode, parseErrorMessage:string):boolean;
   ParseText();
   ProduceTempXAML();
   CleanUpTemporaries();
   BeforeAccept();
   InitAfterNewVersion();
   Terminate();
   IsValid();
   NotifyTemplateNameChanged();
   NotifyTextChanged();
}
declare class aXAMLNodeParser extends aLightObject {
   pInput: string ;
   tokenRank: string ;
   inputLen: string ;
   pOutput: string ;
   left: string ;
   right: string ;
   temporaryMethodDescs: string ;
   SmallIdFromCString(value:string):string;
   AppendOtherAttributeText(otherAttributes:aListOfInstances, destText:string, syntax:string);
   CreateAttributeBindingForType(baQVP:aBoundAttributeQVP, otherAttributes:aListOfInstances, syntax:string):aXTVBForAttribute;
   ParseAttributeBinding(node:aXMLNamedNode, forType:aType, forScen:aXAMLTemplateScen, parseErrorMessage:string, syntax:string):aXTVBForAttribute;
   CreateMFCHostFor(theQVP:aQVarPresentor, otherAttributes:aListOfInstances, syntax:string):aXTVBWithScen;
   ParseMFCHost(node:aXMLNamedNode, forType:aType, forScen:aXAMLTemplateScen, parseErrorMessage:string, syntax:string):aXTVBWithScen;
   ParseMLText(node:aXMLNamedNode, parseErrorMessage:string):aXTMLText;
   GetActualType(typ:aType):aType;
   CheckEventHandlerSignature(methType:aMethodType):boolean;
   CheckEventMethods(eventsDesc:aXTComponentEventsDesc, forType:aType, forScen:aXAMLTemplateScen, parseErrorMessage:string):boolean;
   NewTemporaryMethodDesc(name:string):aMethodDesc;
   ParseEventsDesc(node:aXMLNamedNode, forType:aType, forScen:aXAMLTemplateScen, parseErrorMessage:string, syntax:string):aXTComponentEventsDesc;
   ParseImageSource(node:aXMLNamedNode, parseErrorMessage:string):aXTImageSource;
   ParseNode(node:aXMLNamedNode, forType:aType, forScen:aXAMLTemplateScen, parseErrorMessage:string, syntax:string, parseAsText:boolean):aXAMLTemplateItem;
   Character(character:number);
   WhiteSpace();
   Identifier();
   Value();
   IsPositional():boolean;
   FillNodeFromPositionalArgs(parseErrorMessage:string, node:aXMLNamedNode, strings:aListOfInstances):boolean;
   FillNodeFromNameValuePairs(parseErrorMessage:string, node:aXMLNamedNode, strings:aListOfInstances):boolean;
   FillNodeFromExtensionAttributes(attribute:aXMLCStringAttribute, parseErrorMessage:string, node:aXMLNamedNode, strings:aListOfInstances):boolean;
   ParseExtension(attribute:aXMLCStringAttribute, forType:aType, forScen:aXAMLTemplateScen, parseErrorMessage:string, parseAsText:boolean):aXAMLTemplateItem;
   CleanupTemporaries();
}
declare class aQVPXXXAsListCtrl001ForaQVPXXXAsExtendedListCtrlAgent extends aUIAgent {
   ExtendedKinds: string ;
   ZebraDarkColor: string ;
   ZebraDarkColorStaticText: string ;
   ZebraLightColor: string ;
   ZebraLightColorStaticText: string ;
   HeaderBackColor: string ;
   HeaderBackColorStaticText: string ;
   HeaderTextColor: string ;
   HeaderTextColorStaticText: string ;
   CustomRowHeight: string ;
   CustomRowHeightStaticText: string ;
}
declare class aQVPXXXAsExtendedListCtrl extends aQVPXXXAsListCtrl {
   ExtendedKinds: string ;
   ZebraDarkColor: string ;
   ZebraLightColor: string ;
   CustomRowHeight: string ;
   HeaderBackColor: string ;
   HeaderTextColor: string ;
}
declare module wRegexTools {
   var regex: string ;
   function InitRegex(caseSensitive:boolean);
   function StringMatches(inputStr:string, regexStr:string, caseSensitive:boolean):boolean;
   function TextMatches(inputTxt:string, regexStr:string, caseSensitive:boolean):boolean;
   function ReplaceString(_str:string, regexStr:string, caseSensitive:boolean, formatStr:string):boolean;
   function ReplaceText(txt:string, regexStr:string, caseSensitive:boolean, formatStr:string):boolean;
   function FindStringMatch(inputStr:string, regexStr:string, caseSensitive:boolean):number;
   function FindTextMatch(inputTxt:string, regexStr:string, caseSensitive:boolean):number;
   function GetNewRegex(regexStr:string, caseSensitive:boolean, optimize:boolean):aRegex;
}
declare class aVariablePickerCandidateFilterPredicate extends aLightObject {
   qvp: string ;
   passes(varDesc:aVarDesc):boolean;
   GetShortFailExplanation():string;
}
declare class DefaultAgent extends aUIAgent {
   ComboBox: string ;
   ComboBox2: string ;
   targetTypes: string ;
   converters: string ;
   StaticText: string ;
   StaticText001: string ;
   ActionValid001: string ;
   ActionCancel001: string ;
   Name: string ;
   NameStaticText: string ;
   myVar001: string ;
   myVarStaticText: string ;
   parameterList: string ;
   parameterListStaticText: string ;
   CreateParameterList001: string ;
   GetTargetTypeLabel(targetType:string):string;
   GetPresentedType():aType;
   GetPickedConverter():aBoundAttributeConverter;
   UpdateBoundTypeFromChoice();
   UpdateChoiceFromBoundType();
   UpdateBoundTypeList();
   UpdateConverterFromChoice();
   UpdateChoiceFromConverter();
   CreateParameterList();
   NotifyInit();
   ComboBox_Selected(SelectedRank:number):number;
   ComboBox2_Selected(SelectedRank:number):number;
}
declare class aBoundAttributeQVP_G extends aBoundAttributeQVP {
}
declare class aVariablePickerCandidate extends aEntity {
   varDesc: string ;
   isForTheType: string ;
}
declare class aScenarioPickerCandidate extends aEntity {
   scen: string ;
}
declare module wCOM_FIX_WPR1401014010 {
}
declare class FirstPageForODBCDBDefForaSQLServerDBDefAgent extends aUIAgent {
   StaticStmtsKept: string ;
   StaticStmtsKeptStaticText: string ;
}
declare module wWedRPCServer {
   function AllocParametersBuffer(ForThisMethodType:aMethodType, theObject:aLightObject, ForThisUIAgent:aUIAgent, ParametersSize:number, ReturnSize:number):string;
   function FreeParametersBuffer(theBuffer:string, ForThisMethodType:aMethodType, ParametersSize:number);
   function GeneratePreloadFile(FileName:string);
   function ExecuteLine(Line:string);
   function ExecutePreloadFile(FileName:string);
}
declare class aWedRPCServer extends aWedServer {
   EntriesHashTable: string ;
   Init();
   InitServer();
   FindOrCreateEntryFor(ClassName:string, MethodName:string, theInstance:aLightObject):string;
   CallEntry_P(pEntry:string):string;
   CallEntry(pEntry:string):number;
   GetEntryFromRequest(BufferIn:string, BufferInUsedSize:number, theInstance:aLightObject):string;
   FillResponse_P(pEntry:string, CallResult:string, BufferOut:string, BufferOutUsedSize:number);
   FillResponse(pEntry:string, CallResult:number, BufferOut:string, BufferOutUsedSize:number);
   DisposeInstance(theInstance:aLightObject);
   ExecuteRequest();
   Terminate();
}
declare class aWedServer extends aWedServerRoot {
   ServerAlloc: string ;
   ServerRealloc: string ;
   ServerFree: string ;
   GetNbSessions: string ;
   StopServer: string ;
   MotorContextFromRPCContext: string ;
   RPCContext: string ;
   NoConsole: string ;
   pServerAlloc: string ;
   pServerRealloc: string ;
   pServerFree: string ;
   Manages(BufferFormat:string):boolean;
   TerminateServer();
   ExecuteSessionOperation(Buffer:string);
   CurrentRPCContext():number;
   IncSessions();
   DecSessions();
   LicenseName():string;
   RecursGetManagerOnDescendants(thisClassDef:aClassDef, BufferFormat:string):aWedServer;
   TryToExecuteRequestWithoutMotor(BufferIn:string, BufferInUsedSize:number, BufferOut:string, BufferOutUsedSize:number, RequestExecuted:boolean):number;
   GetRPCContextFromRequestBuffer(BufferIn:string, BufferInUsedSize:number):number;
   ExecuteRequest(BufferIn:string, BufferInUsedSize:number, BufferOut:string, BufferOutUsedSize:number, MotorContextBehaviour:string, MotorContextTimeout:number):number;
   WhenTrap(TrapLocationAndStack:string);
   ExecuteAfterRequestResponse():number;
   GetManagerFor(BufferFormat:string):aWedServer;
   TimeoutReach(MotorContextBehaviour:string);
   FillSessionType(Buffer:string, BufferSize:number, BufferPos:string);
   RecursFillSessionTypeOnDescendants(thisClassDef:aClassDef, Buffer:string, BufferSize:number, BufferPos:string);
   FillSessionsInformation(Buffer:string, BufferSize:number, BufferPos:string);
   RecursFillSessionsInformationOnDescendants(thisClassDef:aClassDef, Buffer:string, BufferSize:number, BufferPos:string);
   GetSessionsInformation(BufferOut:string, BufferOutUsedSize:number);
   RecursExecuteOperationOnSession(thisClassDef:aClassDef, Buffer:string);
   InitServer();
   RecursTerminateServerOnDescendants(thisClassDef:aClassDef);
   PutCStringInBuffer(Buffer:string, BufferSize:number, BufferPos:string, Value:string);
   PutInt4InBuffer(Buffer:string, BufferSize:number, BufferPos:string, Value:number);
   PutSessionOperation(Buffer:string, BufferSize:number, BufferPos:string, SessionOperationText:string, SessionOperationType:number, SessionOperationParamName:string, SessionOperationConfirmationText:string);
   PutSessionColumn(Buffer:string, BufferSize:number, BufferPos:string, ColumnTitle:string, ColumnSize:number);
}
declare class aXMLRPCServer extends aWedRPCServer {
   RequestResult: string ;
   NodeDefinitionSeparators: string ;
   NodeSeparators: string ;
   Init();
   InitServer();
   GetEntryFromRequest();
   FillResponse_P();
   FillResponse();
   StringExtract();
   LicenseName();
}
declare class ServerMonitorMainMDIAgent extends aUIAgent {
   inTimer: string ;
   LocalMustReport: string ;
   ServerMonitorToolBar: string ;
   ServerMonitorStatusBar: string ;
   ServerMonitorMainMenu: string ;
   ServerMonitorViewMenu: string ;
   NotifyInit();
   refresh();
   NotifyTimer();
   NotifyCheck();
}
declare class ServerMonitorOnlyReportAgent extends aUIAgent {
   ReportText: string ;
}
declare class ServerMonitorToolBarAgent extends aToolBarUIAgent {
   DisplayReport: string ;
   DisplayErrorsReport: string ;
   DisplayCalls: string ;
   DisplayTransit: string ;
   DisplayActivity: string ;
   DisplayMotors: string ;
   DisplayMemory: string ;
}
declare class ServerMonitorStatusBarAgent extends aToolBarUIAgent {
   MustReport: string ;
   Refresh001: string ;
}
declare class ServerMonitorMDIChildModelAgent extends aUIAgent {
   ServerMonitorMainMenu: string ;
   ServerMonitorViewMenu: string ;
}
declare class ServerMonitorOnlyErrorsAgent extends aUIAgent {
   ErrorsText: string ;
   CleanErrorReport: string ;
   ErrorLimit: string ;
   ErrorLimitStaticText: string ;
}
declare class ServerMonitorCallsAgent extends aUIAgent {
   ListCtrl: string ;
   TotalCallNumber: string ;
   TotalCallNumberStaticText: string ;
   InitLinesIfNecessary();
   ListCtrl_Init():number;
   LoadValue();
}
declare class ServerMonitorTraficsAgent extends aUIAgent {
   ListCtrl: string ;
   received: string ;
   receivedStaticText: string ;
   returned: string ;
   returnedStaticText: string ;
   InitLinesIfNecessary();
   ListCtrl_Init():number;
   LoadValue();
}
declare class ServerMonitorActivityGraphAgent extends aUIAgent {
   NotifyPaint();
   LoadValue();
}
declare class ServerMonitorActivityGraphControlAgent extends aSplitViewAgent {
}
declare class ServerMonitorActivityAgent extends ServerMonitorMDIChildModelAgent {
   ServerMonitorActivityGraphControl: string ;
   StaticText: string ;
   StaticText001: string ;
   StaticText002: string ;
   StaticText003: string ;
   NotifyInit();
   NotifyTerminate();
}
declare class ServerMonitorMotorsGraphAgent extends aUIAgent {
   NotifyPaint();
   LoadValue();
}
declare class ServerMonitorMotorsGraphControlAgent extends aSplitViewAgent {
}
declare class ServerMonitorMotorsAgent extends ServerMonitorMDIChildModelAgent {
   ServerMonitorMotorsGraphControl: string ;
   NotifyInit();
   NotifyTerminate();
}
declare class ServerMonitorMainMenuAgent extends aUIAgent {
   MDIWindowMenuItem: string ;
}
declare class ServerMonitorViewMenuAgent extends aUIAgent {
   MenuItem: string ;
   DisplayReport: string ;
   DisplayErrorsReport: string ;
   DisplayCalls: string ;
   DisplayTransit: string ;
   DisplayActivity: string ;
   DisplayMotors: string ;
   Separator: string ;
   Separator001: string ;
}
declare class ServerMonitorMemoryGraphAgent extends aUIAgent {
   NotifyPaint();
   LoadValue();
}
declare class ServerMonitorMemoryGraphControlAgent extends aSplitViewAgent {
}
declare class ServerMonitorMemoryAgent extends ServerMonitorMDIChildModelAgent {
   ServerMonitorMemoryGraphControl: string ;
   MaxMemory: string ;
   MaxMemoryStaticText: string ;
   StaticText: string ;
   StaticText001: string ;
   StaticText002: string ;
   StaticText003: string ;
   NotifyInit();
   NotifyTerminate();
}
declare class aServerMonitor extends aWedServerRoot {
   ReportText: string ;
   ReportTextUpDateCount: string ;
   ErrorsText: string ;
   ErrorsTextUpDateCount: string ;
   Servers: string ;
   tmpNbreThread: string ;
   GlobalServerWorkingTime: string ;
   LastServerWorkingTime: string ;
   received: string ;
   returned: string ;
   nbreThread: string ;
   PicNbreThread: string ;
   TotalCallNumber: string ;
   Thread: string ;
   ErrorLimit: string ;
   nbreWorkingMotorContext: string ;
   ReportCritSection: string ;
   MustReport: string ;
   CallsUpDateCount: string ;
   TraficUpDateCount: string ;
   HashTable: string ;
   ServiceNbr: string ;
   Report(that:string);
/**
*Portability Check: OK
*/
   ListRankFromServer(Server:aWedServer):number;
/**
*Portability Check: OK
*/
   GetpServerInfo(Server:aWedServer):string;
   InitForServer(Server:aWedServer);
/**
*Portability Check: OK
*/
   FindOrAppendService(Server:aWedServer, ServiceName:string, ServiceId:number):number;
   Init();
   Terminate();
   ReportError();
   CleanErrorReport();
   NotifyNewMotorContext();
   NotifyMotorContextTerminated();
   NotifyServiceStarted(Server:aWedServer, ServiceRank:number, InSize:number, ServiceStartTime:number);
   NotifyServiceTerminated(Server:aWedServer, ServiceRank:number, OutSize:number, ServiceStartTime:number);
}
declare class aServerMonitorThread extends aWedThread {
   pInitializing: string ;
   pTerminating: string ;
   Console: string ;
   ThreadBody();
}
declare module wServerMonitor {
   var ServerMonitorThread: string ;
   var Monitor: string ;
   var ConnectedClient: string ;
   function Report(That:string);
   function ReportText(TheText:string);
   function FindOrAppendService(RPCServer:aWedServer, ServiceName:string, ServiceId:number):number;
   function NotifyServiceStarted(RPCServer:aWedServer, Service:number, Received:number, StartTime:number);
   function NotifyServiceTerminated(RPCServer:aWedServer, Service:number, Returned:number, StartTime:number);
   function NotifyNewMotorContext();
   function NotifyMotorContextTerminated();
   function InitForServer(Server:aWedServer);
   function TerminateForProcess();
}
declare class aRPCServerErrorManager extends aErrorManager {
   RTRaiseError();
}
declare class aWedServerRoot extends aLightObject {
}
declare class aTokenizer extends aLightObject {
   TextToTokenize: string ;
   CurrentPositionInText: string ;
   EndText: string ;
   SeparatorsTable: string ;
   LonguestTokenSize: string ;
   Init();
   Terminate();
   ResetTokenizer(InputText:string);
   AddSeparator(Separator:string);
   RemoveSeparator(Separator:string);
   IncCurrentPositionBy(Increment:number);
   MoveBackward(Separator:string);
   GetNextToken(SeparatorFound:string):string;
   GetNextTokenGivenSeparator(GivenSeparator:string, SeparatorWasFound:boolean):string;
   HasMoreTokens():boolean;
}
declare class WedServerAdminConsoleMainMDIAgent extends aUIAgent {
   WedServerAdminConsoleToolBar: string ;
   WedServerAdminConsoleStatusBar: string ;
   MDIWindowMenuItem: string ;
   RefreshingTimerStarted: string ;
   RefreshingRate: string ;
   NotifyInit();
   NotifyTimer();
   NotifyCheck();
   NotifyTerminate();
   RefreshingRateChanged();
   MustRefreshChanged();
}
declare class WedServerAdminConsoleToolBarAgent extends aToolBarUIAgent {
   WedServerAdminConsoleExtensions: string ;
}
declare class WedServerAdminConsoleStatusBarAgent extends aToolBarUIAgent {
   MustRefresh: string ;
   RefreshEvery: string ;
   RefreshEvery001: string ;
   Refresh001: string ;
   MustRefresh_ValueStored(:aUIAgent);
   RefreshEvery_ValueStored(:aUIAgent);
   RefreshEvery001_ValueStored(:aUIAgent);
}
declare class WedServerAdminConsoleExtensionsAgent extends aUIAgent {
   DT001: string ;
   DT002: string ;
   DT003: string ;
   DT004: string ;
   DT005: string ;
   DT006: string ;
   DT007: string ;
   DT008: string ;
   DT009: string ;
   DT010: string ;
   DTs: string ;
   ServerMonitorExtensionShowIt: string ;
   ServerMonitorExtensionShowIt001: string ;
   ServerMonitorExtensionShowIt002: string ;
   ServerMonitorExtensionShowIt003: string ;
   ServerMonitorExtensionShowIt004: string ;
   ServerMonitorExtensionShowIt005: string ;
   ServerMonitorExtensionShowIt006: string ;
   ServerMonitorExtensionShowIt007: string ;
   ServerMonitorExtensionShowIt008: string ;
   ServerMonitorExtensionShowIt009: string ;
   NotifyInit();
   NotifyTerminate();
   LoadValue();
}
declare class aWedServerAdminConsole extends aWedServerRoot {
   Monitor: string ;
   Extensions: string ;
   MDIAgent: string ;
   MustRefresh: string ;
   RefreshEvery: string ;
   ConsoleOnServer: string ;
   NeedClosing: string ;
   RecursAppendExtension(ExtensionClassDef:aClassDef);
   Init();
   Run();
   Refresh();
   RefreshFromTimer();
   DisplayExtension(Extension:aWedServerAdminConsoleExtension, ExtensionScenario:aScenario);
   StringExtract();
   MustRefreshChanged();
   RefreshingRateChanged();
}
declare class WedServerAdminConsoleExtensionAgent extends aUIAgent {
   WedServerAdminConsoleExtensionOver: string ;
   NotifyInit();
   NotifyTerminate();
}
declare class WedServerAdminConsoleExtensionButtonAgent extends ServerMonitorExtensionShowItAgent {
   ShowIt: string ;
   ShowIt_Init(:aUIAgent):number;
}
declare class ServerMonitorExtensionShowItAgent extends aUIAgent {
}
declare class WedServerAdminConsoleExtensionOverAgent extends aUIAgent {
}
declare class aWedServerAdminConsoleExtension extends aWedServerRoot {
   ServerMonitor: string ;
   WedServerAdminConsole: string ;
   MDIChildAgent: string ;
   UpDateCount: string ;
   IsVirtual():boolean;
   MDIChildScenario():aScenario;
   ShowIt();
   ShowItName():string;
   Refresh();
   StringExtract();
}
declare class WSACEReportAgent extends WedServerAdminConsoleExtensionOverAgent {
   ServerMonitor: string ;
   ServerMonitorOnlyReport: string ;
}
declare class aWSACEReport extends aWedServerAdminConsoleExtension {
   StringExtract();
   Refresh();
}
declare class WSACEErrorsAgent extends WedServerAdminConsoleExtensionOverAgent {
   ServerMonitor: string ;
   ServerMonitorOnlyErrors: string ;
}
declare class aWSACEErrors extends aWedServerAdminConsoleExtension {
   StringExtract();
   Refresh();
}
declare class WSACECallsAgent extends WedServerAdminConsoleExtensionOverAgent {
   ServerMonitor: string ;
   ServerMonitorCalls: string ;
}
declare class aWSACECalls extends aWedServerAdminConsoleExtension {
   StringExtract();
   Refresh();
}
declare class WSACETransitAgent extends WedServerAdminConsoleExtensionOverAgent {
   ServerMonitor: string ;
   ServerMonitorTrafics: string ;
}
declare class aWSACETransit extends aWedServerAdminConsoleExtension {
   StringExtract();
   Refresh();
}
declare class aWSACEActivity extends aWSACEStats {
   ProcessHandle: string ;
   ServerActivityStat: string ;
   CPUActivityStat: string ;
   CurServerWorkingTime: string ;
   PrevServerWorkingTime: string ;
   CurCPUWorkingTime: string ;
   PrevCPUWorkingTime: string ;
   StringExtract();
   IsVirtual();
   Init();
   Refresh();
   ValueString();
}
declare class aWSACEMemory extends aWSACEStats {
   ProcessHandle: string ;
   VirtualMemoryStat: string ;
   UsedMemoryStat: string ;
   StringExtract();
   Init();
   Refresh();
   IsVirtual();
   ValueString();
}
declare class aWSACEMotors extends aWSACEStats {
   MotorsStat: string ;
   CurNbMotorContext: string ;
   PrevNbMotorContext: string ;
   StringExtract();
   IsVirtual();
   Init();
   Refresh();
   ValueString();
}
declare class aWSACEStat extends aWedServerRoot {
   Name: string ;
   Color: string ;
   Values: string ;
   ValueMax: string ;
   ValueMaxIndex: string ;
   NameVisible: string ;
   MaxVisible: string ;
   CurValueVisible: string ;
}
declare class WSACEStatsGraphAgent extends aUIAgent {
   LoadValue();
   NotifyPaint();
}
declare class WSACEStatsSplitAgent extends aSplitViewAgent {
}
declare class WSACEStatsMDIChildAgent extends WedServerAdminConsoleExtensionOverAgent {
   WSACEStatsSplit: string ;
}
declare class aWSACEStats extends aWedServerAdminConsoleExtension {
   Times: string ;
   Stats: string ;
   CurTime: string ;
   PrevTime: string ;
   CurIndex: string ;
   PrevIndex: string ;
   AllFilled: string ;
   ComputeMax: string ;
   GlobalMax: string ;
   ValueMax: string ;
   ValueMaxIndex: string ;
   Started: string ;
   Init();
   Terminate();
   AddStat(StatName:string, StatColor:string, NameVisible:boolean, MaxVisible:boolean, CurValueVisible:boolean):number;
   ValueString(StatRank:number, Value:number):string;
   StartRecordStat();
   RecordStat(StatRank:number, StatValue:number);
   FinishRecordStat();
   DrawStats(ps:string, x:number, y:number, Width:number, Height:number, ClientWidth:number, ClientHeight:number);
   IsVirtual();
}
declare class aGSPServer extends aWedServer {
   HttpServletRequest: string ;
   HttpServletResponse: string ;
   GetInt4FromBuffer(BufferInPos:string):number;
   GetCStringFromBuffer(BufferInPos:string):string;
   GetCharsFromBuffer(BufferInPos:string):string;
   PutCharsInBuffer(Buffer:string, BufferSize:number, BufferPos:string, Value:string);
   PutTextInBuffer(Buffer:string, BufferSize:number, BufferPos:string, Value:string);
   PutBinaryTextInBuffer(Buffer:string, BufferSize:number, BufferPos:string, Value:string);
   Manages();
   GetRPCContextFromRequestBuffer();
   ReportFullError(ClassName:string, MethodName:string, ErrorMessage:string, GoldOrGSPFile:string, BufferOutUsedSize:number, MotorContextBehaviour:string);
   GetInfoFromBuffer(BufferIn:string, BufferFormat:string, BufferVersion:number, RequestKind:number, MotorContextId:number, SessionKey:string, GoldOrGSPFile:string);
   HandleError(BufferIn:string, BufferInUsedSize:number, BufferOut:string, BufferOutUsedSize:number, GoldOrGSPFile:string, MotorContextBehaviour:string, ServletCreationError:string, MotorContextId:number):number;
   UseServlet(Servlet:aHttpServlet, BufferIn:string, BufferInUsedSize:number, BufferOut:string, BufferOutUsedSize:number, RequestKind:number, GoldOrGSPFile:string, MotorContextBehaviour:string, RequestChars:string, HttpServerVariablesChars:string, ServerVariablesChars:string);
   InvokeServlet(BufferIn:string, BufferInUsedSize:number, BufferOut:string, BufferOutUsedSize:number, RequestKind:number, GoldOrGSPFile:string, MotorContextBehaviour:string, MotorContextId:number):number;
   NewHttpServletRequest():aHttpServletRequest;
   NewHttpServletResponse():aHttpServletResponse;
   ExecuteRequest();
   InitServer();
   TimeoutReach();
   StringExtract();
   LicenseName();
   FillSessionType();
   FillSessionsInformation();
   ExecuteSessionOperation();
}
declare class aHttpServlet extends aHttpRoot {
   NewSession():aHttpSession;
   Session():aHttpSession;
   Application():aHttpApplication;
   SetTimeout(Timeout:number);
   ExecuteRequest(Request:aHttpServletRequest, Response:aHttpServletResponse);
   SessionTerminated();
}
declare class aHttpServletRequest extends aHttpRoot {
   RequestChars: string ;
   RequestHashTable: string ;
   RequestKeys: string ;
   RequestItems: string ;
   ParameterValueSeparators: string ;
   ParameterSeparators: string ;
   HttpServerVariablesChars: string ;
   ServerVariablesChars: string ;
   ServerVariablesHashTable: string ;
   ServerVariablesValueSeparators: string ;
   ServerVariablesSeparators: string ;
   Values: string ;
   GetServerVariable(ServerVariableName:string):string;
   Init();
   InitParameterHashTable();
   VariableName(Index:number):string;
   InitServerVariablesHashTable();
   GetParameter(ParameterName:string):string;
   GettpCharParameter(ParameterName:string):string;
   GetIntParameter(ParameterName:string):number;
   GetNumParameter(ParameterName:string):string;
   AddParameter(ParameterName:string, ParameterValue:string);
   AddtpCharParameter(ParameterName:string, ParameterValue:string);
   AddIntParameter(ParameterName:string, ParameterValue:number);
   AddNumParameter(ParameterName:string, ParameterValue:string);
   RemoveParameter(ParameterName:string);
   GetIntServerVariable(ServerVariableName:string):number;
   GetNumServerVariable(ServerVariableName:string):string;
   GetFormItem(Rank:number):string;
   GetFormItemAstpChar(Rank:number):string;
   GetFormKey(Rank:number):string;
   GetFormKeyAstpChar(Rank:number):string;
   GetFormCount():number;
}
declare module wHttpServlet {
   var Inited: string ;
   var HttpServletsHashTable: string ;
   var Timeout: string ;
   var SessionKey: string ;
   var IsVirtualControl: string ;
   var IsVirtualActiveX: string ;
   var IsVirtualWindow: string ;
   var KeptHttpServerVariablesChars: string ;
   var KeptServerVariablesChars: string ;
   var KeptRequestChars: string ;
   function RetrieveConnectionInformation(ID:string):aConnectionInformation;
   function KillConnectionInformation(ID:string);
   function InitSession();
   function KeepRequestData(Request:aHttpServletRequest);
   function ResetRequestData(Request:aHttpServletRequest);
   function HashCode(St:string):number;
   function GetFileNameFromPath(PathString:string):string;
   function GetGSPServletClassNameFromPath(PathString:string):string;
   function GetServletClassRoot():aClassDef;
   function PrepareDebuggingClass(GSPParser:aGSPParser, theNewClassDef:aClassDef):string;
   function PrepareClass(GSPParser:aGSPParser, ClassName:string, ClassCode:string):string;
   function GetFileLocation(FromDir:string, FileName:string):string;
   function FindOrCreateGSPServlet(PathString:string, Error:string):aHttpServlet;
   function CreateServletFromGSPChars(PathString:string, GSPFile:string, Error:string):aHttpServlet;
   function GetServlet(PathString:string, Error:string):aHttpServlet;
   function ForwardServlet(PathString:string, Request:aHttpServletRequest, Response:aHttpServletResponse);
   function IncludeServlet(PathString:string, Request:aHttpServletRequest, Response:aHttpServletResponse);
   function IncludeFile(PathString:string, Request:aHttpServletRequest, Response:aHttpServletResponse);
   function TerminateSession();
}
declare module wSharedHttpServlet {
   var GSPPath: string ;
   var IsVirtualControl: string ;
   var IsVirtualActiveX: string ;
   var IsVirtualWindow: string ;
   var ReparseGSP: string ;
   var CurGSPClassId: string ;
}
declare module wHttpApplication {
   var Application: string ;
   var ApplicationCritSection: string ;
   var ParsingCritSection: string ;
   var ServerLocationHashTable: string ;
   var SessionList: string ;
   function EnterInCriticalSection();
   function LeaveCriticalSection();
   function AppendCurrentSession();
   function RemoveCurrentSession();
   function AppendServerLocation(Param:string);
   function GetServerLocation(ServerName:string):string;
   function InitOptions();
   function InitApplication();
}
declare module wHttpSession {
   var Session: string ;
}
declare class aHttpSessionOrApplication extends aHttpRoot {
   VariablesHashTable: string ;
   Values: string ;
   SetCString(VarName:string, Value:string);
   GetCString(VarName:string):string;
   Remove(VarName:string);
   SetInt(VarName:string, Value:number);
   GetInt(VarName:string):number;
   SetObject(VarName:string, Value:aLightObject, Garbageable:boolean);
/**
*Portability Check: OK
*/
   GetObject(VarName:string):aLightObject;
   Init();
   Terminate();
}
declare class aHttpSession extends aHttpSessionOrApplication {
   UserName: string ;
   UserLogin: string ;
   CurrentWebPage: string ;
   UserFirstAccessTime: string ;
   UserLastAccessTime: string ;
   TimeToTimeout: string ;
   UserRemoteAddress: string ;
   HttpHost: string ;
   UserUserAgent: string ;
   PageNumber: string ;
   FullObjectNumber: string ;
   ReInit();
   Init();
}
declare class aHttpServletResponse extends aHttpRoot {
   OutText: string ;
   Headers: string ;
   BinaryOutText: string ;
   ResultCode: string ;
   URLToQuery: string ;
   Reinit();
   AddHeader(HeaderName:string, HeaderValue:string);
   BinaryWrite(Buffer:string, BufferSize:number);
   Redirect(theFile:string);
}
declare class aHttpRoot extends aLightObject {
}
declare class aHttpApplication extends aHttpSessionOrApplication {
   SetCString();
   GetCString();
   Remove();
   SetInt();
   GetInt();
   SetObject();
   GetObject();
}
declare class aWydeWebServer extends aWedServer {
   Manages();
   GetRPCContextFromRequestBuffer();
   GetServiceFromBuffer(BufferIn:string, BufferInUsedSize:number):number;
   ExecuteRequest();
   InitServer();
   StringExtract();
   LicenseName();
   TerminateServer();
   FillSessionType();
   TimeOutString(theWydeWebSession:aWydeWebSession, LastTime:number, TimeOut:number):string;
   PriorityString(Priority:number):string;
   MessageString(MessageType:number):string;
/**
*Portability Check: OK
*/
   FillSessionsInformation();
   GetInt4FromBuffer(BufferInPos:string):number;
   GetCStringFromBuffer(BufferInPos:string):string;
   IncPriority(Priority:number):number;
   DecPriority(Priority:number):number;
/**
*Portability Check: OK
*/
   ExecuteSessionOperation();
}
declare class WydeWebServerMonitorAgent extends WedServerAdminConsoleExtensionOverAgent {
   ListCtrl: string ;
   NbUsers: string ;
   ExecutedList: string ;
   ExecutedRank: string ;
   Priority: string ;
   Message: string ;
   MessageToSend: string ;
   ListCtrl_Init():number;
   TimeOutString(theWydeWebSession:aWydeWebSession, LastTime:number, TimeOut:number):string;
   LoadValue();
   SendMessageToSessionSelected();
   SendMessageToAllSessions();
   KillSessionSelected();
   KillAllSessions();
   SetPriorityToHigh();
   SetPriorityToHighForAll();
   SetPriorityToAboveNormal();
   SetPriorityToAboveNormalForAll();
   SetPriorityToNormal();
   SetPriorityToNormalForAll();
   SetPriorityToBelowNormal();
   SetPriorityToBelowNormalForAll();
   SetPriorityToLow();
   SetPriorityToLowForAll();
   ListCtrl_Executed(SelectedRank:number, Option:number):number;
}
declare class WydeWebPopupAgent extends aMenuItemControlAgent {
   SendMessageToSessionSelected: string ;
   SendMessageToAllSessions: string ;
   Separator: string ;
   KillSessionSelected: string ;
   KillAllSessions: string ;
   Separator001: string ;
   MenuItem: string ;
   MenuItem001: string ;
   SetPriorityToHigh: string ;
   SetPriorityToAboveNormal: string ;
   SetPriorityToNormal: string ;
   SetPriorityToBelowNormal: string ;
   SetPriorityToLow: string ;
   SetPriorityToHighForAll: string ;
   SetPriorityToAboveNormalForAll: string ;
   SetPriorityToNormalForAll: string ;
   SetPriorityToBelowNormalForAll: string ;
   SetPriorityToLowForAll: string ;
}
declare class DoYouWantToKillAgent extends aUIAgent {
   StaticText: string ;
}
declare class TypeMessageToSendAgent extends aUIAgent {
   MessageToSend: string ;
   MessageToSendStaticText: string ;
}
declare class aWSACEWydeWeb extends aWedServerAdminConsoleExtension {
   Refresh();
   StringExtract();
}
declare class WydeWebSampleApplicationAgent extends aUIAgent {
   GroupBox: string ;
   StaticText: string ;
   GuineaPig: string ;
   StaticText001: string ;
   GroupBox001: string ;
}
declare class aWydeWebSampleApplication extends aFullObject {
   GuineaPig: string ;
   Run();
}
declare module wEWedSession {
   var EWED: string ;
   var PageNumber: string ;
   var WAMResponse: string ;
   function SessionId():string;
   function NewEWEDSession(Request:aHttpServletRequest):aEWEDServer;
   function SimpleInteract(Request:aHttpServletRequest, Response:aHttpServletResponse, ThisObject:aLightObject, ThisScenario:aScenario);
   function Interact(Request:aHttpServletRequest, Response:aHttpServletResponse, ThisObject:aLightObject, ThisScenario:aScenario, ExecMode:string, InModalMode:boolean);
}
declare class WEDXMLCreateObjScen extends WEDXMLCreate {
   GetParameterAndExecute();
}
declare class WEDXMLCreateObjMethod extends WEDXMLCreate {
   GetParameterAndExecute();
}
declare class WEDXMLCreate extends aEWedRootServlet {
   GetParameterAndExecute(Request:aHttpServletRequest, Response:aHttpServletResponse, EWED:aEWEDServer);
   GetNewEwedServer():aEWEDServer;
   GetClassName(Request:aHttpServletRequest):string;
   GetMethodName(Request:aHttpServletRequest):string;
   GetScenarioName(Request:aHttpServletRequest):string;
   ExecuteRequest();
}
declare class UpdateWedObject extends ewedasps {
   ExecuteRequest();
}
declare class GetWEDFolderShape extends ewedasps {
   ExecuteRequest();
}
declare class GetWEDFolder extends ewedasps {
   ExecuteRequest();
}
declare class GetScenario extends ewedasps {
   ExecuteRequest();
}
declare class GetNextList extends ewedasps {
   ExecuteRequest();
}
declare class eWedXMLContent extends aEWedRootServlet {
   ExecuteRequest();
}
declare class eWedSelectReftoListCtrl extends ewedasps {
   ExecuteRequest();
}
declare class eWedSelectReftoCombo extends ewedasps {
   ExecuteRequest();
}
declare class eWedListCtrlEvent extends ewedasps {
   ExecuteRequest();
}
declare class eWedFrameContent extends aEWedRootServlet {
   ExecuteRequest();
}
declare class ewedasps extends aEWedRootServlet {
}
declare class CallWEDMotorMethod extends ewedasps {
   ExecuteRequest();
}
declare class aEWedRootServlet extends aHttpServlet {
   GetHTTPServerPath(FromRequest:aHttpServletRequest):string;
   GetBrowser(Request:aHttpServletRequest):string;
   IncPageNumber();
   SessionTerminated();
   AddWrongPageHeader(Wyde:aEWEDServer, Response:aHttpServletResponse);
   AddJustRefresh(Wyde:aEWEDServer, Response:aHttpServletResponse);
   eWedSaB(s:string):boolean;
   InitHTTPServerPath(Request:aHttpServletRequest);
   AddDefaultHeaders(Response:aHttpServletResponse);
   ExecuteRequest();
}
declare class aEWEDGoldServer extends aEWEDServer {
   Init();
}
declare class GSPImporterProjectsAgent extends aUIAgent {
   Projects: string ;
   Projects001: string ;
   FolderForTopOkCancel: string ;
   Projects_Selected(:aUIAgent, SelectedRank:number):number;
}
declare class GSPImporterReportAgent extends aUIAgent {
   ReportText: string ;
   ReportText_ButtonDblClk(:aUIAgent, No:number, X:number, Y:number):number;
}
declare class GSPImporterProjectAndReportAgent extends aSplitViewAgent {
}
declare class aGSPImporter001Agent extends aOpenWhereClosedUIAgent {
   GSPImporterProjectAndReport: string ;
}
declare class aGSPImporter002Agent extends aToolBarUIAgent {
   SaveSaveAndCloseClose: string ;
}
declare class aGSPImporter extends aEntity {
   Projects: string ;
   ReportText: string ;
   Report(That:string);
   ClearReport();
   Init();
   IsSystemCloseAccepted();
   InitAfterNewVersion();
   LineExecuted(theUIAgent:aUIAgent);
}
declare class DefaultWideExtensionForaGSPImporterExtensionAgent extends aUIAgent {
   DoYourJob: string ;
}
declare class aGSPImporterExtension extends aWideExtension {
   GSPImporter: string ;
   GetImporter():aGSPImporter;
   DoYourJob();
   FolderParentName();
   MenuText();
   ButtonBMPName();
}
declare class GSPImporterScenAgent extends aUIAgent {
   RootDirectory: string ;
   ImportDirectories: string ;
   ClassRoot: string ;
   ClassRootStaticText: string ;
   Name: string ;
   NameStaticText: string ;
   StaticText: string ;
   ErrorReportFileName: string ;
   StaticText001: string ;
   Recursive: string ;
   DirectoryToImport: string ;
   StaticText002: string ;
   OverrideExisting: string ;
   ServletClasses: string ;
   CheckAll: string ;
   CheckAll001: string ;
   OverrideExistingGSP: string ;
   Export: string ;
   DirectoryToExport: string ;
   StaticText003: string ;
   StaticText004: string ;
   CheckOrUncheckAll(Check:boolean);
   ClassIsSelected(RankInList:number):boolean;
   NotifyInit();
   LoadValue();
   CheckAll001_Selected(:aUIAgent, SelectedRank:number):number;
}
declare class aGSPImporterProject extends aEntity {
   RootDirectory: string ;
   DirectoryToImport: string ;
   DirectoryToExport: string ;
   ClassRoot: string ;
   ErrorReportFileName: string ;
   Recursive: string ;
   OverrideExistingServlet: string ;
   OverrideExistingGSP: string ;
   ErrorReport: string ;
   HasError: string ;
   ServletClasses: string ;
   UsesText: string ;
   DeclarationText: string ;
   ExportAgent: string ;
   Init();
   Report(That:string);
   ReportCreationError(TheClassDef:aClassDef);
   PathFromFileNameAndDir(FileName:string, FromDir:string):string;
   CreateServletClassDef(GSPServletClassDef:aClassDef, FileName:string, FromDir:string, NewClass:boolean);
   ImportFile(FileName:string, FromDir:string);
   ImportDirectory(ThisDirectory:string);
   ImportDirectories();
   GetFileNameFromClassName(ClassName:string, InDir:string):string;
   Export();
   InitAfterNewVersion();
}
declare class InputTextScenAgent extends aUIAgent {
   InputText: string ;
}
declare class aGSPParser extends aFullObject {
   UsesText: string ;
   InputText: string ;
   ClassCode: string ;
   GoldDeclText: string ;
   MethodText: string ;
   MaxSlice: string ;
   DebugCode: string ;
   Parse();
   Init();
   OpenHTMLMethod(InText:string);
   CloseHTMLMethod(InText:string);
   RemoveTab(HTMLStatement:string);
   ManageHTML(HTMLStatement:string, Separator:string);
   ManageGOLDDeclarations(Declarations:string);
   ManageGOLDStatements(Statements:string);
   ManagerGSPForward(DirectiveNode:aXMLNamedNode);
   ManagerGSPInclude(DirectiveNode:aXMLNamedNode);
   ManageGOLDExpressions(GOLDExpression:string);
   SplitMainMethod(NbLines:number);
   ComputeClassCode();
   InitParser();
   DisposeParser();
   GetTokenKindFromSeparator(Separator:string):string;
   ManageGOLD(Token:string, GOLDTokenKind:string);
   WriteComment(TokenKind:string);
   IsLetter(TheChar:number):boolean;
   ReputSeparator(InBuffer:string, Separator:number);
   GetParameterValue(Parameter:string, InBuffer:string):string;
   ProduceOverridenMethods(GSPFileName:string);
   ComputeGOLDFromGSP(GSPFileName:string, ResultingClassCode:string);
   ComputeGOLDFromGSPChars(GSPFileName:string, GSPFile:string, ResultingClassCode:string);
   HTMLChar(FromChar:number):string;
   GSPWriteln(This:string, InText:string);
   ComputeDebugGOLDFromUnParsedClass(theClassDef:aClassDef, ResultingClassCode:string);
   AddUsesFor(Entity:aCUDef, InList:aListOfInstances);
   CreateListOfUses(ServletClass:aClassDef, ListOfUses:aListOfInstances);
   ProduceDeclarativePart(ServletClass:aClassDef, InText:string);
   PosFirstNonBlank(InString:string):number;
   ParseExecuteRequest(TextToParse:string, InText:string);
   ProduceExecuteRequest(ServletClass:aClassDef, InText:string);
   ComputeGSPFromGOLD(ServletClass:aClassDef, ListOfUses:aListOfInstances, InText:string);
}
declare class aGSPServlet extends aHttpServlet {
   GetFileName():string;
   GetFullyQualifiedFileName():string;
   InitEWED(Request:aHttpServletRequest);
}
declare class eWedGetResult extends aEWedRootServlet {
   RemoveFirstLineAndWrite(Wyde:aEWEDServer, Response:aHttpServletResponse);
   ManageWrongPageAndWriteResponse(Wyde:aEWEDServer, Response:aHttpServletResponse);
   GetNextToken(p:string):string;
   DoCallMethod(HidInfo:string, FormContent:string, Wyde:aEWEDServer, Request:aHttpServletRequest, Response:aHttpServletResponse);
   DoGetRefto(HidInfo:string, FormContent:string, Wyde:aEWEDServer, Request:aHttpServletRequest, Response:aHttpServletResponse);
   DoSelectFolder(HidInfo:string, FormContent:string, Wyde:aEWEDServer, Request:aHttpServletRequest, Response:aHttpServletResponse);
   DoGetNextList(HidInfo:string, FormContent:string, Wyde:aEWEDServer, Request:aHttpServletRequest, Response:aHttpServletResponse);
   DoGetReftoPopup(HidInfo:string, FormContent:string, Wyde:aEWEDServer, Request:aHttpServletRequest, Response:aHttpServletResponse);
   DoGetReftoAction(HidInfo:string, FormContent:string, Wyde:aEWEDServer, Request:aHttpServletRequest, Response:aHttpServletResponse);
   DoSelectReftoCombo(HidInfo:string, FormContent:string, Wyde:aEWEDServer, Request:aHttpServletRequest, Response:aHttpServletResponse);
   DoListCtrlEvent(HidInfo:string, FormContent:string, Wyde:aEWEDServer, Request:aHttpServletRequest, Response:aHttpServletResponse);
   DoSelectReftoListCtrl(HidInfo:string, FormContent:string, Wyde:aEWEDServer, Request:aHttpServletRequest, Response:aHttpServletResponse);
   DoNewPopup(HidInfo:string, FormContent:string, Wyde:aEWEDServer, Request:aHttpServletRequest, Response:aHttpServletResponse);
   DoSelectNewPopup(HidInfo:string, FormContent:string, Wyde:aEWEDServer, Request:aHttpServletRequest, Response:aHttpServletResponse);
   ExecuteRequest();
}
declare class eWedNewPopup extends aEWedRootServlet {
   ExecuteRequest();
}
declare class eWedReftoAction extends aEWedRootServlet {
   ExecuteRequest();
}
declare class eWedReftoPopup extends aEWedRootServlet {
   ExecuteRequest();
}
declare class eWedSelectComboEntry extends aEWedRootServlet {
   ExecuteRequest();
}
declare class GetRefto extends ewedasps {
   ExecuteRequest();
}
declare class aGSPParser001Agent extends aUIAgent {
   MethodText: string ;
}
declare class aGSPEditorMainAgent extends aUIAgent {
   MenuItem: string ;
   OpenGSPFile: string ;
   MDIWindowMenuItem: string ;
   ActionQuit001: string ;
}
declare class aGSPEditor extends aLightObject {
   Init();
   OpenGSPFile();
   StringExtract();
}
declare class aEditedGSPFileMainAgent extends aUIAgent {
   aEditedGSPFileSplit: string ;
   MenuItem: string ;
   ParseGSP: string ;
   aEditedGSPFileToolBar: string ;
   TestGSPFile: string ;
   aEditedGSPFileBottomTB: string ;
   ActionSave003: string ;
   ActionSaveAndClose002: string ;
   ActionClose002: string ;
   Separator: string ;
   TestGSPFile_ValueLoaded(:aUIAgent);
}
declare class aEditedGSPFileSplitAgent extends aSplitViewAgent {
}
declare class aEditedGSPFileGSPCodeAgent extends aUIAgent {
   GSPText: string ;
   HasChanged: string ;
   GSPText_ValueStored(:aUIAgent);
}
declare class aEditedGSPFileGOLDCodeAgent extends aUIAgent {
   GetGoldImplem: string ;
   GetGoldImplem001: string ;
}
declare class aEditedGSPFileToolBarAgent extends aToolBarUIAgent {
   ParseGSP: string ;
   TestGSPFile: string ;
   ActionSaveAndClose001: string ;
   ActionSave001: string ;
   ActionClose001: string ;
   TestGSPFile_ValueLoaded(:aUIAgent);
}
declare class aEditedGSPFileBottomTBAgent extends aToolBarUIAgent {
   GetGoldImplem: string ;
}
declare class aEditedGSPFileHTMLAgent extends aUIAgent {
   HTML: string ;
}
declare class aEditedGSPFile extends aLightObject {
   GSPFileName: string ;
   GSPName: string ;
   GSPText: string ;
   CurClass: string ;
   HTML: string ;
   Request: string ;
   InitOn(FileName:string);
   InitGSPServletClassDefIfNeeded();
   ParseGSP();
   Terminate();
   GetGoldImplem():aClassImplem;
   CanTestGSPFile():boolean;
   GetServletClass():aGSPServlet;
   DoTestServlet();
   UITestServlet(theUIAgent:aUIAgent);
   NotifyGSPTextChanged();
   StringExtract();
   SaveEx();
}
declare module wJNISun {
   function JNI_GetDefaultJavaVMInitArgs(args:string);
   function JNI_CreateJavaVM(vm:string, JEnv:string, args:string);
   function JNI_GetCreatedJavaVMs(vmBuf:string, bufLen:string, nVMs:string):string;
}
declare class FrameDesignAgent extends aUIAgent {
   SplitWindows: string ;
   SeparatorSize: string ;
   SeparatorSizeStaticText: string ;
   ShowSeparator: string ;
   IsHorizontal: string ;
   DefaultTitleKind: string ;
   DefaultTitleKindGroupBox: string ;
   DefaultTitleExtractKind: string ;
   DefaultTitleExtractKindStaticText: string ;
   DefaultTitleExtractParam: string ;
   DefaultTitleExtractParamStaticText: string ;
}
declare class SplitWindowsAgent extends aSplitViewAgent {
}
declare class OnlyAvailablescensAgent extends aUIAgent {
   myType: string ;
}
declare class OnlyWindowsAgent extends aUIAgent {
   SubComponents: string ;
}
declare class aFrameScenario extends aClassAsSplitView {
   SeparatorSize: string ;
   ShowSeparator: string ;
   Init();
   IsValid();
   CanUse();
   InitAfterNewVersion();
   GetBitmap();
}
declare class aHTMLFrameRole extends aScenarioListForViewRole {
   IsDroppedObjectUsable();
   NewInstanceFromDroppedObject();
}
declare class aHTMLFrameTargetPicker extends aScenarioPicker {
   StringExtract();
   SearchAndPick();
   Select();
}
declare class aHTMLFrameUIAgent_TODELETEV5 extends aSplitViewAgent {
   InIDE_TODELETEV5: string ;
   Title_TODELETEV5: string ;
   ProduceXMLAndXSL_TODELETEV5();
   produceScripts_TODELETEV5(InText:string);
   WriteHeader_TODELETEV5(InText:string);
   WriteBody_TODELETEV5(InText:string);
   WriteXMLIncludeAndCloseHTML_TODELETEV5(InText:string);
   WriteHTMLPage_TODELETEV5(InText:string);
   ProduceInFrameSet_TODELETEV5();
   ProduceFrameTag_TODELETEV5(InText:string, ForQVP:aQVPHtmlFrame);
   Produce();
}
declare class aHTMLLinkAgent extends aExecutableControlAgent {
   NotifyExecuted();
}
declare class aHTMLListGridScenario extends aListOfAsGridScenario {
   NewQVarPresentor();
   GetQVarPresentor(forThisVar:aIdentifierDesc, forThisType:aType):aQVPHTMLListGridScenario;
   GetBitmap();
}
declare class aHTMLListLinkforFolders extends aGridScenario {
   NewQVarPresentor():aQVPHTMLListLinkforFolders;
   Paint();
   GetQVarPresentor(forThisVar:aIdentifierDesc, forThisType:aType):aQVPHTMLListLinkforFolders;
   GetQVarPresentorOnDrop(forThisVar:aIdentifierDesc, forThisType:aType):aQVPHTMLListLinkforFolders;
   GetBitmap();
}
declare class aHTMLUIAgent extends aUIAgent {
}
declare class FrameInfoAgent extends aUIAgent {
   FrameSize: string ;
   FrameSizeStaticText: string ;
   Scroll001: string ;
   ScrollStaticText: string ;
   Target: string ;
   TargetStaticText: string ;
   Target001: string ;
   TargetStaticText001: string ;
   marginwidth: string ;
   marginwidthStaticText: string ;
   marginheight: string ;
   marginheightStaticText: string ;
   NoResize: string ;
   NoFrameBorder: string ;
}
declare class aQVPHtmlFrame extends aQVarPresentor {
   FrameSize: string ;
   Scroll: string ;
   TargetScen: string ;
   Target: string ;
   MarginWidth: string ;
   MarginHeight: string ;
   NoResize: string ;
   NoFrameBorder: string ;
   Init();
   IsConsistent();
   IsValid();
}
declare class aQVPHTMLListGridScenarioTableInfoAgent extends aQVPListOfAsGridScenario001Agent {
   BorderSize: string ;
   BorderSizeStaticText: string ;
}
declare class LinkInfoAgent extends aUIAgent {
   NextLinkExtract: string ;
   NextLinkExtractStaticText: string ;
   NextLinkPos: string ;
   NextLinkPosStaticText: string ;
   NbRows: string ;
   NbRowsStaticText: string ;
   BackLinkExtract: string ;
   BackLinkExtractStaticText: string ;
   BackLinkPos: string ;
   BackLinkPosStaticText: string ;
   OpenANewWindow: string ;
   NewWinWidth: string ;
   NewWinWidthStaticText: string ;
   NewWinHeight: string ;
   NewWinHeightStaticText: string ;
   NewWinResizeable: string ;
   GroupBox: string ;
   EvenRowColor: string ;
   EvenRowColorStaticText: string ;
   NotEvenRowColor: string ;
   NotEvenRowColorStaticText: string ;
   ShowToolbar: string ;
   ShowMenubar: string ;
   ShowLocation: string ;
   ShowStatus: string ;
   NotifyInit();
   OpenANewWindow_Selected(:aUIAgent, SelectedRank:number):number;
}
declare class aQVPHTMLListGridScenario003Agent extends aFolderViewAgent {
}
declare class aQVPHTMLListGridScenario extends aQVPListOfAsGridScenario {
   NextLinkExtract: string ;
   NextLinkPos: string ;
   BackLinkExtract: string ;
   BackLinkPos: string ;
   OpenANewWindow: string ;
   NewWinWidth: string ;
   NewWinHeight: string ;
   NewWinResizeable: string ;
   BorderSize: string ;
   OddRowColor: string ;
   NotOddRowColor: string ;
   ShowToolbar: string ;
   ShowMenubar: string ;
   ShowLocation: string ;
   ShowStatus: string ;
}
declare class MoreQVPGridScenarioOverrideAgent extends aUIAgent {
   TitleForeColor: string ;
   TitleForeColorStaticText: string ;
   TitleBackColor: string ;
   TitleBackColorStaticText: string ;
   SelectTitleFont: string ;
   GroupBox: string ;
   ColTitleHeight: string ;
   ColTitleHeightStaticText: string ;
   RowHeight: string ;
   RowHeightStaticText: string ;
   GridForeColor: string ;
   GridForeColorStaticText: string ;
   GridBackColor: string ;
   GridBackColorStaticText: string ;
   TitlePosition: string ;
   TitlePositionStaticText: string ;
   GridHorizontalPosition: string ;
   GridHorizontalPositionStaticText: string ;
   GridVerticalPosition: string ;
   GridVerticalPositionStaticText: string ;
   Relative: string ;
   Fraction: string ;
   FractionStaticText: string ;
   ColWidth: string ;
   ColWidthStaticText: string ;
   GroupBox001: string ;
   UsingScen: string ;
   UsingScenStaticText: string ;
   FolderName: string ;
   FolderNameStaticText: string ;
   BorderSize: string ;
   BorderSizeStaticText: string ;
   NotifyInit();
   Relative_Selected(SelectedRank:number):number;
}
declare class aQVPHTMLListLinkforFolders extends aQVPGridScenario {
   UsingScen: string ;
   FolderName: string ;
   BorderSize: string ;
   TitlePosition: string ;
   GridHorizontalPosition: string ;
   GridVerticalPosition: string ;
   Fraction: string ;
   Relative: string ;
   IsConsistent();
   SelectTitleFont();
}
declare class aQVPHTMLListRole extends aSingleRoleType {
   pickInMemOnly();
}
declare class aQVPHtmlTargetRole extends aSingleRoleType {
   CheckQVPList(FromScen:aFrameScenario, InPickerList:aListOfInstances, QVPList:aListOfInstances);
   SearchAndPick();
}
declare class aQVPLinkFolderRole extends aSingleRoleType {
   pickInMemOnly();
}
declare class aQVPListHTMLLinkRole extends aSingleRoleType {
   pickInMemOnly();
}
declare class aQVPlistOfAsHTMLLinkScenario001Agent extends aUIAgent {
   OpenANewWindow: string ;
   RefScen: string ;
   RefScenStaticText: string ;
   NewWinWidth: string ;
   NewWinWidthStaticText: string ;
   NewWinHeight: string ;
   NewWinHeightStaticText: string ;
   NewWinResizeable: string ;
   GroupBox: string ;
   ShowToolbar: string ;
   ShowMenubar: string ;
   ShowLocation: string ;
   ShowStatus: string ;
   NotifyInit();
   OpenANewWindow_Selected(SelectedRank:number):number;
}
declare class aQVPlistOfAsHTMLLinkScenario002Agent extends aFolderViewAgent {
}
declare class aQVPlistOfAsHTMLLinkScenario extends aQVPListOfAsHLinkScenario {
   OpenANewWindow: string ;
   NewWinWidth: string ;
   NewWinHeight: string ;
   NewWinResizeable: string ;
   RefScen: string ;
   ShowToolbar: string ;
   ShowMenubar: string ;
   ShowLocation: string ;
   ShowStatus: string ;
   Init();
   IsConsistent();
}
declare class aQVPReftoAsHTMLLink001Agent extends aUIAgent {
   OpenANewWindow: string ;
   NewWinWidth: string ;
   NewWinWidthStaticText: string ;
   NewWinHeight: string ;
   NewWinHeightStaticText: string ;
   NewWinResizeable: string ;
   Target: string ;
   TargetStaticText: string ;
   RefScen: string ;
   RefScenStaticText: string ;
   GroupBox: string ;
   ShowToolbar: string ;
   ShowMenubar: string ;
   ShowLocation: string ;
   ShowStatus: string ;
   NotifyInit();
   OpenANewWindow_Selected(SelectedRank:number):number;
}
declare class aQVPReftoAsHTMLLink002Agent extends aFolderViewAgent {
}
declare class aQVPReftoAsHTMLLink extends aQVPReftoAsHLink {
   OpenANewWindow: string ;
   NewWinWidth: string ;
   NewWinHeight: string ;
   NewWinResizeable: string ;
   Target: string ;
   RefScen: string ;
   ShowToolbar: string ;
   ShowMenubar: string ;
   ShowLocation: string ;
   ShowStatus: string ;
   IsConsistent();
}
declare class aQVPXXXAsHTMLLink001Agent extends aUIAgent {
   HTMLLink: string ;
   HTMLLinkStaticText: string ;
   OpenANewWindow: string ;
   NewWinWidth: string ;
   NewWinWidthStaticText: string ;
   NewWinHeight: string ;
   NewWinHeightStaticText: string ;
   NewWinResizeable: string ;
   GroupBox: string ;
   Target: string ;
   TargetStaticText: string ;
   UseWebBrowser: string ;
   NotModal: string ;
   ShowToolbar: string ;
   ShowMenubar: string ;
   ShowLocation: string ;
   ShowStatus: string ;
   UseExtractForLabel: string ;
   NotifyInit();
   OpenANewWindow_Selected(:aUIAgent, SelectedRank:number):number;
}
declare class aQVPXXXAsHTMLLink002Agent extends aFolderViewAgent {
}
declare class aQVPXXXAsHTMLLink extends aQVPXXXAsPushButton {
   HTMLLink: string ;
   OpenANewWindow: string ;
   NewWinWidth: string ;
   NewWinHeight: string ;
   NewWinResizeable: string ;
   Target: string ;
   UseWebBrowser: string ;
   NotModal: string ;
   ShowToolbar: string ;
   ShowMenubar: string ;
   ShowLocation: string ;
   ShowStatus: string ;
   UseExtractForLabel: string ;
}
declare class aReftoAsHTMLLink extends aReftoAsHLink {
   GetBitmap();
   NewQVarPresentor();
   GetQVarPresentor(forThisVar:aIdentifierDesc, forThisType:aType):aQVPReftoAsHTMLLink;
   GetQVarPresentorOnDrop(forThisVar:aIdentifierDesc, forThisType:aType):aQVPReftoAsHTMLLink;
}
declare class LinkAsHTMLAgent extends aHTMLLinkAgent {
}
declare class ListofAsGridHTMLAgent extends aListOfAsGridUIAgent {
}
declare class ListOfAsHTMLFolderLinkAgent extends aGridUIAgent {
}
declare class ListOfAsHTMLLinksAgent extends aListOfAsHLinkUIAgent {
}
declare class MethodTypeAsLinkHTMLAgent extends aMethodTypeAsControlAgent {
}
declare class RefToAsHTMLLinkAgent extends aReftoAsHLinkAgent {
}
/**
*Please never rename this module because it is found by name from C++
*/
declare module xXMLMotor {
   var eWEDServer: string ;
   var GenInIde: string ;
   var SessionID: string ;
   var AgentsToGarbage: string ;
   var SessionBrowser: string ;
   var IndexedListId: string ;
   var RecordClassId: string ;
   var BuildRefClassId: string ;
   var ScenId: string ;
   var HTMLScenId: string ;
   var ReturnScendId: string ;
   var XMLIndexedListId: string ;
   var XMLRecordClassId: string ;
   var XMLBuildRefClassId: string ;
   var XMLReturnScendId: string ;
   var BiPathScenId: string ;
   var BuildMethodClassId: string ;
   var FolderQVPId: string ;
   var NoXMLScripts: string ;
   var BrowserXMLScripts: string ;
   var CheckXMLScripts: string ;
   var XMLScenId: string ;
   var XMLHTMLScenId: string ;
   var TemplateClassId: string ;
   var XMLTemplateClassId: string ;
   var eWEDProducers: string ;
   var IsProducingHTML: string ;
   var ForceRestoreScenRecast: string ;
   var QVPFrameId: string ;
   var ServerPath: string ;
   var DoProduceTableWidth: string ;
   var GridTagCountTable: string ;
   var ListStartTable: string ;
   function GeteWEDProducer(ForAgent:aUIAgent):aEWEDProducer;
   function StoreTagCount(Tag:string, Count:number);
   function GetTagCount(Tag:string):number;
   function DisposeTagCount();
   function StoreListStart(Tag:string, ListStart:number);
   function GetListStart(Tag:string):number;
   function DisposeListStart();
   function ReInitGlobalVars();
   function IsXMLCompliant(SessionBrowser:string):boolean;
   function ForXMLMode():boolean;
   function GetDirSep():string;
   function CPPString(St:string):string;
   function ConvertImage(FromFileName:string, ToFileName:string):boolean;
   function DrawFolderWindowEx(ps:string, theWindow:aDlgWindow, x:number, y:number, W:number, H:number, TheText:string, params:string, ForeColor:string, BackColor:string, FontName:string, FontSize:number, FontSels:string, SelectedFolder:number, MustPaintFolder:boolean);
   function calcItem(memPs:string, coord:string, Window:string, params:string, Selected:boolean, theString:string, dw:number, OnlyBmp:boolean, BmpWidth:number, BmpHeight:number, FontName:string, FontSize:number, FontSels:string):boolean;
   function ColorCodeFromColor(theColor:string, ColorCode:string);
   function AsHTMLSize(FontSize:number):number;
   function initIDs();
   function DrawFolderGif(FromFolder:aClassAsFolderView, SelectedFolder:number, ForQVar:aQVPXXXAsFolder, FolderText:string, FileName:string);
   function GenerateShape(FromFolder:aClassAsFolderView, SelectedFolder:number, ForQvar:aQVPXXXAsFolder, ForScenName:string, Where:string, IsSimpleFolder:boolean, MapName:string, GifFileName:string, FolderText:string, ForObjectTag:string);
   function AppendAgentInGarbageList(theAgent:aUIAgent);
   function GetShortGifName(FromQVP:aQVPXXXAsBitMap, NeedCopy:boolean, FileName:string, ForKind:string);
   function AllocParametersBuffer(ForThisMethodType:aMethodType, theObject:aLightObject, ForThisUIAgent:aUIAgent, ParametersSize:number, ReturnSize:number):string;
   function FreeParametersBuffer(theBuffer:string, ForThisMethodType:aMethodType, ParametersSize:number);
   function ReplaceCoteInCString(ForCString:string):string;
   function ReplaceCoteInCStringForJava(ForCString:string):string;
   function ReplaceSlashInCStringForJS(ForCString:string):string;
   function GetIncludedAgents(theList:aListOfInstances, ForAgent:aUIAgent);
   function GetIncludedScens(theList:aListOfInstances, ForScen:aScenario, ForInstance:aLightObject);
   function GetCurrentThreadId():number;
   function CallExternalJS(MethodName:string, Params:string);
   function FolderSelectionScript(FromFolderName:string):string;
   function DrawPushButton(ps:string, theWindow:aDlgWindow, x:number, y:number, width:number, height:number, kinds:string, theText:string, TextColor:string, BackColor:string, IsDep:boolean, HasFocus:boolean, IsDisable:boolean, MouseOn:boolean, FontName:string, FontSize:number, FontSels:string);
   function DrawFolderButtonGif(FromFolder:aClassAsFolderView, SelectedFolder:number, ForQVar:aQVPXXXAsFolder, FolderText:string, FileName:string, MouseOn:boolean);
   function DoeWEDSetRefAgent(ForAgent:aUIAgent, ThisRefAgent:aUIAgent);
   function SetAllActiveProducersToInactive(ForNewAgent:aUIAgent);
   function DoeWEDInteract(ForAgent:aUIAgent, ExecMode:string);
   function DoeWEDRefresh(ForAgent:aUIAgent);
   function DoeWEDRefreshForVarAgent(ForVarAgent:aVarAgent);
   function DoeWEDProduceFrameTag(ForAgent:aUIAgent, InText:string, ForQVP:aQVarPresentor, InIDE:boolean);
   function DoeWEDProduceInFrameSet(ForAgent:aUIAgent);
   function DoeWEDSetInIDE(ForAgent:aUIAgent);
   function DoeWEDSelectFrameOrFolder(ForAgent:aUIAgent, Rank:number);
   function DoeWEDSetFocus(ForAgent:aUIAgent);
   function DoeWEDSetDeletedFolder(ForAgent:aUIAgent, Selected:number);
   function DoeWEDSetFrameQualifier(ForAgent:aUIAgent, ThisQVP:aQVarPresentor);
   function DoeWEDSetTitle(ForAgent:aUIAgent, ThisTitle:string);
   function DoeWEDUpdateTitle(ForAgent:aUIAgent);
   function DoeWEDGetTitle(ForAgent:aUIAgent):string;
   function GeteWEDWindow(ForAgent:aUIAgent):string;
   function DoeWEDSetWaitingReference(ForAgent:aUIAgent, RefType:aReftoType, RefVar:string, Index:number);
   function DoeWEDSetReference(ForAgent:aUIAgent, ForInstance:aFullObject);
   function DoeWEDCancelReference(ForAgent:aUIAgent);
   function DoeWEDResetWaitingAgent(ForAgent:aUIAgent);
   function DoeWEDRefreshFrames(ForAgent:aUIAgent);
   function HashValue(toHash:string):number;
   function CompleteXSLNameWithIncludedScen(InPath:string, WithScen:aScenario, ForAgent:aUIAgent);
   function DoeWEDSetObject(ForDTAgent:aDataTemplateUIAgent);
   function DoeWEDAddUIAgent(ForAgent:aUIAgent, UIAgent:aUIAgent, Qualifier:aQVarPresentor);
   function DoeWEDBuildSubCompo(ForScenario:aScenario, thisVarAgent:aVarAgent, thisUIAgent:aUIAgent, dw:number, dh:number);
   function GetServerPath():string;
   function SetServerPath(theServerPath:string);
   function ReplaceHTMLSpecialChars(Input:string);
   function GOLDJustificationToHTMLJustification(GOLDJustification:string):string;
}
declare class HTMLScenarioMoreInfoAgent extends aUIAgent {
   BackGroundImage: string ;
   StaticText003: string ;
   FixedBackImage: string ;
   NoNavigation: string ;
   Sripts: string ;
   SriptsGroupBox: string ;
   NoForm: string ;
   CheckPageCount: string ;
}
declare class aScenarioWithStyleSheet001Agent extends aFolderViewAgent {
}
declare class aScenarioWithStyleSheet extends aScenario {
   StyleSheet: string ;
   BackGroundImage: string ;
   FixedBackImage: string ;
   NoBackNavigation: string ;
   Scripts: string ;
   IsForm: string ;
   StylePresenters: string ;
   CheckPageCount: string ;
   BottomMargin: string ;
   LeftMargin: string ;
   RightMargin: string ;
   TopMargin: string ;
   NoScroll: string ;
   NewQVarPresentor();
   CanUse();
   Init();
   InitAfterNewVersion();
   GetBitmap();
   GetQVarPresentorOnDrop();
   Paint();
   HasReallyChanged():boolean;
   ActionCancel();
   GetStylePresentor(OfThisQVP:aQVarPresentor):aStyleSheetPresenter;
   CreateNewStylePresentor(ForthisQVP:aQVarPresentor);
   ReceiveDropObject();
   NotifyDelete();
}
declare class aASPServer extends aEWEDServer {
   CallAction(ForSession:number, Action:string, FromObj:number, VarAddr:number, TypeAddr:number, FromAgent:number, Index:number):string;
   GetRefToPopUp(ForSession:number, ObjAddr:number, TypeAddr:number, VarAddr:number, FrameName:string, TargetFrameName:string, FromAgent:number, Index:number, PageID:number):string;
   CreateForScen(ForSession:number, ClassName:string, ScenarioName:string, Browser:string):string;
   CreateForMethod(ForSession:number, ClassName:string, MethodName:string, Browser:string):string;
   CallMethod(ForSession:number, MethodName:string, ObjectAddr:number, FromScenName:string, ForFrameQVP:string, Frame:string, FrameOwnerAddr:number, FromAgent:number, PageID:number, RefreshFrameName:string, ThenRefresh:boolean):string;
   UpdateObjectFromDOMXML(ForSession:number, FromXML:string, ForAddr:number);
   GetWEDFolder(ForSession:number, ObjectAddr:number, FromScenName:string, SelectedFolder:number, FromAgent:number):string;
   GetFolderShape(ForSession:number, ObjectAddr:number, FromScenName:string, SelectedFolder:number, AfterSelected:boolean, FromAgent:number):string;
   GetNextList(ForSession:number, ObjAddr:number, ListAddr:number, TypeAddr:number, StartRank:number, NbElem:number, VarName:string, GoBack:boolean, FromScenName:string, ForQVPName:string, PageID:number, FromAgent:number):string;
   GetRefTo(ForSession:number, ObjAddr:number, RefAddr:number, RefTypeAddr:number, RefScenName:string, FromScenName:string, ForQVPName:string, ForFrameName:string, FromAgent:number, IsList:number, PageID:number):string;
   GetScenOf(ForSession:number, ObjAddr:number, ScenName:string, FromScen:string, FromAgent:number, TargetFrameQVP:string, TargetFrame:string, Selectedfolfer:number):string;
   InitSession(ForSession:number);
   TerminateSession(ForSession:number);
   SelectFrame(ForSession:number, ForAgent:number, Rank:number):string;
   SendMessage(ForSession:number, Message:string);
   UpdateObjectFromFORM(ForSession:number, FORMContent:string);
   IncludeScenContent(ForSession:number, ClassName:string, ScenarioName:string, Browser:string):string;
   SetHTTPServerPath(ForSession:number, thePath:string);
   ListCtrlEvent(ForSession:number, Agent:number, ScenName:string, ObjAddr:number, RefAddr:number, RefTypeAddr:number, Rank:number, FromAgent:number, IsForSelect:boolean, CodeOwner:number, Selected:boolean, PageID:number):string;
   SelectRefToCombo(ForSession:number, Agent:number, ObjAddr:number, Rank:number, FromAgent:number, PageID:number):string;
   SelectRefToListCtrl(ForSession:number, Agent:number, ObjAddr:number, Rank:number, IsChecked:boolean, PageID:number):string;
   ShowNewPopUp(ForSession:number, ObjAddr:number, TypeAddr:number, VarAddr:number, FrameName:string, FromAgent:number, Info:string, ControlAgent:number, PageID:number):string;
   SelectComboEntry(ForSession:number, ObjAddr:number, TypeAddr:number, VarAddr:number, FrameName:string, FromAgent:number, ControlAgent:number, Rank:number):string;
   SetVirtualDebug(ForSession:number);
}
declare class aXMLProducer extends aXMLRootProducer {
   XSLName: string ;
   TableRank: string ;
   TableQVP: string ;
   TableName: string ;
   RecVarAddr: string ;
   ColumnRank: string ;
   IsProdShape: string ;
   FolderListPath: string ;
   RecordId: string ;
   AbsRecordId: string ;
   ByParmId: string ;
   AllEventFiles: string ;
   MoreScripts: string ;
   PressAction: string ;
   EscAction: string ;
   WriteHeader();
   AddTag(TagName:string);
   OpenTag(TagName:string);
   CloseTag(TagName:string);
   Init();
/**
*Portability Check: OK
*/
   ProduceFor();
   GetOverridingScenOf();
   GetCurType():aType;
/**
*Portability Check: OK
*/
   GetAgentInfo(ForQVP:aQVarPresentor, AgentType:string):string;
/**
*Portability Check: OK
*/
   GetXMLForClassTagName(CurAddr:string, CurType:aType):string;
   GetCurAddress():string;
   GetValue():string;
   ProduceSimpleXML();
   Writeln();
/**
*Portability Check: OK
*/
   ProduceThisHTMLEvent();
/**
*Portability Check: OK
*/
   BasicFirstTag(CurAddr:string, theType:aType, theTag:string);
/**
*Portability Check: OK
*/
   ProduceFirstTag(CurAddr:string, theType:aType, CurObj:aLightObject);
   Terminate();
   InsertOtherEventFiles(FromProd:aXMLProducer);
   CanAppendItemForProduction();
   ControlWillProduceItSelf();
   GetListofAllQvars();
/**
*Portability Check: OK
*/
   ProduceListCtrlBackNext(TheQVP:aQVPHTMLPickableListCtrl, StartList:number, VarAddr:string, theType:string, Listcount:number, count:number);
/**
*Portability Check: OK
*/
   ProduceXMLForListCtrl(ForListCtrl:aListOfAsListCtrlScenario, TheQVP:aQVPListOfAsListCtrl, ForAgent:aListOfAsListCtrlUIAgent);
/**
*Portability Check: OK
*/
   ProduceListOfAsLinks();
   ProduceForCheckBox();
/**
*Portability Check: OK
*/
   ProduceForCombo();
   ProduceForEnumCombo();
/**
*Portability Check: OK
*/
   WriteCallInvocation(ForQVP:aQVarPresentor, Target:string, NewWin:string, WinWidth:number, WinHeight:number, WinResizeable:boolean, ShowToolBar:boolean, ShowMenuBar:boolean, ShowStatusBar:boolean, ShowLocation:boolean);
}
declare class aXMLRootProducer extends aProduced {
   FilePath: string ;
   Name: string ;
   EntityProduced: string ;
   ClassTagName: string ;
   Kind: string ;
   SelectedFolder: string ;
   IsForXML: string ;
   DefaultQvp: string ;
   MainVar: string ;
   NbIndent: string ;
   IndentStr: string ;
   theJavaFactory: string ;
   ForAgent: string ;
   ForInstance: string ;
   MainWidth: string ;
   CurDx: string ;
   ItemMustbeHash: string ;
   XMLScenId(FromScen:aScenario):number;
   WriteHeader();
   SaveAsFile();
   SetFileName(FromName:string);
   ProduceFor(thisScen:aScenario, VarAddress:string);
   InitProduce();
   WriteIndentln(What:string);
   WriteUnIndentln(What:string);
   GetOverridingScenOf(theScen:aScenario):aScenario;
   GetAgentFromQualifierInAgent(theQVP:aQVarPresentor, InAgent:aUIAgent):aUIAgent;
   GetAgentFromQualifier(theQVP:aQVarPresentor):aUIAgent;
   GetAgentFromVarAddrAndQVP(ForQVP:aQVarPresentor, VarAddr:string, VarType:aType, ForAgent:aUIAgent):aUIAgent;
   GetAgentFromQualifierAndObject(theQVP:aQVarPresentor, InAgent:aUIAgent, ForObject:aLightObject):aUIAgent;
   GenerateForQVPOrScen(TheQVP:aQVarPresentor, FromScen:aScenario);
   GetHashTagName(FromTag:string):string;
   WriteClassTagName(ClassTagName:string);
   Writeln();
   Unindent();
   Indent();
   WritelnNoIndent(WriteWhat:string);
   ProduceThisHTMLEvent(OfQVP:aQVarPresentor, EventName:string, ForMethod:aMethodDesc, ForKind:string);
   GetHTMLEventFromWamEvent(WamEvent:string, HTMLEvent:string);
   HasSomeEvents(OfQVP:aQVarPresentor):boolean;
   ProduceHTMLEvents(OfQVP:aQVarPresentor, ForKind:string);
   InitFactory();
   Init();
   ConvertHTMLChars(InString:string):string;
   RemoveHTMLChars(InString:string):string;
   NewWinParams(WinWidth:number, WinHeight:number, WinResiseable:boolean, ShowToolBar:boolean, ShowLocation:boolean, ShowStatus:boolean, ShowMenubar:boolean):string;
   GetFolderText(ForScen:aScenario):string;
   ScriptFileName(ForScen:aScenario, ForClassName:string):string;
   GetListofAllQvars(theList:aListOfInstances, ForScen:aScenario, ForItem:aEWEDControlDescriptor, ForInstance:aLightObject, MainScen:aScenario, Dx:number, Dy:number, PropagateVar:boolean, ForMainQVP:aQVarPresentor);
   UpdateTagExtract(ForItem:aEWEDControlDescriptor, FromItem:aEWEDControlDescriptor, WithQVP:aQVarPresentor);
   ControlWillProduceItSelf(ForItem:aEWEDControlDescriptor):boolean;
   CanAppendItemForProduction(CurItem:aEWEDControlDescriptor, ForItem:aEWEDControlDescriptor, InScen:aScenario, ForInstance:aLightObject):boolean;
   Terminate();
   ExpandXSLFileName(XSLFileName:string);
   ValidJSTagName(TagName:string);
   AppendColumnsOfForListCtrl(theQVP:aQVPListOfAsListCtrl, externalQVP:aQVPListOfAsListCtrl);
   BuildColumnsListForListCtrl(LineScen:aListCtrlLineFormat, theQVP:aQVPListOfAsListCtrl);
/**
*Portability Check: OK
*/
   getNewQVPForListCtrl(ForListCtrl:aListOfAsListCtrlScenario, LineScen:aListCtrlLineFormat, originalQVP:aQVPListOfAsExternalListCtrl):aQVPListOfAsListCtrl;
   FirstLineScenForListCtrl(thisClassDef:aClassDef):string;
   GetGoodQualifierForListCtrl(ForListCtrl:aListOfAsListCtrlScenario, ForQVP:aQVPListOfAsListCtrl):aQVPListOfAsListCtrl;
   ProduceListOfAsLinks(TheQVP:aQVarPresentor);
   ProduceForCheckBox(ForQVP:aQVPXXXAsCheckBox);
   ProduceForCombo(ForQVP:aQVPXXXAsComboBox);
   ProduceForEnumCombo(ForQVP:aQVPXXXAsComboBox);
}
/**
*To produce XSL file
*/
declare class aXSLProducer extends aXMLRootProducer {
   HeaderOpen: string ;
   HeaderClosed: string ;
   ResultIsXML: string ;
   CurClassDef: string ;
   InHeader: string ;
   TargetIsJava: string ;
   HTMLEvent: string ;
   CurElementRank: string ;
   UpDatingControl: string ;
   ControlText: string ;
   HTMLText: string ;
   MainQvp: string ;
   CurWidth: string ;
   DescriptorsToDelete: string ;
   GridQVP: string ;
   AttributeGivenByCell: string ;
   GetStyleSheetPresenter(theQVP:aQVarPresentor):aStyleSheetPresenter;
   HasACSSClass(theQVP:aQVarPresentor, StyleSheetPresenter:aStyleSheetPresenter):boolean;
   WriteHeader();
   CloseFile();
   InitFactory();
   Init();
   SetFileName();
   ComputeGridAttributes():string;
   BuildXSLHeader();
   CloseXSLHeader();
   InitProduce();
   GetNextQVP(thisItem:aEWEDControlDescriptor, NextItem:aEWEDControlDescriptor, ForAllQVP:aListOfInstances);
   OrderedQVPList(FromQVars:aListOfInstances, InList:aListOfInstances);
   FillListofAllQvarsOrdered(ForScen:aScenario, PropagateVar:boolean, InList:aListOfInstances);
   FillListOfLines(FromQVars:aListOfInstances, ForScen:aScenario, InList:aListOfInstances);
   GetListOfAllTableScens(theList:aListOfInstances, ForScen:aScenario, ForItem:aEWEDControlDescriptor, ForInstance:aLightObject, MainScen:aScenario, Dx:number, Dy:number);
   FillTableLines(ForScen:aScenario, InList:aListOfInstances);
   GetCellAlignement(CurQVP:aQVarPresentor):string;
   ProduceTableBody(FromLines:aListOfInstances, ScenWidth:number, ScenHeight:number);
   ProduceTables(TableLineList:aListOfInstances, Width:number, Height:number);
   ProduceXSLHeaderAndFillLines(ForScen:aScenario, Lines:aListOfInstances);
   ProduceXSLTags(FromLines:aListOfInstances);
   InitHtmlEvent(ForScen:aScenario);
   SaveHTMLEvent();
   ProduceFor();
   GetOverridingScenOf();
   ProduceSimpleXSL();
   ProduceThisHTMLEvent();
   Terminate();
   ProduceNameTag(ForQVP:aQVarPresentor);
   ProduceTemplateTag();
   ProduceIdTag(ForQVP:aQVarPresentor, DoUnIndent:boolean);
   ProduceIdTagTemplate(ForQVP:aQVarPresentor, DoUnIndent:boolean);
   GetFontString(ForQVP:aQVarPresentor, TheFont:string);
   ProduceFontAttributes(ForQVP:aQVarPresentor);
   ProduceMyText(ForQVP:aQVarPresentor);
   ProduceXSLFullApplyTemplate();
   OpenFontSels(TheQVP:aQVarPresentor);
   CloseFontSels(TheQVP:aQVarPresentor);
   OpenTitleFontSels(ForCol:aListOfAsGridColumnQualifier);
   CloseTitleFontSels(ForCol:aListOfAsGridColumnQualifier);
   GetQVPStyle(theQVP:aQVarPresentor, CurString:string);
   ProduceSelectWithSize(TheQVP:aQVarPresentor, Count:number, Multiple:boolean);
   ProduceHTMLTableTag(ForQvp:aQVarPresentor, Border:number, CellSpace:number);
   IsItemVisible(CurItem:aEWEDControlDescriptor, InScen:aScenario):boolean;
   CanAppendItemForProduction();
   ControlWillProduceItSelf();
   UpdateItemForTemplate(CurItem:aEWEDControlDescriptor, FromItem:aEWEDControlDescriptor);
   UpdateObjectPresented(CurItem:aEWEDControlDescriptor);
   ProceedItemBeforeAppendInList(ForItem:aEWEDControlDescriptor);
/**
*Portability Check: OK
*/
   GetListofAllQvars();
   OpenCompleteFontWithAttributesAndClass(ForQVP:aQVarPresentor);
   CloseCompleteFontWithAttributesAndClass(ForQVP:aQVarPresentor);
   UpdateXSL(theQVP:aQVarPresentor);
   ReplaceXSLMainRefWithContent(ForQVP:aQVarPresentor, UseQVPName:boolean);
   UpdateXSLMainRef(ForQVP:aQVarPresentor, UseQVPName:boolean);
   UpdateXSLFromHTML(FromHTML:string, InXSL:string, ForScen:aScenario, Generator:aEntity);
   ProduceEventForCheckBoxInListCtrl(IsMultiSelect:boolean);
   ProduceFontAttributesForColomn(ForQVP:aColumnQualifier);
   ColorFont(ColorForeCode:string):string;
   ProduceXSLListCtrlNextAndBack(theQVP:aQVPHTMLPickableListCtrl);
   ProduceAlignementForCol(CurCol:aColumnQualifier);
   ProduceXSLForListCtrl(ForListCtrl:aListOfAsListCtrlScenario, TheQVP:aQVPListOfAsExternalListCtrl);
   GetListOfAsLinksBackColor(TheQVP:aQVarPresentor, ColorBackCode:string);
   ProduceListOfAsLinks();
   UpdateXSLForCheckBox(theQVP:aQVPXXXAsCheckBox);
   ProduceForCheckBox();
   ProduceForCombo();
   ConstEnumText(CurChoice:aConstEnum):string;
   ProduceForEnumCombo();
}
declare class aHTMLViewerBrowserWithButtonAgent extends aUIAgent {
   aHTMLViewerOnlyBrowser: string ;
   PrevPage: string ;
   NextPage: string ;
   GoPrev();
   GoNext();
}
declare class aHTMLViewerOnlyBrowserAgent extends aUIAgent {
   theURL: string ;
   theURL_TitleChange(Text:string):number;
   theURL_CommandStateChange(Command:number, Enable:boolean):number;
}
declare class aHTMLViewer extends aEntity {
   theURL: string ;
   PrevPage(theUIAgent:aUIAgent);
   NextPage(theUIAgent:aUIAgent);
   EnablePrev(Enable:boolean);
   EnableNext(Enable:boolean);
}
declare class aMethodTypeAsHTMLLink extends aMethodTypeAsPushButton {
   GetBitmap();
   NewQVarPresentor();
   GetQVarPresentor(forThisVar:aIdentifierDesc, forThisType:aType):aQVPXXXAsHTMLLink;
}
declare class XMLOptionsAgent extends aUIAgent {
   StaticText: string ;
   ServerClassDefStaticText: string ;
   IdeProductionDir: string ;
   GetRepertory: string ;
   ServerClassDef001: string ;
   UseExternalBrowser: string ;
}
declare class aXMLProdOption extends aOption {
   IdeProductionDir: string ;
   ServerClassDef: string ;
   UseExternalBrowser: string ;
   Init();
   InitAfterLoad();
   GetRepertory();
}
declare class MainBrowserAgent extends aUIAgent {
   Url: string ;
   Url_TitleChange(Text:string):number;
}
declare class aXMLIdePresentor extends aLightObject {
   Url: string ;
   InteractAsHTMLInWAMIDE(ForAgent:aUIAgent);
}
/**
*This class is instanciated from aClassAsFolderView scenario when interact this scenario in HTML/ASP mode.
Please never change its name, because it is intanciated by name !!!!!
*/
declare class aHTMLFolderUIAgent_TODELETEV5 extends aFolderViewAgent {
   FolderSelected_TODELETEV5: string ;
   XMLProducer_TODELETEV5: string ;
   Title: string ;
   InIDE_TODELETEV5: string ;
   SelectedFolder_TODELETEV5: string ;
   CurTargetQvp_TODELETEV5: string ;
   ProduceXMLAndXSL_TODELETEV5();
   WriteHeader_TODELETEV5(InText:string);
   GetXSLFile_TODELETEV5():string;
   IncludeXSLReference_TODELETEV5();
   IncludeXMLReference_TODELETEV5();
   WriteScripts_TODELETEV5(InText:string, CurScen:aScenario, ScenIsHTML:boolean, CurQvp:aQVarPresentor);
   WriteBody_TODELETEV5(InText:string);
   WriteXMLIncludeAndCloseHTML_TODELETEV5(InText:string);
   WriteHTMLPage_TODELETEV5(InText:string);
   GetFolder_TODELETEV5(Selected:number);
   ProduceInFrameSet_TODELETEV5();
   ProduceFrameTag_TODELETEV5(InText:string, ForQVP:aQVPHtmlFrame);
}
declare class aXMLAttribute extends aLightObject {
   pIUnknown: string ;
   pbIDispatch: string ;
   pIXMLDOMNamedNodeMap: string ;
   MapAttributesInterface(pIUnknown:string);
   Length():number;
   Item(Index:number):string;
   Terminate();
}
declare class aXMLDocument extends aLightObject {
   pIUnknown: string ;
   pbIUnknown: string ;
   pbIDispatch: string ;
   pbISupportErrorInfo: string ;
   pbIPersist: string ;
   pbIPersistFile: string ;
   pbIDataObject: string ;
   pbIConnectionPointContainer: string ;
   pbIPersistMoniker: string ;
   pbIServiceProvider: string ;
   pbIHlinkTarget: string ;
   pbIOleCommandTarget: string ;
   pbIOleDocument: string ;
   pbIOleDocumentView: string ;
   pbIOleCache: string ;
   pbIOleCache2: string ;
   pbIParseDisplayName: string ;
   pbIOleContainer: string ;
   pbIOleObject: string ;
   pbIOleItemContainer: string ;
   pbIOleWindow: string ;
   pbIOleInPlaceObject: string ;
   pbIViewObject: string ;
   pbIViewObject2: string ;
   pbIOleInPlaceActiveObject: string ;
   pbIProvideClassInfo: string ;
   pbIProvideClassInfo2: string ;
   pbIOleControl: string ;
   pbISpecifyPropertyPages: string ;
   pbIPersistStreamInit: string ;
   pbIOleInPlaceObjectWindowless: string ;
   pbIViewObjectEx: string ;
   pbIPointerInactive: string ;
   pbIPerPropertyBrowsing: string ;
   CreateInstance(CreateInstanceMode:number);
   MapInstance(pIUnknown:string);
   Init();
   Terminate();
   IUnknown():bIUnknown;
   IDispatch():bIDispatch;
   ISupportErrorInfo():bISupportErrorInfo;
   IPersist():bIPersist;
   IPersistFile():bIPersistFile;
   IDataObject():bIDataObject;
   IConnectionPointContainer():bIConnectionPointContainer;
   IPersistMoniker():bIPersistMoniker;
   IServiceProvider():bIServiceProvider;
   IHlinkTarget():bIHlinkTarget;
   IOleCommandTarget():bIOleCommandTarget;
   IOleDocument():bIOleDocument;
   IOleDocumentView():bIOleDocumentView;
   IOleCache():bIOleCache;
   IOleCache2():bIOleCache2;
   IParseDisplayName():bIParseDisplayName;
   IOleContainer():bIOleContainer;
   IOleObject():bIOleObject;
   IOleItemContainer():bIOleItemContainer;
   IOleWindow():bIOleWindow;
   IOleInPlaceObject():bIOleInPlaceObject;
   IViewObject():bIViewObject;
   IViewObject2():bIViewObject2;
   IOleInPlaceActiveObject():bIOleInPlaceActiveObject;
   IProvideClassInfo():bIProvideClassInfo;
   IProvideClassInfo2():bIProvideClassInfo2;
   IOleControl():bIOleControl;
   ISpecifyPropertyPages():bISpecifyPropertyPages;
   IPersistStreamInit():bIPersistStreamInit;
   IOleInPlaceObjectWindowless():bIOleInPlaceObjectWindowless;
   IViewObjectEx():bIViewObjectEx;
   IPointerInactive():bIPointerInactive;
   IPerPropertyBrowsing():bIPerPropertyBrowsing;
   GetScript():string;
   Getall():string;
   Getbody():string;
   GetactiveElement():string;
   Getimages():string;
   Getapplets():string;
   Getlinks():string;
   Getforms():string;
   Getanchors():string;
   Settitle(title:string);
   Gettitle():string;
   Getscripts():string;
   SetdesignMode(designMode:string);
   GetdesignMode():string;
   Getselection():string;
   GetreadyState():string;
   Getframes():string;
   Getembeds():string;
   Getplugins():string;
   SetalinkColor(alinkColor:string);
   GetalinkColor():string;
   SetbgColor(bgColor:string);
   GetbgColor():string;
   SetfgColor(fgColor:string);
   GetfgColor():string;
   SetlinkColor(linkColor:string);
   GetlinkColor():string;
   SetvlinkColor(vlinkColor:string);
   GetvlinkColor():string;
   Getreferrer():string;
   Getlocation():string;
   GetlastModified():string;
   Seturl(url:string);
   Geturl():string;
   Setdomain(domain:string);
   Getdomain():string;
   Setcookie(cookie:string);
   Getcookie():string;
   Setexpando(expando:boolean);
   Getexpando():boolean;
   Setcharset(charset:string);
   Getcharset():string;
   SetdefaultCharset(defaultCharset:string);
   GetdefaultCharset():string;
   GetmimeType():string;
   GetfileSize():string;
   GetfileCreatedDate():string;
   GetfileModifiedDate():string;
   GetfileUpdatedDate():string;
   Getsecurity():string;
   Getprotocol():string;
   GetnameProp():string;
   write(psarray:string);
   writeln(psarray:string);
   open(url:string, name:string, features:string, replace:string):string;
   close();
   clear();
   queryCommandSupported(cmdID:string):boolean;
   queryCommandEnabled(cmdID:string):boolean;
   queryCommandState(cmdID:string):boolean;
   queryCommandIndeterm(cmdID:string):boolean;
   queryCommandText(cmdID:string):string;
   queryCommandValue(cmdID:string):string;
   execCommand(cmdID:string, showUI:boolean, value:string):boolean;
   execCommandShowHelp(cmdID:string):boolean;
   createElement(eTag:string):string;
   Setonhelp(onhelp:string);
   Getonhelp():string;
   Setonclick(onclick:string);
   Getonclick():string;
   Setondblclick(ondblclick:string);
   Getondblclick():string;
   Setonkeyup(onkeyup:string);
   Getonkeyup():string;
   Setonkeydown(onkeydown:string);
   Getonkeydown():string;
   Setonkeypress(onkeypress:string);
   Getonkeypress():string;
   Setonmouseup(onmouseup:string);
   Getonmouseup():string;
   Setonmousedown(onmousedown:string);
   Getonmousedown():string;
   Setonmousemove(onmousemove:string);
   Getonmousemove():string;
   Setonmouseout(onmouseout:string);
   Getonmouseout():string;
   Setonmouseover(onmouseover:string);
   Getonmouseover():string;
   Setonreadystatechange(onreadystatechange:string);
   Getonreadystatechange():string;
   Setonafterupdate(onafterupdate:string);
   Getonafterupdate():string;
   Setonrowexit(onrowexit:string);
   Getonrowexit():string;
   Setonrowenter(onrowenter:string);
   Getonrowenter():string;
   Setondragstart(ondragstart:string);
   Getondragstart():string;
   Setonselectstart(onselectstart:string);
   Getonselectstart():string;
   elementFromPoint(x:number, y:number):string;
   GetparentWindow():string;
   GetstyleSheets():string;
   Setonbeforeupdate(onbeforeupdate:string);
   Getonbeforeupdate():string;
   Setonerrorupdate(onerrorupdate:string);
   Getonerrorupdate():string;
   toString():string;
   createStyleSheet(bstrHref:string, lIndex:number):string;
   releaseCapture();
   recalc(fForce:boolean);
   createTextNode(text:string):string;
   GetdocumentElement():string;
   GetuniqueID():string;
   attachEvent(event:string, pdisp:string):boolean;
   detachEvent(event:string, pdisp:string);
   Setonrowsdelete(onrowsdelete:string);
   Getonrowsdelete():string;
   Setonrowsinserted(onrowsinserted:string);
   Getonrowsinserted():string;
   Setoncellchange(oncellchange:string);
   Getoncellchange():string;
   Setondatasetchanged(ondatasetchanged:string);
   Getondatasetchanged():string;
   Setondataavailable(ondataavailable:string);
   Getondataavailable():string;
   Setondatasetcomplete(ondatasetcomplete:string);
   Getondatasetcomplete():string;
   Setonpropertychange(onpropertychange:string);
   Getonpropertychange():string;
   Setdir(dir:string);
   Getdir():string;
   Setoncontextmenu(oncontextmenu:string);
   Getoncontextmenu():string;
   Setonstop(onstop:string);
   Getonstop():string;
   createDocumentFragment():string;
   GetchildNodes():string;
   Setonbeforeeditfocus(onbeforeeditfocus:string);
   Getonbeforeeditfocus():string;
   getElementsByName(v:string):string;
   getElementById(v:string):string;
   getElementsByTagName(v:string):string;
}
/**
*   GetnodeName : function (this : Pointer, inOut name : BSTR) return HRESULT
   GetnodeValue : function (this : Pointer, inOut value : VARIANT) return HRESULT
   SetnodeValue : function (this : Pointer, value : VARIANT) return HRESULT
   GetnodeType : function (this : Pointer, inOut typec : DOMNodeType) return HRESULT
   GetparentNode : function (this : Pointer, inOut parent : LPIXMLDOMNode) return HRESULT
   GetchildNodes : function (this : Pointer, inOut childList : LPIXMLDOMNodeList) return HRESULT
   GetfirstChild : function (this : Pointer, inOut firstChild : LPIXMLDOMNode) return HRESULT
   GetlastChild : function (this : Pointer, inOut lastChild : LPIXMLDOMNode) return HRESULT
   GetpreviousSibling : function (this : Pointer, inOut previousSibling : LPIXMLDOMNode) return HRESULT
   GetnextSibling : function (this : Pointer, inOut nextSibling : LPIXMLDOMNode) return HRESULT
   Getattributes : function (this : Pointer, inOut attributeMap : LPIXMLDOMNamedNodeMap) return HRESULT
   insertBefore : function (this : Pointer, newChild : LPIXMLDOMNode, refChild : VARIANT, 
      inOut outNewChild : LPIXMLDOMNode) return HRESULT
   replaceChild : function (this : Pointer, newChild : LPIXMLDOMNode, oldChild : LPIXMLDOMNode, 
      inOut outOldChild : LPIXMLDOMNode) return HRESULT
   removeChild : function (this : Pointer, childNode : LPIXMLDOMNode, inOut oldChild : LPIXMLDOMNode) return HRESULT
   appendChild : function (this : Pointer, newChild : LPIXMLDOMNode, inOut outNewChild : LPIXMLDOMNode) return HRESULT
   hasChildNodes : function (this : Pointer, inOut hasChild : Boolean) return HRESULT
   GetownerDocument : function (this : Pointer, inOut DOMDocument : LPIXMLDOMDocument) return HRESULT
   cloneNode : function (this : Pointer, deep : Boolean, inOut cloneRoot : LPIXMLDOMNode) return HRESULT
   GetnodeTypeString : function (this : Pointer, inOut nodeType : BSTR) return HRESULT
   Gettext : function (this : Pointer, inOut text : BSTR) return HRESULT
   Settext : function (this : Pointer, text : BSTR) return HRESULT
   Getspecified : function (this : Pointer, inOut isSpecified : Boolean) return HRESULT
   Getdefinition : function (this : Pointer, inOut definitionNode : LPIXMLDOMNode) return HRESULT
   GetnodeTypedValue : function (this : Pointer, inOut typedValue : VARIANT) return HRESULT
   SetnodeTypedValue : function (this : Pointer, typedValue : VARIANT) return HRESULT
   GetdataType : function (this : Pointer, inOut dataTypeName : VARIANT) return HRESULT
   SetdataType : function (this : Pointer, dataTypeName : BSTR) return HRESULT
   Getxml : function (this : Pointer, inOut xmlString : BSTR) return HRESULT
   transformNode : function (this : Pointer, stylesheet : LPIXMLDOMNode, inOut xmlString : BSTR) return HRESULT
   selectNodes : function (this : Pointer, queryString : BSTR, inOut resultList : LPIXMLDOMNodeList) return HRESULT
   selectSingleNode : function (this : Pointer, queryString : BSTR, inOut resultNode : LPIXMLDOMNode) return HRESULT
   Getparsed : function (this : Pointer, inOut isParsed : Boolean) return HRESULT
   GetnamespaceURI : function (this : Pointer, inOut namespaceURI : BSTR) return HRESULT
   Getprefix : function (this : Pointer, inOut prefixString : BSTR) return HRESULT
   GetbaseName : function (this : Pointer, inOut nameString : BSTR) return HRESULT
   transformNodeToObject : function (this : Pointer, stylesheet : LPIXMLDOMNode, 
      outputObject : VARIANT) return HRESULT

*/
declare class aXMLDomNode extends aLightObject {
   pIUnknown: string ;
   pbIDispatch: string ;
   pIXMLDOMNode: string ;
   LastResult: string ;
   MapNodeInterface(pIUnknown:string);
   GetnodeName():string;
   GetnodeValue():string;
   Getattributes():string;
   GettextAsString():string;
   Gettext():string;
   GetfirstChild():string;
   removeChild(childNode:string):string;
   GetchildNodes():string;
   hasChildNodes():boolean;
   Terminate();
   appendChild(newChild:string):string;
   Getxml():string;
   SetNodeValue(value:string);
   replaceChild(newChild:string, oldChild:string):string;
   SetText(FromText:string);
}
declare class aDocumentDOMXML extends aLightObject {
   pIUnknown: string ;
   pbIUnknown: string ;
   pbIDispatch: string ;
   pbIStream: string ;
   pbIPersistStream: string ;
   pbIConnectionPointContainer: string ;
   pbIPersistMoniker: string ;
   pbIOleCommandTarget: string ;
   pbIProvideClassInfo: string ;
   pbIPersistStreamInit: string ;
   pbIObjectWithSite: string ;
   pIXMLDOMDocument: string ;
   LastResult: string ;
   CreateInstance(CreateInstanceMode:number);
   MapInstance(pIUnknown:string);
   Init();
   Terminate();
   IUnknown():bIUnknown;
   IDispatch():bIDispatch;
   IStream():bIStream;
   IPersistStream():bIPersistStream;
   IConnectionPointContainer():bIConnectionPointContainer;
   IPersistMoniker():bIPersistMoniker;
   IOleCommandTarget():bIOleCommandTarget;
   IProvideClassInfo():bIProvideClassInfo;
   IPersistStreamInit():bIPersistStreamInit;
   IObjectWithSite():bIObjectWithSite;
   GetnodeName():string;
   GetnodeValue():string;
   SetnodeValue(nodeValue:string);
   GetnodeType():number;
   GetparentNode():string;
   GetchildNodes():string;
   GetfirstChild():string;
   GetlastChild():string;
   GetpreviousSibling():string;
   GetnextSibling():string;
   Getattributes():string;
   insertBefore(newChild:string, refChild:string):string;
   replaceChild(newChild:string, oldChild:string):string;
   removeChild(childNode:string):string;
   appendChild(newChild:string):string;
   hasChildNodes():boolean;
   GetownerDocument():string;
   cloneNode(deep:boolean):string;
   GetnodeTypeString():string;
   Gettext():string;
   Settext(text:string);
   Getspecified():boolean;
   Getdefinition():string;
   GetnodeTypedValue():string;
   SetnodeTypedValue(nodeTypedValue:string);
   GetdataType():string;
   SetdataType(dataType:string);
   Getxml():string;
   transformNode(stylesheet:string):string;
   selectNodes(queryString:string):string;
   selectSingleNode(queryString:string):string;
   Getparsed():boolean;
   GetnamespaceURI():string;
   Getprefix():string;
   GetbaseName():string;
   transformNodeToObject(stylesheet:string, outputObject:string);
   Getdoctype():string;
   Getimplementation():string;
   GetdocumentElement():string;
   SetRefdocumentElement(documentElement:string);
   createElement(tagName:string):string;
   createDocumentFragment():string;
   createTextNode(data:string):string;
   createComment(data:string):string;
   createCDATASection(data:string):string;
   createProcessingInstruction(target:string, data:string):string;
   createAttribute(name:string):string;
   createEntityReference(name:string):string;
   getElementsByTagName(tagName:string):string;
   createNode(type1:string, name:string, namespaceURI:string):string;
   nodeFromID(idString:string):string;
   load(xmlSource:string):boolean;
   GetreadyState():number;
   GetparseError():string;
   Geturl():string;
   Getasync():boolean;
   Setasync(async:boolean);
   abort();
   loadXML(bstrXML:string):boolean;
   save1(desination:string);
   GetvalidateOnParse():boolean;
   SetvalidateOnParse(validateOnParse:boolean);
   GetresolveExternals():boolean;
   SetresolveExternals(resolveExternals:boolean);
   GetpreserveWhiteSpace():boolean;
   SetpreserveWhiteSpace(preserveWhiteSpace:boolean);
   Setonreadystatechange(onreadystatechange:string);
   Setondataavailable(ondataavailable:string);
   Setontransformnode(ontransformnode:string);
}
declare module xXMLMotorShared {
   var RecastScenCriticalSection: string ;
   var VirtualDebugMode: string ;
   var WriteXSLCriticalSection: string ;
   var WriteTagsTableCriticalSection: string ;
   var CompressTag: string ;
   var TagsTable: string ;
   var TagCount: string ;
   var NbSessions: string ;
   var ServerPath_DEPRECATED: string ;
   function EnroleNew(thisObject:aFullObject, OfThisClass:string);
   function CloneVarsExceptFOFrom(fromObject:aFullObject, toObject:aFullObject);
   function SetVirtualUI(VirtualControl:boolean, VirtualActiveX:boolean, VirtualWindow:boolean);
   function IsVirtualControl():boolean;
   function IsInVirtualMode():boolean;
   function GetTagsTableFileName():string;
   function FillTagsTable(FileSource:string);
   function LoadTagsTable();
   function NeedToSaveTagsTable():boolean;
   function SaveTagsTable();
   function DisposeTagsTable();
   function AppendNewTag(OriginalTag:string, HashedTag:string);
   function GetNewHashedTag(OriginalTag:string):string;
   function ConvertTagIfNecessary(OriginalTag:string):string;
   function GetHashedTag(OriginalTag:string):string;
   function GetTagFromTag(OriginalTag:string, ClassName:string):string;
}
declare class aListOfAsHTMLLinkScenario extends aListOfAsHLinkScenario {
   NewQVarPresentor();
   GetBitmap();
}
declare class aXXXAsHTMLLink extends aXXXAsPushButton {
   GetBitmap();
   NewQVarPresentor();
   GetQVarPresentor(forThisVar:aIdentifierDesc, forThisType:aType):aQVPXXXAsHTMLLink;
   DefaultUIAgentClassId();
}
declare class EWAMPainterForLogInAgent extends aUIAgent {
   aEWAMPainter003: string ;
}
declare class aEWAMPainter002Agent extends aUIAgent {
   WebBrowser: string ;
   LoadValue();
}
declare class aEWAMPainter003Agent extends aSplitViewAgent {
}
declare class aEWAMPainter004Agent extends aUIAgent {
   WebBrowser: string ;
   LoadValue();
}
declare class aEWAMPainter005Agent extends aSplitViewAgent {
}
declare class EWAMPainterForAboutAgent extends aUIAgent {
   aEWAMPainter005: string ;
}
declare class aEWAMPainter extends aLightObject {
}
declare class ModelForMDIPresentableEntityOverrideAgent extends aOpenWhereClosedUIAgent {
   aEWAMWelcomeManager001: string ;
}
declare class aEWAMWelcomeManager001Agent extends aUIAgent {
   onlyTutorials: string ;
   GetIde: string ;
   BitMap: string ;
}
declare class aEWAMWelcomeManager extends aWelcomeManager {
   GetPainter():string;
   CatalogFileNameWithoutExt();
}
declare class aXMLDomNodeList extends aLightObject {
   pIUnknown: string ;
   pbIDispatch: string ;
   pIXMLDOMNodeList: string ;
   LastResult: string ;
   MapNodeListInterface(pIUnknown:string);
   Getlength():number;
   GetItem(Index:number):string;
   Terminate();
}
declare class aXMLDOMParseError extends aLightObject {
   pIUnknown: string ;
   pbIDispatch: string ;
   pIXMLDOMParseError: string ;
   LastResult: string ;
   MapParseErrorInterface(pIUnknown:string);
   errorCode():number;
   Url():string;
   srcText():string;
   reason():string;
   line():number;
   linepos():number;
   filepos():number;
   Terminate();
}
declare class aHTMLTableScenario extends aScenarioWithStyleSheet {
}
declare class aQVPStyleSheetScenario extends aQVarPresentor {
}
declare class aEWEDServer extends aLightObject {
   CurText: string ;
   XSLHashTable: string ;
   GIFsHashTable: string ;
   FrameQVPName: string ;
   CurScenName: string ;
   FrameName: string ;
   FrameAgent: string ;
   DoFolderShape: string ;
   RecordId: string ;
   ClassDefId: string ;
   TextTypeId: string ;
   StringTypeId: string ;
   CStringTypeId: string ;
   ServerKind: string ;
   ClassProdPrefix: string ;
   ObjectsToGarbage: string ;
   theJavaFactory: string ;
   DoFolderShapeAfter: string ;
   WaitingRefAgent: string ;
   RefObjToGarbage: string ;
   CurPageID: string ;
   AlwaysCheckPage: string ;
   NoPageIdInc: string ;
   RefreshName: string ;
   BackAndFourthCount: string ;
   XMLMode: string ;
   NewXSLProducer():aXSLProducer;
   NewXMLProducer():aXMLProducer;
   InitXSLHash();
   ScriptExtension():string;
   LoadXSLFiles();
   InitFactory();
   InitOptions();
   InitCriticalSections();
   Init();
   Terminate();
   GetText():string;
   DoCreateForScen(ForSession:string, ClassName:string, ScenarioName:string, Browser:string);
   DoCreateForMethod(ForSession:string, ClassName:string, MethodName:string, Browser:string);
   DoCallMethod(ForSession:string, MethodName:string, ObjectAddr:number, FromScenName:string, ForFrameQVP:string, Frame:string, FrameOwnerAddr:number, FromAgent:number, PageID:number, RefreshFrameName:string, ThenRefresh:boolean);
   DoSelectFrame(ForSession:string, ForAgent:number, Rank:number):string;
   DoGetWEDFolder(ForSession:string, ObjectAddr:number, FromScenName:string, SelectedFolder:number, FromAgent:number);
   DoGetFolderShape(ForSession:string, ObjectAddr:number, FromScenName:string, SelectedFolder:number, AfterSelected:boolean, FromAgent:number);
   DoGetScenOf(ForSession:string, ObjAddr:number, ScenName:string, FromScen:string, FromAgent:number, TargetFrameQVP:string, TargetFrame:string, Selectedfolfer:number);
   DoSetHTTPServerPath(ForSession:string, thePath:string);
   DoGetNextList(Ses:string, Obj:number, List:number, Typ:number, Start:number, Nb:number, VarName:string, GoBack:boolean, FromScen:string, ForQVP:string, PageID:number, FromAgent:number);
   ConsultObjOnRefTo(CurRef:aLightObject, theScen:aScenario);
   DoGetRefTo(Ses:string, Obj:number, Ref:number, Typ:number, RefScen:string, FromScen:string, ForQVP:string, ForFrame:string, FromAgent:number, Rank:number, PageID:number);
   DoInitSession(ForSession:string);
   DoTerminateSession(ForSession:string);
   UpdateObjectFromFORMText(ForSession:string, FORMText:string);
   UpdateAgentFromXMLNode(FromNamedNode:aXMLNamedNode, AgentKind:string);
   UpdateObjectFromXMLNode(fromNode:aXMLNamedNode, ForAddr:number);
   DoUpdateObjectFromXML(ForSession:string, UpdatedXML:string, ForAddr:number);
   DoSendMessage(ForSession:string, Message:string);
   DoSetVirtualDebug(ForSession:string);
   DoListCtrlEvent(ForSession:string, Agent:number, ScenName:string, ObjAddr:number, RefAddr:number, RefTypeAddr:number, Rank:number, FromAgent:number, IsForSelect:boolean, CodeOwner:number, IsSelected:boolean, PageId:number);
   DoSelectRefToCombo(ForSession:string, Agent:number, ObjAddr:number, Rank:number, FromAgent:number, PageID:number);
   DoSelectRefToListCtrl(ForSession:string, Agent:number, ObjAddr:number, Rank:number, IsChecked:boolean, PageID:number);
   NeweWEDFrameProducer():aEWEDProducer;
   NeweWEDFolderProducer():aEWEDProducer;
   NeweWEDBasicProducer():aEWEDProducer;
   NeweWEDProducer(ForAgent:aUIAgent):aEWEDProducer;
   DoCallAction(ForSession:string, Action:string, FromObj:number, VarAddr:number, TypeAddr:number, FromAgent:number, Index:number);
   DoGetRefToPopUp(ForSession:string, ObjAddr:number, TypeAddr:number, VarAddr:number, FrameName:string, TargetFrameName:string, FromAgent:number, Index:number, PageID:number);
   DoShowNewPopUp(ForSession:string, ObjAddr:number, TypeAddr:number, VarAddr:number, FrameName:string, FromAgent:number, Info:string, ControlAgent:number, PageID:number);
   DoSelectComboEntry(ForSession:string, ObjAddr:number, TypeAddr:number, VarAddr:number, FrameName:string, FromAgent:number, ControlAgent:number, Rank:number);
   RefreshForVarAgent(ForVarAgent:aVarAgent);
}
declare class aXSLTranformer extends aLightObject {
   ComputeInsertedDivText(theText:string, DeleteFORMS:boolean, NbLinesToDelete:number);
   TransformtoHTML(FromAgent:aUIAgent, InText:string);
}
declare class aCOMXSLTransformer extends aXSLTranformer {
   TransformNode(DOMXML:aDocumentDOMXML, DOMXSL:aDocumentDOMXML):string;
   RemoveLastHTMLInsertChars(Fromtext:string);
   LoadXSLFromTitleAttr(FromAttr:aXMLAttribute, LoadedXSL:aDocumentDOMXML):boolean;
   UpdateDivInnerHTML(fromBSTR:string, ForDiv:aXMLDomNode, InDiv:aXMLDomNode, DeleteFORMS:boolean);
   LoadListXMLElement(FromAttributes:aXMLAttribute, FromDomXML:aDocumentDOMXML, TabIndex:number, ElemName:string):aDocumentDOMXML;
   LoadRefXMLElement(FromAttributes:aXMLAttribute, FromDomXML:aDocumentDOMXML):aDocumentDOMXML;
   ComputeHTMLContent(FromBSTR:string, FromDomXML:aDocumentDOMXML, DoSecondPass:boolean):string;
   UpdateHTMLContentWithCOM(FromBSTR:string, FromDomXML:aDocumentDOMXML, InText:string);
   TransformtoHTML();
}
declare class aApacheServer extends aEWEDServer {
   Init();
   UpdateObjectFromXML(ForSession:string, UpdatedXML:string, ForAddr:number);
}
declare class aJavaXSLTransform extends aLightObject {
   myJtoWydeClass: string ;
   myJtoWydeObject: string ;
   JavaClassName():string;
   Init();
   Terminate();
   TransformToHTML(XMLContent:string, XSLContent:string):string;
}
declare module xJavaVMForEWED {
   var JVM: string ;
   var JEnv: string ;
   var WydeToJavaObjectsTable: string ;
   function FindJVMandEnv(theVM:string, theEnv:string):boolean;
   function FindJClass(ClassName:string):string;
   function NewJObject(FromClass:string):string;
   function NewJObjectFromName(ClassName:string):string;
   function GetJMethodId(ForClass:string, Methodname:string, MethodSig:string):string;
   function GetJStaticMethodID(ForClass:string, Methodname:string, MethodSig:string):string;
   function GetJString(FromText:string):string;
   function GetJStringFromCString(FromCString:string):string;
   function CallStringMethod(Static:boolean, ForClass:string, Methodname:string, MethodSig:string, CurJO:string, Args:string):string;
}
declare class aJavaXSLTransformer extends aXSLTranformer {
   FindNodesByName(FromNode:aXMLNamedNode, Name:string, InList:aListOfInstances);
   FindNodeByNameAtRank(FromNode:aXMLNamedNode, Name:string, Rank:number):aXMLNamedNode;
   LoadXSLFile(FromName:string):string;
   ComputeHTMLContent(ForText:string, WithXML:string);
   TransformtoHTML();
}
declare class aJavaScriptFileRef extends aEntity {
}
declare class aHTMLEventDesc extends aLightObject {
   FileName: string ;
   Content: string ;
   Terminate();
}
declare class aConstBooleanJavaScriptProducer extends aConstDescJavaScriptProducer {
   Produce();
}
declare class aConstDescJavaScriptProducer extends aIdentifierDescJavaScriptProducer {
}
declare class aExternalMethodDescJavaScriptProducer extends aMethodDescJavaScriptProducer {
   Produce();
}
declare class aIdentifierDescJavaScriptProducer extends aJavaScriptProducer {
}
declare class aIRChoiceRangeJavaScriptProducer extends aJavaScriptProducer {
   Produce();
}
declare class aIROpBasicUnaryJavaScriptProducer extends aIROpNodeJavaScriptProducer {
   Produce();
}
declare class aIRCaseChoiceJavaScriptProducer extends aJavaScriptProducer {
   Produce();
}
declare class aIROpBinaryJavaScriptProducer extends aIROpNodeJavaScriptProducer {
   JSPriority();
   LProduce(where:string, options:string);
   RProduce(where:string, options:string);
   MustProdParentheses():boolean;
   Produce();
}
declare class aIROpConstantJavaScriptProducer extends aIROpNodeJavaScriptProducer {
   Produce();
}
declare class aIROpIdentifierJavaScriptProducer extends aIROpNodeJavaScriptProducer {
   Produce();
}
declare class aIROpSystemModuleIdentifierJavaScriptProducer extends aIROpIdentifierJavaScriptProducer {
   Produce();
}
declare class aIROpUnaryJavaScriptProducer extends aIROpBasicUnaryJavaScriptProducer {
   Produce();
}
declare class aIrStatementAssignJavaScriptProducer extends aIRStatementJavaScriptProducer {
   LProduce(where:string, options:string);
   RProduce(where:string, options:string);
   Produce();
}
declare class aIrStatementCallJavaScriptProducer extends aIRStatementJavaScriptProducer {
   Produce();
}
declare class aIrStatementCaseJavaScriptProducer extends aIRStatementJavaScriptProducer {
   Produce();
}
declare class aIrStatementDecByConstJavaScriptProducer extends aIrStatementDecJavaScriptProducer {
/**
*Portability Check: OK
*/
   Produce();
}
declare class aIrStatementCommentJavaScriptProducer extends aIRStatementJavaScriptProducer {
   Produce();
}
declare class aIrStatementDecByOneJavaScriptProducer extends aIrStatementDecByConstJavaScriptProducer {
   Produce();
}
declare class aIrStatementDecJavaScriptProducer extends aIrStatementAssignJavaScriptProducer {
   Produce();
}
declare class aIrStatementForJavaScriptProducer extends aIrStatementLoopJavaScriptProducer {
   Produce();
}
declare class aIrStatementIfJavaScriptProducer extends aIRStatementJavaScriptProducer {
   Produce();
}
declare class aIrStatementIncByConstJavaScriptProducer extends aIrStatementIncJavaScriptProducer {
/**
*Portability Check: OK
*/
   Produce();
}
declare class aIrStatementIncByOneJavaScriptProducer extends aIrStatementIncByConstJavaScriptProducer {
   Produce();
}
declare class aInstanceVarDescJavaScriptProducer extends aVarDescJavaScriptProducer {
   Produce();
}
declare class aIrStatementIncJavaScriptProducer extends aIrStatementAssignJavaScriptProducer {
   Produce();
}
declare class aIRStatementJavaScriptProducer extends aJavaScriptProducer {
}
declare class aIROpNodeJavaScriptProducer extends aJavaScriptProducer {
   JSPriority():string;
}
declare class aIrStatementLoopJavaScriptProducer extends aIRStatementJavaScriptProducer {
}
declare class aIROpCallJavaScriptProducer extends aIROpNodeJavaScriptProducer {
   Produce();
}
declare class aIrStatementReturnJavaScriptProducer extends aIRStatementJavaScriptProducer {
   Produce();
}
declare class aIrStatementRepeatJavaScriptProducer extends aIrStatementWhileJavaScriptProducer {
   Produce();
}
declare class aIrStatementWhileJavaScriptProducer extends aIrStatementLoopJavaScriptProducer {
   Produce();
}
declare class aJavaScriptProducer extends aProducer {
   target();
   ProduceStaments(FirstStatement:aIRStatement, where:string, options:string);
   DoWrite(where:string, WriteWhat:string);
   DoWriteln(where:string, WriteWhat:string);
   Unindent();
   Indent();
}
declare class aJavaScriptProducerFactory extends aProducerFactory {
   XSLProd: string ;
   NextMethodIsServer: string ;
   AgentClassDef: string ;
   SkipAgentMethod: string ;
   NextParamsAreJSCall: string ;
   IsProducingFirstJSCallArg: string ;
   IsProducingSecondJSCallArg: string ;
   IndentStr: string ;
   NoCommaForNextParam: string ;
   JustProdParams: string ;
   EventsHasher: string ;
   IsInStatement: string ;
   InitEvents();
   Init();
   Unindent();
   Indent();
   Terminate();
   GetHTMLEventFromWamEvent(WamEvent:string, HTMLEvent:string);
}
declare class aLocalVarDescJavaScriptProducer extends aVarDescJavaScriptProducer {
   Produce();
}
declare class aMethodDescJavaScriptProducer extends aIdentifierDescJavaScriptProducer {
   Produce();
}
declare class aMethodImplemJavaScriptProducer extends aJavaScriptProducer {
   Produce();
}
declare class aMethodTypeJavaScriptProducer extends aTypeJavaScriptProducer {
   Produce();
}
declare class aModuleDefJavaScriptProducer extends aTypeJavaScriptProducer {
   Produce();
}
declare class aOpCharConstantJavaScriptProducer extends aOpIntConstantJavaScriptProducer {
   Produce();
}
declare class aOpInt8ConstantJavaScriptProducer extends aOpIntConstantJavaScriptProducer {
   Produce();
}
declare class aOpIntConstantJavaScriptProducer extends aIROpConstantJavaScriptProducer {
/**
*Portability Check: OK
*/
   Produce();
}
declare class aOpRealConstantJavaScriptProducer extends aIROpConstantJavaScriptProducer {
   Produce();
}
declare class aOpStringConstantJavaScriptProducer extends aIROpConstantJavaScriptProducer {
   Produce();
}
declare class aOverrideInstanceVarDescJavaScriptProducer extends aInstanceVarDescJavaScriptProducer {
   Produce();
}
declare class aParameterDescJavaScriptProducer extends aVarDescJavaScriptProducer {
   Produce();
}
declare class aVarDescJavaScriptProducer extends aIdentifierDescJavaScriptProducer {
}
declare class aTypeJavaScriptProducer extends aJavaScriptProducer {
}
declare class aListJavaScriptProducer extends aJavaScriptProducer {
   Produce();
}
declare class StyleSheetInfosAgent extends aUIAgent {
   StylePresentors: string ;
   StylePresentorsGroupBox: string ;
   StyleSheet: string ;
   StaticText: string ;
}
declare class BodyInfoAgent extends aUIAgent {
   BottomMargin: string ;
   BottomMarginStaticText: string ;
   LeftMargin: string ;
   LeftMarginStaticText: string ;
   RightMargin: string ;
   RightMarginStaticText: string ;
   TopMargin: string ;
   TopMarginStaticText: string ;
   NoScroll: string ;
}
declare class aScenarioWithStyleSheet002Agent extends aFolderViewAgent {
}
declare class aXSLProducer005Agent extends aFolderViewAgent {
}
declare class aXSLProducer001Agent extends aUIAgent {
   ControlText: string ;
}
declare class aXSLProducer002Agent extends aUIAgent {
   HTMLText: string ;
}
declare class aXSLProducer003Agent extends aUIAgent {
}
declare class aXSLProducer004Agent extends aUIAgent {
   FilePath: string ;
   FilePathGroupBox: string ;
   ClassTagName: string ;
   ClassTagNameStaticText: string ;
   Kind: string ;
   KindStaticText: string ;
   HeaderOpen: string ;
   HeaderClosed: string ;
   InHeader: string ;
   TargetIsJava: string ;
   UpDatingControl: string ;
}
declare class CStringAsURLAgent extends aHTMLLinkAgent {
}
declare class ListOfAsHTMLListCtrlAgent extends aHTMLPickableListCtrlUIAgent {
}
declare class aCStringTypeAsHTMLLink extends aXXXAsHTMLLink {
}
declare class aXMLOptionRole extends aSingleRoleType {
   SearchAndPick();
}
declare class aEWEDLineDescriptor extends aLightObject {
   LineNB: string ;
   theList: string ;
   MinY: string ;
   MaxY: string ;
   Init();
   Terminate();
}
declare class aEWEDControlDescriptor extends aLightObject {
   theQVP: string ;
   QVPY: string ;
   QVPX: string ;
   ForVar: string ;
   TagExtract: string ;
   PrevItem: string ;
   ForInstance: string ;
   MainQVP: string ;
   QVPW: string ;
}
declare class aHTMLCloseBrowserUIAgent extends aUIAgent {
   eWEDProducer():aEWEDCloseProducer;
}
declare class aHTMLPickableListCtrl extends aListOfAsListCtrlScenario {
   DefaultUIAgentClassId();
   NewQVarPresentor():aQVPHTMLPickableListCtrl;
   GetQVarPresentor(forThisVar:aIdentifierDesc, forThisType:aType):aQVPHTMLPickableListCtrl;
   GetBitmap();
}
declare class aHTMLScenarioCloseBrowser extends aScenarioWithStyleSheet {
   DefaultUIAgentClassId();
}
declare class aHTMLPickableListCtrlUIAgent extends aListOfAsListCtrlUIAgent {
   ListStart: string ;
/**
*Portability Check: OK
*/
   ProduceXMLUpdate(InText:string, GoBack:boolean, Start:number, Nb:number, VarName:string, TheQVP:aQVPHTMLPickableListCtrl, ForObj:aLightObject, thetype:aListofReftosType, VarAddr:string);
   Produce();
}
declare class HTMLSettingsAgent extends aUIAgent {
   NbRows: string ;
   NbRowsStaticText: string ;
   NextLinkExtract: string ;
   NextLinkExtractStaticText: string ;
   NextLinkPos: string ;
   NextLinkPosStaticText: string ;
   BackLinkExtract: string ;
   BackLinkExtractStaticText: string ;
   BackLinkPos: string ;
   BackLinkPosStaticText: string ;
   OpenANewWindow: string ;
   NewWinWidth: string ;
   NewWinWidthStaticText: string ;
   NewWinHeight: string ;
   NewWinHeightStaticText: string ;
   NewWinResizeable: string ;
   OddRowColor: string ;
   OddRowColorStaticText: string ;
   NotOddRowColor: string ;
   NotOddRowColorStaticText: string ;
   ShowToolbar: string ;
   ShowMenubar: string ;
   ShowLocation: string ;
   ShowStatus: string ;
   ExtractColTitle: string ;
   ExtractColTitleStaticText: string ;
   ExtractColPos: string ;
   ExtractColPosStaticText: string ;
}
declare class aQVPHTMLPickableListCtrl001Agent extends aFolderViewAgent {
}
declare class QVPListOfAsListCtrlSettingsVirtualOverrideAgent extends QVPListOfAsListCtrlSettingsVirtualAgent {
   aQVPHTMLPickableListCtrl001: string ;
}
declare class aQVPHTMLPickableListCtrl extends aQVPListOfAsListCtrl {
   NbRows: string ;
   NextLinkExtract: string ;
   NextLinkPos: string ;
   BackLinkExtract: string ;
   BackLinkPos: string ;
   OpenANewWindow: string ;
   NewWinWidth: string ;
   NewWinHeight: string ;
   NewWinResizeable: string ;
   OddRowColor: string ;
   NotOddRowColor: string ;
   ShowToolbar: string ;
   ShowMenubar: string ;
   ShowLocation: string ;
   ShowStatus: string ;
   ExtractColTitle: string ;
   ExtractColPos: string ;
}
declare class aStyleSheetPresentor002Agent extends aUIAgent {
   PresentedQVP: string ;
   PresentedQVPStaticText: string ;
   StyleClass: string ;
   StyleClassStaticText: string ;
   NotifyInit();
}
declare class tStyleClass001Agent extends aCStringControlAgent {
}
declare class aStyleSheetPresenter extends aEntity {
   PresentedQVP: string ;
   StyleClass: string ;
   FromStyleSheet: string ;
   LoadClassStyle(FromStyleSheet:string);
}
declare class aStylePresentorRole extends aSingleRoleType {
/**
*Portability Check: OK
*/
   ModifyThisObject();
}
declare class aEWEDCloseProducer extends aEWEDProducer {
   ProduceXMLAndXSL();
   WriteBody();
   WriteHeader();
   WriteXMLIncludeAndCloseHTML();
}
/**
*Please never rename this class because it is instanciated by name from C++
*/
declare class aEWEDFolderProducer extends aEWEDProducer {
   FolderSelected: string ;
   GetSelectedFolder():aScenario;
   GetSelectedQvp():aQVarPresentor;
   GetXSLFile():string;
   IncludeXSLReference();
   IncludeXMLReference();
   ProduceButtonFromQVP(InText:string, ForScen:aClassAsFolderView, CurSelection:number, CurQvar:aQVarPresentor);
   ProduceButtonAfterorBeforeSelected(InText:string, ForScen:aClassAsFolderView, CurSelection:number, After:boolean);
   WriteHeader();
   WriteXMLIncludeAndCloseHTML();
   DrawFolderGif(FromFolder:aClassAsFolderView, SelectedFolder:number, ForQVar:aQVPXXXAsFolder, FolderText:string, FileName:string);
   WriteFolderBody(ForScen:aClassAsFolderView, FileName:string, FullFileName:string);
/**
*Portability Check: OK
*/
   WriteBody();
   GetShapeAfterSelected(Selected:number);
   SelectFrameOrFolder();
   ProduceXMLAndXSL();
   XMLRefresh();
}
/**
*Please never rename this class because it is instanciated by name from C++
*/
declare class aEWEDFrameProducer extends aEWEDProducer {
   ProduceXMLAndXSL();
   WriteScripts();
   WriteHeader();
   WriteBody();
   WriteXMLIncludeAndCloseHTML();
   eWedInteractInFrameSet();
   ProduceFrameTag();
   SelectFrameOrFolder();
   XMLRefresh();
   RefreshFrames();
   InteractSubAgentsAndLoad();
   HasReplaceAgentFromQVPName(ForAgent:aUIAgent, QVPName:string, AgentToInsert:aUIAgent):boolean;
   eWedAddUIAgent();
}
/**
*Please never rename this class because it is instanciated by name from C++
*/
declare class aEWEDProducer extends aUITerminator {
   ForAgent: string ;
   XMLProducer: string ;
   InIDE: string ;
   CurTargetQvp: string ;
   ForHostAgent: string ;
   ForScenario: string ;
   SelectedFolder: string ;
   Title: string ;
   IsInFrame: string ;
   WaitingRefType: string ;
   WaitingRefVar: string ;
   WaitingAgent: string ;
   RefAgent: string ;
   WaitingIndex: string ;
   IsAgentActive: string ;
/**
*;function CheckNodeForHTMLInsert(ForDocument, DoFolders) {
;   AllDivs = ForDocument.documentElement.getElementsByTagName("DIV");
;   for (i=0;i<AllDivs.length;i++) {
;      CurDiv = AllDivs.item(i);
;      var XSLFile ="";
;      switch (CurDiv.dataSrc) {
;         case "InsertListFolder" :
;         case "InsertFolder" :
;         case "InsertSplit" :
;            XSLFile = CurDiv.title;
;            CurDiv.title ="";
;            if (DoFolders) {
;               FolderXSL = new ActiveXObject('microsoft.XMLDOM');
;               FolderXSL.async = false;
;               if (FolderXSL.load(XSLFile)) {
;                  CurDiv.firstChild.innerHTML = ForDocument.all("WEDXML").transformNode(FolderXSL.documentElement);
;               } else {
;                  alert("Cannot load " + XSLFile);
;               }
;            }
;         break;
;         case "InsertList" :
;            XSLFile = CurDiv.title;
;            CurDiv.title = "";
;            ListXSL = new ActiveXObject('microsoft.XMLDOM');
;            ListXSL.async = false;
;            if (ListXSL.load(XSLFile)) {
;               Rank = CurDiv.tabIndex;
;               Elem = CurDiv.lang;
;               TheL = ForDocument.all("WEDXML").documentElement.getElementsByTagName(Elem);
;               if (Rank < TheL.length) {
;                  ElemXML = TheL.item(Rank);
;               } else {
;                  ElemXML = TheL.item(TheL.length-1);
;               }
;               ListXML = new ActiveXObject('microsoft.XMLDOM');
;               ListXML.async = false;
;               XMLContent = "<?xml version=\"1.0\" ?>" + ElemXML.xml;
;               if (ListXML.loadXML(XMLContent)) {
;                  Content = ListXML.transformNode(ListXSL.documentElement);
;                  //Needs to remove <FORM> if exist because cannot be in <Div>
;                  StartTag = "<FORM";
;                  if (Content.substr(0, StartTag.length).toUpperCase( ) == StartTag) {
;                     Start = Content.indexOf("\n");
;                     Content = Content.substr(Start, Content.length - Start);
;                  }
;                  //Search <DIV> with ID="ListContent"
;                  //It found as many as elements in the list
;                  //Then update the good one using the rank in list
;                  TheL = ForDocument.all("ListContent");
;                  if (TheL.length > 0) {
;                     if (Rank < TheL.length) {
;                        TheL.item(Rank).innerHTML = Content;
;                     } else {
;                        TheL.item(TheL.length-1).innerHTML = Content;
;                        alert("Too large rank: " + Rank);
;                     }
;                  } else {
;                     //When there is only one element in list and one column in table
;                     TheL.innerHTML = Content;
;                  }
;               } else {
;                  alert("\"CheckHTMLScript\" Cannot load XML");
;               }
;            } else {
;               alert("\"CheckHTMLScript\" cannot load XSL" + XSLFile);
;            }
;         break;
;         case "HTMLInsert" :
;            //Remove "]]>" due to the CDATE tag
;            CurDiv.innerHTML = CurDiv.innerHTML.substr(0, CurDiv.innerHTML.length - 8);
;         break;
;      }
;   }
;}
*/
   WriteScripts(InText:string, CurScen:aScenario, ScenIsHTML:boolean, CurQvp:aQVarPresentor);
   SetTitle(theValue:string);
   GetTitle():string;
   UpdateTitle();
   WriteScriptsInIDE(InText:string, CurScen:aScenario, ScenIsHTML:boolean);
   WriteHeader(InText:string);
   WriteBody(InText:string);
   WriteXMLIncludeAndCloseHTML(InText:string);
   WriteHTMLPage(InText:string);
   GetFreezedXSLName(WithScen:aScenario):string;
   SetXSLName(WithScen:aScenario);
   InteractSubAgents(ExecMode:string);
   ProduceXML(CurScen:aScenario);
   ProduceXSL(CurScen:aScenario);
   ProduceXMLAndXSL();
   InteractSubAgentsAndLoad();
   eWedInteract(ExecMode:string);
   XMLRefresh();
   RefreshFrames();
/**
*Portability Check: OK
*/
   ProduceFrameTag(InText:string, ForQVP:aQVarPresentor, FrameInIDE:boolean);
   eWedInteractInFrameSet();
   Init();
   Terminate();
   NotifyTerminate();
   MainFolderListQVP():aQVPListOfFolderScenario;
   SelectFrameOrFolder(Pos:number);
   eWEDSetFocus();
   SetWaitingReference(RefType:aReftoType, RefVar:string, Index:number);
   SetReferenceForRefTo(ForThisInstance:aFullObject);
   SetReferenceForListOf(ForThisInstance:aFullObject);
   SetReference(ForThisInstance:aFullObject);
   CancelReference();
   eWedAddUIAgent(theUIAgent:aUIAgent, Qualifier:aQVarPresentor);
   WriteScriptsHeaderForStandAlonePage(InText:string, ScenIsHTML:boolean, CurHTMLScen:aScenarioWithStyleSheet, CurScriptContent:string, CurOS:string);
   WriteWedReftoScripts(InText:string, CurQvp:aQVarPresentor, curPageID:string, CurS:string);
   WriteWEDMotorMethodScript(InText:string, CurQvp:aQVarPresentor, CurScen:aScenario, curPageID:string);
   WriteGetHTMLLinkFolder(InText:string, CurQvp:aQVarPresentor, CurScen:aScenario, CurS:string);
   WriteGetNextList(InText:string, CurPageID:string);
   WriteGetFolder(InText:string, CurQvp:aQVarPresentor, CurScen:aScenario, CurS:string);
   WriteCallReferenceActions(InText:string, CurQvp:aQVarPresentor, curPageId:string);
   WriteListCtrlEvent(InText:string, CurPageID:string);
   WriteSelectRefToCombo(InText:string, CurQvp:aQVarPresentor, curPageID:string);
   WriteSelectRefToListCtrl(InText:string, CurQVP:aQVarPresentor, curPageID:string);
   WriteShowNewPopUp(InText:string, CurPageID:string);
   WriteOnLoadEvent(InText:string, ScenIsHTML:boolean, CurScen:aScenario);
/**
*Portability Check: OK
*/
   WriteAdditionalScripts(InText:string, CurScen:aScenario, ScenIsHTML:boolean, CurQvp:aQVarPresentor);
/**
*Portability Check: OK
*/
   WriteGlobalVarsForScripts(InText:string, CurScen:aScenario);
}
declare class aHTMLRefToTableScenario extends aGridScenario {
   NewQVarPresentor():aQVPRefToHTMLTable;
   PresentDraggableEntitiesFor(theType:aType);
   GetRefClassDef():aClassDef;
   QVPHasBeenSelected();
   InsertNewColumn(thisQVarPresentor:aQVPListOfAsGridScenario, theVar:aIdentifierDesc, theVarScenario:aScenario, X:number, Y:number, theScenarioAsDesignWindowAgent:aScenarioAsDesignWindowAgent);
   CanReceiveDropObject();
   ReceiveDropObject();
   GetIteratorOnQVars():aListIterator;
   Paint();
   AddFrames();
   IsConsistent();
   CanDisplayThisType();
   BuildSubComponents();
   GetQVarPresentorOnDrop();
   GetBitmap();
   IsXMLorXSLSelfProduced();
}
declare class aQVPRefToHTMLTable001Agent extends aUIAgent {
   BorderSize: string ;
   BorderSizeStaticText: string ;
}
declare class aQVPRefToHTMLTable002Agent extends aFolderViewAgent {
}
declare class aQVPRefToHTMLTable extends aQVPListOfAsGridScenario {
   OpenANewWindow: string ;
   NewWinWidth: string ;
   NewWinHeight: string ;
   NewWinResizeable: string ;
   BorderSize: string ;
   ShowToolbar: string ;
   ShowMenubar: string ;
   ShowLocation: string ;
   ShowStatus: string ;
}
declare class RefToHTMLTableAgent extends aGridUIAgent {
}
declare module xeWEDXSLUpdate {
   function FirstPosOfCStringBeforePos(theString:string, inText:string, BeforePos:number):number;
   function UpdateXSLPushButton(XSLProd:aXSLProducer, theQVP:aQVPXXXAsPushButton, ForScenario:aXXXAsPushButton);
   function UpdateXSLAtForSetOrEnum(Rank:number, XSLProd:aXSLProducer, theQVP:aQVarPresentor, ForSet:boolean);
   function UpdateXSLSetOrEnum(XSLProd:aXSLProducer, theQVP:aQVarPresentor, ForSet:boolean);
   function UpdateXSLForMLE(XSLProd:aXSLProducer, theQVP:aQVarPresentor, IsVoid:boolean);
}
declare class MoreScenarioVirtualForaCDOMailScenarioAgent extends aUIAgent {
   DefaultFrom: string ;
   DefaultFromStaticText: string ;
   DefaultTo: string ;
   DefaultToStaticText: string ;
   DefaultPassWord: string ;
   DefaultPassWordStaticText: string ;
}
declare class aCDOMailScenario extends aScenario {
   DefaultFrom: string ;
   DefaultTo: string ;
   DefaultPassWord: string ;
   DefaultUIAgentClassId();
}
declare class aCDOMailUIAgent extends aUIAgent {
   FromMail: string ;
   ToMail: string ;
   UserPassWord: string ;
   MailTitle: string ;
   InteractWithUser();
   Finalize();
}
declare class aEWEDCDOProducer extends aEWEDProducer {
   SendMailWithHTML();
   eWedInteract();
}
declare class aCDOAspServer extends aASPServer {
}
declare module MBCS {
   function MBIsSystemMultiByte():boolean;
   function MBGetSystemMBCodePage():number;
   function MBUpcaseCString(str:string):string;
   function MBLowcaseCString(str:string):string;
   function MBLength(str:string):number;
   function MBSize(str:string):number;
   function MBIsLeadByte(c:number):boolean;
   function MBCopy(str:string, pos:number, len:number):string;
   function MBSubCString(Separator:number, str:string):string;
   function MBPos(SubSt:string, St:string):number;
   function MBConvertUTF8ToMB(UtfBuffer:string, UTFSize:number, Destination:string, DestSize:number);
   function MBConvertMBtoUTF8(MBBuffer:string, MBSize:number, Destination:string, DestSize:number);
   function MBConvertCPToMB(UtfBuffer:string, UTFSize:number, OrigCP:number, Destination:string, DestSize:number);
   function MBConvertMBtoCP(MBBuffer:string, MBSize:number, DestCP:number, Destination:string, DestSize:number);
   function MBTextCPToMB(OrigText:string, MBText:string, OrigCP:number);
   function MBTextUTF8ToMB(UTFText:string, MBText:string);
   function MBTextMBToCP(MBText:string, DestText:string, DestCP:number);
   function MBTextMBToUTF8(MBText:string, UTFText:string);
   function MBConvertMBToUnicode(MBBuffer:string, MBSize:number, Destination:string, DestSize:number):number;
   function MBConvertUnicodeToMB(OrigBuffer:string, OrigSize:number, Destination:string, DestSize:number):number;
}
declare class aListOfAsListTreeCtrlScenario extends aXXXAsListTreeCtrl {
   DefaultUIAgentClassId();
   NewQVarPresentor();
   MyInitEvents();
   InitEvents();
   InitAfterNewVersion();
   GetRefClassDef(thisQVarPresentor:aQVarPresentor):aClassDef;
   PresentDraggableEntitiesFor(theType:aType);
   QVPHasBeenSelected();
   InsertNewColumn(thisQVarPresentor:aQVPListOfAsListTreeCtrl, theVar:aIdentifierDesc);
   CanReceiveDropObject();
   ReceiveDropObject();
   Paint(theWindow:string, ps:string, AbsX:number, AbsY:number, Dw:number, Dh:number, x:number, y:number, Width:number, Height:number, theQVarPresentor:aQVPListOfAsListTreeCtrl);
   GetQVarPresentorOnDrop();
   IsMain();
}
declare class aListOfAsListTreeCtrlUIAgent extends aListTreeCtrlUIAgent {
   ComputeLineEventProcAddr: string ;
   ComputeColumnEventProcAddr: string ;
   CompareNodesEventProcAddr: string ;
   ColumnExecutedEventProcAddr: string ;
   MakeProjectEventProcAddr: string ;
   CancelProjectEventProcAddr: string ;
   ProjectHasChangedEventProcAddr: string ;
   SetProjectInListForEventProcAddr: string ;
   BuildDraggableSelectionEventProcAddr: string ;
   SortColumnEventProcAddr: string ;
   ComputeColumnTitleEventProcAddr: string ;
   GetSubTreeEventProcAddr: string ;
   GetMyParentEventProcAddr: string ;
   MoveToNewParentEventProcAddr: string ;
   NodeHash: string ;
   NewNodeHash: string ;
   ParentStack: string ;
   curDepthLevel: string ;
   Projects: string ;
   CurSubTree: string ;
   NewNodeList: string ;
   DebugMode: string ;
   ColumnsLoaded: string ;
   myColumnList: string ;
   IsDragging: string ;
   theDraggedObjects: string ;
   ExecutedColumnNbr: string ;
   LastExecutedColumn: string ;
   SortDescending: string ;
   CurrentColumn: string ;
   DisableSorting: string ;
   LineFormatHashTable: string ;
   IsStartingToDrag: string ;
   StartDragX: string ;
   StartDragY: string ;
   TestLeftButton: string ;
   OldNeededEvent: string ;
   NotifyMakeProject(thisObject:aFullObject):number;
   NotifyCancelProject(thisObject:aFullObject):number;
   NotifyProjectHasChanged(thisObject:aFullObject, HasChanged:boolean):number;
   NotifySetProjectInListFor(thisObject:aFullObject):number;
   NotifyComputeColumn(theComputedColumn:string, ColIndex:number, Element:aLightObject):number;
   NotifyCompareNodes(Node1:string, Node2:string):number;
   GetParent(theParent:aLightObject, theChild:aLightObject):number;
   MovetoNewParent(theChild:aLightObject, theParent:aLightObject):number;
   LoadNodeBySubTree(Element:aLightObject, thePrevNode:string, ParentNode:string, RankInList:number, InThisList:aListOfInstances):string;
   OneIsVisibleInList(pList:string, TheListType:aListofReftosType):boolean;
   ComputeColumn(theComputedColumn:string, ColIndex:number, Element:aLightObject):number;
   CompareNodes(Node1:string, Node2:string):number;
   MakeProject(thisObject:aFullObject):number;
   CancelProject(thisObject:aFullObject):number;
   ProjectHasChanged(thisObject:aFullObject, HasChanged:boolean):number;
   SetProjectInListFor(thisObject:aFullObject):number;
   Init();
   LevelOf(thisClassDef:aClassDef):number;
   FirstLineScenFor(thisClassDef:aClassDef):string;
   AppendColumnsOf(theQVP:aQVPListOfAsListTreeCtrl, externalQVP:aQVPListOfAsListTreeCtrl);
   BuildColumnsList(LineScen:aListTreeCtrlLineFormat, theQVP:aQVPListOfAsListTreeCtrl);
   WydeToMSJustification(WydeJustification:string):number;
   NewChoice(theString:string, Enable:boolean, Separator:boolean):aEntity;
   NewActionChoice(theAction:string, Enable:boolean, Separator:boolean):aEntity;
   NotifyGetSubTree(pTheListOfChildren:string, theListType:aType, theParent:aLightObject):number;
   GetSubTree(pTheListOfChildren:string, theListType:aType, theParent:aLightObject):number;
   GetSubTreeAnywhere(pTheListOfChildren:string, theListType:aType, theParent:aLightObject, Parent:string):number;
   NotifyComputeLine(theComputedLine:string, ObjectIndex:number, theListOfReftos:aListOfInstances):number;
   ComputeLine(theComputedLine:string, ObjectIndex:number, theListOfReftos:aListOfInstances):number;
   ParamActionsForSubTree(theRefThing:aLightObject, theFather:aFullObject, theOwnerOfSublist:aLightObject, pTheVar:string, theRank:number, myType:aType, pTheNextVar:string, nextType:aType);
   ParamActionsForGetParent(theParent:aFullObject, theObject:aFullObject, theRank:number);
   EvalAsCString(Desc:aIdentifierDesc, Element:aLightObject):string;
   BetterLineFormat(LF1:aListTreeCtrlLineFormat, LF2:aListTreeCtrlLineFormat):aListTreeCtrlLineFormat;
   BetterLineFormatForClass(theClass:aClassDef, theParentClass:aClassDef, theLevel:number, OldResult:aListTreeCtrlLineFormat, CurLF:aListTreeCtrlLineFormat):aListTreeCtrlLineFormat;
   BestLineFormat(theClass:aClassDef, theParentClass:aClassDef, theLevel:number):aListTreeCtrlLineFormat;
   BuildMyColumnList();
   LoadColumns(VarAddress:string, theVarType:aType);
   SetItem_(Node:string, Element:aLightObject, RankInList:number, InThisList:aListOfInstances);
   GetBestLegacyLineFormat(ForClass:aClassDef):aListCtrlLineFormat;
   MakeDefaultLine(CompLine:string, Element:aLightObject);
   PreFillCompLineWithLegacyCols(CompLine:string, ColList:aListOfInstances, CurLF:aListCtrlLineFormat, Element:aLightObject);
   SetItemWithListCtrlLF(Node:string, CompLine:string, Element:aLightObject);
   PreFillCompLineWithCols(CompLine:string, ColList:aListOfInstances, CurLF:aListTreeCtrlLineFormat, Element:aLightObject);
   PostFillLine(CompLine:string);
   ApplyLineFormatOnCompLine(CurLF:aListTreeCtrlLineFormat, pTheLineInfo:string, Element:aLightObject);
   SetItem(Node:string, Element:aLightObject);
   LoadItem(Element:aLightObject, ParentNode:string, RankInList:number, InThisList:aListOfInstances):string;
   FindNodeByObjectAndFamily(Element:aLightObject, ParentNode:string, PrevSisterNode:string, theNodeHash:aDataByObjectHashTable):string;
   AddNodeWithObject(Element:aLightObject, TheNode:string, theNodeHash:aDataByObjectHashTable);
   RemoveNodeWithObject(Element:aLightObject, TheNode:string, theNodeHash:aDataByObjectHashTable);
   CreateNodeHash(TheHash:aDataByObjectHashTable);
   UpdateOrAddElementIntoTree(Element:string, ParentNode:string, PrevNode:string, theNodeHash:aDataByObjectHashTable, RankInList:number, InThisList:aListOfInstances):string;
   LoadSubNodesBySubTree(Element:aLightObject, ElementNode:string);
   RemoveNodeFromHash(Node:string);
   RemoveNodeFromHashNonUnique(Node:string);
   CleanupOldElements();
   LoadValueBySubTree(VarAddress:string, theVarType:aType);
   NotifyMoveToNewParent(theChild:aLightObject, theParent:aLightObject):number;
   NotifyGetParent(theParent:aLightObject, theChild:aLightObject):number;
   GetParentLine(theParents:aListOfInstances, theChild:aLightObject):string;
   InsertParentLine(theParentNode:string, theLine:aListOfInstances);
   LoadValueByParent(VarAddress:string, theVarType:aType);
   LoadValue();
   Finalize();
   StoreValue();
   NotifyExecuted();
   NotifyBuildDraggableSelection(theDraggableList:aListOfInstances, theListOfReftos:aListOfInstances):number;
   BuildDraggableSelection(theDraggableList:aListOfInstances, theListOfReftos:aListOfInstances):number;
   UnSelectAll();
   NotifyPopup();
   NotifyButtonDown();
   NotifyButtonUp();
   NotifyMouseMove();
   NotifyLoseFocus();
   NotifyCanReceiveDroppedObject();
   NotifyDroppedObject();
   NotifyButtonDblClk();
   NotifyRangeHasChanged();
   DoSortColumn();
   GetNodeLineFormat(Node:string):aListTreeCtrlLineFormat;
   GetSubNodeColumnQualifier(Node:string, Column:number):aListTreeCtrlColumnQualifier;
   GetSubNodeVarDesc(Node:string, Column:number):aIdentifierDesc;
   SortColumn(Column:number);
   NotifyColumnExecuted();
   CompareNodesText(Node1:string, Node2:string):number;
   CompareNodesNum(Node1:string, Node2:string):number;
   CompareNodesType(Node1:string, Node2:string):number;
   CompareNodesUser(Node1:string, Node2:string):number;
}
declare class aListTreeCtrlColumnQualifier001Agent extends aListOfAsListCtrlColumnQualifier001Agent {
   UseCustomColors: string ;
   myFGCol001: string ;
   myFGColStaticText: string ;
   myBGCol: string ;
   myBGColStaticText: string ;
   NotifyInit();
}
declare class aListTreeCtrlColumnQualifier extends aListOfAsListCtrlColumnQualifier {
   UseCustomColors: string ;
   myFGCol: string ;
   myBGCol: string ;
   isAlive();
}
declare class MoreListTreeCtrlLineFormatAgent extends aUIAgent {
   FolderMoreListTreeCtrlLineFormat: string ;
}
declare class ColumnsListTreeCtrlLineFormatAgent extends aUIAgent {
   myColumns: string ;
   myColumns001: string ;
   myText: string ;
   myTextStaticText: string ;
   Width: string ;
   WidthStaticText: string ;
   Fraction: string ;
   FractionStaticText: string ;
   RelativeWidth: string ;
   UseCustomColors: string ;
   myFGCol: string ;
   myFGColStaticText: string ;
   myBGCol: string ;
   myBGColStaticText: string ;
   TitleJustification: string ;
   TitleJustificationStaticText: string ;
   theBMPKind: string ;
   theBMPKindStaticText: string ;
   theBMPParam: string ;
   theBMPParamStaticText: string ;
   ComputeAtRunTime: string ;
   WithBMP: string ;
   WithBMPGroupBox: string ;
   myColumns_Selected(SelectedRank:number):number;
}
declare class FolderMoreListTreeCtrlLineFormatAgent extends aFolderViewAgent {
}
declare class KindsListTreeCtrlLineFormat001Agent extends aUIAgent {
   NodeKindsSet: string ;
   ColorsListTreeCtrlLineFormat: string ;
   OverrideNodeKids: string ;
   OverrideNodeKids_Selected(:aUIAgent, SelectedRank:number):number;
   OverrideNodeKids_Init(:aUIAgent):number;
}
declare class ApplyListTreeCtrlLineFormat001Agent extends aUIAgent {
   ApplyRule: string ;
   ApplyRuleGroupBox: string ;
   ApplyOnLevels: string ;
   ApplyOnLevelsStaticText: string ;
   ApplyOnDescendantsOfClass: string ;
   ApplyOnDescendantsOfClassStaticText: string ;
}
declare class BitmapListTreeCtrlLineFormatAgent extends aUIAgent {
   UseBitmap: string ;
   UseDynBitmap: string ;
   myBitmapFileName: string ;
   myBitmapFileNameStaticText: string ;
}
declare class FontListTreeCtrlLineFormatAgent extends aUIAgent {
   myFontName: string ;
   myFontNameStaticText: string ;
   myFontSize: string ;
   myFontSizeStaticText: string ;
   myFontSels: string ;
   PickMyFont: string ;
}
declare class MyTypeLineFormatAgent extends aUIAgent {
   myType: string ;
   myTypeStaticText: string ;
}
declare class ColorsListTreeCtrlLineFormatAgent extends aUIAgent {
   UseFGColor: string ;
   myFGCol: string ;
   myBGCol: string ;
   UseBGColor: string ;
   UseFGColor_Selected(:aUIAgent, SelectedRank:number):number;
   UseBGColor_Selected(:aUIAgent, SelectedRank:number):number;
   UseFGColor_Init(:aUIAgent):number;
   UseBGColor_Init(:aUIAgent):number;
}
declare class aListTreeCtrlLineFormat extends aScenario {
   ApplyRule: string ;
   ApplyOnDescendantsOfClass: string ;
   ApplyOnLevels: string ;
   myColumns: string ;
   OverrideNodeKinds: string ;
   NodeKindsSet: string ;
   UseFGColor: string ;
   UseBGColor: string ;
   UseBitmap: string ;
   UseDynBitmap: string ;
   myBitmapFileName: string ;
   myFGCol: string ;
   myBGCol: string ;
   CheckBoxVar: string ;
   myFontName: string ;
   myFontSize: string ;
   myFontSels: string ;
   IsDescendantScenarioOf(theScen:aListTreeCtrlLineFormat):boolean;
   AcceptsClass(theClass:aClassDef):aListTreeCtrlLineFormat;
   AppliesHere(theObjClass:aClassDef, theParentClass:aClassDef, theLevel:number):aListTreeCtrlLineFormat;
   GetCompleteColumnList(TheList:aListOfInstances);
   GetColumn(Rank:number):aListTreeCtrlColumnQualifier;
   CanReceiveDropObject();
   ReceiveDropObject();
   ColumnJustificationToDrawTextAlignement(ColumnJustification:string):string;
   PaintOnlyTheBar(ps:string, CurX:number, CurY:number, CtrlX:number, CtrlY:number, CtrlWidth:number, IsTitlebar:boolean, UseWidthsOf:aListTreeCtrlLineFormat);
   Paint();
   GetBitmap();
   PickMyFont();
}
declare class MoreQVPListOfAsListTreeCtrlAgent extends aUIAgent {
   LoadChildrenOnExpand: string ;
   myExternalLineScenario: string ;
   myExternalLineScenarioStaticText: string ;
   myTreeMethod: string ;
   myTreeMethodGroupBox: string ;
   myAnisotropicLineScenario: string ;
   myAnisotropicLineScenarioGroupBox: string ;
   AddUIAgentInSentList: string ;
   SendMultiSelectionAsList: string ;
   SortKind: string ;
   SortKindStaticText: string ;
}
declare class ColumnsQVPListOfAsListTreeCtrlAgent extends aUIAgent {
   myInbuiltLineFormat: string ;
   FolderMoreListTreeCtrlLineFormat: string ;
   StaticText: string ;
}
declare class FolderQVPListOfAsListTreeCtrlAgent extends aFolderViewAgent {
}
declare class aQVPListOfAsListTreeCtrl extends aQVPXXXAsListTreeCtrl {
   myTreeMethod: string ;
   myAcceptedClassDef: string ;
   myExternalLineScenario: string ;
   myAnisotropicLineScenario: string ;
   myInbuiltLineFormat: string ;
   LoadChildrenOnExpand: string ;
   AddUIAgentInSentList: string ;
   SendMultiSelectionAsList: string ;
   SortKind: string ;
   myOwnedLineFormats: string ;
   IsConsistent();
   Init();
}
declare class ListOfAsListTreeCtrlAgent extends aListOfAsListTreeCtrlUIAgent {
}
declare class aListOfAsListTreeCtrlProjectContainer extends aLightObject {
   Projects: string ;
   OldProjects: string ;
   MyAgent: string ;
   SetAgent(theAgent:aListOfAsListTreeCtrlUIAgent);
   BeforeAdding();
   AfterAdding();
   AddProject(ofThing:aFullObject);
   RemoveProject(ofThing:aFullObject, DoAccept:boolean);
   CancelAll();
   Init();
}
declare class QVPListOfAsListTreeCtrlLineFormatsAgent extends aUIAgent {
   myOwnedLineFormats: string ;
   myOwnedLineFormatsStaticText: string ;
}
declare class aQVPListOfAsListTreeCtrlOwnedLFRole extends aSingleRoleType {
   CreateNewInstance(FromThisObject:aEntity):aListTreeCtrlLineFormat;
}
declare module wListTreeCtrl {
   function FillParentNodes(Parents:aListOfInstances, OfNode:string, InThis:aListOfAsListTreeCtrlUIAgent);
   function GenericNodeCompare(Node1:string, Node2:string, ListTree:aListOfAsListTreeCtrlUIAgent, CompareNodesFunc:string):number;
   function NodeCompareType(Node1:string, Node2:string, ListTree:aListOfAsListTreeCtrlUIAgent):number;
   function NodeCompareString(Node1:string, Node2:string, ListTree:aListOfAsListTreeCtrlUIAgent):number;
   function NodeCompareUser(Node1:string, Node2:string, ListTree:aListOfAsListTreeCtrlUIAgent):number;
   function NodeCompareNum(Node1:string, Node2:string, ListTree:aListOfAsListTreeCtrlUIAgent):number;
}
declare class aStopPointMgrMainScenarioAgent extends aUIAgent {
   AllEntitiesStaticText: string ;
   EntitiesWithStopPoints: string ;
   EntitiesWithStopPointsStaticText: string ;
   ShowInterpretedClasses: string ;
   SetOrRemoveStopPoint: string ;
   SelectionFromMetaModel: string ;
   FillCandidatesFromAContainer: string ;
   search: string ;
   MMBrowser: string ;
   AllEntities: string ;
   SetOrRemoveAllStopPoints: string ;
   AllEntities_ComputeLine(theComputedLine:string, ObjectIndex:number, theListOfReftos:aListOfInstances):number;
   AllEntities_GetSubTree(pTheListOfChildren:string, theListType:aType, theParent:aLightObject):number;
   SelectOrUnselectSubNodesIfNodeNotExpanded(ListAgent:ListOfAsListTreeCtrlAgent, Node:string);
/**
*Portability Check: OK
*/
   AllEntities_Selected(SelectedRank:number):number;
   EntitiesWithStopPoints_ComputeLine(theComputedLine:string, ObjectIndex:number, theListOfReftos:aListOfInstances):number;
/**
*Portability Check: OK
*/
   EntitiesWithStopPoints_Selected(SelectedRank:number):number;
   EntitiesWithStopPoints_GetSubTree(pTheListOfChildren:string, theListType:aType, theParent:aLightObject):number;
/**
*Portability Check: OK
*/
   EntitiesWithStopPoints_Executed(SelectedRank:number, Option:number):number;
   NotifyInit();
}
declare class aStopPointMgr extends aWideExtension {
   AllEntities: string ;
   EntitiesWithStopPoints: string ;
   container: string ;
   MMBrowser: string ;
   selection: string ;
   search: string ;
   DoYourJob();
   FolderParentName();
   MenuText();
/**
*Portability Check: OK
*/
   ShowInterpretedClasses();
   Init();
   AppendContainer(container:aWAMContainer, list:aListOfInstances);
   FillCandidatesFromAContainer();
   SelectionFromMetaModel(theUIAgent:aUIAgent);
   UpdateSingleButton(theAgent:aMethodTypeAsBitMapAgent);
   UpdateMultiButton(theAgent:aMethodTypeAsBitMapAgent);
   SetOrRemoveStopPoint(theUIAgent:aUIAgent);
   SetOrRemoveAllStopPoints(theUIAgent:aUIAgent);
   UpdateSelection(theList:ListOfAsListTreeCtrlAgent);
   UIRefresh();
}
declare class FloatingListOfAsListTreeCtrlScenarioAgent extends aListOfAsListTreeCtrlUIAgent {
}
declare class aGoldMonoVersionPB extends aPB {
   UpdateModel: string ;
   GetChangedVars(theOldInst:aFullObject):aListOfInstances;
   storeHostInstance();
/**
*Portability Check: OK
*/
   PrepareListForMonoVersionStoreMore(theNewList:aListOfInstances, theOldList:aListOfInstances, theListToInsert:aListOfInstances, theListToUpdate:aListOfInstances, theListToDelete:aListOfInstances, curVarType:aReferenceType);
/**
*Portability Check: OK
*/
   PrepareAndHandleListOf(pOldMemo:string, listOfReftos:boolean, someListOf:aListOfInstances, PersistentPointer:string, myMemo:string, theVarLink:string);
   SetObjectAsCurrentIfNecessary();
   PromoteReferenceVar(curOriginalType:aReferenceType, curVarType:aReferenceType, originalFullId:string, curFullId:string, referenceHasChanged:boolean);
/**
*Portability Check: OK
*/
   StoreMore();
   SetPredToNotCurrent();
}
declare class FirstPageTopOkCancelOverOverrideAgent extends aUIAgent {
   Partitions: string ;
   UpdateModel: string ;
   UpdateModelGroupBox: string ;
   myTableKind: string ;
   myTableKindGroupBox: string ;
}
declare class aMVSqlClassDefRepresentation extends aSqlClassDefRepresentation {
   UpdateModel: string ;
   Partitions: string ;
   InitPB();
   CompleteVarToUpdateList();
   IsValid();
   GetBitmap();
   CloneYourSelfInNewDBDef();
   IsConsistent();
}
declare class TriggerScenAgent extends aUIAgent {
   GetClassDef: string ;
   VarsToUpdate: string ;
   StaticText001: string ;
}
declare class aPartitionOfVariables extends aDBEntity {
   VarsToUpdate: string ;
   GetClassDef():aClassDef;
   NbItems():number;
   Handles(thisList:aListOfInstances, motorClass:string):boolean;
   IsValid();
   GetBitmap();
   IsConsistent();
   CloneYourSelfInNewDBDef();
}
declare class aRoleForMVDBClassDefPartitions extends aSingleRoleType {
   GetVariableDescs(thisVar:aInstanceVarDesc, lowerVar:aInstanceVarDesc, fromClassDef:aClassDef):boolean;
   IsVarAccepted(fromPartition:aPartitionOfVariables, thisDroppedVar:aInstanceVarDesc, acceptedVar:aInstanceVarDesc):boolean;
   IsDroppedObjectUsable();
   NewInstanceFromDroppedObject();
   pickInMemOnly();
}
declare class aLightGoldPB extends aPB {
   FreezingStyle: string ;
   DBHint: string ;
}
declare class aSqlDescPRBProducer extends aDBEntityPRBProducer {
   ProduceSqlZapMainFor(Where:aPRBGoldProduced);
   ProduceBindDataForFetch(Where:aPRBGoldProduced, bindVarName:string, NumIndexColsToIgnore:number, withSpecificVersionCondition:boolean, onlyForClassDef:aClassDef, conversionVarsProduced:aPRBGoldProduced, indicatorVarName:string, conversionVarName:string);
   ProduceConvertDataAfterFetch(Where:aPRBGoldProduced, bindVarName:string, NumIndexColsToIgnore:number, withSpecificVersionCondition:boolean, onlyForClassDef:aClassDef, NoConversionToo:boolean, conversionVarName:string);
   ProduceBindWhereVars(Where:aPRBGoldProduced, bindVarName:string, conversionVarName:string, conversionVarsProduced:aPRBGoldProduced);
   ProduceBindWhereVarsForAccessPlan(Where:aPRBGoldProduced, bindVarName:string, conversionVarName:string, conversionVarsProduced:aPRBGoldProduced);
   ProduceBindInsertColumns(Where:aPRBGoldProduced, bindVarName:string);
   ProduceSQLUpdate(Where:aPRBGoldProduced, Options:number, forFreezeUnFreeze:boolean);
   ProduceBindUpdateColumns(Where:aPRBGoldProduced, bindVarName:string, forFreezeUnFreeze:boolean);
   ProduceIfVarToBeUpdated(Where:aPRBGoldProduced, conditionProduced:boolean):boolean;
   ProduceEndIfVarToBeUpdated(Where:aPRBGoldProduced, conditionProduced:boolean);
   ProduceSQLUpdateOnlyModifiedVars(Where:aPRBGoldProduced, bindVarName:string);
   AllColumnsForUpdateOnlyModifiedVars(intoThisList:aListOfInstances);
   IsHandledByCurPartition():boolean;
   ProduceLoadListOfInfo(Where:aPRBGoldProduced, atLeastOneListOf:boolean);
   ProduceStoreListOfInfo(Where:aPRBGoldProduced, atLeastOneListOf:boolean);
   ProduceBindListOfInfo(Where:aPRBGoldProduced, atLeastOneListOf:boolean);
   ProduceUpdateListRefCount(Where:aPRBGoldProduced, atLeastOneListOf:boolean);
   ProduceUpdateListOfInfo(Where:aPRBGoldProduced, atLeastOneListOf:boolean);
   ProduceIsHandledByPartitionBeginBlock(Where:aPRBGoldProduced):boolean;
   ProduceIsHandledByPartitionEndBlock(Where:aPRBGoldProduced);
   ProduceZapListOf(Where:aPRBGoldProduced, atLeastOneListOf:boolean);
   ProduceArrayFetchFastLoadListOf(Where:aPRBGoldProduced, atLeastOneListOf:boolean);
   ProduceBindDataForArrayFetch(Where:aPRBGoldProduced, bindVarName:string, ArrayItemVarName:string, NumIndexColsToIgnore:number, withSpecificVersionCondition:boolean, onlyForClassDef:aClassDef, conversionVarsProduced:aPRBGoldProduced, indicatorVarName:string);
   ProduceConvertDataAfterArrayFetch(Where:aPRBGoldProduced, bindVarName:string, ArrayItemVarName:string, NumIndexColsToIgnore:number, withSpecificVersionCondition:boolean, onlyForClassDef:aClassDef);
   ProduceAssignFetchedColToObjectVar(where:aPRBGoldProduced, bindVarName:string, ArrayItemVarName:string, objectVarName:string, onlyForClassDef:aClassDef);
   FullNameForVarDescInArray():string;
}
declare class aSqlColumnDescPRBProducer extends aSqlDescPRBProducer {
   ProduceBindDataForFetch();
   ProduceConvertDataAfterFetch();
   ProduceBindWhereVars();
   ProduceBindUpdateColumns();
   ProduceIfVarToBeUpdated();
   IsHandledByCurPartition();
   ProduceSQLUpdate();
   ProduceSQLUpdateOnlyModifiedVars();
   ProduceIsHandledByPartitionBeginBlock();
   ProduceIsHandledByPartitionEndBlock();
   AllColumnsForUpdateOnlyModifiedVars();
   ProduceBindDataForArrayFetch();
   ProduceConvertDataAfterArrayFetch();
   ProduceAssignFetchedColToObjectVar();
}
declare class aSqlTextColumnDescPRBProducer extends aSqlColumnDescPRBProducer {
   ProduceBindDataForFetch();
   ProduceConvertDataAfterFetch();
   ProduceBindWhereVars();
   ProduceBindInsertColumns();
   ProduceBindUpdateColumns();
   ProduceSQLUpdateOnlyModifiedVars();
}
declare class aSqlColumnSetDescPRBProducer extends aSqlDescPRBProducer {
   ProduceSqlZapMainFor();
   ProduceBindDataForFetch();
   ProduceConvertDataAfterFetch();
   ProduceBindWhereVars();
   ProduceBindUpdateColumns();
   ProduceLoadListOfInfo();
   ProduceStoreListOfInfo();
   ProduceBindListOfInfo();
   ProduceUpdateListRefCount();
   ProduceUpdateListOfInfo();
   ProduceSQLUpdate();
   ProduceSQLUpdateOnlyModifiedVars();
   AllColumnsForUpdateOnlyModifiedVars();
   ProduceZapListOf();
   ProduceArrayFetchFastLoadListOf();
   ProduceBindDataForArrayFetch();
   ProduceConvertDataAfterArrayFetch();
   ProduceAssignFetchedColToObjectVar();
}
declare class aSqlTableDescPRBProducer extends aSqlColumnSetDescPRBProducer {
   FullColNameOf(theColName:string, withTableName:boolean):string;
   ProduceSqlWhereIndexVars(Where:aProduced, paramCount:number, isSpecificVersion:boolean, oneDone:boolean, withTableName:boolean);
   ProduceSqlZapMainFor();
   ProduceBindUpdateColumns();
   ProduceSQLUpdate();
   ProduceUpdateAllVars(Where:aPRBGoldProduced, bindVarName:string, forFreezeUnFreeze:boolean);
   ProduceUpdateOnlyModifiedVars(Where:aPRBGoldProduced, bindVarName:string);
   ProduceUpdatePartitionVars(Where:aPRBGoldProduced, bindVarName:string);
}
declare class aSqlRefToColumnSetDescPRBProducer extends aSqlRecordDescPRBProducer {
   ProduceBindDataForFetch();
   ProduceConvertDataAfterFetch();
   ProduceBindWhereVars();
   ProduceBindDataForArrayFetch();
   ProduceConvertDataAfterArrayFetch();
   ProduceAssignFetchedColToObjectVar();
}
declare class aSqlListOfColumnSetDescPRBProducer extends aSqlRecordDescPRBProducer {
   AcceptableVarNameForListOfDesc():string;
   ProduceSqlZapMainFor();
   ProduceBindDataForFetch();
   ProduceConvertDataAfterFetch();
   ProduceBindWhereVars();
   ProduceBindUpdateColumns();
   ProduceLoadListOfInfo();
   ProduceStoreListOfInfo();
   ProduceBindListOfInfo();
   ProduceUpdateListRefCount();
   ProduceUpdateListOfInfo();
   ProduceSQLUpdate();
   IsHandledByCurPartition();
   ProduceIsHandledByPartitionBeginBlock();
   ProduceIsHandledByPartitionEndBlock();
   AllColumnsForUpdateOnlyModifiedVars();
   ProduceIfVarToBeUpdated();
   ProduceZapListOf();
   ProduceArrayFetchFastLoadListOf();
   ProduceBindDataForArrayFetch();
   ProduceConvertDataAfterArrayFetch();
   ProduceAssignFetchedColToObjectVar();
}
declare class aSqlClassInfoColumnSetDescPRBProducer extends aSqlColumnSetDescPRBProducer {
   ProduceBindDataForFetch();
   ProduceConvertDataAfterFetch();
   ProduceBindWhereVars();
   ProduceBindUpdateColumns();
   ProduceSQLUpdate();
   IsHandledByCurPartition();
   ProduceIsHandledByPartitionBeginBlock();
   ProduceIsHandledByPartitionEndBlock();
   AllColumnsForUpdateOnlyModifiedVars();
   ProduceIfVarToBeUpdated();
   ProduceBindDataForArrayFetch();
   ProduceConvertDataAfterArrayFetch();
   ProduceAssignFetchedColToObjectVar();
   ProduceSQLUpdateOnlyModifiedVars();
}
declare class aSqlClassDefRepresentationPRBProducer extends aDBEntityPRBProducer {
   NewDummyObject():string;
   ProduceLoadMainQuerySelectClause(Where:aProducedSQL, isSpecificVersion:boolean);
   ProduceLoadMainQueryFromClause(Where:aProducedSQL);
   ProduceLoadMainQueryWhereClause(Where:aProducedSQL, isSpecificVersion:boolean);
   ProduceSqlLoadMain(Where:aPRBGoldProduced);
   ProduceBindListOfInfo(Where:aPRBGoldProduced);
   ProduceLoadListOfInfo(Where:aPRBGoldProduced);
   ProduceNbrVersionsKept(Where:aPRBGoldProduced);
   ProduceInsertInTable(implemProduced:aPRBGoldProduced, curTable:aSqlTableDesc);
   KillTemporaryTables(List:aListOfInstances);
   ProduceSQLInsertIntoAllTables(implemProduced:aPRBGoldProduced);
   ProduceSQLInsertForStoreMain(Where:aPRBGoldProduced);
   ProduceStoreListOfInfo(Where:aPRBGoldProduced);
   ProduceNewPB(Where:aPRBGoldProduced);
   ProduceUpdatePartition(Where:aPRBGoldProduced, thisPartition:aPartitionOfVariables);
   ProduceUpdateAllVars(Where:aPRBGoldProduced, forFreezeUnFreeze:boolean);
   ProduceGetPartitionToUse(Where:aPRBGoldProduced);
   ProduceUpdatePartitionVars(Where:aPRBGoldProduced);
   ProduceUpdateOnlyModifiedVars(Where:aPRBGoldProduced);
   ProduceSQLUpdateMainFor(Where:aPRBGoldProduced);
   ProduceSqlZapMainFor(Where:aPRBGoldProduced);
   ProduceMainTableName(Where:aPRBGoldProduced);
   ProduceBindInfoForId(Where:aPRBGoldProduced);
   ProduceUpdateListRefCount(Where:aPRBGoldProduced);
   ProduceUpdateListOfInfo(Where:aPRBGoldProduced);
   ProduceSearchForStoredVersionsStmtKind(Where:aPRBGoldProduced);
   ProduceLatestVersionForStmtKind(Where:aPRBGoldProduced);
   ProduceSetPrevVersionToNotCurrentStmtKind(Where:aPRBGoldProduced);
   ProduceVersionCountStmtKind(Where:aPRBGoldProduced);
   ProduceloadCountsForStmtKind(Where:aPRBGoldProduced);
   ProduceloadCountsForSpecVersStmtKind(Where:aPRBGoldProduced);
   ProduceThingCountStmtKind(Where:aPRBGoldProduced);
   ProduceThingCountSpecVersStmtKind(Where:aPRBGoldProduced);
   ProduceSetFlagForStmtKind(Where:aPRBGoldProduced);
   ProduceKillThingStmtKind(Where:aPRBGoldProduced);
   ProducePersistencyKind(Where:aPRBGoldProduced);
   ProduceLegacyPKType(Where:aPRBGoldProduced);
   ProduceLegacyPKSize(Where:aPRBGoldProduced);
   ProduceZapListOf(Where:aPRBGoldProduced);
   ProduceupdateHeaderForStmtKind(Where:aPRBGoldProduced);
   ProduceupdateHeaderForSpecVersStmtKind(Where:aPRBGoldProduced);
   ProduceSqlUpdateMainForFreeze(Where:aPRBGoldProduced);
   ProduceArrayFetchFastLoadListOf(Where:aPRBGoldProduced);
   ProduceAccessPlans(Where:aPRBGoldProduced);
   ProduceSqlLoadCountsAndUpdateHeaderAndUpdateCounts(Where:aPRBGoldProduced);
   ProduceAll(Where:aPRBGoldProduced);
   HasEncryption():boolean;
}
declare class aDBEntityPRBProducer extends aLightObject {
   MyEntity: string ;
   MyContext: string ;
   MyConfig: string ;
   MySqlClassRepr: string ;
   TableCount: string ;
   CurPartitionOfVariables: string ;
   AllPartitions: string ;
   NewProducerFor(thisEntity:aDBEntity):string;
   NewProduced(theHost:aPRBGoldProduced, theTextProduced:string):aPRBGoldProduced;
   GetStatementKind(freeingKind:string):string;
   StringExtract();
   GetRuntimeInstalledId(ForIdDesc:aIdentifierDesc):number;
}
declare class aPRBGeneratorDBReprRole extends aSingleRoleType {
   IsDroppedObjectUsable();
/**
*Portability Check: OK
*/
   AppendDBRepresentationFromClassDef(FromThisObject:aFullObject, FromThisVar:string, DroppedObject:aClassDef, withAlert:boolean):aDBClassDefRepresentation;
   InitFromDeliveryPreparer(FromThisObject:aFullObject, FromThisVar:string, theDP:aDeliveryPreparer);
   InitFromDeliveriesBundlePreparer(FromThisObject:aFullObject, FromThisVar:string, theDBP:aDeliveriesBundlePreparer);
   InitFromDelivery(FromThisObject:aFullObject, FromThisVar:string, theDelivery:aDelivery);
   InitFromDeliveriesBundleInstaller(FromThisObject:aFullObject, FromThisVar:string, theDBI:aDeliveriesBundleInstaller);
   InitFromWamContainer(FromThisObject:aFullObject, FromThisVar:string, theCont:aWAMContainer);
/**
*Portability Check: OK
*/
   NewInstanceFromDroppedObject();
}
declare class PRBProjectMDIAgent extends aOpenWhereClosedUIAgent {
   aClassDefRequestBrokerGenerator001: string ;
   NotifyCheck();
}
declare class PRBProjectLeftRightAgent extends aSplitViewAgent {
}
declare class PRBProjectAllClassDBDefAgent extends aUIAgent {
   MyDBDef: string ;
   myClassDBDefs: string ;
   myClassDBDefs_Selected(:aUIAgent, SelectedRank:number):number;
}
declare class PRBProjectOnlyPRBToGenerateAgent extends aUIAgent {
   StaticText: string ;
   TheSQLDBRepresentationsToGenerate: string ;
   AddSelectedSqlClassDesc: string ;
   StaticText001: string ;
   AddAllSqlClassDesc: string ;
}
declare class PRBProjectRightUpDownAgent extends aSplitViewAgent {
}
declare class PRBGenDBMgrClassAgent extends aUIAgent {
   PRBsInitializedWhenOpenDB: string ;
   PRBsInitializedWhenOpenDBStaticText: string ;
   AddAutoRegisteredPrb: string ;
   StaticText: string ;
   AddAllAutoRegisteredPrb: string ;
}
declare class PRBProjectFolderAgent extends aFolderViewAgent {
}
declare class PRBProjectStmtKindAgent extends aUIAgent {
   aPRBGeneratorDefConfig: string ;
   NbStatementsKept: string ;
   NbStatementsKeptStaticText: string ;
   NbStatementsKept001: string ;
}
declare class PRBProjectActionsAndReportAgent extends aUIAgent {
   Comment: string ;
   ClearReport: string ;
   ActionProducePRBs: string ;
   ActionRemovePRBs: string ;
   DoGeneratePRBs: string ;
   DoGenerateDBMgr: string ;
   Comment_ButtonDblClk(:aUIAgent, No:number, X:number, Y:number):number;
}
declare class PRBProjectTechnicalOptionsAgent extends aUIAgent {
   InitHashTableForNonAutoRegisteredPRBs: string ;
}
declare class PRBProjectDefaultConfigAgent extends aUIAgent {
   UIGetDefaultConfig: string ;
}
declare class PRBProjectStatusBarAgent extends aToolBarUIAgent {
   ProgressWorking: string ;
}
declare class PRBProjectToolBarAgent extends aToolBarUIAgent {
   SaveSaveAndCloseClose: string ;
}
declare class PRBProjectOnlyConfigsAgent extends aUIAgent {
   AllConfigs: string ;
   aPRBGenConfigDT: string ;
   aPRBGenConfig002: string ;
   StaticText: string ;
   BitMap: string ;
   AllConfigs_Selected(SelectedRank:number):number;
   BitMap_Executed(SelectedRank:number, Option:number):number;
}
declare class PRBProjectEnvironmentAgent extends aUIAgent {
   GenerateCommentsInCode: string ;
   MaxNbError: string ;
   MaxNbErrorStaticText: string ;
   MaxSQLLineSize: string ;
   MaxSQLLineSizeStaticText: string ;
   Name: string ;
   NameStaticText: string ;
}
declare class PRBprojectMoreOptionsAgent extends aUIAgent {
   PRBExtension: string ;
   PRBExtensionStaticText: string ;
   WhatToGenerate: string ;
   WhatToGenerateGroupBox: string ;
   FirstPassLoadingTextAllocSize: string ;
   FirstPassLoadingTextAllocSizeStaticText: string ;
   GenerateCommentsInCode: string ;
   Name: string ;
   NameStaticText: string ;
   MaxNbError: string ;
   MaxNbErrorStaticText: string ;
   DisplayClassWhenParseNotOK: string ;
   StoreClassWhenParseNotOK: string ;
   ArrayStoreListof: string ;
   DoAllwaysGenerateArrayFetchFastLoadListOf: string ;
   AccessPlans: string ;
   GenerateAllSQL: string ;
}
declare class PRBprojectCreationAgent extends aUIAgent {
   Name: string ;
   NameStaticText: string ;
   MyDBDef: string ;
   MyDBDefStaticText: string ;
}
declare class aPRBproject extends aEntity {
   MyDBDef: string ;
   PRBsToGenerate: string ;
   WhatToGenerate: string ;
   GenerateCommentsInCode: string ;
   MajorErrorsCounter: string ;
   WarningErrorsCounter: string ;
   NbWellProduced: string ;
   AutoRegisteredPRBs: string ;
   NbStatementsKept: string ;
   PRBExtension: string ;
   DefaultConfig: string ;
   SelectedSqlClassDBDefRank: string ;
   ProgressWorking: string ;
   NbToProduce: string ;
   DisplayClassWhenParseNotOK: string ;
   StoreClassWhenParseNotOK: string ;
   MaxNbError: string ;
   FirstPassLoadingTextAllocSize: string ;
   DoGeneratePRBs: string ;
   DoGenerateDBMgr: string ;
   InitHashTableForNonAutoRegisteredPRBs: string ;
   NbSkippedDueToVarsInChildren: string ;
   NbSkippedDueToVarsInAncestorsWithNoPersistentVars: string ;
   theReportUIAgent: string ;
   ProducingForClassDef: string ;
   DoAllwaysGenerateArrayFetchFastLoadListOf: string ;
   ArrayStoreListof: string ;
   AccessPlans: string ;
   ConfirmAccessPlans: string ;
   SqlStmtCounter: string ;
   MyRunTimeDBDef: string ;
   SetProgressWorking(i:number);
   UIGetDefaultConfig():aPRBGenConfig;
   ConfigFor(thisEntity:aSqlClassDefRepresentation):aPRBGenConfig;
   NewConfig():aPRBGenConfig;
   NewProducerFor(thisEntity:aDBEntity):string;
   PRBExtName():string;
   AppendError(CommentString:string, Seriousness:string);
   CanContinue():boolean;
   ProduceUnImp(theProduced:aPRBGoldProduced, moduleName:string, methodName:string, message:string);
   ProduceDBSpecificUnimp(theProduced:aPRBGoldProduced, moduleName:string, methodName:string);
   AppendClassNotOwnedError(Seriousness:string);
   AppendClassNotExistingError(Seriousness:string);
   AppendTextComment(thisText:string);
   Scroll();
   ReportStartProducing(thisEntityName:string);
   ReportWellProduced();
   Init();
   PrepareForWorking(workDesc:string);
   EndWorking(workDesc:string);
   DeleteAllDBRepresentations();
   NewProduced(theHost:aPRBGoldProduced, theTextProduced:string, SqlClassRepr:aSqlClassDefRepresentation):aPRBGoldProduced;
   IsCStringType(thisType:aType):boolean;
   IsResizeablePointerType(thisType:aType):boolean;
   IsNumType(thisType:aType):boolean;
   IsCharType(thisType:aType):boolean;
   IsIntType(thisType:aType):boolean;
   IsDateType(thisType:aType):boolean;
   IsEnumType(thisType:aType):boolean;
   IsBooleanType(thisType:aType):boolean;
   NameForSubVarDesc(theColDesc:aSqlDesc, sep:number):string;
   FullNameForVarDesc(theColDesc:aSqlDesc):string;
   StatementFreeingKindDesc(freeingKind:string):string;
   MakeParseableVarName(theVarName:string);
   BindDataVarNameForVar(theVarName:string):string;
   BindDataVarNameForSubVarDesc(theCol:aSqlColumnDesc, ArrayFetch:boolean):string;
   ProduceSqlExecute(theProduced:aPRBGoldProduced, theResultVar:string);
   ProduceStmtExecutionForText(theProduced:aPRBGoldProduced, theQueryVarName:string, freeingKind:string, theResultVar:string);
   ProduceSqlCloseCursor(theProduced:aPRBGoldProduced);
   ProduceSqlFetchStatement(theProduced:aPRBGoldProduced, theResultVar:string);
   ProduceSqlExecThenFetchStatement(theProduced:aPRBGoldProduced, theQueryVarName:string, freeingKind:string, theResultVar:string);
   ProduceBindDataForFetchForCol(theProduced:aPRBGoldProduced, theCol:aSqlColumnDesc, varName:string, MMType:aType, TypeData:aSqlTypeData, DBType:aSqlType, ArrayFetch:boolean, ConversionVarName:string, conversionVarsProduced:aPRBGoldProduced, indicatorVarName:string);
   ProduceBindValue(theProduced:aPRBGoldProduced, theCol:aSqlColumnDesc, varName:string, MMType:aType, TypeData:aSqlTypeData, DBType:aSqlType, theConversionVarName:string, conversionVarsProduced:aPRBGoldProduced);
   ProduceUserDefinedSqlTypeBindValue(theProduced:aPRBGoldProduced, theCol:aSqlColumnDesc, varName:string, MMType:aType, TypeData:aSqlTypeData, DBType:aSqlType);
   ProduceFOHeaderBindValue(theProduced:aPRBGoldProduced, theCol:aSqlColumnDesc, varName:string);
   ProduceMVFOHeaderBindValue(theProduced:aPRBGoldProduced, theCol:aSqlColumnDesc, varName:string, forInsert:boolean);
   ProduceConvertDataAfterFetchForCol(theProduced:aPRBGoldProduced, theCol:aSqlColumnDesc, varName:string, MMType:aType, TypeData:aSqlTypeData, DBType:aSqlType, ArrayFetch:boolean, ConversionVarName:string);
   ProduceConvertUserDefinedSqlTypeDataAfterFetchForCol(theProduced:aPRBGoldProduced, theCol:aSqlColumnDesc, varName:string, MMType:aType, TypeData:aSqlTypeData, DBType:aSqlType, ArrayFetch:boolean, ConversionVarName:string);
   ProduceFOHeaderBindDataForFetchForCol(theProduced:aPRBGoldProduced, theCol:aSqlColumnDesc, varName:string, ArrayFetch:boolean, ArrayItemVarName:string, conversionVarsProduced:aPRBGoldProduced);
   ProduceMVFOHeaderBindDataForFetchForCol(theProduced:aPRBGoldProduced, theCol:aSqlColumnDesc, varName:string, ArrayFetch:boolean, ArrayItemVarName:string, conversionVarsProduced:aPRBGoldProduced);
   ProduceBindValueWhereIndexVars(theProduced:aPRBGoldProduced, fullIdParamName:string, absVersionParamName:string, isSpecificVersionParamName:string, theTable:aSqlTableDesc);
   ProduceReftoBindValue(theProduced:aPRBGoldProduced, theCol:aSqlColumnDesc, varName:string, fullRefto:boolean, theConversionVarName:string, conversionVarsProduced:aPRBGoldProduced, NoVersion:boolean);
   ProduceReftoBindDataForFetchForCol(theProduced:aPRBGoldProduced, theCol:aSqlColumnDesc, varName:string, ArrayFetch:boolean, ConversionVarName:string, conversionVarsProduced:aPRBGoldProduced, fullRefto:boolean, NoVersion:boolean);
   ProduceConvertReftoAfterFetchForCol(theProduced:aPRBGoldProduced, theCol:aSqlColumnDesc, varName:string, ArrayFetch:boolean, ConversionVarName:string, fullRefto:boolean, NoVersion:boolean);
   ProduceReftoWithExtractBindValue(theProduced:aPRBGoldProduced, theCol:aSqlColumnDesc, varName:string, fullRefto:boolean, theConversionVarName:string, conversionVarsProduced:aPRBGoldProduced, NoVersion:boolean);
   ProduceReftoWithExtractBindDataForFetchForCol(theProduced:aPRBGoldProduced, theCol:aSqlColumnDesc, varName:string, ArrayFetch:boolean, ConversionVarName:string, conversionVarsProduced:aPRBGoldProduced, fullRefto:boolean, NoVersion:boolean);
   ProduceConvertReftoWithExtractAfterFetchForCol(theProduced:aPRBGoldProduced, theCol:aSqlColumnDesc, varName:string, ArrayFetch:boolean, ConversionVarName:string, fullRefto:boolean, NoVersion:boolean);
   ProduceListOfBindDataForFetchForCol(theProduced:aPRBGoldProduced, theCol:aSqlColumnDesc, varName:string, ArrayFetch:boolean, ArrayItemVarName:string, conversionVarsProduced:aPRBGoldProduced);
   ProduceMVListOfBindDataForFetchForCol(theProduced:aPRBGoldProduced, theCol:aSqlColumnDesc, varName:string, ArrayFetch:boolean, ArrayItemVarName:string, conversionVarsProduced:aPRBGoldProduced);
   ProduceListOfBindValue(theProduced:aPRBGoldProduced, theCol:aSqlColumnDesc, varName:string);
   ProduceMVListOfBindValue(theProduced:aPRBGoldProduced, theCol:aSqlColumnDesc, varName:string);
   ProduceGetStatementFor(theProduced:aPRBGoldProduced, SqlTextVarName:string, SqlStmtRankVarName:string, resultStmtVarName:string, freeingKind:string);
   ProduceGetStatementForStr(theProduced:aPRBGoldProduced, SqlStrVarName:string, SqlStmtRankVarName:string, resultStmtVarName:string, freeingKind:string);
   ProduceGetDynStatement(theProduced:aPRBGoldProduced, resultStmtVarName:string);
   TypeForReftoBindData():aType;
   TypeForReftoWithExtractBindData():aType;
   ProduceDBSpecificUses(theProduced:aPRBGoldProduced);
   PRBClassNameFor(thisDBRepresentation:aSqlClassDefRepresentation):string;
   PRBAncestorClassDef(thisDBRepresentation:aSqlClassDefRepresentation):aClassDef;
   NameForPKType(SqlClassRepr:aSqlClassDefRepresentation):string;
   NameForpPKType(SqlClassRepr:aSqlClassDefRepresentation):string;
   ProduceLocalsForSqlLoadMain(SqlClassRepr:aSqlClassDefRepresentation, theProduced:aPRBGoldProduced);
   ProduceLocalsForStoreMain(thisDBRepresentation:aSqlClassDefRepresentation, theProduced:aPRBGoldProduced);
   ProduceSqlParseText(theProduced:aPRBGoldProduced, textVarName:string, theResultVar:string);
   ProduceSqlExecFromTextForStmt(theProduced:aPRBGoldProduced, textVarName:string);
   ProduceLocalsForUpdateMainFor(thisDBRepresentation:aSqlClassDefRepresentation, theProduced:aPRBGoldProduced);
   ProduceLocalsForSqlZapMainFor(thisDBRepresentation:aSqlClassDefRepresentation, theProduced:aPRBGoldProduced);
   FlushQueryTextVars(fromProduced:aPRBGoldProduced);
   IsExternalQueryInitialization(thisDBRepresentation:aSqlClassDefRepresentation):boolean;
   FlushSqlQuery(fromProduced:aPRBGoldProduced);
   ParseableNameFor(thisEntity:aEntity):string;
   RootPRBDBMgrClassDef():aClassDef;
   NameForPRBDBMgr():string;
   ReusableClassRepPRBInAncestors(forInAncestorClassRep:aSqlClassDefRepresentation):aSqlClassDefRepresentation;
   ProduceRegisterPRBs(where:aPRBGoldProduced);
   ProduceDBMgr();
   RemoveDBMgr();
   CheckPRBClasseIsCheckOut(ClassRep:aSqlClassDefRepresentation):boolean;
   ProducePRBs();
   CheckPRBClassesAreCheckOut():boolean;
   ActionProducePRBs();
   RemoveRequestBrokerClassFor(thisDBRepresentation:aSqlClassDefRepresentation);
   RemovePRBs();
   ActionRemovePRBs();
   NotifyButtonDblClk(fromUIAgent:aTextUIAgent, No:number, X:number, Y:number):number;
   UIModify();
   UIConsult();
   AddSelectedSqlClassDesc(theUIAgent:aUIAgent);
   AddAllSqlClassDesc(theUIAgent:aUIAgent);
   AddAutoRegisteredPrb(theUIAgent:aUIAgent);
   AddAllAutoRegisteredPrb(theUIAgent:aUIAgent);
   ClearReport();
   ProduceSqlPlaceHolderString(ColsCountVarName:string):string;
   ProduceErrorHandling(theProduced:aPRBGoldProduced, exitIfError:boolean, closeCursor:boolean, theQueryVarName:string, isTextQuery:boolean, conditionVarName:string, objectVarName:string);
   IsAnInOutSyncEntity();
   GetNsIdAndIdforOwnedEntity();
   GetIDAllocater();
   IsParsingNeededBeforeBinding():boolean;
   ClassIdFromData();
   IsValid();
   GetFirstPassLoadingTextAllocSize():string;
   ProducePrepareStmtForRowWiseFetch(theProduced:aPRBGoldProduced, NumToFetchVarName:string, ArraySizeVarName:string);
   GetCTypeKindExtract(DBType:aSqlType, TypeData:aSqlTypeData, MMType:aType):string;
   IsListOfMappedWithFullRefto(theProduced:aPRBGoldProduced, theSqlListDesc:aSqlListOfColumnSetDesc, NoVersion:boolean):boolean;
   WantAccessPlans():boolean;
   GenerateTechQueriesOf(thisPRBClass:aClassDef);
   GenerateSQLOf(thisPRBClass:aClassDef);
   GenerateAllSQL();
   ProducedColsToSkipInFOHeader(forClassInfoColDesc:aSqlClassInfoColumnSetDesc):string;
   Recast_thisObjectIfNecessary(theProduced:aPRBGoldProduced, theCol:aSqlColumnDesc, InVarName:string);
   ProduceEncryptionAndBindIfNeeded(theProduced:aPRBGoldProduced, theCol:aSqlColumnDesc, theVarAddress:string, MMType:aType, TypeData:aSqlTypeData, DBType:aSqlType, theConversionVarName:string, conversionVarsProduced:aPRBGoldProduced):boolean;
   ProduceDecryptionIfNeeded(theProduced:aPRBGoldProduced, theCol:aSqlColumnDesc, theVarName:string, MMType:aType, MemSize:number, TypeData:aSqlTypeData, DBType:aSqlType, theConversionVarName:string);
   ProduceConversionCondition(theProduced:aPRBGoldProduced);
}
declare class aPRBgeneratorConfigMainStmtsAgent extends aUIAgent {
   LoadCurrentVersionStmtKind: string ;
   LoadCurrentVersionStmtKindStaticText: string ;
   LoadSpecificVersionStmtKind: string ;
   LoadSpecificVersionStmtKindStaticText: string ;
   StoreStmtKind: string ;
   StoreStmtKindStaticText: string ;
   LoadListOfStatementStmtKind: string ;
   LoadListOfStatementStmtKindStaticText: string ;
   StoreListOfStmtKind: string ;
   StoreListOfStmtKindStaticText: string ;
   ZapStmtKind: string ;
   ZapStmtKindStaticText: string ;
   ZapListOfStmtKind: string ;
   ZapListOfStmtKindStaticText: string ;
   GroupBox: string ;
   GroupBox001: string ;
   GroupBox002: string ;
}
declare class aPRBGeneratorConfigTechStmtsAgent extends aUIAgent {
   LatestVersionForStmtKind: string ;
   LatestVersionForStmtKindStaticText: string ;
   SetPrevVersionToNotCurrentStmtKind: string ;
   SetPrevVersionToNotCurrentStmtKindStaticText: string ;
   VersionCountStmtKind: string ;
   VersionCountStmtKindStaticText: string ;
   loadCountsForStmtKind: string ;
   loadCountsForStmtKindStaticText: string ;
   loadCountsForSpecVersStmtKind: string ;
   loadCountsForSpecVersStmtKindStaticText: string ;
   ThingCountStmtKind: string ;
   ThingCountStmtKindStaticText: string ;
   ThingCountSpecVersStmtKind: string ;
   ThingCountSpecVersStmtKindStaticText: string ;
   SetFlagForStmtKind: string ;
   SetFlagForStmtKindStaticText: string ;
   KillThingStmtKind: string ;
   KillThingStmtKindStaticText: string ;
   GroupBox: string ;
}
declare class aPRBGeneratorConfig003Agent extends aFolderViewAgent {
}
declare class aPRBGenConfigMainAgent extends aUIAgent {
   aPRBgeneratorConfigMainStmts: string ;
   OnlyOneStmtKind: string ;
   TheOnlyOneStmtKind: string ;
   TakeCareOfMyMode();
   OnlyOneStmtKind_ValueStored();
   OnlyOneStmtKind_ValueLoaded();
}
declare class aPRBGenConfigAllClassSqlDescAgent extends aUIAgent {
   MySqlClassRepresentations: string ;
}
declare class aPRBGenConfig002Agent extends aSplitViewAgent {
}
declare class aPRBGenConfigOkCancelAgent extends aUIAgent {
   NameAndTextComment: string ;
}
declare class aPRBGenConfig extends aEntity {
   LatestVersionForStmtKind: string ;
   SetPrevVersionToNotCurrentStmtKind: string ;
   VersionCountStmtKind: string ;
   loadCountsForStmtKind: string ;
   loadCountsForSpecVersStmtKind: string ;
   ThingCountStmtKind: string ;
   ThingCountSpecVersStmtKind: string ;
   SetFlagForStmtKind: string ;
   KillThingStmtKind: string ;
   LoadSpecificVersionStmtKind: string ;
   LoadCurrentVersionStmtKind: string ;
   LoadListOfStmtKind: string ;
   StoreStmtKind: string ;
   StoreListOfStmtKind: string ;
   ZapStmtKind: string ;
   ZapListOfStmtKind: string ;
   SameStmtKindForAllStmts: string ;
   TheOnlyOneStmtKind: string ;
   UpdateHeaderForStmtKind: string ;
   UpdateHeaderForSpecVersStmtKind: string ;
   SetToDefault();
   Init();
   GetStatementKind(thisStmtKind:string):string;
   CopyValuesTo(thisObject:aPRBGenConfig);
   StringExtract();
}
declare class aPRBSQLQuery extends aEntity {
   IsLocal: string ;
}
declare class aPRBGoldProduced extends aProduced {
   MyClassProduced: string ;
   MyMethodType: string ;
   MyContext: string ;
   MySqlClassDBDesc: string ;
   NotToBeDisposedEntities: string ;
   TerminationCode: string ;
   Init();
   Terminate();
   WriteCodeComment(thisMessage:string);
   ProduceUnImp(thisMessage:string);
   WriteLnCPPCode(theLine:string);
   FlushSQLText(theSqlText:string, theTextVarName:string);
   FlushSQLTextAsConstTextValue(theSqlText:string, intoProducedText:string);
   AppendLine(theCodeLine:string);
   SetOverrideMethodType(theMethodType:string);
   SetOverrideMethodType2(theMethodTypePart1:string, theMethodTypePart2:string);
   AppendUses(theModuledef:aModuleDef);
   AppendInexistingUses(theModuledef:aModuleDef);
   AppendInexistingUsesInClass(theModuledef:aModuleDef);
   AppendLocalVarDesc(theName:string, theType:aType);
   AppendLocalVarDescWithInLineType(theName:string, theInLineType:string);
   TryToAppendInexistingLocalVarDesc(theName:string, theType:aType):boolean;
   AppendInexistingLocalVarDesc(theName:string, theType:aType);
   AppendInstanceVarDesc(theName:string, theType:aType);
   AppendInexistingInstanceVarDesc(theName:string, theType:aType);
   AppendType(theType:aType);
   AppendTypeInClass(theType:aType);
   AppendAbsoluteLocalVarDesc(theName:string, theType:aType, absolutingVar:string);
   AppendQueryText(thisSqlText:string, TextVarName:string, StmtRankVarname:string);
   AppendQuery(thisSqlProduced:aProduced, TextVarName:string, StmtRankVarname:string);
   AppendLocalQueryStr(thisSqlStr:string, TextVarName:string, StmtRankVarname:string);
   ConcatProduced(theAnotherProduced:aProduced);
   FlushEntities();
   WritelnWrite(theTextVarName:string, content:string);
   WriteCall(thisMethod:aMethodDesc, parameters:string);
   AppendTerminationLine(line:string);
}
declare class OraclePRBProjectTechnicalOptionsAgent extends PRBProjectTechnicalOptionsAgent {
   PleaseUseOEXECFETCH: string ;
}
declare class aOraclePRBProject extends aPRBproject {
   PleaseUseOEXECFETCH: string ;
   Init();
   GetExternalOracleDBTypeExtract(theTypeKind:number):string;
   GetCTypeKindExtract();
   GetExternalOracleTypeExtract(MMType:aType):string;
   PRBAncestorClassDef();
   ProduceDBSpecificUses();
   ProduceLocalsForSqlLoadMain();
   ProduceBindDataForFetchForCol();
   ProduceConvertDataAfterFetchForCol();
   ProduceLocalsForStoreMain();
   ProduceBindValue();
   TypeForReftoBindData();
   TypeForReftoWithExtractBindData();
   RootPRBDBMgrClassDef();
   ProduceSqlExecute();
   ProduceStmtExecutionForText();
   ProduceBindValueWhereIndexVars();
   ProduceSqlCloseCursor();
   ProduceSqlFetchStatement();
   ProduceSqlPlaceHolderString();
   ProduceFOHeaderBindDataForFetchForCol();
   ProduceMVFOHeaderBindDataForFetchForCol();
   ProduceFOHeaderBindValue();
   ProduceMVFOHeaderBindValue();
   ProduceLocalsForSqlZapMainFor();
   ProduceReftoBindValue();
   ProduceReftoBindDataForFetchForCol();
   ProduceReftoWithExtractBindValue();
   ProduceReftoWithExtractBindDataForFetchForCol();
   ProduceListOfBindDataForFetchForCol();
   ProduceMVListOfBindDataForFetchForCol();
   ProduceListOfBindValue();
   ProduceMVListOfBindValue();
   ProduceLocalsForUpdateMainFor();
   IsParsingNeededBeforeBinding();
   ProduceSqlParseText();
   ProduceSqlExecThenFetchStatement();
   ProducePrepareStmtForRowWiseFetch();
   ProduceEncryptionAndBindIfNeeded();
   ProduceDecryptionIfNeeded();
   ProduceConversionCondition();
}
declare class aSqlRecordDescPRBProducer extends aSqlColumnSetDescPRBProducer {
   ProduceBindUpdateColumns();
   ProduceSQLUpdate();
   ProduceIfVarToBeUpdated();
   ProduceSQLUpdateOnlyModifiedVars();
   IsHandledByCurPartition();
   ProduceIsHandledByPartitionBeginBlock();
   ProduceIsHandledByPartitionEndBlock();
   AllColumnsForUpdateOnlyModifiedVars();
   ProduceBindDataForArrayFetch();
   ProduceConvertDataAfterArrayFetch();
   ProduceAssignFetchedColToObjectVar();
}
declare class aPRBConfigsRoleType extends aSingleRoleType {
   IsDroppedObjectUsable();
   NewInstanceFromDroppedObject();
}
declare class aModulePreparer extends aClassPreparer {
   _BuildClass();
   RegisterInIDE();
   _NewClassVersion();
}
declare class aPRBGeneratorExt001Agent extends aUIAgent {
   DoYourJob: string ;
}
declare class aPRBGeneratorExtension extends aWideExtension {
   FolderParentName();
   DoYourJob();
   MenuText();
   ButtonBMPName();
}
declare class aPRBGenCatalog001Agent extends aOpenWhereClosedUIAgent {
   aPRBGeneratorsCatalog002: string ;
}
declare class aPRBGeneratorsCatalogO0nlyDBDefsAgent extends aUIAgent {
   AllDBDefs: string ;
}
declare class aPRBGeneratorsCatalogOnlyGeneratorsAgent extends aUIAgent {
   MyGenerators: string ;
}
declare class aPRBGeneratorsCatalog002Agent extends aSplitViewAgent {
}
declare class aPRBGeneratorsCatalog extends aEntity {
   MyGenerators: string ;
   AllDBDefs: string ;
   InitAllDBDefs();
   InitAfterLoad();
   Init();
   IsSystemCloseAccepted();
}
declare class aPRBGeneratorsRoleType extends aSingleRoleType {
   IsDroppedObjectUsable();
   NewInstanceFromDroppedObject();
   canBreakLinkBetween();
   ModifyThisObject();
   ConsultThisObject();
   AskForActions();
   InteractWithCreatedInstance();
}
declare module xGenPRBMod {
   function GetPRBGeneratorsCatalog():aPRBGeneratorsCatalog;
   function PRBProjectClassForDBDef(thisDBDef:aODBCDBDef):aClassDef;
   function NewPRBProjectFor(thisDBDef:aODBCDBDef):aPRBproject;
   function GetMasterOwnerFor(thisEntity:aEntity):aModuleDef;
   function TypeForSqlListOfDesc(theSqlListOfDesc:aSqlListOfColumnSetDesc):aRecordDesc;
   function RecordVarDescAtRank(theRecord:aRecordDesc, theRank:number, curRank:number):aVarDesc;
}
declare class aODBCPRBProject extends aPRBproject {
   Init();
   GetCTypeKindExtract();
   DBKindTypeExtract(DBType:aSqlType):string;
   PRBAncestorClassDef();
   ProduceDBSpecificUses();
   ProduceLocalsForSqlLoadMain();
   ProduceBindDataForFetchForCol();
   ProduceConvertDataAfterFetchForCol();
   ProduceLocalsForStoreMain();
   ProduceBindValue();
   TypeForReftoBindData();
   TypeForReftoWithExtractBindData();
   ProduceSqlExecute();
   ProduceSqlExecDirectStr(theProduced:aPRBGoldProduced, theQueryVarName:string, theResultVar:string);
   ProduceSqlExecDirectText(theProduced:aPRBGoldProduced, theQueryVarName:string, theResultVar:string);
   ProduceStmtExecutionForText();
   ProduceBindValueWhereIndexVars();
   ProduceSqlCloseCursor();
   ProduceSqlFetchStatement();
   ProduceSqlPlaceHolderString();
   ProduceFOHeaderBindDataForFetchForCol();
   ProduceMVFOHeaderBindDataForFetchForCol();
   ProduceFOHeaderBindValue();
   ProduceMVFOHeaderBindValue();
   ProduceReftoBindValue();
   ProduceReftoWithExtractBindValue();
   ProduceReftoBindDataForFetchForCol();
   ProduceConvertReftoAfterFetchForCol();
   ProduceReftoWithExtractBindDataForFetchForCol();
   ProduceConvertReftoWithExtractAfterFetchForCol();
   ProduceListOfBindDataForFetchForCol();
   ProduceMVListOfBindDataForFetchForCol();
   ProduceListOfBindValue();
   ProduceMVListOfBindValue();
   IsParsingNeededBeforeBinding();
   ProduceSqlParseText();
   ProduceEncryptionAndBindIfNeeded();
   ProduceDecryptionIfNeeded();
   ProduceConversionCondition();
}
declare class aPRBProjectDBDefRoleType extends aSingleRoleType {
   pickInMemOnly();
}
declare class aPersistencyRequestBroker extends aLightObject {
   LatestVersionForStmtRank: string ;
   ULatestVersionForStmtRank: string ;
   SetPrevVersionToNotCurrentStmtRank: string ;
   VersionCountStmtRank: string ;
   loadCountsForStmtRank: string ;
   loadCountsForSpecVersStmtRank: string ;
   UloadCountsForStmtRank: string ;
   UloadCountsForSpecVersStmtRank: string ;
   SearchForStoredVersionsStmtRank: string ;
   ThingCountStmtRank: string ;
   ThingCountSpecVersStmtRank: string ;
   SetFlagForUpdateStmtRank: string ;
   KillThingStmtRank: string ;
   updateHeaderForStmtRank: string ;
   updateHeaderForSpecVersStmtRank: string ;
   SqlLoadMain(thisObject:aFullObject, FromThisId:string, absVersion:number, isSpecificVersion:boolean, myPB:aPB, isCurrent:string, theDB:aODBCDBMgr):boolean;
   PersistencyKind():string;
   LegacyPKSize():number;
/**
*Portability Check: OK
*/
   loadMainFor(thisObject:aFullObject, FromThisId:string, myPB:aPB, isCurrent:string, theDB:aODBCDBMgr);
   SQLSelectListof(theText:string, fromThisObject:aFullObject, someListOf:aListOfInstances, listVersion:number, theVarLink:string);
   ExecSqlSelectListof(theDB:aODBCDBMgr, InhStmt:string, theText:string, fromThisObject:aFullObject, someListOf:aListOfInstances, listVersion:number, theVarLink:string):boolean;
   BindListOfCol(theDB:aODBCDBMgr, hMultiFetchStmt:string, pPBAddresses:string, pDSVs:string, pNsIds:string, pIdAsCStrings:string, pVersions:string, pExtracts:string, isStoreExtract:boolean, fullRefto:boolean, NoVersion:boolean):boolean;
   SQLSelectFastLoadOptimization(theText:string, fromThisObject:aFullObject, someListOf:aListOfInstances, theVarLink:string);
   BindRefObjectForFastLoadListOf(theDB:aODBCDBMgr, fromThisObject:aFullObject, thisObject:aFullObject, someListOf:aListOfInstances, theVarLink:string, InhStmt:string, Buffer:string):boolean;
   ConvertRefObjectAfterFetchForFastLoadListOf(theDB:aODBCDBMgr, fromThisObject:aFullObject, thisObject:aFullObject, someListOf:aListOfInstances, forPB:aPB, Buffer:string);
   IsFastLoadOptimizationRequired(fromThisObject:aFullObject, someListOf:aListOfInstances):boolean;
   LoadListOfQuery(theText:string, fromThisObject:aFullObject, someListOf:aListOfInstances, theVarLink:string):boolean;
   NbrVersionsKept():number;
   IsMonoVersionned():boolean;
   LatestVersionFor(theFullId:string, theDB:aODBCDBMgr);
   SQLInsertForStoreMain(thisObject:aFullObject, PersistentPointer:string, myPB:aPB, theDB:aODBCDBMgr):boolean;
/**
*Portability Check: OK
*/
   storeMainFor(thisObject:aFullObject, PersistentPointer:string, myPB:aPB, theDB:aODBCDBMgr);
   LoadListOfInfo(fromThisObject:aFullObject, someListOf:aListOfInstances, theVarLink:string, tableName:string, FastLoadOptimisation:boolean, pStmtRank:string, stmtKind:string, fullRefto:boolean, NoVersion:boolean, NoInterTable:boolean, NSIdColumnName:string, IdColumnName:string, VersionColumnName:string):boolean;
   SqlLoadListOf(theDB:aODBCDBMgr, fromThisObject:aFullObject, hMultiFetchStmt:string, bindData:string, someListOf:aListOfInstances, theVarLink:string, ListVersion:number, NumToFetch:number, NumFetched:number, pPBAddresses:string, pDSVs:string, pNsIds:string, pIdAsCStrings:string, pVersions:string, pExtracts:string, isStoreExtract:boolean, isJoinTableExist:boolean, FastLoadOptimisation:boolean, fullRefto:boolean, NoVersion:boolean):boolean;
/**
*Portability Check: OK
*/
   loadListOf(someListOf:aListOfInstances, PersistentPointer:string, fromThisObject:aFullObject, myMemo:string, theVarLink:string, theDB:aODBCDBMgr);
   StoreListOfInfo(fromThisObject:aFullObject, someListOf:aListOfInstances, theVarLink:string, tableName:string, pStmtRank:string, stmtKind:string, fullRefto:boolean, ArrayStore:boolean, NoVersion:boolean):boolean;
   StoreListOfQuery(theQuery:string, fromThisOject:aFullObject, someListOf:aListOfInstances, theVarLink:string, isStoreExtract:boolean, pStmtRank:string, stmtKind:string, fullRefto:boolean, ArrayStore:boolean, NoVersion:boolean):boolean;
   storeListOf(someListOf:aListOfInstances, listOfReftos:boolean, PersistentPointer:string, myMemo:string, theVarLink:string, theDB:aODBCDBMgr);
   NewPB():aPB;
   SqlUpdateMainFor(thisObject:aFullObject, PersistentPointer:string, myPB:aPB, changedVars:aListOfInstances, theDB:aODBCDBMgr):boolean;
/**
*Portability Check: OK
*/
   updateMainFor(thisObject:aFullObject, PersistentPointer:string, myPB:aPB, changedVars:aListOfInstances, theDB:aODBCDBMgr);
   ZapListOfFromTableName(FromThisId:string, joinTableName:string, DelStmtRank:number, UpdateStmtRank:number, SelectStmtRank:number, StmtsKind:string, theDB:aODBCDBMgr, theResult:boolean);
   MVZapListOfFromTableName(FromThisId:string, joinTableName:string, DelStmtRank:number, DelStmtKind:string, theDB:aODBCDBMgr, theResult:boolean);
   SqlZapMainFor(thisObject:aFullObject, FromThisId:string, myPB:aPB, theDB:aODBCDBMgr):boolean;
   ZapMainFor(thisObject:aFullObject, FromThisId:string, myPB:aPB, theDB:aODBCDBMgr);
   MainTableName():string;
   SqlSetPrevVersionToNotCurrent(thisFullId:string, theDB:aODBCDBMgr):boolean;
   SetPrevVersionToNotCurrent(thisFullId:string, theDB:aODBCDBMgr);
   SqlVersionCount(thisFullId:string, increment:number, theDB:aODBCDBMgr, theVersionCount:number):boolean;
   loadCountsFor(FromThisId:string, theHeader:string, theDB:aODBCDBMgr):boolean;
   VersionCount(thisFullId:string, increment:number, theDB:aODBCDBMgr):number;
   SearchForStoredVersions(FromThisId:string, theVersions:aListOfInstances, howMany:number, theDB:aODBCDBMgr):number;
   SqlThingCount(thisFullId:string, increment:number, theDB:aODBCDBMgr, theThingCount:number):boolean;
   ThingCount(thisFullId:string, increment:number, theDB:aODBCDBMgr):number;
   SqlSetFlagFor(theFullId:string, newFlags:number, theDB:aODBCDBMgr);
   SetFlagFor(theFullId:string, Flag:number, SetIt:boolean, theDB:aODBCDBMgr);
   SetPhantom(theFullid:string, Value:boolean, theDB:aODBCDBMgr);
   LatestVersionForStmtKind():string;
   SetPrevVersionToNotCurrentStmtKind():string;
   VersionCountStmtKind():string;
   loadCountsForStmtKind():string;
   loadCountsForSpecVersStmtKind():string;
   SearchForStoredVersionsStmtKind():string;
   ThingCountStmtKind():string;
   ThingCountSpecVersStmtKind():string;
   SetFlagForStmtKind():string;
   KillThingStmtKind():string;
   UpdateListRefCountFromTableName(joinTableName:string, ListOwner:aFullObject, PersistentPointer:string, increment:number, UpdateStmtRank:number, SelectStmtRank:number, ZapStmtRank:number, StoreStmtKind:string, ZapStmtKind:string, theDB:aODBCDBMgr);
   UpdateListRefCount(ListOwner:aFullObject, PersistentPointer:string, theVarLink:string, increment:number, theDB:aODBCDBMgr);
   UpdateListOfInfo(ListOwner:aFullObject, someListOf:aListOfInstances, theVarLink:string, tableName:string, pUpdStmtRank:string, pDelStmtRank:string, pInsStmtRank:string, stmtKind:string, fullRefto:boolean, NoVersion:boolean):boolean;
   SqlUpdateListOf(ListOwner:aFullObject, someListOf:aListOfInstances, theVarLink:string, isStoreExtract:boolean, listToInsert:aListOfInstances, listToUpdate:aListOfInstances, listToDelete:aListOfInstances, theDB:aODBCDBMgr, isJoinTableExist:boolean, oldList:aListOfInstances);
/**
*Portability Check: OK
*/
   updateListOf(someListOf:aListOfInstances, listToInsert:aListOfInstances, listToUpdate:aListOfInstances, listToDelete:aListOfInstances, listOfReftos:boolean, PersistentPointer:string, myMemo:string, theVarLink:string, theDB:aODBCDBMgr);
   GetPartitionToUse(changedVars:aListOfInstances):number;
   updateHeaderForStmtKind():string;
   updateHeaderForSpecVersStmtKind():string;
   updateHeaderFor(FromThisId:string, theHeader:string, theDB:aODBCDBMgr);
   SqlUpdateMainForFreeze(thisFullId:string, thisObject:aFullObject, myPB:aPB, unFreeze:boolean, affectsData:boolean, theDB:aODBCDBMgr):boolean;
   FreezeMain(thisFullId:string, thisObject:aFullObject, myPB:aPB, unFreeze:boolean, affectsData:boolean, theDB:aODBCDBMgr):number;
   ZapListOf(someListOf:aListOfInstances, fromThisObject:aFullObject, myMemo:string, myPB:aPB, theVarLink:string, theDB:aODBCDBMgr);
   ArrayFetchFastLoadListOf(someListOf:aListOfInstances, PersistentPointer:string, fromThisObject:aFullObject, myMemo:string, theVarLink:string, BatchSize:number, theDB:aODBCDBMgr);
   SqlODBCVarDependentOneTableAPIterator_position(PtrTo_onThisIndex:string, goingForward:boolean, theAPIterator:aODBCVarDependentOneTableAPIterator, theAPDesc:aAccessPlanDesc):boolean;
   ODBCVarDependentOneTableAPIterator_position(PtrTo_onThisIndex:string, goingForward:boolean, theAPIterator:aODBCVarDependentOneTableAPIterator);
   SqlODBCVarDependentOneTableAPIterator_move(goingForward:boolean, theAPIterator:aODBCVarDependentOneTableAPIterator, theAPDesc:aAccessPlanDesc):boolean;
   ODBCVarDependentOneTableAPIterator_move(goingForward:boolean, theAPIterator:aODBCVarDependentOneTableAPIterator):boolean;
   GetMainTableInfo(thisFullId:string, MainTableName:string, IsMV:boolean, theDB:aODBCDBMgr):boolean;
   HasMoreRecentVersionInDB(theFullId:string, theDB:aODBCDBMgr):boolean;
   BeginCountUpdate(firstFullId:string, ThingCount:boolean, ReloadNewCountValue:boolean, UpdateList:aListOfInstances, theDB:aODBCDBMgr):boolean;
   ExecuteCountUpdate(ThingCount:boolean, ReloadNewCountValue:boolean, UpdateList:aListOfInstances, theDB:aODBCDBMgr);
   SqlSetPrevVersionToNotCurrentWithCheck(thisFullId:string, theDB:aODBCDBMgr, CheckActualUpdate:boolean):boolean;
   SetPrevVersionToNotCurrentWithCheck(thisFullId:string, theDB:aODBCDBMgr, CheckActualUpdate:boolean);
}
declare class aODBCPRB extends aPersistencyRequestBroker {
   BindIDAs():number;
   BindListOfInfo(theVarLink:string, BindLOIDAs:number, BindItemIDAs:number);
   BindListOwnerVarsParameter(theDB:aODBCDBMgr, InhStmt:string, fromThisObject:aFullObject, bindData:string, listVersion:number, BindLOIDAs:number):boolean;
   BindListOfJoinRowParameter(theDB:aODBCDBMgr, InHStmt:string, RowInfo:string, bindData:string, extractBindData:string, isStoreExtract:boolean, fullRefto:boolean, NoVersion:boolean, BindItemIDAs:number);
   StoreListOfQuery();
/**
*Portability Check: OK
*/
   storeListOf();
   BindListOfCol();
   BindListOfCol2(theDB:aODBCDBMgr, hMultiFetchStmt:string, pPBAddresses:string, pDSVs:string, pNsIds:string, pIds:string, pVersions:string, pExtracts:string, isStoreExtract:boolean, fullRefto:boolean, NoVersion:boolean, BindItemIDAs:number):boolean;
   SqlLoadListOf();
/**
*Portability Check: OK
*/
   loadListOf();
   MVZapListOfFromTableName();
   ZapListOfFromTableName();
/**
*Portability Check: OK
*/
   SqlUpdateListOf();
/**
*Portability Check: OK
*/
   UpdateListRefCountFromTableName();
   LatestVersionFor();
   SqlSetPrevVersionToNotCurrentWithCheck();
   SqlSetPrevVersionToNotCurrent();
   loadCountsFor();
   SearchForStoredVersions();
   SqlVersionCount();
   SqlThingCount();
   SqlSetFlagFor();
   SetPhantom();
   WriteFullIdsToText(theList:aListOfInstances, theText:string);
   LoadMoreTextIfNeeded(TargetType:string, tableName:string, textColName:string, theDB:aODBCDBMgr, FromNsId:number, FromId:number, absVersion:number, isSpecificVersion:boolean, pTheText:string, isInLine:boolean, bindData:string, theResult:boolean);
   LoadMoreCryptedTextIfNeeded(TargetType:string, tableName:string, textColName:string, theDB:aODBCDBMgr, FromNsId:number, FromId:number, absVersion:number, isSpecificVersion:boolean, pTheText:string, isInLine:boolean, bindData:string, ExpectedType:aType, EncryptionBrokerClassId:number, EncryptionBrokerData:aDBEntity, theResult:boolean);
   updateHeaderFor();
/**
*Portability Check: OK
*/
   ExecuteCountUpdate();
}
declare class aOraclePRB extends aPersistencyRequestBroker {
   BindListOwnerVarsParameter(theDB:aODBCDBMgr, InhStmt:string, fromThisObject:aFullObject, bindData:string, listVersion:number):boolean;
   BindListOfJoinRowParameter(theDB:aODBCDBMgr, InHStmt:string, RowInfo:string, bindData:string, extractBindData:string, isStoreExtract:boolean, fullRefto:boolean, NoVersion:boolean);
   StoreListOfQuery();
   storeListOf();
   BindListOfCol();
   SqlLoadListOf();
   MVZapListOfFromTableName();
   ZapListOfFromTableName();
/**
*Portability Check: OK
*/
   SqlUpdateListOf();
/**
*Portability Check: OK
*/
   UpdateListRefCountFromTableName();
   LatestVersionFor();
   SqlSetPrevVersionToNotCurrent();
   SqlSetPrevVersionToNotCurrentWithCheck();
   loadCountsFor();
   SearchForStoredVersions();
   SqlVersionCount();
   SqlThingCount();
   SqlSetFlagFor();
   SetPhantom();
   LoadMoreLongTextIfNeeded(ftype:number, tableName:string, textColName:string, theDB:aODBCDBMgr, FromNsId:number, FromId:number, absVersion:number, isSpecificVersion:boolean, pTheText:string, isInLine:boolean, rowSize:number, bindData:string, theResult:boolean);
   LoadMoreLongCryptedTextIfNeeded(ftype:number, tableName:string, textColName:string, theDB:aODBCDBMgr, FromNsId:number, FromId:number, absVersion:number, isSpecificVersion:boolean, pTheText:string, isInLine:boolean, rowSize:number, bindData:string, ExpectedType:aType, EncryptionBrokerClassId:number, EncryptionBrokerData:aDBEntity, theResult:boolean);
   updateHeaderFor();
   ExecuteCountUpdate();
}
declare class aStaticOracleDBMgr extends aOracleDBMgr {
   StatementPool: string ;
   RegisterRequestBrokerList();
   DeregisterRequestBrokerList();
   RegisterDBConnection();
   Statistic();
   fOpen();
   fClose();
   GetStatement(theStatementRank:number, FreeingKind:string, needParsing:boolean):string;
   GetStatementForStr(theStatementRank:number, FreeingKind:string, theRequest:string):string;
   GetStatementFor(theStatementRank:number, FreeingKind:string, theRequest:string):string;
   GetMultiFetchStatementForStr(theStatementRank:number, FreeingKind:string, theRequest:string, NumToFetch:number):string;
   loadListOf();
   LatestVersionFor();
   storeMainFor();
   storeListOf();
   updateMainFor();
   ZapMainFor();
   loadMainFor(thisObject:aFullObject, FromThisFullId:string, myPB:aPB, IsCurrent:string);
   SetPrevVersionToNotCurrent();
   NewPBFor();
   VersionCount();
/**
*Portability Check: OK
*/
   loadCountsFor();
   SearchForStoredVersions();
   ThingCount();
   SetFlagFor();
   SetPhantom();
   UpdateListRefCount();
   updateListOf();
   FastLoadListOf();
   NbrVersionsKept();
   FreezeMain();
   ZapListOf();
/**
*Portability Check: OK
*/
   updateHeaderFor();
   ArrayFetchFastLoadListOf();
   ODBCVarDependentOneTableAPIterator_position();
   ODBCVarDependentOneTableAPIterator_move();
   GetMainTableInfo();
   HasMoreRecentVersionInDB();
   BeginCountUpdate();
   ExecuteCountUpdate();
   GetListTableName();
   SetPrevVersionToNotCurrentWithCheck();
}
declare class aStaticSQLServerDBMgr extends aSQLServerDBMgr {
   StatementPool: string ;
   RegisterRequestBrokerList();
   DeregisterRequestBrokerList();
   Statistic();
   RegisterDBConnection();
   fOpen();
   fClose();
   GetStatement(theStatementRank:number, FreeingKind:string, needParsing:boolean):string;
   GetStatementForStr(theStatementRank:number, FreeingKind:string, theRequest:string):string;
   GetStatementFor(theStatementRank:number, FreeingKind:string, theRequest:string):string;
   GetMultiFetchStatementForStr(theStatementRank:number, FreeingKind:string, theRequest:string, NumToFetch:number):string;
   loadListOf();
   LatestVersionFor();
   storeMainFor();
   storeListOf();
   updateMainFor();
   ZapMainFor();
   loadMainFor(thisObject:aFullObject, FromThisFullId:string, myPB:aPB, IsCurrent:string);
   SetPrevVersionToNotCurrent();
   NewPBFor();
   VersionCount();
/**
*Portability Check: OK
*/
   loadCountsFor();
   SearchForStoredVersions();
   ThingCount();
   SetFlagFor();
   SetPhantom();
   UpdateListRefCount();
   updateListOf();
   FastLoadListOf();
   NbrVersionsKept();
   FreezeMain();
   ZapListOf();
/**
*Portability Check: OK
*/
   updateHeaderFor();
   ArrayFetchFastLoadListOf();
   ODBCVarDependentOneTableAPIterator_position();
   ODBCVarDependentOneTableAPIterator_move();
   GetMainTableInfo();
   HasMoreRecentVersionInDB();
   BeginCountUpdate();
   ExecuteCountUpdate();
   GetListTableName();
   SetPrevVersionToNotCurrentWithCheck();
}
declare class aStaticSQLDBMgr001Agent extends aUIAgent {
   MaxStmts: string ;
   MaxStmtsStaticText: string ;
}
/**
*PERFORMANCE 

type tSqlPerf : record
   TimerResolution : Int4
   SQLidu : Int4
   SQLiduRows : Int4
   SQLSelects : Int4
   SQLSelectRows : Int4
   Transactions : Int4
   SQLPrepares : Int4
   ExecDirects : Int4
   SQLExecutes : Int4
   CursorOpens : Int4
   CursorSize : Int4
   CursorUsed : Int4
   PercentCursorUsed : Num8
   AvgFetchTime : Num8
   AvgCursorSize : Num8
   AvgCursorUsed : Num8
   SQLFetchTime : Int4
   SQLFetchCount : Int4
   CurrentStmtCount : Int4
   MaxOpenStmt : Int4
   SumOpenStmt : Int4
   CurrentConnectionCount : Int4
   MaxConnectionsOpened : Int4
   SumConnectionsOpened : Int4
   SumConnectiontime : Int4
   AvgTimeOpened : Num8
   ServerRndTrips : Int4
   BuffersSent : Int4
   BuffersRec : Int4
   BytesSent : Int4
   BytesRec : Int4
   msExecutionTime : Int4
   msNetWorkServerTime : Int4
endRecord

ServerTrace : Boolean
perf : tSqlPerf
procedure SetServerTrace(traceOn : Boolean)
   uses wODBC
   
   const SQL_PERF_START = 1
   const SQL_PERF_STOP = 2
   const SQL_COPT_SS_BASE = 1200
   const SQL_COPT_SS_PERF_DATA = 1211
   
   var traceFlag : Int4
   
   if traceOn
      traceFlag = SQL_PERF_START
   else
      traceFlag = SQL_PERF_STOP
   endIf
   ;ODBC-Specific
   if wODBC.SQLSetConnectOption(Self.hDBC, SQL_COPT_SS_PERF_DATA, traceFlag) = SQL_SUCCESS
   endIf
endProc 
procedure PerformanceInfo
   uses wODBC
   
   const SQL_COPT_SS_PERF_DATA = 1211
   
   type tpSqlPerf : .tSqlPerf
   
   var pPerf : tpSqlPerf
   var retCode : Int4
   
   ; Application Profile Statistics
   ; Connection Statistics
   ; Network Statistics
   ; Time Statistics;
   retCode = wODBC.SQLGetConnectOption(Self.hDBC, SQL_COPT_SS_PERF_DATA, @pPerf)
   if retCode = SQL_SUCCESS
      if pPerf <> Nil
         Self.perf = pPerf. ;  if Self.Interact(Self.Scenario.aStaticSQLDBMgr002, Modification, True) = rValid
         ;  endIf
      endIf
   endIf
endProc 
procedure Init protected override
   inherited Self.Init
   Self.NbStmtsKept = cArrayStmtMaxSize
   if Self.myTracer <> Nil
      Self.ServerTrace = True
      Self.myTracer.Kill(Self.myTracer)
   else
      Self.ServerTrace = False
   endIf
endProc 
function fOpen(inOut ThisBase : CString, inOut User : IDEName, inOut PassWord : IDEName) return Boolean override
   var oldValue : Int4
   
   _Result = inherited Self.fOpen(ThisBase, User, PassWord)
   if _Result
      if Self.ServerTrace
         Self.SetServerTrace(Self.ServerTrace)
      endIf
      oldValue = Self.NbStmtsKept
      Self.PrepareRequestBrokerList
      if Self.Interact(Self.Scenario.aStaticSQLDBMgr001, Modification, True) <> rValid
         Self.NbStmtsKept = oldValue
      else
         Self.NbStmtsKept = Min(cArrayStmtMaxSize, Self.NbStmtsKept)
      endIf
   endIf
endFunc 

*/
declare class aStaticSQLDBMgr_DEPRECATED extends aDBMgr {
   Init();
   fOpen();
   fClose();
   loadListOf();
   LatestVersionFor();
   storeMainFor();
   storeListOf();
   updateMainFor();
   ZapMainFor();
   loadMainFor();
   SetPrevVersionToNotCurrent();
   NewPBFor();
   VersionCount();
   SearchForStoredVersions();
   ThingCount();
   SetPhantom();
   UpdateListRefCount();
   updateListOf();
   StoreAccessPlansFor();
   ZapAccessPlansFor();
   NbrVersionsKept();
   FreezeMain();
   ZapListOf();
}
declare module xPersistency {
   function SetupFullObjectHeader(myPB:aPB, thisObject:aFullObject, FOHeader:string);
   function SetupMVFullObjectHeader(myPB:aPB, thisObject:aFullObject, FOHeader:string);
   function ConvertFullObjectHeaderAfterFetch(theObject:aFullObject, myPB:aPB, FOHeader:string, isCurrent:string);
   function ConvertMVFullObjectHeaderAfterFetch(theObject:aFullObject, forPB:aPB, theHeader:string, isCurrent:string);
   function IsVarToBeUpdated(varInstalledId:number, changedVars:aListOfInstances):boolean;
   function GetPointedType(byThisType:aPointerType):aType;
/**
*Portability Check: OK
*/
   function CreateFullIdFromMemo(theOldMemo:string):string;
   function NewTemporaryInstFromClassDef(OfThisClassDef:aClassDef):string;
   function NewTemporaryInstFromClassId(OfThisClassId:number):string;
   function reftosCompare(thisRefto:string, thatRefto:string, count:number, size:number):boolean;
   function GetSystemDBMgr():aDBMgr;
   function PrepareDBMgrsForTransaction();
   function PrepareVarsBeforeStoreOf(theSelf:aFullObject);
   function NotifyDBMgrsTransactionFinished();
   function GetDBMgrsError(errNum:number, errMsg:string);
   function markAsOwned(thisObject:aFullObject, ObjectIsOwned:boolean);
   function SetupFullObjectHeaderForFreeze(thisFullId:string, theObject:aFullObject, myPB:aPB, theHeader:string, unFreeze:boolean, newRefCount:number):boolean;
   function RTGetLastErrorForText(hStmt:string, theDB:aODBCDBMgr, theSqlText:string, inModule:string, inMethod:string, objectInError:aFullObject);
   function RTGetLastErrorForStr(hStmt:string, theDB:aODBCDBMgr, theSqlStr:string, inModule:string, inMethod:string, objectInError:aFullObject);
   function ObjectFoundFromDB(FullId:string):boolean;
   function ProduceSqlArrayFetchFastLoadListOf(theProduced:aProducedSQL, FromClassDef:aClassDef, SqlClassRepr:aSqlClassDefRepresentation, FromThisType:aListofReftosType, ListofDBDesc:aSqlListOfColumnSetDesc, AcceptedClassDef:aClassDef, AcceptedClassDBDef:aSqlClassDefRepresentation, AcceptedTableDesc:aSqlTableDesc, theDBDef:aODBCDBDef);
   function IsValidRefThing(theReftoVar:string):boolean;
   function NewTemporaryFetchedMainAndPB(theDB:aDBMgr, theClassId:number, theClassVersion:number, theObject:aFullObject, thePB:aPB);
   function RTAssignFetchColToVar(pFetchedColValue:string, thisObject:aFullObject, varId:number);
   function RTDecryptFetchCol(forDBMgr:aDBMgr, Encrypted:string, EncryptedSize:number, Decrypted:string, DecryptedSize:number, ExpectedType:aType, EncryptionBrokerClassId:number, EncryptionBrokerData:aDBEntity);
   function HashCodeForSql(pKey:string):number;
   function ProduceSQLForAPDesc(theAPDesc:aAccessPlanDesc, theDBDef:aODBCDBDef, theSqlClassDefRepresentation:aSqlClassDefRepresentation, theSqlAPDesc:aSqlAPDesc, theText:string);
   function GetDefaultTransactionTimeOut():number;
   function SetDefaultTransactionTimeOut(value:number):number;
   function sortFullIdByNSId_moved_to_motor(this:string, that:string):boolean;
   function sortFullIdByNSIdIdVersion_moved_to_motor(this:string, that:string):boolean;
   function SortList_moved_to_motor(thisList:aListOfInstances, ascending:boolean, OrderingFunction:string);
   function GetEncryptedBuffer(ToEncrypt:string, Size:number, MMType:aType, EncryptionBrokerClassId:number, EncryptionBrokerData:aDBEntity, forDBMgr:aDBMgr, EncryptedSize:number):string;
   function FreeEncryptedBuffer(EncryptedBuffer:string);
   function GetReOpenPRBStmtOnReset():boolean;
   function GetListOfInstancePerThreadCriticalSection():string;
   function SQLLegacyPrimaryKeyFromHandle(Handle:number):string;
   function SQLLegacyHandleFromPrimaryKey(PrimaryKey:string):number;
   function SQLLegacyFreeHandle(Handle:number);
}
declare module xODBCRT {
   function RTSQLExecute(Stmt:string, theDB:aODBCDBMgr, theResult:boolean);
   function RTSQLExecDirectStr(Stmt:string, theDB:aODBCDBMgr, theQuery:string, theResult:boolean);
   function RTSQLExecDirectText(Stmt:string, theDB:aODBCDBMgr, theQuery:string, theResult:boolean);
   function RTSQLFetch(Stmt:string, theDB:aODBCDBMgr, FetchResult:number, theResult:boolean);
   function RTSQLFreeStatement(hStmt:string, ClosingOpt:number);
   function RTSQLCloseStatement(hStmt:string);
   function RTSQLBindParameterCString(hstmt:string, ipar:number, fParamType:string, fCType:string, fSqlType:string, cbColDef:string, ibScale:string, rgbValue:string, cbValue:string, theResult:boolean);
   function RTSQLBindColRefto(InhStmt:string, IntoThisAddress:string, ColumnNumber:number, bindData:string, fullRefto:boolean, theResult:boolean, NoVersion:boolean, BindIDAs:number, indp:string);
   function RTConvertReftoAfterFetch(IntoThisAddress:string, bindData:string, NoVersion:boolean, BindIDAs:number);
   function RTSQLBindColReftoWithExtract(InhStmt:string, IntoThisAddress:string, ColumnNumber:number, bindData:string, fullRefto:boolean, theResult:boolean, NoVersion:boolean, BindIDAs:number, indp:string);
   function RTConvertReftoWithExtractAfterFetch(IntoThisAddress:string, bindData:string, NoVersion:boolean, BindIDAs:number);
   function RTSQLBindParameterRefto(myPB:aPB, thisObject:aFullObject, InhStmt:string, IntoThisAddress:string, ipar:number, bindData:string, fullRefto:boolean, theResult:boolean, NoVersion:boolean, BindIDAs:number);
   function RTSQLBindParameterReftoWithExtract(myPB:aPB, thisObject:aFullObject, InhStmt:string, IntoThisAddress:string, ipar:number, bindData:string, fullRefto:boolean, theResult:boolean, NoVersion:boolean, BindIDAs:number);
   function RTSQLBindParameterFullObjectHeader(myPB:aPB, thisObject:aFullObject, InhStmt:string, IntoThisHeader:string, ipar:number, theResult:boolean, skipCols:string);
   function RTSQLBindParameterMVFullObjectHeader(myPB:aPB, thisObject:aFullObject, InhStmt:string, IntoThisHeader:string, forInsert:boolean, ipar:number, theResult:boolean, skipCols:string);
   function RTSQLBindColFullObjectHeader(InhStmt:string, IntoThisHeader:string, ColumnNumber:number, theResult:boolean, skipCols:string);
   function RTSQLBindColMVFullObjectHeader(InhStmt:string, IntoThisHeader:string, ColumnNumber:number, theResult:boolean, skipCols:string);
   function RTSQLBindParameter(hStmt:string, ipar:number, fParamType:string, fCType:string, fSqlType:string, cbColDef:string, ibScale:string, rgbValue:string, cbValueMax:string, pcbValue:string, theResult:boolean);
   function RTSQLBindCol(StatementHandle:string, ColumnNumber:number, TargetType:string, TargetValue:string, BufferLength:string, StrLen_or_Ind:string, theResult:boolean);
   function RTSQLBindParameterWhereIndexVars(hStmt:string, ipar:number, FromThisId:string, absVersion:number, isSpecificVersion:boolean, bindData:string, BindIDAs:number, theResult:boolean);
/**
*Portability Check: OK
*/
   function RTSQLBindColListOf(InhStmt:string, ColumnNumber:number, IntoThisAddress:string, theResult:boolean, indp:string);
/**
*Portability Check: OK
*/
   function RTSQLBindParameterListOf(InhStmt:string, ipar:number, IntoThisAddress:string, theResult:boolean);
   function RTSQLBindColMVListOf(InhStmt:string, ColumnNumber:number, IntoThisAddress:string, theResult:boolean, indp:string);
   function RTSQLBindParameterMVListOf(InhStmt:string, ipar:number, IntoThisAddress:string, theResult:boolean);
   function RTSQLBindColText(StatementHandle:string, ColumnNumber:number, TargetType:string, pTheText:string, IsInLine:boolean, bindData:string, theResult:boolean);
   function RTConvertTextAfterFetch(TargetType:string, pTheText:string, IsInLine:boolean, bindData:string);
   function RTSQLBindParameterText(hStmt:string, ipar:number, fParamType:string, fCType:string, fSqlType:string, cbColDef:string, ibScale:string, rgbValue:string, cbValue:string, theResult:boolean);
/**
*Portability Check: OK
*/
   function RTSQLBindParameterDate(hstmt:string, ipar:number, fParamType:string, fCType:string, fSqlType:string, cbColDef:string, ibScale:string, rgbValue:string, bindData:string, theResult:boolean);
   function RTConvertDateAfterFetch(IntoThisAddress:string, bindData:string);
   function RTConvertCryptedTextAfterFetch(TargetType:string, pTheText:string, IsInLine:boolean, bindData:string, ExpectedType:aType, EncryptionBrokerClassId:number, EncryptionBrokerData:aDBEntity, forDBMgr:aDBMgr);
}
declare module xOCIRT {
   function RToexec(Stmt:string, theDB:aODBCDBMgr, theResult:boolean);
   function RTofetch(Stmt:string, theDB:aODBCDBMgr, FetchResult:number, theResult:boolean);
   function RToexfet(Stmt:string, theDB:aODBCDBMgr, nrows:number, cancel:number, exact:number, FetchResult:number, theResult:boolean);
   function RTocan(Stmt:string);
   function RTobndrnCString(Stmt:string, sqlvn:number, progv:string, progvl:number, ftype:number, scale:number, ind:number, fmt:string, fmtl:number, fmtt:number, theResult:boolean);
   function RTodefinText(Stmt:string, pos:number, ftype:number, pTheText:string, IsInLine:boolean, bindData:string, RowSize:number, theResult:boolean);
   function RTConvertTextAfterFetch(ftype:number, pTheText:string, IsInLine:boolean, bindData:string);
   function RTobndrnText(Stmt:string, sqlvn:number, progv:string, ftype:number, scale:number, ind:number, fmt:string, fmtl:number, fmtt:number, theResult:boolean);
   function RTodefinRefto(Stmt:string, IntoThisAddress:string, pos:number, bindData:string, fullRefto:boolean, theResult:boolean, NoVersion:boolean, indp:string);
   function RTodefinpsRefto(Stmt:string, IntoThisAddress:string, pos:number, bindData:string, rowSize:number, fullRefto:boolean, theResult:boolean, NoVersion:boolean, indp:string);
   function RTConvertReftoAfterFetch(IntoThisAddress:string, bindData:string, NoVersion:boolean);
   function RTobndrnRefto(myPB:aPB, thisObject:aFullObject, Stmt:string, IntoThisAddress:string, sqlvn:number, bindData:string, fullRefto:boolean, theResult:boolean, NoVersion:boolean);
   function RTodefinReftoWithExtract(Stmt:string, IntoThisAddress:string, pos:number, bindData:string, fullRefto:boolean, theResult:boolean, NoVersion:boolean, indp:string);
   function RTodefinpsReftoWithExtract(Stmt:string, IntoThisAddress:string, pos:number, bindData:string, rowSize:number, fullRefto:boolean, theResult:boolean, NoVersion:boolean, indp:string);
   function RTConvertReftoWithExtractAfterFetch(IntoThisAddress:string, bindData:string, NoVersion:boolean);
   function RTobndrnReftoWithExtract(myPB:aPB, thisObject:aFullObject, Stmt:string, IntoThisAddress:string, sqlvn:number, bindData:string, fullRefto:boolean, theResult:boolean, NoVersion:boolean);
   function RTodefin(Stmt:string, pos:number, buf:string, bufl:number, ftype:number, scale:number, indp:string, fmt:string, fmtl:number, fmtt:number, rlen:string, rcode:string, theResult:boolean);
   function RTodefinps(Stmt:string, opcode:number, pos:number, bufctx:string, bufl:number, ftype:number, scale:number, indp:string, fmt:string, fmtl:number, fmtt:number, rlen:string, rcode:string, pv_skip:number, ind_skip:number, alen_skip:number, rc_skip:number, theResult:boolean);
   function RTobndrnWhereIndexVars(Stmt:string, sqlvn:number, FromThisId:string, absVersion:number, isSpecificVersion:boolean, bindData:string, theResult:boolean);
   function RTobndrn(Stmt:string, sqlvn:number, progv:string, progvl:number, ftype:number, scale:number, indp:string, fmt:string, fmtl:number, fmtt:number, theResult:boolean);
   function RTodefinFullObjectHeader(Stmt:string, IntoThisHeader:string, pos:number, theResult:boolean, skipCols:string);
   function RTodefinpsFullObjectHeader(Stmt:string, IntoThisHeader:string, pos:number, rowSize:number, theResult:boolean, skipCols:string);
   function RTodefinMVFullObjectHeader(Stmt:string, IntoThisHeader:string, pos:number, theResult:boolean, skipCols:string);
   function RTodefinpsMVFullObjectHeader(Stmt:string, IntoThisHeader:string, pos:number, rowSize:number, theResult:boolean, skipCols:string);
   function RTobndrnFullObjectHeader(myPB:aPB, thisObject:aFullObject, Stmt:string, IntoThisHeader:string, sqlvn:number, theResult:boolean, skipCols:string);
   function RTobndrnMVFullObjectHeader(myPB:aPB, thisObject:aFullObject, Stmt:string, IntoThisHeader:string, forInsert:boolean, sqlvn:number, theResult:boolean, skipCols:string);
/**
*Portability Check: OK
*/
   function RTodefinListOf(Stmt:string, pos:number, IntoThisAddress:string, theResult:boolean);
/**
*Portability Check: OK
*/
   function RTodefinpsListOf(Stmt:string, pos:number, IntoThisAddress:string, rowSize:number, theResult:boolean, pind:string);
/**
*Portability Check: OK
*/
   function RTobndrnListOf(Stmt:string, sqlvn:number, IntoThisAddress:string, theResult:boolean);
   function RTodefinMVListOf(Stmt:string, pos:number, IntoThisAddress:string, theResult:boolean);
   function RTodefinpsMVListOf(Stmt:string, pos:number, IntoThisAddress:string, rowSize:number, theResult:boolean, pind:string);
   function RTobndrnMVListOf(Stmt:string, sqlvn:number, IntoThisAddress:string, theResult:boolean);
   function RTobndrnDate(Stmt:string, sqlvn:number, progv:string, ftype:number, scale:number, fmt:string, fmtl:number, fmtt:number, bindData:string, theResult:boolean);
   function RTConvertDateAfterFetch(IntoThisAddress:string, bindData:string);
   function RTConvertCryptedTextAfterFetch(ftype:number, pTheText:string, IsInLine:boolean, bindData:string, ExpectedType:aType, EncryptionBrokerClassId:number, EncryptionBrokerData:aDBEntity, forDBMgr:aDBMgr);
}
declare class VirtualPartOfSqlColumnDescOverrideAgent extends aUIAgent {
   PrimaryKey: string ;
}
declare class aSqlLegacyColumnDesc001Agent extends aUIAgent {
}
declare class aSqlLegacyColumnDesc extends aSqlColumnDesc {
   IsMainIndexColumn();
}
declare class aSqlExternalColumnDesc001Agent extends aUIAgent {
   ExternalColumns: string ;
   ExternalColumnsStaticText: string ;
   PrimaryKey: string ;
}
declare class aSqlExternalColumnDesc extends aSqlColumnDesc {
   ExternalColumns: string ;
   ProduceDDL();
   ProduceSQLInsert();
   BindInsertColumns();
   FreeBufferAfterBind();
/**
*Portability Check: OK
*/
   ProduceSQLLoad();
/**
*Portability Check: OK
*/
   ProduceSQLJoin();
   GetTableInListFromName(TableName:string, List:aListOfInstances):aSqlTableDesc;
   FillListWithExternalTables();
   GetTable();
   GetType();
   GetData();
   BindUpdateColumns();
   ProduceSQLUpdate();
   AnalyseMapping();
   IsValid();
   FillListWithExternalColumns();
   IsConsistent();
}
declare class aSqlDBDesigner001Agent extends virtualPartofDesignerAgent {
   aODBCDBDesigner004: string ;
   Init();
}
declare class onlyExistingTablesAgent extends aUIAgent {
   ExistingTables: string ;
}
declare class onlyProposedTablesAgent extends aUIAgent {
   ProposedExistingTables: string ;
   initExistingTablesCandidates: string ;
}
declare class aSqlDBDesigner003Agent extends aSplitViewAgent {
}
declare class aSqlDBDesigner004Agent extends aFolderViewAgent {
}
declare class aSqlDBDesigner extends aDataBaseDesigner {
   ExistingTables: string ;
   ProposedExistingTables: string ;
   ExistingTablesSearchedFor: string ;
   existingTableCandidatesUpgraded: string ;
   AddingAuthorizedWhenUpdatingSqlClassDefRepresentation: string ;
   RemovingAuthorizedWhenUpdatingSqlClassDefRepresentation: string ;
   RenamingAuthorizedWhenUpdatingSqlClassDefRepresentation: string ;
   TypeChangingAuthorizedWhenUpdatingSqlClassDefRepresentation: string ;
   AnalysedMappingErrors: string ;
   CommentOnDDLStyle: string ;
   MaxSQLRequestCountForOneOQLRequest: string ;
   DDL: string ;
   DDLBeginning: string ;
   DDLFileName: string ;
   FileName: string ;
   DefaultNumberOfVersions: string ;
   HoleFinder: string ;
   SearchName: string ;
   SearchExact: string ;
   SearchPartialMapping: string ;
   SearchUnmappedNode: string ;
   SearchMappedNode: string ;
   SearchMappedClasses: string ;
   SearchUnmappedClasses: string ;
   SearchTableName: string ;
   SearchClassID: string ;
   SearchNSID: string ;
   NbRowsInTableForBigVolume: string ;
   ApplicativeClassDef: string ;
   GetClsasRootForAppRoot():aClassDef;
   UpdateAppClassRoot();
   Init();
   Terminate();
   initExistingTablesCandidates();
   UpdateUIAgents();
   RefreshFromClassRoot();
   initFromCurrentDBDef();
   NewTableDescFromProject(theProject:aProjectOfExistingTable):aSqlTableDesc;
   NameNameSpaceId();
   LoadDDLFromFile();
   SaveDDLToFile();
   PickaDDLFile();
   ExecuteDDL();
   GetWarningNameOfDB(Def:aODBCDBDef):string;
   PurgeDB();
   DropDB();
   GenerateCreationDDL();
   GenerateUpdateDDL();
   UIRefresh();
   BlankDDL();
   GetLocalConfig():aLocalConfig;
   ActionExportToXml();
   ActionImportFromXml();
   AppluNumberOfVersionsKept();
   ApplyVersioningToAllMapping();
   SupposedNSIDForClassDef(theDBDef:aODBCDBDef, curClassDef:aClassDef):number;
   InitVolumesFromDatabase();
   ClassMeetsCriteria(TheClass:aClassDef, SearchCriteria:string):boolean;
   NextVisibleSibling(SiblingRank:number, AncestorsList:aListOfInstances):aLightObject;
   FindClassDef(SearchCriteria:string, SearchClass:aClassDef, IncludeSearchClass:boolean, SearchSiblings:boolean, RootClass:aClassDef, HitEnd:boolean):aClassDef;
   ModifySearchCriteria(SearchString:string):string;
   GetSearchCriteria(Criteria:string);
   InitDefaultOptions();
}
declare class aLegacySqlClassDefRepresentation001Agent extends FirstPageTopOkCancelOverOverrideAgent {
}
declare class aLegacySqlClassDefRepresentation extends aMVSqlClassDefRepresentation {
}
declare class aExternalColumnRole extends aSingleRoleType {
   SearchAndPick();
}
declare class aProjectOfExistingColumn extends aProjectOfExistingTable {
   TableName: string ;
   SqlType: string ;
   SqlTypeData: string ;
   PrimaryKey: string ;
   StringExtract();
   NewColumnDescFromProject():aSqlLegacyColumnDesc;
}
declare class aProjectOfExistingTable001Agent extends aUIAgent {
   columns: string ;
}
declare class aProjectOfExistingTable extends aEntity {
   columns: string ;
   FindExistingTablesCandidates(theIDETool:aEntity, inDBDef:aODBCDBDef, theTableCandidates:string, likeTableName:string):boolean;
   BuildColumnsFromExisting(theIDETool:aEntity, inDBMgr:aODBCDBMgr);
   NewTableDescFromProject(theDBDef:aODBCDBDef, theIDETool:aEntity):aSqlTableDesc;
}
declare class aExistingTableRole extends aSingleRoleType {
   IsDroppedObjectUsable();
   NewInstanceFromDroppedObject();
   canBreakLinkBetween();
   AuthorizeAction();
}
declare class aWrapperGenerator001Agent extends aUIAgent {
   ComboBox: string ;
   NewWrapper: string ;
   WrapperOptions: string ;
   StaticText: string ;
   ComboBox_Init():number;
   ComboBox_Selected(SelectedRank:number):number;
   ComboBox_ValueLoaded();
}
declare class aWrapperGenerator002Agent extends aSplitViewAgent {
}
declare class WrapperOptionsAgent extends aUIAgent {
   WrapperAncestor: string ;
   WrapperAncestorStaticText: string ;
   WrapperClassName: string ;
   WrapperClassNameStaticText: string ;
   WrapperVariablePrefix: string ;
   WrapperVariablePrefixStaticText: string ;
   GroupBox: string ;
   LikeTableName: string ;
   LikeTableNameStaticText: string ;
   TableKind: string ;
   LikeTableName_Changed(:aUIAgent):number;
   TableKind_ValueStored(:aUIAgent);
}
declare class MainWrapperAgent extends aUIAgent {
   aWrapperGenerator002: string ;
}
declare class aWrapperGenerator extends aEntity {
   DBDefs: string ;
   theLocalConfig: string ;
   currentDBDef: string ;
   ProposedExistingTables: string ;
   WrapperAncestor: string ;
   WrapperClassName: string ;
   WrapperVariablePrefix: string ;
   existingTableCandidatesUpgraded: string ;
   LikeTableName: string ;
   TableKind: string ;
   PurgeComment();
   reInit();
   DefaultWrapperClassAncestor():aClassDef;
   Init();
   buildOrModifyDBDefForClassDef(theClassDef:aClassDef):aLegacySqlClassDefRepresentation;
   VarDescFromName(theClassDef:aClassDef, theName:string):aInstanceVarDesc;
   BuildNewWrapperFromProject(theProject:aProjectOfExistingTable);
   NewTableDescFromProject(theProject:aProjectOfExistingTable):aSqlTableDesc;
   initExistingTablesCandidates();
   NewWrapper();
}
declare class aWrapperGeneratorExtension001Agent extends aUIAgent {
   DoYourJob: string ;
}
declare class aWrapperGeneratorExtension extends aWideExtension {
   theGlobalGenerator: string ;
   DoYourJob();
   FolderParentName();
   MenuText();
   ButtonBMPName();
}
declare class aSqlDBDesignerDefaultOptionsAgent extends aUIAgent {
   DefaultClassesMonoVersionned: string ;
   StoreOptions: string ;
   DefaultHeaderStoredWithUpdateDate: string ;
   DefaultHeaderStoredWithUpdateTime: string ;
   AddingAuthorizedWhenUpdatingSqlClassDefRepresentation: string ;
   RemovingAuthorizedWhenUpdatingSqlClassDefRepresentation: string ;
   RenamingAuthorizedWhenUpdatingSqlClassDefRepr: string ;
   TypeChangingAuthorizedWhenUpdatingSqlClassDefRepresentation: string ;
   GroupBox: string ;
   CommentOnDDLStyle: string ;
   CommentOnDDLStyleGroupBox: string ;
   MaxSQLRequestCountForOneOQLRequest: string ;
   MaxSQLRequestCountForOneOQLRequestStaticText: string ;
   ShallowCopywhenCloning: string ;
   EraseWhenCloning: string ;
   AlwaysCloneInAncestorColumns: string ;
   DefaultNumberOfVersions: string ;
   DefaultNumberOfVersionsStaticText: string ;
   AutomaticMapping: string ;
   ApplyVersioningToAllMapping: string ;
   AppluNumberOfVersionsKept: string ;
   NbRowsInTableForBigVolume: string ;
   InitVolumesFromDatabase: string ;
   GroupBox001: string ;
   GroupBox002: string ;
   GroupBox003: string ;
   GroupBox004: string ;
   theApplicativeRootClassDefStaticText: string ;
   UpdateAppClassRoot: string ;
   ApplicativeClassDef: string ;
   DefaultTableKind: string ;
   DefaultTableKindStaticText: string ;
   GroupBox005: string ;
   InitDefaultOptions: string ;
   RenamingAuthorizedWhenUpdatingSqlClassDefRepr_ValueLoaded();
   CommentOnDDLStyle_ValueLoaded(:aUIAgent);
}
declare class aXMLDBDef001Agent extends aUIAgent {
   FileName: string ;
   FileNameStaticText: string ;
   StoreAtCommit: string ;
   LoadOnDemand: string ;
   WithCR: string ;
}
declare class aXMLDBDef extends aDBDef {
   FileName: string ;
   StoreAtCommit: string ;
   LoadOnDemand: string ;
   WithCR: string ;
   ForImpExp: string ;
   Kill();
   Init();
   NewDBMgr();
   OpenDB();
   CloseDB();
   DBCreated();
   CreateDB();
   PurgeDB();
}
declare class aXMLDBMgr extends aDBMgr {
   XMLFile: string ;
   MainNode: string ;
   ObjectsNode: string ;
   IdGeneratorsNode: string ;
   XMLNameSpaceHashTable: string ;
   NSIdIdHashTable: string ;
   HasChanged: string ;
   AddNodeInNSIdIdHashTable(theNode:aXMLNamedNode, NSId:number, Id:number);
   FindNodeByFullId(theInstanceId:string, IsCurrent:boolean):aXMLNamedNode;
   Kill();
   storeMainFor();
   loadMainFor();
/**
*Portability Check: OK
*/
   storeListOf();
   loadListOf();
   storeFloatingListOf();
   loadFloatingListOf();
/**
*Portability Check: OK
*/
   NewNameSpace();
   isOk();
   Commit();
   Open();
   Close();
   InitNSIdIdHashTable();
   FindClassId();
   ThingCount();
   HandleSpace();
   loadSpaceAndSize();
   VersionCount();
   RefCount();
   NewSelector();
   NewSqlSelector();
}
declare class aXMLNameSpace extends aNameSpaceGenerator {
   IdAttribut: string ;
   NameSpaceIdAttribut: string ;
   IdGeneratorNode: string ;
   Kill();
   InitOrReinit(NameSpaceId:number, IdGeneratorsNode:aXMLNamedNode);
   NextId();
   getNsId();
}
declare class aSqlExternalColumnDescPRBProducer extends aSqlColumnDescPRBProducer {
   ProduceBindWhereVars();
   ProduceBindInsertColumns();
   ProduceBindUpdateColumns();
   ProduceSQLUpdate();
}
declare class aSqlStatementPool001Agent extends aUIAgent {
   NbStmtsKept: string ;
   NbStmtsKeptStaticText: string ;
}
declare class aSqlStatementPool extends aLightObject {
   Stmts: string ;
   StmtVars: string ;
   StmtUseCounter: string ;
   LastUseCounter: string ;
   NbStmtsKept: string ;
   NbHits: string ;
   NbSwap: string ;
/**
*Portability Check: OK
*/
   GetStatement(theDBMgr:aDBMgr, theStatementRank:number, FreeingKind:string, needParsing:boolean, WorksInThread:boolean, ThreadRank:number):string;
   RegisterPool(theDBMgr:aDBMgr);
   Statistic(inText:string);
   DeregisterPool(theDBMgr:aODBCDBMgr);
   Init();
   InteractModifyPoolSize();
}
declare class aSQLSrvPRBProject extends aODBCPRBProject {
   RootPRBDBMgrClassDef();
}
declare class aSqlAPDescPRBProducer extends aSqlDescPRBProducer {
   ProducePositionAndMove(wherePosition:aPRBGoldProduced, whereMove:aPRBGoldProduced, atLeastOne:boolean);
}
declare class aOracleOCI9DBDefSpecificAgent extends aUIAgent {
   SharedDataMode: string ;
   SupportTAF: string ;
   UseCLOBForDefaultTextMapping: string ;
   FailoverRetries: string ;
   FailoverRetriesStaticText: string ;
   FailoverDelay: string ;
   FailoverDelayStaticText: string ;
   DoMapCharToUnicode001: string ;
   TablesTableSpace: string ;
   TablesTableSpaceStaticText: string ;
   ExecuteInSchema: string ;
   ExecuteInSchemaStaticText: string ;
   IndexesTableSpace: string ;
   IndexesTableSpaceStaticText: string ;
   EncryptionBrokerClassDef: string ;
   EncryptionBrokerClassDefStaticText: string ;
   AccentInsensitive: string ;
   LockExpirationDays: string ;
   LockExpirationDaysStaticText: string ;
   CaseInsensitive: string ;
   NlsSort: string ;
   NlsSortStaticText: string ;
   NlsSort001: string ;
   NlsSortStaticText001: string ;
   SetupTAFControls();
   SupportTAF_ValueLoaded(:aUIAgent);
   SupportTAF_ValueStored(:aUIAgent);
}
declare class aOracleOCI9Def001Agent extends aFolderViewAgent {
}
/**
*Oracle database based on OCI V9 (available since oracle 8i)

1/ Database considerations 
- New data types LOB (CLOB, BLOB). LOBs are similar to LONG and LONG RAW types, but are less 
restrictives (You can define more than one LOB column in a table). So be default we map our Text and resizeable 
pointer types to the LOB data types. We make it optional (variable UserLONG) for backward compatibility.

2/ API Considerations
   It is using new set of API provided by Oracle 8
3/ Support of Transparent Application Failover
   It is better to add the FAILOVER_MODE serction in your tnsnames.ora. If not, ythe DBMgr callback will not be called.
   Here is an example of FAILOVER_MODE section:
OSEB.WYDE.COM =
  (DESCRIPTION =
    (ADDRESS_LIST =
      (ADDRESS = (PROTOCOL = TCP)(HOST = SEBASTIENA)(PORT = 1521))
    )
    (CONNECT_DATA =
      (SERVICE_NAME = oseb)
      (FAILOVER_MODE =
        (TYPE = SELECT)
        (METHOD = basic)
        (RETRIES = 100)
        (DELAY = 30)
      )
    )
  )

*/
declare class aOracleOCI9DBDef extends aOracleDBDef {
   SharedDataMode: string ;
   SupportTAF: string ;
   FailoverRetries: string ;
   FailoverDelay: string ;
   UseCLOBForDefaultTextMapping: string ;
   DoMapCharToUnicode: string ;
   TablesTableSpace: string ;
   IndexesTableSpace: string ;
   ExecuteInSchema: string ;
   AccentInsensitive: string ;
   LockDurationDays: string ;
   CaseInsensitive: string ;
   NlsSort: string ;
   NewDBMgr();
   OpenDBForManagement();
   AddUnicodeTypesWamVersionInfTo4400();
   AddWithPrecisionTypesWamVersionInfTo5400();
   InitTypes();
   BestFitDBType();
   PRBGeneratorClassName();
   SqlTypeIsCompatibleWithMMType();
   Init();
   SqlTypeAndDataFromDBValues();
   BestMMTypeForData();
   NeedPatchFromWamInfTo4400():boolean;
   NeedPatchFromWamInfTo5400():boolean;
   IsValid();
   ExternalType();
   SupportAscendingDescendingInIndex();
/**
*Portability Check: OK
*/
   GetStoragePropertyDDL();
   GetTheXMLProducer():aOracleOCI9XMLDBDefExporterImporter;
   IsAccentSensitive();
   IndexAccentCaseSensitivity();
   IsCaseSensitive();
   HasVirtualPrecision();
}
declare class aOracleOCI9DBMgrFO_MessageAgent extends aUIAgent {
   FO_Message: string ;
}
/**
*Oracle DB mgr is based on Oracle Call Interface (OCI )

The Oracle Call Interface (OCI) is a set of low-level APIs (Application Programming Interface Calls) used to interact with Oracle databases. It allows one to use 
operations like logon, execute, parse, fetch, etc. OCI programs are normally written in C or C++, although they can be written in almost any programing language. 


*/
declare class aOracleOCI9DBMgr extends aOracleDBMgr {
   pmyEnvh: string ;
   pmyEnvErrh: string ;
   pmySvch: string ;
   tmpDefineh: string ;
   tmpBindh: string ;
   IsSupportingTAF: string ;
   FailoverMessage: string ;
   FailoverUIAgent: string ;
   FailoverStatus: string ;
   IsRestoringTransactionOnFailover: string ;
   NoInteractOnFailover: string ;
   FailoverRetries: string ;
   FailoverDelay: string ;
   NbFailoverAttempts: string ;
   FailoverAlterSessionOnRollBack: string ;
   FetchCallBackContexts: string ;
   RaiseSQLMotorErrorForStmtAndStatus(status:number, theStmt:string, InFunction:string, Severity:string);
   GetErrorNumForStatement();
   AlterSessionForAccent():boolean;
   AlterSessionCurrentSchema(currentSchema:string):boolean;
   AlterSessionOnOpen():boolean;
   Commit();
   TruncatedDataFetchedForStatement(hStmt:string):boolean;
   SqlFetchStatement();
   SqlBindForExtendedFetch();
   PrepareStmtForColumnWiseFetch();
   PrepareStmtForRowWiseFetch();
   SqlFetchExtendedStatement();
   SqlAllocStatement();
   SqlCloseCursor();
   SqlFreeStatement();
   HandleTAFOnTransactionStmtExecute(WithStmt:string);
   SqlExecute();
   SqlExecStrForStmt();
   BindParameterInStmt();
   SqlBindForFetch();
   LockDB();
   UnlockDB();
   LockCurrentVersionOf();
   UnLockCurrentVersionOf();
   DBVersionInfo();
   DBHandleIsValid();
   SqlPrepareTextStatement();
   SqlPrepareStrStatement();
   GetErrorForStatement();
   Connect();
   EnableServerTrace();
   OnFailoverBegin(fo_type:number, fo_event:number);
   OnFailoverRetry(fo_type:number, fo_event:number);
   OnFailoverEnd(badlyEnded:boolean, fo_type:number, fo_event:number);
   OCIFailoverCallback(svcctx:string, envctx:string, fo_ctx:string, fo_type:number, fo_event:number):number;
   IsDBMSVersionSup9():boolean;
   RegisterTAFCallBacks(doIt:boolean, retries:number, delay:number);
   fOpen();
   fClose();
   RaiseSQLMotorErrorForStmt();
   CanReplayTransaction();
   LockDBForIDAllocator();
   UnlockDBForIDAllocator();
/**
*Portability Check: OK
*/
   AllocBuffer();
/**
*Portability Check: OK
*/
   FreeBuffer();
/**
*Portability Check: OK
*/
   AllocatedAddrFromBuffer();
/**
*Portability Check: OK
*/
   AllocatedAddrFromBufferAndMoveNext();
   SqlBindCol();
   GetRowCount();
}
declare class aOracleOCI9PRB extends aOraclePRB {
   BindListOwnerVarsParameter();
   BindListOfJoinRowParameter();
   BindListOfCol();
   SqlLoadListOf(theDB:aOracleOCI9DBMgr, fromThisObject:aFullObject, hMultiFetchStmt:string, bindData:string, someListOf:aListOfInstances, theVarLink:string, ListVersion:number, NumToFetch:number, NumFetched:number, pPBAddresses:string, pDSVs:string, pNsIds:string, pIdAsCStrings:string, pVersions:string, pExtracts:string, isStoreExtract:boolean, isJoinTableExist:boolean, FastLoadOptimisation:boolean, fullRefto:boolean, NoVersion:boolean):boolean;
   MVZapListOfFromTableName();
   ZapListOfFromTableName();
/**
*Portability Check: OK
*/
   SqlUpdateListOf();
/**
*Portability Check: OK
*/
   UpdateListRefCountFromTableName();
   LatestVersionFor();
   SqlSetPrevVersionToNotCurrentWithCheck();
   SqlSetPrevVersionToNotCurrent();
   loadCountsFor();
   SearchForStoredVersions();
   SqlVersionCount();
   SqlThingCount();
   SqlSetFlagFor();
   SetPhantom();
   updateHeaderFor();
   LoadMoreLongTextIfNeeded();
   LoadMoreLongUnicodeTextIfNeeded(ftype:number, tableName:string, textColName:string, theDB:aODBCDBMgr, FromNsId:number, FromId:number, absVersion:number, isSpecificVersion:boolean, pTheText:string, isInLine:boolean, rowSize:number, bindData:string, theResult:boolean);
   LoadMoreLongCryptedTextIfNeeded();
   LoadMoreLongUnicodeCryptedTextIfNeeded(ftype:number, tableName:string, textColName:string, theDB:aODBCDBMgr, FromNsId:number, FromId:number, absVersion:number, isSpecificVersion:boolean, pTheText:string, isInLine:boolean, rowSize:number, bindData:string, ExpectedType:aType, EncryptionBrokerClassId:number, EncryptionBrokerData:aDBEntity, theResult:boolean);
   storeListOf();
   ExecuteCountUpdate();
}
declare module wOCI9 {
   function OCIInitialize(mode:number, ctxp:string, malocfp:string, ralocfp:string, mfreefp:string):number;
   function OCITerminate(mode:number):number;
   function OCIEnvCreate(envhpp:string, mode:number, ctxp:string, malocfp:string, ralocfp:string, mfreefp:string, xtramemsz:string, usrmempp:string):number;
   function OCIHandleAlloc(parenth:string, hndlpp:string, _type:number, xtramem_sz:string, usrmempp:string):number;
   function OCIHandleFree(hndlp:string, _type:number):number;
   function OCIEnvInit(envp:string, mode:number, xtramemsz:string, usrmempp:string):number;
   function OCISessionBegin(svchp:string, errhp:string, usrhp:string, credt:number, mode:number):number;
   function OCISessionEnd(svchp:string, errhp:string, usrhp:string, mode:number):number;
   function OCILogon(envhp:string, errhp:string, svchp:string, username:string, uname_len:number, password:string, passwd_len:number, dbname:string, dbname_len:number):number;
   function OCILogoff(svchp:string, errhp:string):number;
   function OCIStmtPrepare(stmtp:string, errhp:string, stmt:string, stmt_len:number, language:number, mode:number):number;
   function OCIBindByPos(stmtp:string, bindp:string, errhp:string, position:number, valuep:string, value_sz:number, dty:number, indp:string, alenp:string, rcodep:string, maxarr_len:number, curelep:string, mode:number):number;
   function OCIBindByName(stmtp:string, bindp:string, errhp:string, placeholder:string, placeh_len:number, valuep:string, value_sz:number, dty:number, indp:string, alenp:string, rcodep:string, maxarr_len:number, curelep:string, mode:number):number;
   function OCIBindObject(bindp:string, errhp:string, _type:string, pgvpp:string, pvszsp:string, indpp:string, indszp:string):number;
   function OCIBindDynamic(bindp:string, errhp:string, ictxp:string, icbfp:string, octxp:string, ocbfp:string):number;
   function OCIBindArrayOfStruct(bindp:string, errhp:string, pvskip:number, indskip:number, alskip:number, rcskip:number):number;
   function OCIStmtGetPieceInfo(stmtp:string, errhp:string, hndlpp:string, typep:string, in_outp:string, iterp:string, idxp:string, piecep:string):number;
   function OCIStmtSetPieceInfo(hndlp:string, _type:number, errhp:string, bufp:string, alenp:string, piece:number, indp:string, rcodep:string):number;
   function OCIStmtExecute(svchp:string, stmtp:string, errhp:string, iters:number, rowoff:number, snap_in:string, snap_out:string, mode:number):number;
   function OCIDefineByPos(stmtp:string, defnp:string, errhp:string, position:number, valuep:string, value_sz:number, dty:number, indp:string, rlenp:string, rcodep:string, mode:number):number;
   function OCIDefineObject(defnp:string, errhp:string, _type:string, pgvpp:string, pvszsp:string, indpp:string, indszp:string):number;
   function OCIDefineDynamic(defnp:string, errhp:string, octxp:string, ocbfp:string):number;
   function OCIDefineArrayOfStruct(defnp:string, errhp:string, pvskip:number, indskip:number, rlskip:number, rcskip:number):number;
   function OCIStmtFetch(stmtp:string, errhp:string, nrows:number, orientation:number, mode:number):number;
   function OCIStmtFetch2(stmtp:string, errhp:string, nrows:number, orientation:number, scrollOffset:number, mode:number):number;
   function OCITransStart(svchp:string, errhp:string, timeout:number, flags:number):number;
   function OCITransDetach(svchp:string, errhp:string, flags:number):number;
   function OCITransCommit(svchp:string, errhp:string, flags:number):number;
   function OCITransRollback(svchp:string, errhp:string, flags:number):number;
   function OCITransPrepare(svchp:string, errhp:string, flags:number):number;
   function OCITransMultiPrepare(svchp:string, numBranches:number, txns:string, errhp:string):number;
   function OCITransForget(svchp:string, errhp:string, flags:number):number;
   function OCIErrorGet(hndlp:string, recordno:number, sqlstate:string, errcodep:string, bufp:string, bufsiz:number, _type:number):number;
   function OCIServerVersion(hndlp:string, errhp:string, bufp:string, bufsz:number, hndltype:number):number;
   function OCIServerRelease(hndlp:string, errhp:string, bufp:string, bufsz:number, hndltype:number, version:string):number;
   function OCIAttrSet(trgthndlp:string, trghndltyp:number, attributep:string, size:number, attrtype:number, errhp:string):number;
   function OCIAttrGet(trgthndlp:string, trghndltyp:number, attributep:string, sizep:string, attrtype:number, errhp:string):number;
   function OCIDescriptorAlloc(parenth:string, descpp:string, _type:number, xtramem_sz:string, usrmempp:string):number;
   function OCIDescriptorFree(descp:string, _type:number):number;
   function OCILobWrite(svchp:string, errhp:string, locp:string, amtp:string, offset:number, bufp:string, buflen:number, piece:number, ctxp:string, cbfp:string, csid:number, csfrm:number):number;
   function OCILobWriteAppend(svchp:string, errhp:string, locp:string, amtp:string, bufp:string, buflen:number, piece:number, ctxp:string, cbfp:string, csid:number, csfrm:number):number;
   function OCILobRead(svchp:string, errhp:string, locp:string, amtp:string, offset:number, bufp:string, bufl:number, ctxp:string, cbfp:string, csid:number, csfrm:number):number;
   function OCILobGetLength(svchp:string, errhp:string, locp:string, lenp:string):number;
   function RTOCIStmtExecuteAndFetch(stmt:string, theDB:aODBCDBMgr, iters:number, mode:number, fetchResult:number, theResult:boolean);
   function RTOCIStmtFetch(stmt:string, theDB:aODBCDBMgr, fetchResult:number, theResult:boolean);
   function RTOCIDefineByPos(stmt:string, position:number, valuep:string, value_sz:number, dty:number, indp:string, rlenp:string, rcodep:string, mode:number, theResult:boolean);
   function RTOCIDefineByPosUnicode(stmt:string, position:number, valuep:string, value_sz:number, dty:number, indp:string, rlenp:string, rcodep:string, mode:number, theResult:boolean);
   function RTOCIDefineArrayByPos(stmt:string, position:number, valuep:string, value_sz:number, dty:number, indp:string, rlenp:string, rcodep:string, mode:number, pvskip:number, indskip:number, theResult:boolean);
   function RTOCIDefineArrayByPosUnicode(stmt:string, position:number, valuep:string, value_sz:number, dty:number, indp:string, rlenp:string, rcodep:string, mode:number, pvskip:number, indskip:number, theResult:boolean);
   function RTOCIDefineByPosText(stmt:string, theDB:aODBCDBMgr, position:number, pTheText:string, bindData:string, RowSize:number, IsInLine:boolean, dty:number, theResult:boolean);
   function RTOCIConvertTextAfterFetch(stmt:string, theDB:aODBCDBMgr, dty:number, pTheText:string, IsInLine:boolean, bindData:string);
   function RTOCIConvertCryptedTextAfterFetch(stmt:string, theDB:aODBCDBMgr, dty:number, pTheText:string, IsInLine:boolean, bindData:string, ExpectedType:aType, EncryptionBrokerClassId:number, EncryptionBrokerData:aDBEntity);
   function RTOCIDefineByPosUnicodeText(stmt:string, theDB:aODBCDBMgr, position:number, pTheText:string, bindData:string, RowSize:number, IsInLine:boolean, dty:number, theResult:boolean);
   function RTOCIConvertUnicodeTextAfterFetch(stmt:string, theDB:aODBCDBMgr, dty:number, pTheText:string, IsInLine:boolean, bindData:string);
   function RTOCIConvertUnicodeCryptedTextAfterFetch(stmt:string, theDB:aODBCDBMgr, dty:number, pTheText:string, IsInLine:boolean, bindData:string, ExpectedType:aType, EncryptionBrokerClassId:number, EncryptionBrokerData:aDBEntity);
   function RTOCIDefineByPosRefto(Stmt:string, IntoThisAddress:string, position:number, bindData:string, fullRefto:boolean, theResult:boolean, NoVersion:boolean, indp:string);
   function RTOCIDefineArrayByPosRefto(Stmt:string, IntoThisAddress:string, position:number, bindData:string, rowSize:number, fullRefto:boolean, theResult:boolean, NoVersion:boolean, indp:string);
   function RTOCIConvertReftoAfterFetch(IntoThisAddress:string, bindData:string, NoVersion:boolean);
   function RTOCIDefineByPosReftoWithExtract(Stmt:string, IntoThisAddress:string, position:number, bindData:string, fullRefto:boolean, theResult:boolean, NoVersion:boolean, indp:string);
   function RTOCIDefineArrayByPosReftoWithExtract(Stmt:string, IntoThisAddress:string, position:number, bindData:string, rowSize:number, fullRefto:boolean, theResult:boolean, NoVersion:boolean, indp:string);
   function RTOCIConvertReftoWithExtractAfterFetch(IntoThisAddress:string, bindData:string, NoVersion:boolean);
   function RTOCIDefineByPosFullObjectHeader(Stmt:string, IntoThisHeader:string, position:number, theResult:boolean, skipCols:string);
   function RTOCIDefineArrayByPosFullObjectHeader(Stmt:string, IntoThisHeader:string, position:number, rowSize:number, theResult:boolean, skipCols:string);
   function RTOCIDefineByPosMVFullObjectHeader(Stmt:string, IntoThisHeader:string, position:number, theResult:boolean, skipCols:string);
   function RTOCIDefineArrayByPosMVFullObjectHeader(Stmt:string, IntoThisHeader:string, position:number, rowSize:number, theResult:boolean, skipCols:string);
/**
*Portability Check: OK
*/
   function RTOCIDefineByPosListOf(Stmt:string, position:number, IntoThisAddress:string, theResult:boolean);
   function RTOCIDefineByPosMVListOf(Stmt:string, position:number, IntoThisAddress:string, theResult:boolean);
/**
*Portability Check: OK
*/
   function RTOCIDefineArrayByPosListOf(Stmt:string, position:number, IntoThisAddress:string, rowSize:number, theResult:boolean, indp:string);
   function RTOCIDefineArrayByPosMVListOf(Stmt:string, position:number, IntoThisAddress:string, rowSize:number, theResult:boolean, indp:string);
   function RTOCIBindByPos(stmt:string, position:number, valuep:string, value_sz:number, dty:number, indp:string, alenp:string, rcodep:string, maxarr_len:number, curelep:string, mode:number, theResult:boolean);
   function RTOCIBindArrayByPos(stmt:string, position:number, valuep:string, value_sz:number, dty:number, indp:string, alenp:string, rcodep:string, maxarr_len:number, curelep:string, mode:number, pvskip:number, indskip:number, theResult:boolean);
   function RTOCIBindByPosCString(stmt:string, position:number, valuep:string, value_sz:number, dty:number, ind:number, alenp:string, rcodep:string, maxarr_len:number, curelep:string, mode:number, theResult:boolean);
   function RTOCIBindByPosUnicode(stmt:string, position:number, valuep:string, value_sz:number, dty:number, ind:number, alenp:string, rcodep:string, maxarr_len:number, curelep:string, mode:number, theResult:boolean);
   function RTOCIBindByPosText(stmt:string, theDB:aODBCDBMgr, position:number, valuep:string, dty:number, ind:number, alenp:string, rcodep:string, maxarr_len:number, curelep:string, mode:number, theResult:boolean);
   function RTOCIBindByPosDate(stmt:string, position:number, valuep:string, dty:number, indp:string, alenp:string, rcodep:string, maxarr_len:number, curelep:string, mode:number, bindData:string, theResult:boolean);
   function RTOCIBindByPosWhereIndexVars(Stmt:string, position:number, FromThisId:string, absVersion:number, isSpecificVersion:boolean, bindData:string, theResult:boolean);
   function RTOCIBindByPosFullObjectHeader(myPB:aPB, thisObject:aFullObject, Stmt:string, IntoThisHeader:string, position:number, theResult:boolean, skipCols:string);
   function RTOCIBindByPosMVFullObjectHeader(myPB:aPB, thisObject:aFullObject, Stmt:string, IntoThisHeader:string, forInsert:boolean, position:number, theResult:boolean, skipCols:string);
   function RTOCIBindByPosRefto(myPB:aPB, thisObject:aFullObject, Stmt:string, IntoThisAddress:string, position:number, bindData:string, fullRefto:boolean, theResult:boolean, NoVersion:boolean);
   function RTOCIBindByPosReftoWithExtract(myPB:aPB, thisObject:aFullObject, Stmt:string, IntoThisAddress:string, position:number, bindData:string, fullRefto:boolean, theResult:boolean, NoVersion:boolean);
/**
*Portability Check: OK
*/
   function RTOCIBindByPosListOf(Stmt:string, position:number, IntoThisAddress:string, theResult:boolean);
   function RTOCIBindByPosMVListOf(Stmt:string, position:number, IntoThisAddress:string, theResult:boolean);
   function ReAcceptTransaction(T:aTransaction);
/**
*Portability Check: OK
*/
   function RTOCICallbackDefineForOQLFetch(octxp:string, defnp:string, iter:number, bufpp:string, alenpp:string, piecep:string, indpp:string, rcodep:string):number;
}
declare class aStaticOracleOCI9DBMgr extends aOracleOCI9DBMgr {
   StatementPool: string ;
   RegisterRequestBrokerList();
   DeregisterRequestBrokerList();
   RegisterDBConnection();
   Statistic();
   fOpen();
   fClose();
   GetStatement(theStatementRank:number, FreeingKind:string, needParsing:boolean):string;
   GetStatementForStr(theStatementRank:number, FreeingKind:string, theRequest:string):string;
   GetStatementFor(theStatementRank:number, FreeingKind:string, theRequest:string):string;
   GetMultiFetchStatementForStr(theStatementRank:number, FreeingKind:string, theRequest:string, NumToFetch:number):string;
   loadListOf();
   LatestVersionFor();
   storeMainFor();
   storeListOf();
   updateMainFor();
   ZapMainFor();
   loadMainFor(thisObject:aFullObject, FromThisFullId:string, myPB:aPB, IsCurrent:string);
   SetPrevVersionToNotCurrent();
   NewPBFor();
   VersionCount();
/**
*Portability Check: OK
*/
   loadCountsFor();
   SearchForStoredVersions();
   ThingCount();
   SetFlagFor();
   SetPhantom();
   UpdateListRefCount();
   updateListOf();
   FastLoadListOf();
   NbrVersionsKept();
   FreezeMain();
   ZapListOf();
/**
*Portability Check: OK
*/
   updateHeaderFor();
   ArrayFetchFastLoadListOf();
   ODBCVarDependentOneTableAPIterator_position();
   ODBCVarDependentOneTableAPIterator_move();
   GetMainTableInfo();
   HasMoreRecentVersionInDB();
   BeginCountUpdate();
   ExecuteCountUpdate();
   GetListTableName();
   SetPrevVersionToNotCurrentWithCheck();
}
declare class aOracleOCI9PRBProject extends aOraclePRBProject {
   PRBAncestorClassDef();
   RootPRBDBMgrClassDef();
   GetExternalOracleDBTypeExtract();
   ProduceDBSpecificUses();
   ProduceBindDataForFetchForCol();
   ProduceConvertDataAfterFetchForCol();
   ProduceBindValue();
   ProduceSqlExecute();
   ProduceSqlExecThenFetchStatement();
   ProduceSqlFetchStatement();
   ProduceBindValueWhereIndexVars();
   ProduceSqlCloseCursor();
   ProduceFOHeaderBindDataForFetchForCol();
   ProduceMVFOHeaderBindDataForFetchForCol();
   ProduceFOHeaderBindValue();
   ProduceMVFOHeaderBindValue();
   ProduceReftoBindValue();
   ProduceReftoWithExtractBindValue();
   ProduceReftoBindDataForFetchForCol();
   ProduceReftoWithExtractBindDataForFetchForCol();
   ProduceListOfBindDataForFetchForCol();
   ProduceMVListOfBindDataForFetchForCol();
   ProduceListOfBindValue();
   ProduceMVListOfBindValue();
   ProduceEncryptionAndBindIfNeeded();
   ProduceConversionCondition();
}
declare class aInMemPB extends aPB {
   mustLoadRefThing():boolean;
   mustInitAfterLoad():boolean;
   mustStoreOwnedInstances():boolean;
   ZapAllVersionsOfMyInst();
   SetPhantomFromId();
   PreCommitPass1();
   PreCommitPass2();
   FinalCommit();
   PreRollBack();
   FinalRollBack();
/**
*Portability Check: OK
*/
   LoadMore();
   ExtendedLoadFromId();
/**
*Portability Check: OK
*/
   PBprepareListForStoreMore();
   storeHostInstance();
   FindStorableRefForVersion();
/**
*Portability Check: OK
*/
   StoreMore();
}
declare class aInMemTGV extends aTGV {
   SizeUsed: string ;
   bufferSize: string ;
   theBuffer: string ;
   InitSizeWith(ThisSize:number);
   NewSpace();
   FirstStore();
   RawStore();
   Kill(mySelf:string);
   BigRawStore();
/**
*Portability Check: OK
*/
   Load();
/**
*Portability Check: OK
*/
   RawLoad();
   BigRawLoad();
   Lock();
   UnLock();
   LockFreeChains():boolean;
   UnLockFreeChains():boolean;
   LockIndexes();
   UnLockIndexes();
   LockAddress();
   UnLockAddress();
   fOpen();
   fClose();
   Flush();
   fCreate();
}
declare class aInMemTGVDBDef extends aTGVDBDef {
   NewDBMgr();
   OpenDB();
}
declare class aInMemTGVDBMgr extends aTGVDBMgr {
   allobjectFullids: string ;
   allFLFullIds: string ;
   allJustLoadedObjets: string ;
   initAllObjects();
   initMyTGV();
   InitTGVSizeWith(thisSize:number);
   openAndDefine();
   fOpen();
   BuildIdAccessPlan();
   killOwned();
   Kill();
   LatestVersionFor();
/**
*Portability Check: OK
*/
   findAddress();
   InstallNewAccessPlan();
   StoreAccessPlansFor();
   NewPBFor();
   HandleSpace();
   needsToStoreList();
   Commit();
   SetTGV(tgvBuffer:string, tgvSize:number);
   loadMainFor();
   FindClassId();
}
declare class aPRBGeneratorsCatalog001Agent extends aToolBarUIAgent {
}
declare class aPRBGenCatalog001DockedAgent extends aUIAgent {
   aPRBGeneratorsCatalog002: string ;
}
declare class aSqlDBDesignerDDLAgent extends aUIAgent {
   DDL: string ;
   DDLFileName: string ;
   DDLFileNameStaticText: string ;
   PurgeDB: string ;
   DropDB: string ;
   GenerateCreationDDL: string ;
   GenerateUpdateDDL: string ;
   ExecuteDDL: string ;
   PickaDDLFile: string ;
   LoadDDLFromFile: string ;
   SaveDDLToFile: string ;
}
declare class aSqlDBDesignerExpImpXMLAgent extends aDataBaseDesignerExpImpXMLAgent {
   ActionExportToXml: string ;
   ActionImportFromXml: string ;
   GroupBox: string ;
}
declare class aSqlDBDesignerFullObjectGenericDescendentsAgent extends aUIAgent {
   PresentingClassDef: string ;
   LastFoundNode: string ;
   TimerLaunched: string ;
   HitEnd: string ;
   Extension: string ;
   Extension001: string ;
   ClassDefs: string ;
   CopyObjectFromList(FromList:aListOfInstances, ToList:aListOfInstances);
   DefaultRootClass():aClassDef;
   GetRootClass():aClassDef;
   Init();
   NotifyInit();
   Terminate();
   MagicExpandNode(Control:aListOfAsListTreeCtrlUIAgent, SelectedNode:string);
   ShowNode(Node:string, Control:aListOfAsListTreeCtrlUIAgent);
   FindExistingNodeForClass(TheClass:aClassDef, Control:aListOfAsListTreeCtrlUIAgent):string;
   PopulateAncestorsList(ForClass:aClassDef, List:aListOfInstances);
   PopulateReverseAncestorsList(ForClass:aClassDef, List:aListOfInstances);
   FindOrAddNode(TheClass:aClassDef, Control:ListOfAsListTreeCtrlAgent):string;
   DoSearch(SearchCriteria:string, CurrentClass:aClassDef, HitEnd:boolean);
   SearchNext();
   PerformSearch();
   GetBitmapforClass(CurClassDef:aClassDef):number;
   UpdateParentLinesForClass(TheNode:string, Control:ListOfAsListTreeCtrlAgent, AncestorsList:aListOfInstances);
   UpdateBitmapsForClassAndDesc(TheNode:string, Control:ListOfAsListTreeCtrlAgent, AncestorsList:aListOfInstances);
   UpdateFromClassRoot(TheClass:aClassDef);
   ChangeRootClass(TheNewClass:aClassDef);
   ClassDefs_Executed(SelectedRank:number, Option:number):number;
   GetMappingStatus(DB:aODBCDBDef, TheClass:aClassDef):string;
   ClassDefs_ComputeColumn(theComputedColumn:string, ColIndex:number, Element:aLightObject):number;
   ClassDefs_ComputeLine(theComputedLine:string, ObjectIndex:number, theListOfReftos:aListOfInstances):number;
   ClassDefs_ShortKey(Ch:number, VKey:string, theCount:number, Flags:string):number;
   ClassDefs_GetSubTree(pTheListOfChildren:string, theListType:aType, theParent:aLightObject):number;
   ClassDefs_ValueLoaded(:aUIAgent);
}
declare class aDataBaseDesignerFullObjectRootVirtualForaSqlDBDesignerAgent extends aDataBaseDesignerFullObjectRootVirtualAgent {
   aSqlDBDesignerFullObjectGenericDescendents: string ;
   aSqlDBDesignerFullObjectGenericDescendents001: string ;
   aSqlDBDesignerSearchBar: string ;
   aDataBaseDesignerToolBar: string ;
   UpdateFromClassRoot(TheClass:aClassDef);
   ChangeRootClass(TheNewClass:aClassDef);
}
declare class aSqlDBDesignerSearchAgent extends aUIAgent {
   SearchName: string ;
   SearchNameStaticText: string ;
   SearchExact: string ;
   SearchPartialMapping: string ;
   SearchUnmappedNode: string ;
   SearchMappedNode: string ;
   StaticText: string ;
   SearchMappedClasses: string ;
   SearchUnmappedClasses: string ;
   SearchTableName: string ;
   SearchTableNameStaticText: string ;
   SearchClassID: string ;
   SearchClassIDStaticText: string ;
   SearchNSID: string ;
   SearchNSIDStaticText: string ;
}
declare class aSqlDBDesignerFullObjectGenericDescendentsForaSqlDBDesignerAgen extends aSqlDBDesignerFullObjectGenericDescendentsAgent {
   DefaultRootClass();
}
declare class aDataBaseDesignerAppRootVirtualForaSqlDBDesignerAgent extends aDataBaseDesignerAppRootVirtualAgent {
   aSqlDBDesignerFullObjectGenericDescendentsForaSqlDBDesigner: string ;
   aSqlDBDesignerSearchBar: string ;
   aDataBaseDesignerToolBar: string ;
   UpdateFromClassRoot(TheClass:aClassDef);
   ChangeRootClass(TheNewClass:aClassDef);
}
declare class aSqlDBDesignerIgnoreClassesAgent extends aUIAgent {
   ClassesToIgnore: string ;
}
declare class aSqlDBDesignerSearchBarAgent extends aUIAgent {
   SearchNameStaticText: string ;
   SearchExact: string ;
   ComboBoxEntry: string ;
   SearchHistory: string ;
   DoSearch001: string ;
   Init();
   Terminate();
   FindAgentForSearch():aSqlDBDesignerFullObjectGenericDescendentsAgent;
   DoSearch();
   ComboBoxEntry_Selected(SelectedRank:number):number;
   ComboBoxEntry_Changed():number;
   ComboBoxEntry_Executed(SelectedRank:number, Option:number):number;
}
/**
*A class for finding the holes in the mapping - essentially the partial mapping
of a part of a tree.
*/
declare class aClassHoleFinder extends aLightObject {
   NumberOfDescendentsByClass: string ;
   NumberOfMappedDescendentsByClass: string ;
   Reset();
   Init();
   Terminate();
   ClassIsPersistent(DB:aODBCDBDef, ClassDef:aClassDef):boolean;
   _DeleteNumbersForClassAndDesc(TheClass:aClassDef);
   DeleteNumbersForClassAndDesc(TheClass:aClassDef);
   FindDescNumbers(DBDef:aODBCDBDef, TheClass:aClassDef, TotalNumberDescendents:number, TotalNumberMapped:number, IgnoreClasses:aListOfInstances);
   InitOn(DBDef:aODBCDBDef, OnClassDef:aClassDef);
   IsAPartialMapping(DBDef:aODBCDBDef, TheClass:aClassDef):boolean;
   ClassAndDescNotMapped(DBDef:aODBCDBDef, TheClass:aClassDef):boolean;
   ClassAndDescMapped(DBDef:aODBCDBDef, TheClass:aClassDef):boolean;
}
declare class aSQLServerXMLDBDefExporterImporter extends aXMLDBDefExporterImporter {
   GenerateDBDefSpecialInfo();
   ImportDBDefSpecialInfo();
}
declare class aXMLDBDefExporterImporter extends aLightObject {
   NbErrors: string ;
   GenerateColumnSetDesc(columnSetDesc:aSqlColumnSetDesc, inParentNode:aXMLNamedNode);
   GenerateTable(curSqlTableDesc:aSqlTableDesc, curSqlTableDescNode:aXMLNamedNode);
   ImportSqlNameInColumnSet(columnSetNode:aXMLNamedNode, columnSetDesc:aSqlColumnSetDesc);
   ImportSqlNameInTable(tableNode:aXMLNamedNode, tableDesc:aSqlTableDesc);
   GenerateDBDefSpecialInfo(DBDef:aODBCDBDef, parentNode:aXMLNamedNode);
   ImportDBDefSpecialInfo(DBDef:aODBCDBDef, DBDefNode:aXMLNamedNode);
   SelectFileInClientSystemExplorer(thePickedFileName:string);
   GenerateFullXMLName(inXmlNode:aXMLNamedNode, thisEntity:aEntity);
   IsAlobColumn(curSqlColumnDesc:aSqlColumnDesc):boolean;
   GenerateSimpleColumn(curSqlColumnDesc:aSqlDesc, inParentNode:aXMLNamedNode):aXMLNamedNode;
   GenerateColumn(curSqlColumnDesc:aSqlDesc, inParentNode:aXMLNamedNode);
   GenerateDBDef(xmlFile:aXMLFile, CurrentDBDef:aODBCDBDef);
   ResetErrors();
   AppendError(CommentString:string, Seriousness:string);
   ActionExportToXml(theFileName:string, thisDBDef:aODBCDBDef);
   ImportDBDefGeneralInfo(DBDefNode:aXMLNamedNode, curDBDef:aODBCDBDef);
   IsColNodePresentingEntity(curColNode:aXMLNamedNode, thisEntity:aEntity):boolean;
   ImportSqlNameInDesc(sqlNode:aXMLNamedNode, sqlDesc:aSqlDesc);
   ImportSqlNamesInClassRepresentation(ClassRepresentationNode:aXMLNamedNode, curClassDBDef:aSqlClassDefRepresentation);
   ImportClassRepresentation(ClassRepresentationNode:aXMLNamedNode, curDBDef:aODBCDBDef, XMLClassDBDef:aListOfInstances);
   ImportDBDef(xmlFile:aXMLFile, theLocalConfig:aLocalConfig);
   ActionImportFromXml(theFileName:string, thisDBDef:aODBCDBDef);
}
/**
*Used to present a listof in a UIAgent.
Used currently only in a scenario of aSQLDBDesigner.
*/
declare class aSQLDBDesignerClassDefPresenter extends aFullObject {
   ClassDefs: string ;
}
declare class aVersionToolExtensionConfirmMappingToChangeAgent extends aUIAgent {
   ProposedMappingToChangeStaticText: string ;
   ProposedMappingToChange001: string ;
   ProposedMappingToChange001_GetParent(theParent:aLightObject, theChild:aLightObject):number;
   ProposedMappingToChange001_ComputeLine(theComputedLine:string, ObjectIndex:number, theListOfReftos:aListOfInstances):number;
}
/**
*Do not change the name of this class or the method ChangeMVtoV

This class is called from C++ by name from  _aODBCDBDef::PrepareMappingOf 
*/
declare class aVersioningTool extends aFullObject {
   ProposedMappingToChange: string ;
   Init();
   Terminate();
   GetDBDesigner():aDataBaseDesigner;
   DOChangeMappingToVersioned(curClassRep:aSqlClassDefRepresentation, T:aTransaction);
   DoChangeMappingOfClasses(TheDB:aODBCDBDef);
   ChangeMVtoV(SelectedClassRep:aSqlClassDefRepresentation);
   DoChangeAllToVersioning(MonoV:boolean, TheDBDef:aODBCDBDef);
   ApplyNbVersionKept(TheDBDef:aODBCDBDef, NumberOfVersionsKept:number);
}
declare class aOracleOCI9DBDefDocProducer extends aODBCDBDefDocProducer {
   WriteDBDefInfoDatabaseSpecific();
   KindOfEntity();
}
declare class aOracleOCI9XMLDBDefExporterImporter extends aOracleXMLDBDefExporterImporter {
   GenerateDBDefSpecialInfo();
   ImportDBDefSpecialInfo();
}
declare class aOracleXMLDBDefExporterImporter extends aXMLDBDefExporterImporter {
   ImportDBDefSpecialInfo();
}
declare class aRemoteDBMgr extends aInMemTGVDBMgr {
   writingTGV: string ;
   writingIdAP: string ;
   allObjectToDelete: string ;
   allObjectToPhantomize: string ;
   allObjectToUnPhantomize: string ;
   allObjectToFreeze: string ;
   allObjectToUnFreeze: string ;
   PingPongProcessId: string ;
   PingPongThreadId: string ;
   TransactionThreadId: string ;
   TransactionProcessId: string ;
   lastTGVForStore: string ;
   LocalDBDef: string ;
   LocalDBMgr: string ;
   mustCacheLoadedObjects: string ;
   mustCacheStoredObjects: string ;
   mustLookInLocalDBWhenLoading: string ;
   TemporaryLoadedInLocalDB: string ;
   LoadingContexts: string ;
   pushLoadingContext();
   popLoadingContext():boolean;
   SetTGVFromBuffer(pTGV:string, TGVSize:number);
   foundInCache(thisFullId:string):boolean;
   ObjectfoundInLocalDB(O:aFullObject):boolean;
   CanBeLoadedFromLocalDB(thisFullId:string):boolean;
   CacheThisObject(O:aFullObject);
   CacheThisListOfObjects(L:aListOfInstances);
   PutInCacheJustStoredObjects();
   LoadReallyCompleted();
   LoadCompleted();
   ReinitTGV();
   getClientId():number;
   SendTransaction();
   Commit();
   FillAllObjectsList(pData:string, ObjectNumber:number);
   initForLoadForOtherService();
   FindClassId();
   NewNameSpace();
   loadMainFor();
   NewSelector();
   LatestVersionFor();
   SetPhantom();
   IsThingKilled();
   IsResponsibleForItsLife();
   SetToNotResponsibleForItsLife();
   LockCurrentVersionOf();
   UnLockCurrentVersionOf();
   NewPBFor();
   NewAPSelector();
   openAndDefine();
   SearchForStoredVersions();
   Init();
   getVersionInfoFor();
   NbrVersionsKept();
   LockDB();
   UnlockDB();
   fOpen();
   Ping():boolean;
   procFreeze(thisFullId:string);
   procUnFreeze(thisFullId:string);
   InstallNewAccessPlan();
   OQLBatchSize(MRB:aMultiRequestBroker):number;
   LoadObjectFromGivenBuffer();
   RemoteOQLCompiledService();
   TerminateOQLRequestBroker(theOQLBroker:aInterpRemoteOQLRequestBroker);
   HasMoreRecentVersionInDB();
   isOk();
   ClearLastError();
   NewSqlSelector();
   StoreAccessPlansFor();
}
declare class aRemoteDBDef001Agent extends aUIAgent {
   ServiceName: string ;
   ServiceNameStaticText: string ;
   DBMgrClassDef: string ;
   DBMgrClassDefStaticText: string ;
}
declare class aRemoteDBDef002Agent extends aFolderViewAgent {
}
declare class RemoteDBDef_LocalDBDefAgent extends aUIAgent {
   LocalDBDef: string ;
   LocalDBDefStaticText: string ;
   DefaultUpdateLocalDBWhenStoring: string ;
   DefaultUpdateLocalDBWhenLoading: string ;
   DefaultLookFromLocalDBWhenLoading: string ;
   GroupBox: string ;
   CanWorkOnlyOnLocalDB: string ;
}
declare class aRemoteDBDef extends aTGVDBDef {
   ServiceName: string ;
   ClientId: string ;
   mustSwap: string ;
   onlyOnLocalDB: string ;
   LocalDBDef: string ;
   DefaultUpdateLocalDBWhenStoring: string ;
   DefaultUpdateLocalDBWhenLoading: string ;
   DefaultLookFromLocalDBWhenLoading: string ;
   CanWorkDisconnected: string ;
   LocalDBMgr: string ;
   NewObjectT: string ;
   pServiceName():string;
   swapInt2(fromInt2:number):number;
   swapInt4(fromInt4:number):number;
   swapParamInt4(Int4ToSwap:number);
   swapParamInt8(Int8ToSwap:number);
   swapInt8(fromInt8:number):number;
   swapFullId(theFullId:string):string;
   swapParamFullId(theFullId:string);
   tpInit(Config:string):number;
   tpTerm();
   tpAlloc(AllocStyle:string, Param:string, Size:number):string;
   tpFree(Buffer:string);
   tpError(Buffer:string):number;
   CheckError(theResult:boolean, ReceiveBuffer:string, Callername:string);
   tpCall(ProcessId:number, SendBuffer:string, SendBufferSize:number, ReceiveBuffer:string, ReceiveBufferSize:number, CallerName:string):boolean;
   NewDBMgr();
   GetClientId():number;
   ReleaseClientId();
   ExitFromApp();
   ConnectionImpossible();
   getAllObjectsList():aNewObjectListInLocalCache;
   SetActiveIsRemote();
   setActiveIsLocal();
   DeleteAllNewObjectRef();
   DeliverAllNewEntities():boolean;
   OpenDB();
   DBCreated();
   ProduceCPPExternalPredefinitions();
   CloseDB();
   Init();
}
declare class aRemotePB extends aInMemPB {
   WorkOnlocal: string ;
   RemoteDBMgr: string ;
   mustInitAfterLoad();
   mustLoadRefThing();
   mustStoreOwnedInstances();
   LoadCompleted();
   ProcFreeze();
   KillThing();
   PreCommitPass1();
   FinalCommit();
   FinalRollBack();
   ExtendedLoadFromId();
   ZapAllVersionsOfMyInst();
   SetPhantomFromId();
}
declare module xWPosClient {
   function OQLCompiledName(MethodDesc:aMethodDesc, ClientDBDefId:number, OpNodeOffset:number):string;
}
declare class aRemoteIdDistributor extends aNameSpaceGenerator {
   myDBMgr: string ;
   MaxRangeId: string ;
   curId: string ;
   NextId();
   Init();
}
/**
*ProcessId : Int4
ThreadId : Int4

these two variables have to be the first one as this class
is used to map the c++ generated one to call the method aremoteDBMgr.TerminateOQLRequestBroker
*/
declare class aInterpRemoteOQLRequestBroker extends aOQLRequestBroker {
   ProcessId: string ;
   ThreadId: string ;
   OQLOpNode: string ;
   LocalBuffer: string ;
   LocalBufferSize: string ;
   pCurPosOnLocalBuffer: string ;
   pPrevPosOnLocalBuffer: string ;
   FetchedVar: string ;
   curRank: string ;
   SetReceiveInfo(ReceiveBuffer:string, ReceiveBufferSize:number, HowManyToFetch:number);
   ProduceBind(theMethodImplem:aMethodImplem, OQLSelectOpForSort:aIROpNode, WhereBindInfos:aListOfInstances, WhereBindBuffer:string);
   ExecuteSelection();
   Terminate();
   FetchedVarSize():number;
   LoadVarForType(curType:aType, pCurPos:string, IntoAddr:string):boolean;
   FetchNext():boolean;
   moveNext();
}
declare class aRemoteSelector extends aAPSelector {
   myRemoteProcessId: string ;
   myRemoteSelectorThreadId: string ;
   myDescription: string ;
   myCandidates: string ;
   myDBMgr: string ;
   initDesc();
   InitForSelection();
   Kill();
   InitCandidates(into:aPickableList);
   ProduceBatchInto();
}
declare class aRemoteSQLSelector extends aSqlSelector {
   BindInfos: string ;
   ProcessId: string ;
   ThreadId: string ;
   BindDataForFetch();
   ExecuteSelection();
   LoadVarForFlatType(curType:aType, pCurPos:string, IntoAddr:string);
   LoadVarForRecordType(curType:aRecordDesc, pCurPos:string, IntoAddr:string);
   moveNext();
   Terminate();
}
declare class aInCachePB extends aPB {
   RemoteDBDef: string ;
   OriginalPB: string ;
   OneMoreIsIntegralPointsToThing();
   OneMoreIsIntegralPointsToVersion();
   OneLessIsIntegralPointsToThing();
   OneLessIsIntegralPointsToVersion();
}
declare class aInCacheDBMgr extends aDBMgr {
   RemoteDBDef: string ;
   LocalDBMgr: string ;
   LocalStandAlone: string ;
   NewPBFor();
}
declare class aLocalDBTransaction extends aTransaction {
   LocalDBMgr: string ;
   Accept();
   AppendObject(thisObject:aFullObject);
}
declare class aNewObjectListInLocalCache extends aFullObject {
   all: string ;
}
declare class aLocalStandAlonePB extends aInCachePB {
   MyInstCanBeModified();
   storeHostInstance();
}
declare module xProfilers {
   var ProfiledVMTToRealVMT: string ;
   var RealVMTToProfiledVMT: string ;
   var VMTCritSection: string ;
   function VMTSizeFromVMT(fromVMT:string):number;
   function PatchVMT(fromClass:string, thisVMT:string, VMTclassDef:aClassDef);
   function StartProfileClass(ClassDef:aClassDef, withClassDef:aClassDef);
   function IsClassProfiled(classDef:aClassDef):boolean;
   function StopProfileClass(classDef:aClassDef);
   function GetRealAddressOfMethod(methodDesc:aMethodDesc, theSelf:aLightObject):string;
   function StartProfileDescendantsClassDefs(ClassDef:aClassDef, withClassDef:aClassDef);
   function StartProfileClassFromInstance(thisInstance:aLightObject, ClassDef:aClassDef, withClassDef:aClassDef);
   function StartProfileOnlyInstance(thisInstance:aLightObject, withClassDef:aClassDef);
   function IsInstanceProfiled(thisInstance:aLightObject):boolean;
   function StartProfileCPPInstance(thisInstance:aLightObject, withClassDef:aClassDef);
   function GetRealAddressMethodForCPPInstance(theClassDef:aClassDef, methodDesc:aMethodDesc, theSelf:aLightObject):string;
   function StopProfileInstance(thisInstance:aLightObject);
   function OpenSystemDebug():boolean;
}
declare module xDBMgrProfiler {
   var DBProfilers: string ;
   var ProfilerCritSection: string ;
   var ProfilerDisplayers: string ;
   var DetailedReport: string ;
   function Int4AsHexaCString(i:number):string;
   function GetCurrentWydeWebSession():aWydeWebSession;
   function IsInWydeWeb():boolean;
   function IsInMultiThread():boolean;
   function GetOrCreateDisplayer(canDisplay:boolean):aManyDBMgrProfilersDisplayer;
   function SetDBMgrToProfilingMode(thisDBMgr:aDBMgr, theProfilerClassDef:aClassDef);
   function StartProfilingDBMgr(thisDBMgr:aDBMgr, theProfilerClassDef:aClassDef, canDisplay:boolean):aDBMgrProfiler;
   function StopProfiler(thisProfiler:aDBMgrProfiler);
   function StartInexistingProfilingDBMgrWithProfilerClassDef(thisDBMgr:aDBMgr, profilerClassDef:aClassDef, canDisplay:boolean):aDBMgrProfiler;
   function StartInexistingProfilingDBMgr(thisDBMgr:aDBMgr, canDisplay:boolean):aDBMgrProfiler;
   function ProfileloadMainFor(theDB:aDBMgr, thisObject:aFullObject, FromThisFullId:string, myPB:aPB, IsCurrent:number, durationMs:number);
   function ProfileStoreMainFor(theDB:aDBMgr, thisObject:aFullObject, PersistentPointer:string, myPB:aPB, durationMs:number);
   function ProfileloadListOf(theDB:aDBMgr, someListOf:aListOfInstances, PersistentPointer:string, fromThisObject:aFullObject, myMemo:string, theVarLink:string, durationMs:number);
   function ProfileStoreListOf(theDB:aDBMgr, someListOf:aListOfInstances, listOfReftos:boolean, PersistentPointer:string, myMemo:string, theVarLink:string, durationMs:number);
   function ProfileUpdateMainFor(theDB:aDBMgr, thisObject:aFullObject, PersistentPointer:string, myPB:aPB, changedVars:aListOfInstances, durationMs:number);
   function ProfileZapMainFor(theDB:aDBMgr, thisObject:aFullObject, FromThisId:string, myPB:aPB, durationMs:number);
   function ProfilefClose(theDB:aDBMgr);
   function ProfileOQLResetOn(theMultiRB:aMultiRequestBroker, onthisCursor:aOQLCursor, durationMs:number);
   function ProfileOQLMoveNext(theMultiRB:aMultiRequestBroker, durationMs:number);
   function ProfileOQLKill(theMultiRB:aMultiRequestBroker);
   function ProfileOQLExecuteSelection(theMultiRB:aMultiRequestBroker, Criterion:string, durationMs:number);
   function ProfileOQLInitOQLRequestBroker(theMultiRB:aMultiRequestBroker, durationMs:number);
   function ProfileCommitOrRollBack(theDB:aDBMgr, Really:boolean, durationMs:number);
   function ProfileLatestVersionFor(theFullId:string, durationMs:number, db:aDBMgr);
   function ProfileSetPrevVersionToNotCurrent(thisFullId:string, durationMs:number, db:aDBMgr);
   function ProfileVersionCount(thisFullId:string, increment:number, durationMs:number, db:aDBMgr);
   function ProfileloadCountsFor(FromThisId:string, theHeader:string, durationMs:number, db:aDBMgr);
   function ProfileSearchForStoredVersions(FromThisId:string, theVersions:aListOfInstances, howMany:number, durationMs:number, db:aDBMgr);
   function ProfileThingCount(thisFullId:string, increment:number, durationMs:number, db:aDBMgr);
   function ProfileSetFlagFor(theFullId:string, Flag:number, SetIt:boolean, durationMs:number, db:aDBMgr);
   function ProfileSetPhantom(theFullId:string, Value:boolean, durationMs:number, db:aDBMgr);
   function ProfileIsThingKilled(theFullId:string, durationMs:number, db:aDBMgr);
   function ProfileUpdateListRefCount(ListOwner:aFullObject, theVarLink:string, PersistentPointer:string, increment:number, durationMs:number, db:aDBMgr);
   function ProfileupdateListOf(someListOf:aListOfInstances, listToInsert:aListOfInstances, listToUpdate:aListOfInstances, listToDelete:aListOfInstances, listOfReftos:boolean, PersistentPointer:string, myMemo:string, theVarLink:string, durationMs:number, db:aDBMgr);
   function ProfileZapListOf(someListOf:aListOfInstances, fromThisObject:aFullObject, myMemo:string, myPB:aPB, theVarLink:string, durationMs:number, db:aDBMgr);
   function ProfileTransaction_BeginAccept(theSelf:aTransaction);
   function ProfileTransaction_EndAccept(theSelf:aTransaction, durationMs:number);
   function ProfileTransaction_PrepareThings(theSelf:aTransaction, durationMs:number);
   function ProfileTransaction_StoreThings(theSelf:aTransaction, durationMs:number);
   function ProfileSqlSelector_ExecuteSelection(theSelf:aSqlSelector, Criterion:string, durationMs:number);
   function ProfileSqlSelector_moveNext(theSelf:aSqlSelector, durationMs:number);
   function ProfileSqlSelector_kill(theSelf:aSqlSelector);
   function ProfileLockDB(theSelf:aDBMgr, theResult:boolean, durationMs:number);
   function ProfileHasMoreRecentVersionInDB(theSelf:aDBMgr, theFullId:string, theResult:boolean, durationMs:number);
   function ProfileLockDBDuration(theSelf:aDBMgr, durationMs:number);
   function ProfileLockCurrentVersionOf(theSelf:aDBMgr, thisObject:aFullObject, theResult:number, durationMs:number);
   function ProfileUnLockCurrentVersionOf(theSelf:aDBMgr, thisObject:aFullObject, durationMs:number);
   function ProfileLockDBForIdAllocator(theSelf:aDBMgr, theResult:boolean, durationMs:number);
   function ProfileLockDBForIdAllocatorDuration(theSelf:aDBMgr, durationMs:number);
/**
*Portability Check: OK
*/
   function ByClassNameOrderingFunc(ThisIsInferior:string, toThat:string):boolean;
/**
*Portability Check: OK
*/
   function ByEventOrderingFunc(ThisIsInferior:string, toThat:string):boolean;
/**
*Portability Check: OK
*/
   function ByNBCallsOrderingFunc(ThisIsInferior:string, toThat:string):boolean;
/**
*Portability Check: OK
*/
   function ByObjectsSizeOrderingFunc(ThisIsInferior:string, toThat:string):boolean;
/**
*Portability Check: OK
*/
   function ByTotalDurationMsOrderingFunc(ThisIsInferior:string, toThat:string):boolean;
   function GetWydeWebSessions():aListOfInstances;
   function RefreshWydeWebClient();
   function AllDBMgrs(inList:aListOfInstances);
   function DBMgrsList():aListOfInstances;
   function WantToProfileSystemDBMgrs():boolean;
   function NsIdAsCString(theNsId:number):string;
   function IdAsCString(theId:number):string;
   function SimpleVersion(v:number):string;
   function VersionAsCString(v:number):string;
   function NsIdIdAsCString(theNsId:number, theId:number):string;
   function FullIdAsCString(Fid:string):string;
   function StartProfilerFor(DBMgr:aDBMgr):aDBMgrProfiler;
   function ParamRunDBProfilers(fromAloneWydeWebClient:boolean, canDisplay:boolean);
   function StartDBProfiler(canDisplay:boolean);
}
declare class aDBMgrProfilerMDIChildAgent extends aUIAgent {
   Start001: string ;
   Stop: string ;
   Separator: string ;
   DisplayedProfilerInfo: string ;
   StaticTextDBStatus: string ;
   Separator002: string ;
   ReportToFile: string ;
   LastSortedCol: string ;
   LastSortingAsc: string ;
   DBMgrProfilerFolder: string ;
   statAgent: string ;
   ActionSaveToFile: string ;
   SetupOptions001: string ;
   MenuItem: string ;
   RefreshFrequency001: string ;
   UIStart: string ;
   UIStop: string ;
   StartRefreshTimer();
   StopRefreshTimer();
   NotifyTimer();
   ManageButtons();
   NotifyStop();
   Reinit();
   NotifyStart();
   NotifyTerminate();
   RefreshFrequency002_ValueStored();
   NotifyInit();
   AppendProfilerInfo(infoKind:string, pProfilerInfo:string);
   Enable();
}
declare class DBMgrProfilerReportAgent extends aUIAgent {
   Report001: string ;
}
declare class DBMgrProfilerStatAgent extends aUIAgent {
   ListCtrl: string ;
   DisplayedProfilerInfo: string ;
   LastSortingAsc: string ;
   LastSortedCol: string ;
   SetUnSetBreakPointOnSelected001: string ;
   AppendProfilerInfo(infoKind:string, pProfilerInfo:string);
   ReInit();
   LoadValue();
   NotifyInit();
   ListCtrl_ColumnExecuted(Column:number):number;
   RefreshBreakPointsBmp(pProfilerInfo:string, isSet:boolean);
   SetUnSetBreakPointOnItem(Item:number);
   SetUnSetBreakPointOnSelected();
   ListCtrl_ItemChecked(:aUIAgent, Item:number, Checked:boolean):number;
}
declare class DBMgrProfilerFolderAgent extends aFolderViewAgent {
}
declare class DBMgrProfilerTransactionReportAgent extends aUIAgent {
   TransactionReport: string ;
}
declare class aDBMgrProfilerAskFileNamesToSaveAgent extends aUIAgent {
   StatsFileName: string ;
   StatsFileNameStaticText: string ;
   ReportFileName: string ;
   ReportFileNameStaticText: string ;
   TransactionFileName: string ;
   TransactionFileNameStaticText: string ;
   StatsAsCSV: string ;
   CSVColumnSep: string ;
   StatsAsCSV_Selected(:aUIAgent, SelectedRank:number):number;
   StatsAsCSV_Init(:aUIAgent):number;
}
declare class aDBMgrProfiler extends aLightObject {
   MyStats: string ;
   MainUIAgent: string ;
   RefreshFrequency: string ;
   isRunning: string ;
   WaitForUserClose: string ;
   DeregisterYourSelfWhenClose: string ;
   RefreshWydeWebClient: string ;
   EnableWhenRefresh: string ;
   MustSetFocus: string ;
   InteractingInThread: string ;
   LastRefreshTimeInMs: string ;
   wantSystemDBs: string ;
   MyDisplayOptions: string ;
   DBNames: string ;
   WantWydeWebDBinfo: string ;
   MoreDBInfo: string ;
   MyCritSection: string ;
   Report: string ;
   DuringTransaction: string ;
   mustRefresh: string ;
   TransactionReport: string ;
   StatsFileName: string ;
   StatsAsCSV: string ;
   CSVColumnSep: string ;
   ReportFileName: string ;
   TransactionFileName: string ;
   BreakPoints: string ;
   BreakPointsBmp: string ;
   DBDefNamesList: string ;
   ProfiledDBCounter: string ;
   TraceIt: string ;
   ReportStatsOn(thisDB:aDBMgr);
   ReportStatsOnAllDBs();
   AddProfiledDB(thisDB:aDBMgr);
   RemoveProfiledDB(thisDB:aDBMgr);
   RefreshPeriodInMs(freq:string):number;
   InitAllClassesInfo();
   TerminateStats();
   Start();
   Stop();
   StartStop();
   Init();
   Terminate();
   AllocatedSizeOf(thisObject:aLightObject):number;
   RefreshWindow();
   SetUnSetBreakPoint(thisStat:string, pProfilerInfo:string, isSet:boolean);
   ProfileInfo(thisEvent:string, info:string, objectSize:number, durationMs:number);
   ProfileloadMainFor(theDB:aDBMgr, thisObject:aFullObject, FromThisFullId:string, myPB:aPB, IsCurrent:number, durationMs:number);
   ProfileUser1(info:string, objectSize:number, durationMs:number);
   ProfileUser2(info:string, objectSize:number, durationMs:number);
   ProfileUser3(info:string, objectSize:number, durationMs:number);
   ProfileUser4(info:string, objectSize:number, durationMs:number);
   ProfileStoreMainFor(theDB:aDBMgr, thisObject:aFullObject, PersistentPointer:string, myPB:aPB, durationMs:number);
   ProfileTransaction_BeginAccept(theSelf:aTransaction);
   ProfileTransaction_EndAccept(theSelf:aTransaction, durationMs:number);
   ProfileTransaction_PrepareThings(theSelf:aTransaction, durationMs:number);
   ProfileTransaction_StoreThings(theSelf:aTransaction, durationMs:number);
   ProfileCommitOrRollBack(theDB:aDBMgr, Really:boolean, durationMs:number);
   ProfileloadListOf(theDB:aDBMgr, someListOf:aListOfInstances, PersistentPointer:string, fromThisObject:aFullObject, myMemo:string, theVarLink:string, durationMs:number);
   ProfileStoreListOf(theDB:aDBMgr, someListOf:aListOfInstances, listOfReftos:boolean, PersistentPointer:string, myMemo:string, theVarLink:string, durationMs:number);
   ProfileUpdateMainFor(theDB:aDBMgr, thisObject:aFullObject, PersistentPointer:string, myPB:aPB, changedVars:aListOfInstances, durationMs:number);
   ProfileZapMainFor(theDB:aDBMgr, thisObject:aFullObject, FromThisId:string, myPB:aPB, durationMs:number);
   CloseMainUIAgent();
   ProfilefClose(theDB:aDBMgr);
   ProfileOQLResetOn(theMultiRB:aMultiRequestBroker, onThisCursor:aOQLCursor, durationMs:number);
   ProfileOQLExecuteSelection(theMultiRB:aMultiRequestBroker, Criterion:string, durationMs:number);
   ProfileOQLInitOQLRequestBroker(theMultiRB:aMultiRequestBroker, durationMs:number);
   ProfileOQLMoveNext(theMultiRB:aMultiRequestBroker, durationMs:number);
   ProfileOQLKill(theMultiRB:aMultiRequestBroker);
   ProfileSqlSelector_ExecuteSelection(theSelf:aSqlSelector, Criterion:string, durationMs:number);
   ProfileSqlSelector_moveNext(theSelf:aSqlSelector, durationMs:number);
   ProfileSqlSelector_Kill(theSelf:aSqlSelector);
   StringExtract();
   SetFocus();
   LookForNewDBMgrs();
   SetupOptions();
   SaveAllStatsToCSVFile(theFileName:string, colSep:number);
   SaveDisplayedStatsToFile(ListCtrl:aListCtrlUIAgent, theFileName:string);
   ActionSaveToFile();
   ProfileLatestVersionFor(theFullId:string, durationMs:number, db:aDBMgr);
   ProfileSetPrevVersionToNotCurrent(thisFullId:string, durationMs:number, db:aDBMgr);
   ProfileVersionCount(thisFullId:string, increment:number, durationMs:number, db:aDBMgr);
   ProfileloadCountsFor(FromThisId:string, theHeader:string, durationMs:number, db:aDBMgr);
   ProfileSearchForStoredVersions(FromThisId:string, theVersions:aListOfInstances, howMany:number, durationMs:number, db:aDBMgr);
   ProfileThingCount(thisFullId:string, increment:number, durationMs:number, db:aDBMgr);
   ProfileSetFlagFor(theFullId:string, Flag:number, SetIt:boolean, durationMs:number, db:aDBMgr);
   ProfileSetPhantom(theFullId:string, Value:boolean, durationMs:number, db:aDBMgr);
   ProfileIsThingKilled(theFullId:string, durationMs:number, db:aDBMgr);
   ProfileUpdateListRefCount(ListOwner:aFullObject, theVarLink:string, PersistentPointer:string, increment:number, durationMs:number, db:aDBMgr);
   ProfileupdateListOf(someListOf:aListOfInstances, listToInsert:aListOfInstances, listToUpdate:aListOfInstances, listToDelete:aListOfInstances, listOfReftos:boolean, PersistentPointer:string, myMemo:string, theVarLink:string, durationMs:number, db:aDBMgr);
   ProfileZapListOf(someListOf:aListOfInstances, fromThisObject:aFullObject, myMemo:string, myPB:aPB, theVarLink:string, durationMs:number, db:aDBMgr);
   ProfileLockDB(theResult:boolean, durationMs:number, db:aDBMgr);
   ProfileLockDBDuration(durationMs:number, db:aDBMgr);
   ProfileHasMoreRecentVersionInDB(theFullId:string, theResult:boolean, durationMs:number, db:aDBMgr);
   ProfileLockCurrentVersionOf(theSelf:aDBMgr, thisObject:aFullObject, theResult:number, durationMs:number);
   ProfileUnLockCurrentVersionOf(theSelf:aDBMgr, thisObject:aFullObject, durationMs:number);
   ProfileLockDBForIdAllocator(theResult:boolean, durationMs:number, db:aDBMgr);
   ProfileLockDBForIdAllocatorDuration(durationMs:number, db:aDBMgr);
   UIStart();
   UIStop();
}
declare class aDBStatExt001Agent extends aUIAgent {
   HowToDisplay: string ;
}
declare class aDBMgrProfilerExt extends aWideExtension {
   MenuText();
   FolderParentName();
   Run();
   DoYourJob();
}
declare class aDBMgrProfilerOptions001Agent extends aUIAgent {
   ProfiledInfoToDisplay: string ;
   OnlyAllClasses: string ;
   SelectAll: string ;
   UnSelectAll: string ;
}
declare class aDBMgrProfilerOptions extends aLightObject {
   ProfiledInfoToDisplay: string ;
   OnlyAllClasses: string ;
   Init();
   CopyOptions(newOptions:aDBMgrProfilerOptions);
   UnSelectAll();
   SelectAll();
}
declare class aDBMgrProfilerTerminator extends aFullObject {
   TheDisplayer: string ;
   Terminate();
}
declare class aDBMgrProfilerThread extends aThread {
   TheDisplayer: string ;
   ThreadBody();
}
declare class aManyDBMgrProfilerMDIAgent extends aUIAgent {
   MenuItem: string ;
   ActionQuit001: string ;
   MDIWindowMenuItem: string ;
   MenuItem001: string ;
   WaitForUserClose: string ;
   MenuItem002: string ;
   aManyDBMgrProfilersDisplayerTB: string ;
   NotifyInit();
   StartWatchForOpenDBTimer();
   NotifyTimer();
   NotifyTerminate();
}
declare class aManyDBMgrProfilersDisplayerTBAgent extends aToolBarUIAgent {
   Status: string ;
}
declare class aManyDBMgrProfilersDisplayer extends aLightObject {
   MyOptions: string ;
   WWSession: string ;
   WatchNewAndDelProfilers: string ;
   newProfilerToBeDisplay: string ;
   ManagedProfilers: string ;
   WaitForUserClose: string ;
   ProfilerToClose: string ;
   Displayed: string ;
   KeepDisplayedAtEnd: string ;
   MustTerminate: string ;
   Status: string ;
   Terminator: string ;
   wantSystemDBs: string ;
   FocusOn: string ;
   Init();
   Terminate();
   InThreadDisplayProfiler(thisProfiler:aDBMgrProfiler);
   DisplayProfiler(thisProfiler:aDBMgrProfiler);
   ManageAndDisplayProfiler(thisProfiler:aDBMgrProfiler);
   CloseProfiler(thisProfiler:aDBMgrProfiler);
   LookForNewProfiler();
   LookForCloseProfiler();
   StopProfilers();
   ModalClose();
   Maximize();
   SetModal();
   PleaseWatchForOpenedDBs();
   WatchForOpenedDBs();
   DisplayMySelf();
   DisplayInOtherThread();
}
declare class aProfilerDBMgr extends aDBMgr {
   loadMainFor();
   storeMainFor();
   loadListOf();
   storeListOf();
   updateMainFor();
   ZapMainFor();
   fClose();
   InitOQLRequestBroker();
   Commit();
   LatestVersionFor();
   SetPrevVersionToNotCurrent();
   VersionCount();
   SearchForStoredVersions();
   ThingCount();
   UpdateListRefCount();
   updateListOf();
   ZapListOf();
   SetPhantom();
   IsThingKilled();
   NewSqlSelector();
   LockDB();
   UnlockDB();
   HasMoreRecentVersionInDB();
   LockCurrentVersionOf();
   UnLockCurrentVersionOf();
   LockDBForIDAllocator();
   UnlockDBForIDAllocator();
}
declare class aProfilerMultiRequestBroker extends aMultiRequestBroker {
   moveNext();
   Kill();
}
declare class aProfilerSqlSelector extends aSqlSelector {
   ExecuteSelection();
   moveNext();
   Kill();
}
declare class aProfilerTransaction extends aTransaction {
   Accept();
   PrepareThings();
   StoreThings();
}
/**
*This module contains API for Database Profiler.


*/
declare module wDBMgrProfiler {
   function StartDBProfilerFor(theDBMgr:aDBMgr):string;
   function StopDBProfiler(theDBProfiler:string);
   function SaveAllStatsToCSVFile(theDBProfiler:string, theFileName:string, colSep:number);
}
declare class aSocket extends aLightObject {
   Socket: string ;
   IsActive: string ;
   Create(ProcessSession:number);
   Listen(PortNumber:number):boolean;
   AcceptSocket(SocketToAccept:aSocket):boolean;
   Connect(IPAddress:string, PortNumber:number):boolean;
   IsConnectedOnSameMachine():boolean;
   AsyncSend(Buffer:string, Size:number, Context:number, TryNow:boolean);
   StopAsyncSend();
   TryToSend(Buffer:string, SizeToSend:number):number;
   SendChunks(Buffer:string, SizeToSend:number);
   AsyncReceive(Buffer:string, Size:number, Context:number, TryNow:boolean);
   StopAsyncReceve();
   TryToReceive(Buffer:string, SizeToSend:number):number;
   ReceiveChunks(Buffer:string, SizeToReceive:number);
   Peek(Buffer:string, SizeToReceive:number):number;
   Close();
   IsConnected():boolean;
   Process(ExitLoop:boolean, TimeOut:number, OnlyOnce:boolean):boolean;
   OnAccept(Context:number);
   OnSend(Context:number);
   OnSendPartial(Context:number, Size:number):boolean;
   OnSendComplete(Context:number);
   OnReceive(Context:number);
   OnReceivePartial(Context:number, Size:number):boolean;
   OnReceiveComplete(Context:number);
   OnClose(Context:number, ErrorCode:number);
   Terminate();
}
declare module wSockets {
   function SocketCallBackEx(Socket:string, Operation:number, Param1:number, Param2:number, UserData:string):boolean;
}
declare module xSockets {
   function tpInitSockets():boolean;
   function tpTerminateSockets();
   function tpNewSocket(SocketCallBack:string, ProcessSession:number):string;
   function tpNewSocketEx(SocketCallBackEx:string, ProcessSession:number, UserData:string):string;
   function tpDisposeSocket(Socket:string);
   function tpIsASocket(Socket:string):boolean;
   function tpListen(Socket:string, PortNumber:number):boolean;
   function tpAccept(Socket:string, SocketToAccept:string):boolean;
   function tpConnect(Socket:string, IPAddress:string, PortNumber:number):boolean;
   function tpIsConnectedOnSameMachine(Socket:string):boolean;
   function tpAsyncSend(Socket:string, Buffer:string, Size:number, Context:number, TryNow:boolean);
   function tpStopAsyncSend(Socket:string);
   function tpTryToSend(Socket:string, Buffer:string, SizeToSend:number):number;
   function tpSendChunks(Socket:string, Buffer:string, SizeToSend:number);
   function tpAsyncReceive(Socket:string, Buffer:string, Size:number, Context:number, TryNow:boolean);
   function tpStopAsyncReceve(Socket:string);
   function tpTryToReceive(Socket:string, Buffer:string, SizeToSend:number):number;
   function tpReceiveChunks(Socket:string, Buffer:string, SizeToReceive:number);
   function tpPeek(Socket:string, Buffer:string, SizeToReceive:number):number;
   function tpClose(Socket:string);
   function tpIsConnected(Socket:string):boolean;
   function tpProcess(Socket:string, ExitLoop:boolean, TimeOut:number, OnlyOnce:boolean):boolean;
   function tpLastSocketError():boolean;
   function tpProcessSockets(ExitLoop:boolean, TimeOut:number, OnlyOnce:boolean, WithCriticalSection:string, ProcessSession:number);
}
declare class MTeamManagerMainAgent extends aUIAgent {
   MTeamManagerToolBarPostfix: string ;
   MTeamManagerOnlyComment: string ;
   MTeamManagerToolBar001: string ;
   About: string ;
   NotifyInit();
}
declare class MTeamManagerWithGaugeAgent extends aUIAgent {
   G002: string ;
   Laps001: string ;
   StaticText: string ;
   Laps002: string ;
   LastMTeamRefVersion: string ;
   LastMTeamRefVersionStaticText: string ;
}
declare class MTeamManagerToolBarPostfixAgent extends aToolBarUIAgent {
   DeliverAll: string ;
   SynchronizeAll: string ;
   DisplayExistingTeams: string ;
   RegisterTeam: string ;
   RegisterUser: string ;
   CheckIn: string ;
   CheckOut: string ;
   Deliver001: string ;
   Synchronize001: string ;
   UIViewHistory: string ;
   EditServerConfig: string ;
   UIMTeamRefVersion: string ;
   UIEditBackupNbre: string ;
}
declare class MTeamManagerSynchOKAgent extends aUIAgent {
   toSyncText: string ;
   StaticText: string ;
}
declare class MTeamManagerOnlyNameAgent extends aUIAgent {
   Name: string ;
   NameStaticText: string ;
}
declare class MTeamManagerExistingTeamsAgent extends aUIAgent {
   existingTeams: string ;
   FreeTeamAtLastDitchHope: string ;
   existingTeams_Selected(:aUIAgent, SelectedRank:number):number;
}
declare class MTeamManagerExistingUsersAgent extends aUIAgent {
   existingUsers: string ;
   FreeUser: string ;
   existingUsers_Selected(SelectedRank:number):number;
}
declare class MTeamManagerTeamsAndUsersAgent extends aFolderViewAgent {
}
declare class MTeamManagerNewUserAgent extends aUIAgent {
   NewUser: string ;
   Name: string ;
   NameStaticText: string ;
   UserPassWord: string ;
   UserPassWordStaticText: string ;
   UserPassWordConfirmation: string ;
   UserPassWordConfirmationStaticText: string ;
   userGroup: string ;
   userGroupStaticText: string ;
}
declare class MTeamManagerOnlyAvailableEntitiesAgent extends aUIAgent {
   FreeModuleAndClassesInRef: string ;
   FreeModuleAndClassesInRefCount: string ;
   StaticText: string ;
   FreeModuleAndClassesInRef_ValueLoaded(:aUIAgent);
}
declare class MTeamManagerOnlySelectedEntitiesAgent extends aUIAgent {
   ModuleAndClassesToCheckIn: string ;
   StaticText: string ;
   ModuleAndClassesToCheckInOutCount: string ;
   ModuleAndClassesToCheckIn_ValueLoaded(:aUIAgent);
}
declare class MTeamManagerAvailableAndSelectedPanelAgent extends aSplitViewAgent {
}
declare class MTeamManagerDeletedEntitiesAgent extends aUIAgent {
   DeletedEntities: string ;
}
declare class MTeamManagerNotFreeModulesAndClassesAgent extends aUIAgent {
   UnFreeModuleAndClassesInRef: string ;
   StaticText: string ;
   LockedModuleAndClassesInRefCount: string ;
   UnFreeModuleAndClassesInRef_ValueLoaded(:aUIAgent);
}
declare class MTeamManagernotCheckedEntitiesAgent extends aUIAgent {
   FreeModuleAndClassesInRef: string ;
   StaticText: string ;
   FreeModuleAndClassesInRefCount: string ;
   FreeModuleAndClassesInRef_ValueLoaded(:aUIAgent);
}
declare class MTeamManagerEntitiesToCheckOutAgent extends aUIAgent {
   ModuleAndClassesToCheckIn: string ;
   ModuleAndClassesToCheckInOutCount: string ;
   StaticText: string ;
   ModuleAndClassesToCheckIn_ValueLoaded(:aUIAgent);
}
declare class MTeamManagerCheckOutPanelAgent extends aSplitViewAgent {
}
declare class MTeamManagerCheckOutMainFolderAgent extends aUIAgent {
   MTeamManagerCheckOutPanel: string ;
   CheckOutSelection: string ;
}
declare class MTeamManagerCheckOutFolderAgent extends aFolderViewAgent {
}
declare class MTeamManagerOnlyCommentAgent extends aToolBarUIAgent {
   Comment: string ;
   MTeamManagerWithGauge: string ;
}
declare class MTeamManagerMDIChildModelAgent extends aUIAgent {
   MenuItem: string ;
   NotifyTerminate();
}
declare class MTeamManagerMainPanelForCheckInAgent extends MTeamManagerMDIChildModelAgent {
   MTeamManagerCheckInPanel: string ;
   CheckInSelection: string ;
}
declare class MTeamManagerMainCheckOutPanelAgent extends MTeamManagerMDIChildModelAgent {
   aMTeamManager001: string ;
}
declare class MTeamManagerMainTeamAndUserAgent extends MTeamManagerMDIChildModelAgent {
   MTeamManagerTeamsAndUsers: string ;
}
declare class MTeamManagerDeliverPanelAgent extends MTeamManagerMDIChildModelAgent {
   MTeamManagerCheckInPanel: string ;
   DeliverSelection: string ;
}
declare class MTeamManagerToBeDeliveredAgent extends aUIAgent {
   EntitiesToDeliver: string ;
   StaticText: string ;
   EntitiesToDeliverCount: string ;
}
declare class MTeamManagerSynchronizePanelAgent extends MTeamManagerMDIChildModelAgent {
   MTeamManagerAvailableAndSelectedPanel: string ;
   SynchronizeSelection: string ;
}
declare class MTeamManagerSynchronizedEntitiesAgent extends aUIAgent {
   EntitiesToSynchronize: string ;
   EntitiesToSyncCount: string ;
   StaticText: string ;
}
declare class MTeamManagerToolBarAgent extends aToolBarUIAgent {
   StaticText: string ;
   TeamName: string ;
}
declare class MTeamManagerLogOnAgent extends aUIAgent {
   StaticText: string ;
   AdminPassword: string ;
}
declare class MTeamManagerHistorianAgent extends MTeamManagerMDIChildModelAgent {
   Historian: string ;
   aRefDevHistoryPresentor001: string ;
   aRefDevHistoryPresentor001_Init(:aUIAgent):number;
}
declare class MTeamManagerServerConfigAgent extends aUIAgent {
   ClientConfigurationTree: string ;
   SaveServerConfig: string ;
   TestConnection: string ;
}
declare class aMTeamManager extends aEntity {
   Agent: string ;
   Service: string ;
   ToSyncText: string ;
   G: string ;
   ExistingTeams: string ;
   ExistingUsers: string ;
   NewUser: string ;
   AvailableEntities: string ;
   DeletedEntities: string ;
   SelectedEntities: string ;
   MasterRefVersionsOfLocalEntities: string ;
   LockedEntitiesInTeamRef: string ;
   EntitiesToDeliver: string ;
   EntitiesToSynchronize: string ;
   MainMDIAgent: string ;
   PreviousUIAgent: string ;
   TeamNameCache: string ;
   Deliverables: string ;
   MasterRefVersionsOfDeliverables: string ;
   FakeSuperRefEntities: string ;
   Context: string ;
   Administrator: string ;
   AdminPassword: string ;
   Historian: string ;
   SelectedTeam: string ;
   SelectedUser: string ;
   TimerCallProcessIdHandle: string ;
   MTeamRefVersionAtOpen: string ;
   LastMTeamRefVersion: string ;
   RefConfig: string ;
   Checked: string ;
   RefConfigNewVersion();
   CancelRefConfig();
   tpInit():number;
   InitManager();
   IsTeam(User:aUser):boolean;
   UIEditBackupNbre();
   SetLastMTeamRefVersion(thisVersion:number);
   GetLastMTeamRefVersion():number;
   BackUpTeamRefDBIfNecessary();
   EntitiesToDeliverCount():number;
   EntitiesToSyncCount():number;
   FreeModuleAndClassesInRefCount():number;
   ModuleAndClassesToCheckInOutCount():number;
   LockedModuleAndClassesInRefCount():number;
   TeamIsRegistered():boolean;
   CheckThatTeamIsRegistered():boolean;
   TeamName():string;
   TryToClosePreviousWindow():boolean;
   CheckForErrorToFix();
   tpTerm();
   tpAlloc(Size:number):string;
   tpFree(Buffer:string);
   tpError(Buffer:string):number;
/**
*Portability Check: OK
*/
   CheckError(theResult:boolean, ReceiveBuffer:string, Callername:string):boolean;
   tpNotifyAlive():number;
   tpStopNotifyAlive();
   tpCall(SendBuffer:string, SendBufferSize:number, ReceiveBuffer:string, ReceiveBufferSize:number, CallerName:string):boolean;
/**
*Portability Check: OK
*/
   FillListWithContents(theContainer:aEntity, theList:aListOfInstances);
   FreeContext();
   Close();
/**
*Portability Check: OK
*/
   BuildListOfFakeMultiTeamRefEntities(SynchronizableVersions:aListOfInstances):boolean;
/**
*Portability Check: OK
*/
   BuildListOfDeliverableEntities(LocalSmallIdsList:aListOfInstances, DeliverableVersions:aListOfInstances, VersionsInRef:aListOfInstances):boolean;
   DeliverableListPrepared():boolean;
   UpdateFakeSuperRefEntitiesWithLocalVersions();
   PrepareFakeSuperRefEntities():boolean;
   UpdateSynchronizableEntities();
   BuildListOfEntitiesToDeliver(LocalSmallIdsList:aListOfInstances, DeliverList:aListOfInstances):boolean;
/**
*Portability Check: OK
*/
   SendTGVToDeliver(ToBeDelivered:aListOfInstances, TeamName:string):boolean;
   UIDeliverAll();
   DeliverListOfDeliverable(AskedToBeDelivered:aListOfInstances, ReallyDelivered:aListOfInstances):boolean;
   UIDeliverSelection();
   UIDeliver();
   DeliverTerminate();
/**
*Portability Check: OK
*/
   SyncOnInMemTGV(ObjectNumber:number, TGVSize:number, pTGVBuffer:string):boolean;
/**
*Portability Check: OK
*/
   BuildSyncAllEntitiesList(returnedRank:aListOfInstances, returnedVersion:aListOfInstances):boolean;
/**
*Portability Check: OK
*/
   PartialSynchOnEntities(Selected:aListOfInstances, ReallySynchronized:aListOfInstances):boolean;
   UISynchronizeSelection();
   UISynchronize();
   SynchronizeTerminate();
/**
*Portability Check: OK
*/
   SyncAllOn(returnedRank:aListOfInstances, returnedVersion:aListOfInstances);
   UISynchronizeAll();
   CheckLastMTeamRefVersion():boolean;
   RegisterNewTeam(TeamName:string):boolean;
   UIRegisterTeam();
   FillTeamsAndUsers(Team:aWTeam);
   UIDisplayExistingTeams();
   DisplayExistingTeamsTerminate();
   NewUserForRegistration();
   RegisterUser(User:string, Password:string, Group:string):boolean;
   UIRegisterUser();
/**
*Portability Check: OK
*/
   UICheckInSelection();
   UICheckIn();
   CheckInTerminate();
   PrepareEntitiesTeamRepartition();
   UICheckOutSelection();
   UICheckOut();
   CheckOutTerminate();
   UIViewHistory();
   ViewHistoricTerminate();
/**
*Portability Check: OK
*/
   LoadMoreLogsFromAddress(StartingAddr:number, InThisList:aListOfInstances, MaxItems:number);
   LogOn(theWideContext:aWideContext):boolean;
   CheckConsistency():boolean;
/**
*Portability Check: OK
*/
   RepairLastTeamRegistration():boolean;
/**
*Portability Check: OK
*/
   RepairLastCheckInOut():boolean;
   RepairLastUserRegistration():boolean;
   Repair();
   UIMTeamRefVersion();
   TerminateManager();
   Run();
   IsSystemCloseAccepted(theUIAgent:aUIAgent):boolean;
   IsValid();
   EditServerConfig();
   SaveServerConfig();
   TestConnection();
   FreeTeamAtLastDitchHope();
   FreeUser();
   About();
   Administration();
}
declare class aMTeamRPCServer extends aWedServer {
   TimeOut: string ;
   Connected: string ;
   Reconnect: string ;
   GetTimeOut():number;
   SetMultiTeamServer();
   Init();
   CancelRefConfig();
   TeamIsRegistered():boolean;
/**
*Portability Check: OK
*/
   ReallocOutBuffer(BufferOut:string, NewSize:number);
   ReallocOutBufferAndPointer(BufferOut:string, newSize:number, P:string);
/**
*Portability Check: OK
*/
   ReturnError(MethodName:string, ErrorMsg:string, BufferOut:string, BufferOutUsedSize:number);
   AddLog(Broker:aLogBroker, Action:string, Entity:aEntity, Team:aUser);
   AddEntityAndEntitiesLog(Action:string, Entities:aListOfInstances, Entity:aEntity, TeamName:string);
   AddEntityLog(Action:string, Entity:aEntity, TeamName:string);
   AddEntitiesLog(Action:string, Entities:aListOfInstances, TeamName:string);
   IsTeam(User:aUser):boolean;
   GetTeamFromName(TeamName:string):aWTeam;
   GetRefConfigVersion():number;
   GetTeamNameOfThisEntity(Entity:aEntity):string;
/**
*Portability Check: OK
*/
   PartialSyncGetFakeEntitiesList(BufferIn:string, BufferInUsedSize:number, BufferOut:string, BufferOutUsedSize:number, MotorContextBehaviour:string):number;
   PartialSyncGetFakeEntitiesToSyncList(BufferIn:string, BufferInUsedSize:number, BufferOut:string, BufferOutUsedSize:number, MotorContextBehaviour:string):number;
/**
*Portability Check: OK
*/
   PartialSyncGetEntitiesToSync(BufferIn:string, BufferInUsedSize:number, BufferOut:string, BufferOutUsedSize:number, MotorContextBehaviour:string):number;
   SyncAllGetEntitiesToSyncList(BufferIn:string, BufferInUsedSize:number, BufferOut:string, BufferOutUsedSize:number, MotorContextBehaviour:string):number;
/**
*Portability Check: OK
*/
   SyncAllGetEntitiesToSync(BufferIn:string, BufferInUsedSize:number, BufferOut:string, BufferOutUsedSize:number, MotorContextBehaviour:string):number;
/**
*Portability Check: OK
*/
   GetEntitiesToDeliverList(BufferIn:string, BufferInUsedSize:number, BufferOut:string, BufferOutUsedSize:number, MotorContextBehaviour:string):number;
/**
*Portability Check: OK
*/
   DeliverEntities(BufferIn:string, BufferInUsedSize:number, BufferOut:string, BufferOutUsedSize:number, MotorContextBehaviour:string):number;
/**
*Portability Check: OK
*/
   CheckNewTeam(Team:aWTeam, IdDists:string, UsersOk:boolean, IdDistOk:boolean):boolean;
/**
*Portability Check: OK
*/
   NotifyCreateUsers(MasterTeam:aWTeam, Team:aWTeam, LogBroker:aLogBroker);
/**
*Portability Check: OK
*/
   RegisterNewTeam(BufferIn:string, BufferInUsedSize:number, BufferOut:string, BufferOutUsedSize:number, MotorContextBehaviour:string):number;
/**
*Portability Check: OK
*/
   LookForTeam(BufferIn:string, BufferInUsedSize:number, BufferOut:string, BufferOutUsedSize:number, MotorContextBehaviour:string):number;
   LookForUser(BufferIn:string, BufferInUsedSize:number, BufferOut:string, BufferOutUsedSize:number, MotorContextBehaviour:string):number;
   GetKeyForRegisterNewTeam(BufferIn:string, BufferInUsedSize:number, BufferOut:string, BufferOutUsedSize:number, MotorContextBehaviour:string):number;
   ExistingTeamsAndUser(BufferIn:string, BufferInUsedSize:number, BufferOut:string, BufferOutUsedSize:number, MotorContextBehaviour:string):number;
   BrowseExistingUsersForIdsAndNameMatch(Users:string, Ids:string, Name:string):aUser;
/**
*Portability Check: OK
*/
   RegisterNewUser(BufferIn:string, BufferInUsedSize:number, BufferOut:string, BufferOutUsedSize:number, MotorContextBehaviour:string):number;
   RemoveSmallIdFromListof(pSmallId:string, List:aListOfRefTos);
/**
*Portability Check: OK
*/
   CheckInList(BufferIn:string, BufferInUsedSize:number, BufferOut:string, BufferOutUsedSize:number, MotorContextBehaviour:string):number;
/**
*Portability Check: OK
*/
   GetEntitiesTeamRepartition(BufferIn:string, BufferInUsedSize:number, BufferOut:string, BufferOutUsedSize:number, MotorContextBehaviour:string):number;
   FreeContext(BufferIn:string, BufferInUsedSize:number, BufferOut:string, BufferOutUsedSize:number, MotorContextBehaviour:string):number;
   CloseProcess():number;
   CloseContext(BufferIn:string, BufferInUsedSize:number, BufferOut:string, BufferOutUsedSize:number, MotorContextBehaviour:string):number;
   TestConnection(BufferIn:string, BufferInUsedSize:number, BufferOut:string, BufferOutUsedSize:number, MotorContextBehaviour:string):number;
   GetMTeamRefVersion(BufferIn:string, BufferInUsedSize:number, BufferOut:string, BufferOutUsedSize:number, MotorContextBehaviour:string):number;
/**
*Portability Check: OK
*/
   GetContainerContents(BufferIn:string, BufferInUsedSize:number, BufferOut:string, BufferOutUsedSize:number, MotorContextBehaviour:string):number;
   GetUsersAvailableForRegistration(BufferIn:string, BufferInUsedSize:number, BufferOut:string, BufferOutUsedSize:number, MotorContextBehaviour:string):number;
   FreeTeam(BufferIn:string, BufferInUsedSize:number, BufferOut:string, BufferOutUsedSize:number, MotorContextBehaviour:string):number;
/**
*Portability Check: OK
*/
   FreeUser(BufferIn:string, BufferInUsedSize:number, BufferOut:string, BufferOutUsedSize:number, MotorContextBehaviour:string):number;
/**
*Portability Check: OK
*/
   LoadMoreLogsFromAddress(BufferIn:string, BufferInUsedSize:number, BufferOut:string, BufferOutUsedSize:number, MotorContextBehaviour:string):number;
/**
*Portability Check: OK
*/
   GetTeamCkeckedOutEntities(BufferIn:string, BufferInUsedSize:number, BufferOut:string, BufferOutUsedSize:number, MotorContextBehaviour:string):number;
/**
*Portability Check: OK
*/
   CheckOutList(BufferIn:string, BufferInUsedSize:number, BufferOut:string, BufferOutUsedSize:number, MotorContextBehaviour:string):number;
   CheckIfSomeoneElseAlreadyConnected(BufferIn:string, BufferInUsedSize:number, BufferOut:string, BufferOutUsedSize:number):boolean;
   SaveTGV();
   ExecuteRequest();
   FindParam(Option:string):boolean;
   InitServer();
   GetRPCContextFromRequestBuffer(BufferIn:string, BufferInUsedSize:number):number;
   TimeoutReach();
   Manages();
   StringExtract();
   TerminateServer();
   IncSessions();
}
declare class WTeamNameAndCommentAgent extends aUIAgent {
   Name: string ;
   NameStaticText: string ;
   WTeamUsers: string ;
   CannotDeliverToMultiTeamSharedRepository: string ;
}
declare class WTeamUsersAgent extends aUIAgent {
   Users: string ;
}
declare class aWTeam extends aUser {
   Users: string ;
   CannotDeliverToMultiTeamSharedRepository: string ;
   GetTree();
   GetBitmap();
   StringExtract();
}
declare module xMTeam {
   var LocalSmallIds: string ;
   var EntitiesToSync: string ;
   var TeamEntities: string ;
   var LocalEntities: string ;
   var CurrentTeam: string ;
   var TeamNodeBitmap: string ;
   var UserNodeBitmap: string ;
   var Tree: string ;
/**
*Portability Check: OK
*/
   function AppendRefUnflaggedEntitiesInList(Object:aEntity, List:aListOfInstances);
   function NotifyCurrentClientAlive();
   function FlagEntity(Entity:aEntity);
   function IsFlagged(Entity:aEntity):boolean;
   function UnFlagEntity(Entity:aEntity);
   function FlagList(l:aListOfInstances);
   function UnFlagList(l:aListOfInstances);
   function PrepareList(l:aListOfInstances);
   function PrepareLocalSmallIds();
   function PrepareLocalEntities();
   function PrepareEntitiesToSync();
   function PrepareTeamEntities();
   function OpenRefDevDB():boolean;
   function GetRefConfig():aRefConfig;
   function CloseRefDevDB();
   function OpenRefConfig():aRefConfig;
   function CloseRefConfig(RefConfig:aRefConfig);
   function OpenFileRefDevDB();
   function CloseFileRefDevDB();
   function GetRefDevDBMgr():aTGVDBMgr;
   function IsInOutSyncMasterEntity(Entity:aEntity):boolean;
   function GetCurrentTeamName():string;
   function NewMarshallerDBDef():aInMemTGVDBDef;
   function IsInRefDev(Entity:aEntity):boolean;
   function BuildLocalEntitiesIdsList(List:aListOfInstances, G:aGauge);
   function FillListWithOwned(Object:aEntity, List:aListOfInstances);
   function FillListWithModifiedOwnedObject(FromObject:aEntity, LastVersionObject:aEntity, List:aListOfInstances, Synchronize:boolean);
   function PutAtEndInstancesOfApplicativeClasses(DeliverList:aListOfInstances, G:aGauge);
   function CompleteDeliverListWithOwnedEntities(DeliverList:aListOfInstances, RefVersions:aListOfInstances, Versions:aListOfInstances, G:aGauge, Reporter:aEntity, Synchronize:boolean);
   function CompleteDeliverListWithOwnedEntitiesAndOrder(DeliverList:aListOfInstances, RefVersions:aListOfInstances, Versions:aListOfInstances, G:aGauge, Reporter:aEntity, Synchronize:boolean);
/**
*Portability Check: OK
*/
   function LoadAllOf(Object:aFullObject);
/**
*Portability Check: OK
*/
   function RestoreLinksWithAllObjectInMemOf(Object:aFullObject);
   function FindRefEntityOf(Entity:aEntity, Versions:aListOfInstances, VersionsInRef:aListOfInstances):aEntity;
   function isASystemEntity(Entity:aEntity):boolean;
   function AppendRefObjectInList(RefObject:aEntity, List:aListOfInstances);
   function FillExternalFromList(List:aListOfInstances, externals:aListOfInstances);
   function GetMasterEntityOf(Entity:aEntity):aEntity;
   function GetMasterDefEntityOf(Entity:aEntity):aEntity;
   function GetPossibleInExternals(PossibleList:aListOfInstances, Externals:aListOfInstances, DeliverList:aListOfInstances);
   function AppendPossibleRequiredEntitys(ChosenExisting:aListOfInstances, ChosenList:aListOfInstances, PossibleList:aListOfInstances, DeliverList:aListOfInstances, G:aGauge, Reporter:aEntity, Existing:aListOfInstances, LocalList:aListOfInstances, Synchronize:boolean);
   function PrepareForDeliverTGVBuilding(ToBeDelivered:aListOfInstances, VersionsInRef:aListOfInstances, Chosen:aListOfInstances);
   function RemoveEntitiesFromList(ListToUpdate:aListOfInstances, EntitiesToRemove:aListOfInstances);
   function BuildDeliverableSmallIdsFromList(L:aListOfInstances, SmallIds:aListOfInstances);
   function ReallocOutBuffer(BufferOut:string, newSize:number);
   function ReallocOutBufferAndPointer(BufferOut:string, NewSize:number, P:string);
   function RestoreDescendants(Entity:aEntity);
   function RegisterInRefConfig(Object:aEntity, Team:aWTeam, RefConfig:aRefConfig);
   function UpdateRefConfigIdDistWithEntity(Entity:aEntity, RefConfig:aRefConfig);
   function FillListWithClassesToBeCheckedOutToo(TheClassDef:aClassDef, List:aListOfInstances);
   function FillListWithMinimalClassElementForInstallation(ClassDefList:aListOfInstances, List:aListOfInstances);
   function PrepareClonesFor(ClassDefList:aListOfInstances, AllClones:aListOfInstances);
   function UpdateListOfEntitiesToSend(AllEntities:aListOfInstances, OldPbs:aListOfInstances, OldObjects:aListOfInstances, KilledObjects:aListOfInstances);
   function RestoreListOfEntitiesToSend(AllEntities:aListOfInstances, OldPbs:aListOfInstances, OldObjects:aListOfInstances);
   function RecastReceivedEntity(Entity:aEntity);
   function IsTmpMM(NSId:number):boolean;
   function BuildTransactionFrom(RefConfig:aRefConfig, Team:aWTeam, G:aGauge, ObjectFullIds:aListOfInstances, InMemTGVBuffer:string, BufferSize:number):boolean;
   function BuildTGVToSend(AllObjects:aListOfInstances, TeamName:string, pTGV:string, Size:number, allFullIds:aListOfInstances, G:aGauge):boolean;
   function UserFromId(Id:number, RefConfig:aRefConfig):aUser;
   function UserFromName(Name:string, RefConfig:aRefConfig):aUser;
   function IsAnInOutMasterEntity(Entity:aEntity):boolean;
   function sortByFileVersion(This:string, That:string):boolean;
   function KeepOnlyLastVersionsOfFile(FileName:string, Number:number);
   function GetMTeamRefConfig():aMTeamRefConfig;
   function pUsers(User:aUser):string;
   function IsTeam(User:aUser):boolean;
   function PutUsersAndTeamsTree(Buffer:string, FreeUsersAndTeams:aObjectHashTable, UsersAndTeams:string);
   function GetUsersAndTeamsTreeSize(FreeUsersAndTeams:aObjectHashTable, UsersAndTeams:string):number;
   function GetUsersAndTeamsTree(Buffer:string, UsersAndTeams:string, Master:aEntity, Flatten:number, FlattenNextLevel:number, ToFake:number, Fake:number, SetText:boolean);
   function TeamIsRegistered(RefConfig:aRefConfig):boolean;
   function CancelRefConfig(RefConfig:aRefConfig);
   function GetBitmap(Cache:number, Name:string):number;
}
declare module xMTeamShared {
   var ConnectedClient: string ;
   var ConnexionCriticalSection: string ;
   var BackupNumber: string ;
   var FreeContext: string ;
   var CloseOnFree: string ;
   var KeepProcess: string ;
   var RefConfig: string ;
   function ConnectClient(Name:string, AlreadyConnectedClient:string):boolean;
   function DisconnectClient();
}
declare class MTeamFakeEntityAgent extends aUIAgent {
   Name: string ;
   NameStaticText: string ;
   TeamName: string ;
   TeamNameStaticText: string ;
   Category: string ;
   CategoryStaticText: string ;
   Alive: string ;
}
declare class aMTeamFakeEntity extends aEntity {
   theNsId: string ;
   theId: string ;
   theVersion: string ;
   TeamName: string ;
   Category: string ;
   Alive: string ;
   TeamRefVersion: string ;
   GlobalVersion: string ;
   InOutSyncCategory();
   isAlive();
   StringExtract();
}
declare class MTeamFakeUserMainAgent extends aUIAgent {
   Name: string ;
   NameStaticText: string ;
   LocalDistributedId: string ;
   LocalDistributedIdStaticText: string ;
   myText: string ;
   myTextStaticText: string ;
}
declare class aMTeamFakeUser extends aUser {
   UserId: string ;
}
declare class aRemoteRefDevHistoryPresentor extends aRefDevHistoryPresentor {
   Manager: string ;
   FakeUsers: string ;
   LoadMoreLogsFromAddress();
   Init();
   UserFromId();
   Terminate();
   SelectedUserId();
}
declare class MT_MessageAgent extends aUIAgent {
   Message: string ;
}
declare class MT_OKMessageAgent extends MT_MessageAgent {
   ActionValid001: string ;
}
declare class MT_OkCancelMessageAgent extends MT_MessageAgent {
   ActionValid001: string ;
   ActionCancel001: string ;
}
declare class MT_YesNoMessageAgent extends MT_MessageAgent {
   ActionValid001: string ;
   ActionCancel001: string ;
   pBatch001: string ;
   BooleanAsCheckBox001: string ;
}
declare class aMTeamAlert extends aAlert {
   pBatch: string ;
   ParamInteract();
}
declare class aWedServerMonitor extends aWedServer {
   InitServer();
}
declare class DefaultWideExtensionForaReferentielManagementExtAgent extends aUIAgent {
   DoYourJob: string ;
}
declare class aReferentielManagementExt extends aWideExtension {
   DoYourJob();
   MenuText();
   FolderParentName();
   ButtonBMPName();
}
declare class MTeamRefConfigVersionToKeepAgent extends aUIAgent {
   VersionNbreToKeep: string ;
   VersionNbreToKeepStaticText: string ;
}
declare class aMTeamRefConfig extends aEntity {
   MTeamRefVersion: string ;
   VersionNbreToKeep: string ;
   Init();
}
declare class aMTSelectedEntitiesRole extends aSingleRoleType {
   AskContainerDeliver: string ;
   DefaultContainerDeliverAnswer: string ;
   MTUserIsOk(Message:string, DontAsk:boolean, YesNo:boolean);
   UserIsOk(Message:string):boolean;
   NewInstanceFromDroppedObject();
   IsDroppedObjectUsable();
}
declare class MTeamManagerManagementAgent extends aUIAgent {
   MTeamManagerRefConfigTeamTree: string ;
}
declare class MTeamManagerRefConfigTeamTreeAgent extends aUIAgent {
   RefConfig: string ;
}
declare class WTeamMainAgent extends aUIAgent {
   WTeamFolder: string ;
}
declare class WTeamTreeAgent extends aTeamTreeUIAgent {
}
declare class WTeamFolderAgent extends aFolderViewAgent {
}
declare class WTeamNameOnlyAgent extends aUIAgent {
   Name: string ;
   NameStaticText: string ;
}
declare class aTeamTreeUIAgent extends aUIAgent {
   Users: string ;
   RootEntity: string ;
   pRootUsers: string ;
   RootUsersType: string ;
   RootRole: string ;
   NotifyInit();
   UsersQVP():aQVPListOfTree;
   NewChoice(Title:string, Choices:aListOfInstances, Separator:boolean, Method:aMethodDesc);
   NewActionChoice(Action:string, Choices:aListOfInstances, Separator:boolean, Method:aMethodDesc);
   RootAppendNew(Node:string, User:aUser);
   RootAppendNewTeam(Node:string);
   RootAppendNewUser(Node:string);
   RootDeleteAllLinks(Node:string);
   SelectFromName(Node:string);
   Consult(Node:string);
   Modify(Node:string);
   InsertNewAt(Node:string, User:aUser, Rank:number);
   AppendNew(Node:string, User:aUser);
   RankFromNode(Node:string):number;
   InsertNew(Node:string, User:aUser);
   AppendNewTeam(Node:string);
   AppendNewUser(Node:string);
   InsertNewTeam(Node:string);
   InsertNewUser(Node:string);
   Delete(Node:string);
   DeleteAllLinks(Node:string);
   Move(Node:string, Up:boolean);
   MoveUp(Node:string);
   MoveDown(Node:string);
   MoveRight(Node:string);
   MoveLeft(Node:string);
   Users_ValueLoaded();
/**
*Portability Check: OK
*/
   Users_Executed(SelectedRank:number, Option:number):number;
}
declare class aUsersOnWTeamRole extends aSingleRoleType {
   UpdateList(List:aListOfInstances);
   AskForActions();
}
declare class aFakeTeam extends aWTeam {
   LoadRefConfig();
   Init();
}
declare class aMTeamEntity extends aEntity {
}
declare class aMTeamLightRoot extends aLightObject {
}
declare class aMTeamTeamManager extends aMTeamLightRoot {
   FindTeamNode(Team:string, Node:aXMLNamedNode):aXMLNamedNode;
   LoadUser(RefConfig:aRefConfig, User:aUser, Node:aXMLNamedNode);
/**
*Portability Check: OK
*/
   LoadTeamsUsers(RefConfig:aRefConfig, Node:aXMLNamedNode, Team:aWTeam, Users:string);
   LoadTeams(RefConfig:aRefConfig, Node:aXMLNamedNode, TeamFromName:aEntityFromNameHashTable, Users:string);
/**
*Portability Check: OK
*/
   LoadUsers(RefConfig:aRefConfig, Node:aXMLNamedNode, UserFromName:aEntityFromNameHashTable, Users:string, Team:string);
   LoadDistributors(RefConfig:aRefConfig, Node:aXMLNamedNode);
   FillUsersForTeam(Team:aWTeam, Users:string);
   LoadFromXML(Root:string, Team:string);
   SaveUsers(RefConfig:aRefConfig, Node:aXMLNamedNode);
   SaveDistributors(RefConfig:aRefConfig, Node:aXMLNamedNode);
   SaveToXML();
}
declare class aMTeamTeamsManager extends aMTeamLightRoot {
   Run();
}
declare class aMTeamTeamsManagerEntity extends aMTeamEntity {
}
declare class MTeamTeamsManagerNodeMainAgent extends aUIAgent {
   Name: string ;
   NameStaticText: string ;
}
declare class MTeamTeamsManagerNodePopupAgent extends aMenuItemControlAgent {
   Consult: string ;
   Modify: string ;
   Delete001: string ;
   MenuItem001: string ;
   MoveUp: string ;
   MoveDown: string ;
}
declare class aMTeamTeamsManagerNode extends aMTeamTeamsManagerEntity {
   NodeName():string;
   NodeBitmap():number;
   GetBitmap();
   StringExtract();
   PopupScenario():aScenario;
   ApplicativePopup();
   AcceptTree(FromTeam:aMTeamTeamsManagerTeamNode);
   GetTeams():aListOfInstances;
   GetUsers():aListOfInstances;
   Consult();
   Modify();
   Execute();
   Delete();
   MoveUp();
   MoveDown();
   CanCreateUsers():boolean;
   CanCreateTeams():boolean;
   CheckDuplicates(Hash:aEntityFromNameHashTable, FirstObject:aMTeamTeamsManagerNode, SecondObject:aMTeamTeamsManagerNode, UsersCount:number):boolean;
   GenerateXML(Node:aXMLNamedNode):aXMLNamedNode;
   AllocateDistributors(Users:string, Distributor:number);
   LoadNameFromXML(Node:aXMLNamedNode);
   LoadFromXML(Node:aXMLNamedNode, Users:string);
}
declare class MTeamTeamsManagerRootMainAgent extends MTeamTeamsManagerTeamMainAgent {
   InitFromFolder: string ;
   CleanFolder: string ;
   SaveToFile: string ;
   LoadFromFile: string ;
}
declare class MTeamTeamsManagerRootPopupAgent extends aMenuItemControlAgent {
   NewTeam: string ;
   DeleteTeams: string ;
}
declare class MTeamTeamsManagerRootDebugAgent extends aUIAgent {
   Distributors: string ;
   Users: string ;
}
declare class aMTeamTeamsManagerRoot extends aMTeamTeamsManagerTeamNode {
   Users: string ;
   Distributors: string ;
   Init();
   CleanFolder();
   IsValid();
   SaveTo(File:string);
   CreateRepositories();
   PopupScenario();
   InitFromFolder();
   SaveToFile();
   LoadDistributors(Node:aXMLNamedNode);
   LoadFromFile();
}
declare class MTeamTeamsManagerTeamPopupAgent extends MTeamTeamsManagerNodePopupAgent {
   MTeamTeamsManagerTeamNewPopup: string ;
   MTeamTeamsManagerTeamPurgePopup: string ;
}
declare class MTeamTeamsManagerTeamNewPopupAgent extends aMenuItemControlAgent {
   NewTeam: string ;
   NewUser: string ;
}
declare class MTeamTeamsManagerTeamPurgePopupAgent extends aMenuItemControlAgent {
   DeleteTeams: string ;
   DeleteUsers: string ;
}
declare class MTeamTeamsManagerTeamRootPopupAgent extends aMenuItemControlAgent {
   MTeamTeamsManagerTeamNewPopup: string ;
   MTeamTeamsManagerTeamPurgePopup: string ;
}
declare class aMTeamTeamsManagerTeam extends aMTeamTeamsManagerTeamNode {
   Users: string ;
   NewUser();
   GetUsers();
   GenerateXML();
   AllocateDistributors();
   CheckDuplicates();
   DeleteUsers();
   PopupScenario();
   CanCreateUsers();
   Delete();
   MoveUp();
   MoveDown();
   MoveUserUpAtRank(Rank:number);
   MoveUserDownAtRank(Rank:number);
   MoveUserUp(User:aMTeamTeamsManagerUser);
   MoveUserDown(User:aMTeamTeamsManagerUser);
   UpdateUsersFromNode();
   RegisteredTeamName();
   NewTeamName();
   LoadFromXML();
}
declare class MTeamTeamsManagerTeamMainAgent extends MTeamTeamsManagerNodeMainAgent {
   MTeamTeamsManagerTeamTree: string ;
   myOwner: string ;
   myOwnerStaticText: string ;
   NewTeamInSelected: string ;
   NewUserInSelected: string ;
   MTeamTeamsManagerTeamTree_Selected(:aUIAgent, SelectedRank:number):number;
}
declare class MTeamTeamsManagerTeamTreeAgent extends aXXXAsTreeBoxUIAgent {
   OldTree: string ;
   ObjectChildNodes(Object:aMTeamTeamsManagerNode, Teams:aListOfInstances, Users:aListOfInstances):boolean;
   HasChilds(Object:aMTeamTeamsManagerNode):boolean;
   RootHasChilds():boolean;
   NotifyInit();
   NotifyTerminate();
   ApplicativePopup(Node:string):number;
   NotifyExecuted();
   NotifyButtonUp();
   NotifyPopup();
   LoadValue();
   NotifyBeginLabelEdit();
   NextAliveNode(Node:string):string;
   GetNodeInfo(Node:string, Object:aMTeamTeamsManagerNode, Expanded:boolean);
   SetBitmaps(Node:string, Object:aMTeamTeamsManagerNode);
   InsertNode(Node:string, Object:aMTeamTeamsManagerNode);
   CreateNode(Node:string, Object:aMTeamTeamsManagerNode);
   UpdateChilds(List:aListOfInstances, Node:string, Objects:aObjectHashTable, Child:string);
   DisposeNodesFrom(Node:string);
   SetObjectToNode();
   ExpandNode();
   NotifyEndLabelEdit();
}
declare class MTeamTeamsManagerTeamListTreeAgent extends aUIAgent {
   Teams: string ;
}
declare class aMTeamTeamsManagerTeamNode extends aMTeamTeamsManagerNode {
   Teams: string ;
   NodeBitmap();
   DisplayNew(Object:aMTeamTeamsManagerNode);
   TeamProject():aMTeamTeamsManagerTeamNode;
   NewTeamName():string;
   NewTeam();
   DeleteTeams();
   GetTeams();
   AcceptTree();
   Execute();
   NewTeamInSelected();
   NewUserInSelected();
   CanCreateTeams();
   GenerateXML();
   GenerateXMLIdDistributors(Node:aXMLNamedNode, IdDistributors:string);
   AllocateDistributors();
   CopyEmptyTeam(SourceFolder:string, TargetFolder:string);
   RegisteredTeamName():string;
   CreateRepository(Root:string, Tgv:string);
   CheckDuplicates();
   NodeName();
   MoveTeamUpAtRank(Rank:number);
   MoveTeamDownAtRank(Rank:number);
   MoveTeamUp(Team:aMTeamTeamsManagerTeam);
   MoveTeamDown(Team:aMTeamTeamsManagerTeam);
   CreateTeamsFromFolders(Folder:string);
   UpdateUsersFromNode(RootNode:aXMLNamedNode, Users:string, Message:string):boolean;
   UpdateDistributorsFromNode(RootNode:aXMLNamedNode, Distributors:string, Message:string):boolean;
   UpdateFromExistingRepository(Folder:string, Users:string, Distributors:string, Message:string):boolean;
   UpdateFromExisting(Folder:string, Users:string, Distributors:string, Message:string):boolean;
   LoadFromXML();
}
declare class MTeamTeamsManagerUserMainAgent extends MTeamTeamsManagerNodeMainAgent {
   Password: string ;
   PasswordStaticText: string ;
   Group001: string ;
   GroupStaticText: string ;
}
declare class aMTeamTeamsManagerUser extends aMTeamTeamsManagerNode {
   Password: string ;
   Group: string ;
   Distributor: string ;
   Init();
   NodeName();
   NodeBitmap();
   GenerateXML();
   AllocateDistributors();
   CheckDuplicates();
   MoveUp();
   MoveDown();
   LoadFromXML();
}
/**
*theXMLProducer : aXMLForJSPProducer

*/
declare module wEJBProducer {
   var listOfTypeClasses: string ;
   var InOutVars: string ;
   var forEachCount: string ;
   var SwitchCount: string ;
   var ByteAssignCount: string ;
   var NativeRecordCount: string ;
   var JavaRecordCount: string ;
   var CurrentEJBProducer: string ;
   var CurrentPackage: string ;
   var CurrentClassProducer: string ;
   var CurrentInstance: string ;
   var theOverridenMethodDesc: string ;
   var theXSLProducer: string ;
   function JavaStringFromWydeString(theWydeString:string):string;
   function ResetOnJavaPackage(thisPackage:aJavaPackage);
   function ResetGlobalVariables();
   function SwitchVariableName():string;
   function CurrentNativeRecordName():string;
   function CurrentJavaRecordName():string;
   function CurrentRecordClassName():string;
   function RecordFieldIdName(ForVar:string):string;
   function ByteAssignVariableName():string;
   function ScenNameFor(theName:string):string;
   function Quoted(thisString:string):string;
   function IsTypeAlreadyProduced(TypeName:string):boolean;
   function InitJavaProducerFactory();
   function ExtractFromLine(theLine:string, Row:number, DotPos:number):string;
   function ExtractFileNameFromString(theString:string):string;
   function WrapperVarNameFor(theName:string):string;
   function DoNeedToCreateWrapperFor(theName:string):boolean;
   function RegisterWrapperFor(theName:string);
   function BrutalForInitList(theList:string);
   function ReportWarning(Warning:string);
   function ReportTypeWarning(TypeName:string);
   function ReportCannotOverrite(FileName:string);
   function ProduceAccessors(theCppSource:aProducedText, WydeType:string, JNIType:string, MethodSuffix:string, BCType:string);
   function ProduceObjectAcessors(theCppSource:aProducedText);
   function ProduceByteAccessors(theCppSource:aProducedText);
   function ProduceShortAccessors(theCppSource:aProducedText);
   function ProduceIntAccessors(theCppSource:aProducedText);
   function ProduceLongAccessors(theCppSource:aProducedText);
   function ProduceFloatAccessors(theCppSource:aProducedText);
   function ProduceDoubleAccessors(theCppSource:aProducedText);
   function ProduceBooleanAccessors(theCppSource:aProducedText);
   function ProduceCharAccessors(theCppSource:aProducedText);
   function ProduceStringAccessors(theCppSource:aProducedText);
   function ProduceTextAccessors(theCppSource:aProducedText);
   function ProduceWrappersAccessors(theCppSource:aProducedText);
   function ProduceInit(theCppSource:aProducedText);
   function ProduceHashTables(InFile:aProducedText);
   function ComputePackageNameForEJB(PackageName:string):string;
   function ProducePrototype(where:aJavaExportText, theMethodDescProducer:aMethodDescJavaProducer):boolean;
   function ProduceMethodContent(where:aProducedText, CallString:string):boolean;
   function IsInSysEJB(ModuleDef:aModuleDef):boolean;
   function CanBeAddInUses(ModuleDef:aModuleDef):boolean;
   function FileCanBeRewritten(JSPFileName:string):boolean;
}
declare module XXXProducers {
   function directoryExists(thisName:string):boolean;
   function isUpcase(c:number):boolean;
   function isUpcaseOrDigit(c:number):boolean;
   function upcaseFirstChar(s:string):string;
   function lowcaseFirstChar(s:string):string;
   function hashcodeStrToStr(s:string, baseSize:number, maxSize:number, alg:string):string;
   function isSystemEntity(thisEntity:aFullObject):boolean;
   function classDerivesFrom(theClass:aRecordDesc, fromWhat:aEntity):boolean;
}
declare module JSPUtils {
   var IndexFileText: string ;
   var listOfVars: string ;
   var MappingList: string ;
   var tColorsAsRGB: string ;
   var scenarioDefaultHeight: string ;
   function isVarAlreadyProduced(curVar:string):boolean;
   function MakeMappingList();
   function Quoted(thisString:string):string;
   function getColor(ThisObject:aScenario):string;
   function getBgColor(ThisObject:aQVarPresentor):string;
   function getFgColor(ThisObject:aQVarPresentor):string;
   function isSText(ThisQVP:aQVarPresentor):boolean;
   function isQVP1LessTQVP2(QVP1:aQVarPresentor, QVP2:aQVarPresentor):boolean;
   function xPartition(Qvps:aListOfInstances, first:number, last:number):number;
   function quicksort(QVps:aListOfInstances, first:number, last:number);
   function bubbleSort(Qvps:aListOfInstances, size:number);
   function QVPSorter(cScenario:aScenario, ListOfQvps:aListOfInstances);
}
declare module wProjectMaker {
   function OpenClass(ClassName:string, ExecMode:string, Modal:boolean);
   function OpenMember(ClassName:string, MemberName:string, ExecMode:string, Modal:boolean);
}
declare module wJavaRepresentations {
   function ThisIsNotIn(thisEntity:aEntity, theList:aListOfRefTos):boolean;
   function IsPresentedInList(theEntity:aEntity, theList:string):boolean;
   function JavaRepFor(theEntity:aEntity):aEntityJavaRepresentation;
   function UpdateListFromMM(theMMList:aListOfInstances, theRepList:string);
   function UpdateListFromRep(theList:string);
   function UpdateLists(theMMList:aListOfInstances, theRepList:string);
   function MappingFor(theRep:aEntityJavaRepresentation, theList:aListOfInstances);
}
declare class aJavaProducer extends aProducer {
   myJavaClassRep: string ;
   LastProducedStatement: string ;
   IsForAScenario: string ;
   Name():string;
   producerFor(thisEntity:aLightObject):aJavaProducer;
   AppliVersion():string;
   Produce(where:aJavaExportText, options:string);
   ProduceFirstPass(where:aJavaExportText, options:string);
   ProduceThirdPass(where:aJavaExportText, options:string);
   ProduceStatements(Where:aJavaExportText, Options:string, CurrentStatement:aIRStatement);
   ProduceCommentary(Where:aJavaExportText, myCommentary:string);
   target();
}
declare class aClassDefJavaRepresentation extends aModuleDefJavaRepresentation {
   JavaScenariosToProduce: string ;
   HandleExtends: string ;
   IsEntityBean: string ;
   BeanName: string ;
   Init();
   AddInAppropriateListOf(theRep:aModuleDefJavaRepresentation):boolean;
   InitFromMM();
   DoUpdateFromMM();
}
declare class JavaEntityScenarioAgent extends aUIAgent {
   PresentingEntity: string ;
   PresentingEntityStaticText: string ;
   myOwner: string ;
   myOwnerStaticText: string ;
}
declare class aEntityJavaRepresentation extends aJavaEntity {
   ToProduce: string ;
   PresentingEntity: string ;
   StringExtract();
   GetBitmap();
   InitFromMM();
   FinalizeInit();
   DoUpdateFromMM();
   UpdateFromMM();
   AddInAppropriateListOf(theRep:aEntityJavaRepresentation):boolean;
   MustCheckVarHasChanged();
}
declare class JavaMethodsAgent extends aUIAgent {
   ItemCheckedEnable: string ;
   JavaMethodsToProduce: string ;
}
declare class ClassInfosAgent extends InfosScenAgent {
   PresentingEntity: string ;
   Name: string ;
   NameStaticText: string ;
   DoItForEJB: string ;
   myOwner: string ;
   PackageName: string ;
   PackageNameStaticText: string ;
   myAncestor: string ;
   myAncestorStaticText: string ;
   myProductionStyle: string ;
   myProductionStyleStaticText: string ;
}
declare class aJavaModuleScenAgent extends aSplitViewAgent {
}
declare class AJavaModuleMainScenAgent extends aUIAgent {
   aJavaModuleScen: string ;
   NotifyInit();
}
declare class aModuleDefJavaRepMappingAgent extends aSplitViewAgent {
}
declare class aModuleDefJavaRepresentation extends aRecordDescJavaRepresentation {
   JavaMethodsToProduce: string ;
   JavaTypesToProduce: string ;
   JavaConstsToProduce: string ;
   JavaEntitiesToProduce: string ;
   myAncestor: string ;
   myURL: string ;
   myUser: string ;
   myPassword: string ;
   myApplicationServer: string ;
   PackageToImport: string ;
   InitFromMM();
   ActionCancel();
   DoUpdateFromMM();
   OpenMethodScenario(Rank:number);
   VarsAreToBeNative();
}
declare class JavaEntitiesAgent extends aUIAgent {
   JavaEntitiesToProduce: string ;
}
declare class JavaPackageMainAgent extends aUIAgent {
   JavaEntities: string ;
   Make: string ;
   GenerateJava: string ;
   CompileJava: string ;
   JavaPackageFirstPage: string ;
   GenerateNative: string ;
   CompileNative: string ;
   LinkNative: string ;
   DoProduceJarFile: string ;
   ProductionStyle: string ;
   ProductionStyle001: string ;
   DisplayDependancies: string ;
   JustSystemClass: string ;
   LoadSystemTypes: string ;
   DoGenerateJSP: string ;
   NotifyInit();
}
declare class JavaPackageFirstPageAgent extends aUIAgent {
   Name: string ;
   NameStaticText: string ;
   PackageNameStaticText: string ;
   PackageName: string ;
   Name_Changed(:aUIAgent):number;
   PackageName_Changed(:aUIAgent):number;
}
declare class JavaProducerTextGeneratedAgent extends aUIAgent {
}
declare class JavaPackageProducerAgent extends aFolderViewAgent {
}
declare class JavaPackagePopUpForCreateClassesAgent extends aMenuItemControlAgent {
   AddCurrentToProduceList: string ;
   AddCurrentToProduceListWithDescendants: string ;
}
declare class JavaPackagePopUpForModifyMotherClassAgent extends aMenuItemControlAgent {
   ActionModifyCurrentModuleRep: string ;
   RemoveCurrentFromListWithDescendants001: string ;
   RemoveCurrentFromProduceList: string ;
   AddCurrentDescendantsToProduceList: string ;
}
declare class JavaPackagePopUpForModuleModificationAgent extends aMenuItemControlAgent {
   ActionModifyCurrentModuleRep: string ;
   RemoveCurrentFromProduceList: string ;
}
declare class JavaCompilerOptionsAgent extends aUIAgent {
   StaticText: string ;
   CompileJavaWithDebuggingInfos: string ;
   CompileJavaOptimize: string ;
   CompileJavaGenerateNoWarning: string ;
   CompileJavaVerbose: string ;
   StaticText001: string ;
   JavaCompiler: string ;
   JavaCompilerStaticText: string ;
   AdditionalJavaCompilerOptions: string ;
   AdditionalJavaCompilerOptionsStaticText: string ;
   JarFileName: string ;
   JarFileNameStaticText: string ;
   AdditionalClassPath: string ;
   JavaProductionClassPath: string ;
}
declare class JNILinkOptionsAgent extends aUIAgent {
   CppLinker: string ;
   CppLinkerStaticText: string ;
   LinkerOptions: string ;
   LinkerOptionsStaticText: string ;
   LinkerReleaseOptions: string ;
   LinkerReleaseOptionsStaticText: string ;
   DllName: string ;
   DllNameStaticText: string ;
   LibName: string ;
   LibNameStaticText: string ;
}
declare class JNICompilerOptionsAgent extends aUIAgent {
   CppCompiler: string ;
   CppCompilerStaticText: string ;
   CompilerDebugOptions: string ;
   CompilerDebugOptionsStaticText: string ;
   CompilerReleaseOptions: string ;
   CompilerReleaseOptionsStaticText: string ;
   DebugMode: string ;
}
declare class EJBCompilerOptionsAgent extends aFolderViewAgent {
}
declare class JNIProjectOptionsAgent extends aUIAgent {
   AppliHeaderFileName: string ;
   AppliHeaderFileNameStaticText: string ;
   NameSpaceName: string ;
   NameSpaceNameStaticText: string ;
   DoNotUseNameSpace: string ;
   TheContextMode: string ;
   TheContextModeGroupBox: string ;
}
declare class JavaPackagePopUpForModifySingleClassAgent extends aMenuItemControlAgent {
   ModifyCurrentModuleRep: string ;
   RemoveCurrentFromProduceList: string ;
}
declare class aJavaPackage extends aJavaEntity {
   JavaEntitiesToProduce: string ;
   DoGenerateJava: string ;
   JavaCompiler: string ;
   DoCompileJava: string ;
   DoGenerateJSP: string ;
   DoGenerateNative: string ;
   DoCompileNative: string ;
   DoLinkNative: string ;
   DoNativeProduction: string ;
   JavaOrEJB: string ;
   ProductionStyle: string ;
   DoProduceJarFile: string ;
   DoEraseJavaFiles: string ;
   JarFileName: string ;
   OldName: string ;
   PackageName: string ;
   JavaRootProductionPath: string ;
   AdditionalClassPath: string ;
   JavaProductionClassPath: string ;
   JavaProductionPath: string ;
   JSPProductionPath: string ;
   MainClass: string ;
   GenDir: string ;
   theLightObjectClassDef: string ;
   myIDE: string ;
   JDKPath: string ;
   CurrentModule: string ;
   CurrentReturnType: string ;
   CurrentModuleName: string ;
   CurrentMethodName: string ;
   CurrentMethodImplem: string ;
   CurrentStatement: string ;
   InTypeMethodCall: string ;
   ProduceHoldersForMethodCalls: string ;
   ProduceHoldersForInstanceVariables: string ;
   CompileJavaWithDebuggingInfos: string ;
   CompileJavaOptimize: string ;
   CompileJavaGenerateNoWarning: string ;
   CompileJavaVerbose: string ;
   AdditionalJavaCompilerOptions: string ;
   AllNative: string ;
   HandleExtends: string ;
   AggregateWithParents: string ;
   CppCompiler: string ;
   CppLinker: string ;
   LinkerOptions: string ;
   CompilerDebugOptions: string ;
   CompilerReleaseOptions: string ;
   LinkerReleaseOptions: string ;
   DllName: string ;
   LibName: string ;
   AppliHeaderFileName: string ;
   NameSpaceName: string ;
   DoNotUseNameSpace: string ;
   ExportClasses: string ;
   TheContextMode: string ;
   DebugMode: string ;
   JustSystemClass: string ;
   WarningCount: string ;
   Report: string ;
   DoBackup: string ;
   Dependancies: string ;
   PackageToImport: string ;
   AddClassFor(TheModuleDef:aModuleDef, InTheList:aListOfInstances);
   CheckDependancies();
   DoProduceAllAsSessionBean():boolean;
   ExtractFileNameWithExtensionFromLine(theLine:string, Row:number, DotPos:number):string;
   FindJavaRepresentationForModuleDef(theModuleDef:aModuleDef, Rank:number):aModuleDefJavaRepresentation;
   ContainsModule(theModuleDef:aModuleDef):boolean;
   UpdateModuleFromMM(theModule:aModuleDef, Rank:number):aModuleDefJavaRepresentation;
   UpdateFromMM();
   ModifyCurrentModuleRep();
   RemoveFromProduceListNoRefresh(theModuleDef:aModuleDef);
   RemoveFromProduceList(theModuleDef:aModuleDef);
   RemoveFromProduceListWithDescendantsNoRefresh(theModuleDef:aModuleDef);
   RemoveFromProduceListWithDescendants(theModuleDef:aModuleDef);
   RemoveCurrentFromProduceList();
   RemoveCurrentFromListWithDescendants();
   AddToProduceListNoRefresh(theModuleDef:aModuleDef);
   AddToProduceList(theModuleDef:aModuleDef);
   AddCurrentToProduceList();
   AddToProduceListWithDescendantsNoRefresh(theModuleDef:aModuleDef);
   AddToProduceListWithAncestorsNoRefresh(theModuleDef:aModuleDef);
   AddToProduceListWithDescendants(theModuleDef:aModuleDef);
   AddToProduceListWithAncestors(theModuleDef:aModuleDef);
   AddCurrentToProduceListWithDescendants();
   AddCurrentDescendantsToProduceList();
   AddToProduceListDescendantsOf(TheClassDef:aClassDef);
   SetCurrentAsMain();
   GetOrCreateJavaRepresentationFromModuleDef(theModuleDef:aModuleDef):aEntityJavaRepresentation;
   ComputeJavaProductionDirectory():string;
   UpdateAllOptionsFromJavaSourcePath(theNewPath:string);
   UpdateAllOptionsFromPackageName(theNewName:string);
   UpdatePackageName();
   UpdateGenEJBFromName();
   UpdateJarFileFromName();
   UpDateAllOptionsFromName(theNewName:string);
   Init();
   InitAfterLoad();
   InitAfterNewVersion();
   isUserPackageNameValid():boolean;
   GetFullInitName():string;
   FindJavaEntityFromName(Name:string):aModuleDefJavaRepresentation;
   InteractAsText();
   DeleteClassesWhitchAreInModule(InThisList:aListOfInstances);
   ShowPopUpForClassCreation(curDef:aClassDef);
   ShowPopUpForModuleCreation(curDef:aModuleDef);
   ShowPopForClassModification();
   ShowPopForModuleModification();
   AppliVersion():string;
   PackageNameForEJB():string;
   BrutalForceInitFieldsFor(theModuleRep:aModuleDefJavaRepresentation);
   BrutalForceInit();
   InitReport();
   ReportWarning(Warning:string);
   CloseReport();
   Make();
   Run();
   LoadSystemTypes();
   MustCheckVarHasChanged();
   AddOwnerForType(theType:aType, InTheList:aListOfInstances);
   AddUsesForNativeMethod(CurMethod:aMethodDesc, InTheList:aListOfInstances);
   AddUsesFor(TheModuleDef:aModuleDef, InTheList:aListOfInstances);
   AddDescendantsFor(TheClassDef:aClassDef, InTheList:aListOfInstances);
   AddAncestorsFor(TheClassDef:aClassDef, InTheList:aListOfInstances);
   DisplayDependancies();
}
declare class aJavaEntitiesRole extends aSingleRoleType {
   IsNotInListOfPackage(theModuleDef:aModuleDef, theJavaPackage:aJavaPackage):boolean;
   IsDroppedObjectUsable();
   NewInstanceFromDroppedObject();
   AskForActions();
}
declare class aListofXXXProducer extends aJavaProducer {
   packageName: string ;
   justFileName: string ;
   FileName: string ;
   myClassName: string ;
   myAcceptedClassDef: string ;
   myAcceptedClassDefs: string ;
   condition: string ;
   isForSingleRole: string ;
   Name();
   buildCondition();
   ProduceConstructor(where:aJavaExportText);
   ProduceGetAt(where:aJavaExportText);
   ProduceGetLast(where:aJavaExportText);
   ProduceGetLastObject(where:aJavaExportText);
   ProduceGetList(where:aJavaExportText);
   ProduceGetObjectAt(where:aJavaExportText);
   ProduceEquals(where:aJavaExportText);
   ProduceGetRemoteInterfaceForThisId(where:aJavaExportText);
   ProduceHashCode(where:aJavaExportText);
   ProduceRefLookUp(where:aJavaExportText);
   addRestOfTheCode(where:aJavaExportText);
   ProduceText(theProducedText:aJavaExportText);
   ProduceListOf();
   Init();
   Terminate();
}
declare class aJavaExportText extends aProducedText {
   setFileName(name:string);
   beginDocument();
   canBreakLineWith();
   OpenScope();
   CloseScope();
   WritelnIndent(s:string);
   WritelnUnIndent(s:string);
   GetSum():number;
   ComputeCheckSumOnLine(CurrentSum:number, CurrentLine:string):number;
   CheckSum():boolean;
   SumLine(Sum:number):string;
   flushWithCheckSum();
}
declare class aIROpNodeJavaProducer extends aJavaProducer {
   GetGoodValue():string;
   ProduceEvaluateAsString(where:string, options:string);
   ProduceAsStatement(where:string, options:string);
   ProduceEvaluate(where:string, options:string);
   ProduceGet(where:aJavaExportText, options:string);
   ProduceAsString(where:aJavaExportText, options:string);
   canBeInOutArg():boolean;
   asTypeProducer():aTypeJavaProducer;
   canBeLValue():boolean;
   ProduceAssign(where:string, options:string, theRValue:aIROpNodeJavaProducer);
   ProduceSetAssign(where:string, options:string, theRValue:aIROpNodeJavaProducer);
   isInheritedCall():boolean;
   JavaPriority():string;
   ProduceEvaluateCheckPriority(where:string, options:string, OpProducer:aIROpNodeJavaProducer, isLEQ:boolean);
   evaluatesToNil():boolean;
   evaluatesToMinusOne():boolean;
   evaluatesToOne():boolean;
   evaluatesToAnUIAgent():boolean;
   evaluatesToThing():boolean;
   matchesParm(thisParm:aParameterDesc):boolean;
   GetJavaDataType():string;
   CreateInstantSet(where:aJavaExportText);
   getType(where:aJavaExportText):aType;
   ProduceSet(where:aJavaExportText, options:string);
   ThrowsException():boolean;
}
declare class aTypeJavaProducer extends aEntityJavaProducer {
   IsToBeProducedAsSessionBean():boolean;
   TypeJavaName():string;
   DefaultValue():string;
   DefaultReturnValue():string;
   canBeLValue():boolean;
   IsProducibleForPureJava():boolean;
   IsProducibleForJNI():boolean;
   ProduceSizeOf(where:aJavaExportText, options:string);
   GetFQNameForType(options:string):string;
   GetFQNameForFileType(options:string):string;
   GetFQFileName():string;
   GetFQName():string;
   ProduceBanner(where:aJavaExportText, options:string);
   ProducePackage(where:aJavaExportText, options:string);
   ProduceImports(where:aJavaExportText, options:string);
   ProduceFileImplements(theFile:aJavaExportText, options:string);
   ProduceFileBanner(theFile:aJavaExportText, options:string);
   ProduceFileClassContent(where:aJavaExportText, options:string);
   ProduceFile(where:aJavaExportText, options:string);
   ProduceVariableDeclaration(where:aJavaExportText, VariableName:string);
   Produce(where:aJavaExportText, options:string);
   ProduceSimple(where:aJavaExportText, options:string);
   JNIToWydeCast(CodeToCast:string):string;
   JNIType(Referenced:boolean):string;
   JNITypeAsLetter():string;
   ZeroForJNIType():string;
   WrapperName():string;
   WrapperTypeName():string;
   BaseWrapperTypeName():string;
   ProducePrototypeForEJB(where:aProducedText, CurParameterDescProducer:aParameterDescJavaProducer);
   ProduceWrapper(where:aJavaExportText, options:string);
   ProduceWrapperDeclarationFor(where:aJavaExportText, theParameterName:string);
   WrapperInFunction(theParam:string):string;
   WrapperOutFunction():string;
   TypeNameForRecordFunc():string;
   RecordVarInFunction():string;
   RecordVarOutFunction():string;
   ProduceWrapperFeedBack(where:aJavaExportText, theParameterName:string);
   ProduceAssign(where:aJavaExportText, options:string, LProducer:aIROpNodeJavaProducer, RProducer:aIROpNodeJavaProducer);
   ProduceNew(where:aJavaExportText, options:string, OpProducer:aIROpNodeJavaProducer);
   ProduceForEach(where:aJavaExportText, options:string, itemProducer:aIROpNodeJavaProducer, domainProducer:aIROpNodeJavaProducer, firstStatement:aIRStatement, isDown:boolean, userCounterProducer:aIROpNodeJavaProducer);
   ProduceOrd(where:string, options:string, OpProducer:aIROpNodeJavaProducer);
   ProduceMethodInContent(where:aProducedText, theVarProducer:aVarDescJavaProducer, VarAccessString:string);
   ProduceMethodOutContent(where:aProducedText, theVarProducer:aVarDescJavaProducer, VarAccessString:string);
   ProduceFieldID(where:aProducedText, theVarName:string);
   ProduceRecordInContent(where:aProducedText, VarOwner:string, theParamName:string, theRecordVarProducer:aVarDescJavaProducer);
   ProduceRecordIn(where:aProducedText, theRecordDescProducer:aRecordDescJavaProducer, VarOwner:string, theRecordVarProducer:aVarDescJavaProducer, theParamName:string);
   ProduceRecordOutContent(where:aProducedText, VarOwner:string, theParamName:string, theRecordVarProducer:aVarDescJavaProducer, VarAccessString:string);
   ProduceRecordOut(where:aProducedText, theRecordDescProducer:aRecordDescJavaProducer, VarOwner:string, theRecordVarProducer:aVarDescJavaProducer, theParamName:string, VarAccessString:string);
   ProduceMethodContent(where:aProducedText, CallString:string, ForClass:boolean);
   WrapperJNIGetFunction():string;
   WrapperJNISetFunction():string;
   ProduceInOutParameterInitialisationForJNI(where:aProducedText, theProducer:aParameterDescJavaProducer);
   ProduceInOutParameterTerminateForJNI(where:aProducedText, theProducer:aParameterDescJavaProducer);
   ProduceStandardParameterInitialisationForJNI(where:aProducedText, theProducer:aParameterDescJavaProducer);
   ProduceParameterInitialisationForJNI(where:aProducedText, theProducer:aParameterDescJavaProducer);
   ProduceStandardParameterTerminateForJNI(where:aProducedText, theProducer:aParameterDescJavaProducer);
   ProduceParameterTerminateForJNI(where:aProducedText, theProducer:aParameterDescJavaProducer);
   ComputeCallStringForJNI(CallString:string, Parameter:aParameterDescJavaProducer):string;
   ConvertFromStringType(thisVar:string):string;
   GetJSPValueAsString(thisVar:string):string;
}
declare class aEntityJavaProducer extends aJavaProducer {
   JavaName():string;
   CppName():string;
   Name();
   Produce(where:aJavaExportText, options:string);
   ProduceJNI(where:aJavaExportText, options:string);
   ScenarioNameForFile():string;
}
declare class aVarDescJavaProducer extends aIdentifierDescJavaProducer {
   Produce(where:aJavaExportText, options:string);
   ProduceAssignement(where:aJavaExportText, options:string):string;
   produceDefaultValue(where:aJavaExportText, options:string);
   produceVariable(where:aJavaExportText, options:string, myVarDescProducer:aVarDescJavaProducer, varAdress:string, myObjectasString:string, myOwner:aEntityJavaProducer);
}
declare class aIdentifierDescJavaProducer extends aEntityJavaProducer {
   IdentifierName():string;
   asTypeProducer():aTypeJavaProducer;
   Produce();
   ProduceEvaluate(where:aJavaExportText, options:string);
   canBeInOutArg():boolean;
   IsProducibleForPureJava():boolean;
   IsProducibleForJNI():boolean;
   canBeLValue():boolean;
}
declare class aReferenceTypeJavaProducer extends aTypeJavaProducer {
   TypeJavaName();
}
declare class aRoleTypeJavaProducer extends aEntityJavaProducer {
   AcceptedClassProducer():aClassDefJavaProducer;
   AcceptedClassName():string;
}
declare class aClassDefJavaProducer extends aModuleDefJavaProducer {
   TypeJavaName();
   canBeLValue();
   Produce(where:aJavaExportText, options:string);
   ProduceClone();
   ProduceHeaderExtends();
   ProduceVariables();
   ProduceConstructor(where:aJavaExportText, options:string);
   ProduceMethods();
   isForClass();
   ProduceMethodInContent();
   ProduceMethodOutContent();
   ProduceStandardParameterInitialisationForJNI();
   ProduceMethodContent();
   JNIToWydeCast();
   ProduceInOutParameterInitialisationForJNI();
   ProduceInOutParameterTerminateForJNI();
   ComputeCallStringForJNI();
   ProduceRecordInContent();
   ProduceRecordOutContent();
   AccessOutVarFor(where:aJavaExportText, ResultName:string, InstanceName:string, VarName:string);
   FillDepandenciesListFor();
   GetJSPValueAsString();
}
declare class aModuleDefJavaProducer extends aRecordDescJavaProducer {
   EntitiesToProduce: string ;
   InitExistsInPureJava: string ;
   AddUses(theModuleDef:aModuleDef, Depandencies:aListOfInstances);
   FillDepandenciesListFor(theModuleDef:aModuleDef, Depandencies:aListOfInstances);
   ProduceImportSystem(where:aJavaExportText, ModuleDef:aModuleDef, ProductionStyle:string);
   ProduceImports();
   isForClass();
   ProduceLoadDll(where:aJavaExportText, options:string);
   ProduceInit(where:aJavaExportText, options:string);
   WriteMethods(where:aJavaExportText, options:string);
   ProduceMethods();
   ProduceTypes(where:aJavaExportText, options:string);
   ProduceConstants(where:aJavaExportText, options:string);
   ProduceClone(where:aJavaExportText, options:string);
   ProduceJava(where:aJavaExportText, options:string);
   ProduceRemoteInterface();
   ProduceHomeInterface();
   ProduceInterfaceManager();
   ProduceSelf(where:aProducedText);
   ProducePrototypesEJB(where:aProducedText, options:string);
   ProduceImplemsEJB(where:aJavaExportText, options:string);
   ProduceReportEventEJB(where:aJavaExportText, options:string);
   ProduceJNI();
   ProduceClasses(where:aJavaExportText, options:string);
   Produce(where:aJavaExportText, options:string);
   IsAnAbstractClass():boolean;
   ProduceHeaderClassNameModifiers();
   IsProducibleForPureJava();
   IsProducibleForJNI();
   GetFQNameForType();
}
declare class aRecordDescJavaProducer extends aTypeJavaProducer {
   isForClass():boolean;
   ProduceImports();
   ProduceHeaderClassNameModifiers(where:aJavaExportText, options:string);
   ProduceHeaderClassName(where:aJavaExportText, options:string);
   ProduceHeaderExtends(where:aJavaExportText, options:string);
   ProduceHeaderImplements(where:aJavaExportText, options:string);
   ProduceHeader(where:aJavaExportText, options:string);
   TypeJavaName();
   canBeLValue();
   ProduceCloneOf(Variable:aVarDesc, where:aJavaExportText);
   ProduceCloneMethod(where:aJavaExportText);
   ProduceMethods(where:aJavaExportText, options:string);
   WriteVariablesInSource(where:aJavaExportText, options:string);
   ProduceVariables(where:aJavaExportText, options:string);
   Produce(where:aJavaExportText, options:string);
   GetInterfaceCommand():string;
   ProduceNew();
   ProduceBrainNew(where:aJavaExportText, VarName:string);
   GetFQNameForType();
   IsProducibleForPureJava();
   IsProducibleForJNI();
   JavaName();
   JavaOrEJBName():string;
   JNITypeAsLetter();
   ProduceMethodInContentForInners(where:aProducedText, theVarProducer:aVarDescJavaProducer, VarAccessString:string, theParamName:string):string;
   ProduceMethodInContent();
   TmpFor(Identifier:string):string;
   ProduceMethodOutContentNoReturn(where:aProducedText, theVarProducer:aVarDescJavaProducer, VarAccessString:string):string;
   ProduceMethodOutContent();
   ProduceRecordInContent();
   ProduceRecordOutContent();
   ProduceStandardParameterInitialisationForJNI();
   ProduceStandardParameterTerminateForJNI();
   ProduceInOutParameterInitialisationForJNI();
   ProduceInOutParameterTerminateForJNI();
   ComputeCallStringForJNI();
   ProduceMethodContent();
   IsToBeProducedAsSessionBean();
   ProducePrototypeForEJB();
   ProduceWrapper();
}
declare class aVarDescJavaRepScenAgent extends aUIAgent {
   GetName: string ;
   _Result: string ;
   DoProducePureJavaAccessor: string ;
   ToProducePureJava: string ;
}
declare class aVarDescJavaRepresentation extends aEntityJavaRepresentation {
   ToProducePureJava: string ;
   DoProduceNativeAccessor: string ;
   DoProduceStandardAccessor: string ;
   DoAccessWithAccessor: string ;
   Rank: string ;
   IsToBeProducedPureJava():boolean;
   IsToUseNativeAccessor():boolean;
   FinalizeInit();
   AddInAppropriateListOf(theRep:aRecordDescJavaRepresentation):boolean;
   GetName():string;
   SetHidden(IsHidden:boolean):boolean;
   StringExtract();
}
declare class aMethodDescJavaRepScenAgent extends aUIAgent {
   IsMain: string ;
   Prototype: string ;
   _Result: string ;
   ToProducePureJava: string ;
   ToProducePureJava_Selected(SelectedRank:number):number;
   LoadValue();
}
declare class aMethodDescJavaRepresentation extends aEntityJavaRepresentation {
   ToProducePureJava: string ;
   IsMain: string ;
   Rank: string ;
   IsToBeProducedPureJava():boolean;
   InitFromMM();
   AddInAppropriateListOf(theRep:aModuleDefJavaRepresentation):boolean;
   Prototype():string;
   SetMethodPureJava(AsPureJava:boolean);
}
declare class aTypeJavaRepresentation extends aEntityJavaRepresentation {
   InitFromMM();
}
declare class aConstDescJavaRepresentation extends aEntityJavaRepresentation {
   AddInAppropriateListOf(theRep:aModuleDefJavaRepresentation):boolean;
}
declare class aScenarioJavaRepresentation extends aEntityJavaRepresentation {
   AddInAppropriateListOf(theRep:aTypeJavaRepresentation):boolean;
}
declare class aColMapRole extends aSingleRoleType {
   ModifyThisObject();
}
declare class aSubRangeTypeJavaProducer extends aIntTypeJavaProducer {
   DefaultValue();
   DefaultReturnValue();
   TypeJavaName();
   findElementType():string;
   getBaseType():aType;
   findMinAndMaxRanges(minValue:number, maxValue:number);
   GetFQNameForType();
   ProduceArraySize(forclass:boolean):string;
   ProduceFirst();
   ProduceLast();
   JNIType();
}
declare class aIntTypeJavaProducer extends aBasicTypeJavaProducer {
   TypeJavaName();
   DefaultValue();
   DefaultReturnValue();
   WrapperName();
   ProduceFirst();
   ProduceLast();
   ProduceSucc(where:aJavaExportText, OpProducer:aIROpNodeJavaProducer);
   ProducePred(where:aJavaExportText, OpProducer:aIROpNodeJavaProducer);
   WrapperJNIGetFunction();
   WrapperJNISetFunction();
   JNIType();
   ZeroForJNIType();
   IsProducibleForPureJava();
   IsProducibleForJNI();
   JNITypeAsLetter();
   ConvertFromStringType();
}
declare class aBasicTypeJavaProducer extends aTypeJavaProducer {
   ProduceFirst(where:aJavaExportText, options:string);
   ProduceLast(where:aJavaExportText, options:string);
   DefaultValue();
   DefaultReturnValue();
   ProduceSizeOf();
   JNIToWydeCast();
}
declare class aMethodDescJavaProducer extends aIdentifierDescJavaProducer {
   TmpText: string ;
   Native: string ;
   IsConstructor: string ;
   DoNeedToProduceMethod():boolean;
   IsProducibleForPureJava();
   IsProducibleForJNI();
   IsAbstract():boolean;
   IsToBeProducedPureJava():boolean;
   ProduceModifiers(where:aJavaExportText, options:string);
   ProduceClassOfMethodCall(where:aJavaExportText, options:string, InstanceProducer:aIROpNodeJavaProducer);
   ProduceCallFirstPass(where:aJavaExportText, options:string, instanceProducer:aIROpNodeJavaProducer, theArgs:aList);
   ProduceCall(where:aJavaExportText, options:string, instanceProducer:aIROpNodeJavaProducer, theArgs:aList);
   ProduceCallThirdPass(where:aJavaExportText, options:string, instanceProducer:aIROpNodeJavaProducer, theArgs:aList);
   ProduceRemoteException(where:aJavaExportText);
   ProducePureJava(where:aJavaExportText, options:string);
   ProduceNativeCode(where:aJavaExportText, options:string);
   Produce(where:aJavaExportText, options:string);
   ProducePrototypeForJNI(where:aProducedText, options:string);
   ProduceJNI(where:aProducedText, options:string);
}
declare class aParameterReporter extends aIRProcessor {
   theText: string ;
   curStatement: string ;
   curMethod: string ;
   curModule: string ;
   listOfPushParams: string ;
   HandleClass();
   HandleMethod();
   HandleStatement();
   HandleOpNode();
   TryIt();
   listOfPushParamsInCall(theOp:aIROpNode):aListOfInstances;
}
declare class aIROpCallJavaProducer extends aIROpNodeJavaProducer {
   ProduceFirstPass();
   ProduceThirdPass();
   JavaPriority();
   ProduceEvaluate();
   ProduceAsStatement();
   ThrowsException();
}
declare class aParameterDescJavaProducer extends aVarDescJavaProducer {
   Produce(where:aJavaExportText, options:string);
   BindInOutParameterToLocalVar(where:aJavaExportText, options:string, forThisMethodDesc:aMethodDesc);
   BindLocalVarToInOutParameter(where:aJavaExportText, options:string, forThisMethodDesc:aMethodDesc);
   ProduceInitialisationForEJB(where:aProducedText);
   ProduceTerminateForEJB(where:aProducedText);
   ProduceEvaluate();
   IsProducibleForPureJava();
   IsProducibleForJNI();
}
declare class aJSPText extends aEntity {
   myFileName: string ;
   ScriptContent: string ;
   PageContent: string ;
   FormContent: string ;
}
declare class aMethodTypeJavaProducer extends aTypeJavaProducer {
   IsAnOverride: string ;
   GetMethodName():string;
   GetClassName(theMethodDesc:aMethodDesc):string;
   GetFQNameForType(options:aMethodDesc):string;
   ThrowsException():boolean;
   ProducePrototype(where:aJavaExportText, options:string, theMethodDescProducer:aMethodDescJavaProducer);
   BindParametersToLocalVars(where:aJavaExportText, options:string, forThisMethodDesc:aMethodDesc);
   BindLocalVarsToParameters(where:aJavaExportText, options:string, forThisMethodDesc:aMethodDesc);
   IsEJBProducible():boolean;
   ProduceLocalsInitialisationForEJB(where:aProducedText, RankToStart:number);
   ProduceLocalsTerminateForEJB(where:aProducedText, RankToStart:number);
   CallStringForEJB(theMethodProducer:aMethodDescJavaProducer, RankToStart:number, ForClass:boolean):string;
   isMethodProducibleForPureJava(theMethodDescProducer:aMethodDescJavaProducer):boolean;
   isMethodProducibleForNativeCode(theMethodDescProducer:aMethodDescJavaProducer):boolean;
   GetJSPValueAsString();
}
declare class EJBProducerAsMdiAgent extends aOpenWhereClosedUIAgent {
   EJBMapperCommentsAndPackages: string ;
   ProgessStatusBar: string ;
   NotifyTerminate();
}
declare class JavaPackagesAgent extends aUIAgent {
   myJavaPackages: string ;
   myJavaPackages001: string ;
   FolderForTopOkCancel: string ;
   myJavaPackages_Selected(SelectedRank:number):number;
   LoadValue();
}
declare class JavaOutTextAgent extends aUIAgent {
   theConsole: string ;
   OutText: string ;
   OutText_ButtonDblClk(No:number, X:number, Y:number):number;
}
declare class EJBMapperCommentsAndPackagesAgent extends aSplitViewAgent {
}
declare class EJBProducerToolBarAgent extends aToolBarUIAgent {
   SaveSaveAndCloseClose: string ;
}
declare class GetTextFromFileScenAgent extends aUIAgent {
   GetTextFromName: string ;
   NotifyCheck();
}
declare class ProgessStatusBarAgent extends aToolBarUIAgent {
   ProgressBar: string ;
}
declare class aEJBProducer extends aEntity {
   myJavaPackages: string ;
   CurrentPackage: string ;
   JavaClassRepresentationsToConsult: string ;
   AdditionnalJavaClassesProduced: string ;
   theJavaFactory: string ;
   theConsole: string ;
   inBatch: string ;
   LocalHostName: string ;
   theFileToDisplay: string ;
   OptionText: string ;
   CppProductionPath: string ;
   ProgressBar: string ;
   InitConsole();
   ClearConsole();
   BlankAllTexts();
   WriteLnInOutText(theString:string);
   ExecuteCommand(theCommand:string);
   StringExtract();
   InitDefault();
   Init();
   InitAfterNewVersion();
   InitAfterLoad();
   IsSystemCloseAccepted();
   InitFactory();
   GetNameFromLine(theLine:string, CurPos:number):string;
   GetTextFromName():string;
   GetFileNameAndExtensionFrom(FullName:string, FileName:string, Extension:string);
   IsAJavaFile(theName:string, DotPos:number):boolean;
   GetPackageFrom(CurY:number):aJavaPackage;
   LineExecuted(theUIAgent:aUIAgent);
   SetCurrentPackage(thePackage:aJavaPackage);
   JavaRepresentationForModuleDef(theModuleDef:aModuleDef):aModuleDefJavaRepresentation;
   JavaPackageNameForModuleDefFromListBut(theModuleDef:aModuleDef, thePackage:aJavaPackage):string;
   AppendInConsultList(theClassRep:aModuleDefJavaRepresentation);
   ProgressOnProgressBar(rank:number, range:number);
   SetFullProgressBar();
   GenerateJava(theJavaPackage:aJavaPackage);
   CompileJava(theJavaPackage:aJavaPackage);
   EraseJavaFiles(theJavaPackage:aJavaPackage);
   ProduceJS();
   InitJSPProduction();
   TerminateJSPProduction();
   ProduceControls(ScenarioProducer:aScenarioJavaProducer);
   ProduceControlsHandle(ScenarioProducer:aScenarioJavaProducer);
   InitJSPProducerForModule(CurClass:aClassDef);
   TerminateJSPProducerForModule(CurClass:aClassDef);
   GenerateJSP(theJavaPackage:aJavaPackage);
   FirstDirOfPackage():string;
   GenerateJarFile(theJavaPackage:aJavaPackage);
   IsItToGenerate(CurModuleDef:aModuleDef):boolean;
   PutInList(theModule:aModuleDef, InThisList:aListOfInstances, ForHeader:boolean):boolean;
   GetHeaderListToProduce(theModule:aModuleDef, InThisList:aListOfInstances);
   DeleteClassesWhitchAreInModule(InThisList:aListOfInstances);
   CreateAppliHeaderH(theJavaPackage:aJavaPackage);
   HGeneration(theJavaPackage:aJavaPackage);
   GenerateHeader(theJavaPackage:aJavaPackage);
   ProduceJNI(theJavaPackage:aJavaPackage);
   Compile(theJavaPackage:aJavaPackage);
   WriteOption(Option:string);
   SaveOptionToFile(theJavaPackage:aJavaPackage):string;
   EmptyOption();
   Link(theJavaPackage:aJavaPackage);
   Backup(theJavaPackage:aJavaPackage);
   Make(theJavaPackage:aJavaPackage);
   Run(MainClassName:string);
   AddPackage(ProjectName:string, PackageName:string):aJavaPackage;
   RebuildSysEJB();
   DoBatchBuild():number;
   BatchBuild():number;
   RankOfPackage(theName:string):number;
   JavaPackageFromName(theName:string, ItsRank:number):aJavaPackage;
   DoBatchBuildExistingProject():number;
   BatchBuildExistingProject():number;
   DoCompilePureJavaSystemEJB(theJavaPackage:aJavaPackage);
   ProduceSystemModDefPackage();
   DoBatchBuildSystemEJB():number;
   BatchBuildSystemEJB():number;
   HasChanged();
}
declare class aJavaProducerFactory extends aProducerFactory {
   Init();
}
declare class aInstanceVarDescJavaProducer extends aVarDescJavaProducer {
   ReplaceByOverride: string ;
   ForModule():boolean;
   ProduceModifiersForAccessors(where:aJavaExportText, ForModule:boolean, ForInterface:boolean, ForNative:boolean);
   ProduceSetPrototype(where:aJavaExportText, ForModule:boolean, ForInterface:boolean, ForNative:boolean);
   ProduceGetPrototype(where:aJavaExportText, ForModule:boolean, ForInterface:boolean, ForNative:boolean);
   DoProduceNativeAccessors(where:aJavaExportText, ForModule:boolean, ForInterface:boolean);
   DoProduceStandardAccessors(where:aJavaExportText, ForModule:boolean, ForInterface:boolean);
   Produce(where:aJavaExportText, options:string);
   ProduceAssignement();
   produceDefaultValue();
   ProduceProtoIn(where:aProducedText, options:string);
   ProduceProtoOut(where:aProducedText, options:string);
   ProduceMethodInOutHeader(where:aProducedText, ForClass:boolean);
   ProduceMethodIn(where:aProducedText, ForClass:boolean, VarAccessString:string);
   ProduceMethodOut(where:aProducedText, ForClass:boolean, VarAccessString:string);
   GetVarAccessString():string;
   ProduceJNI(where:aProducedText, options:string);
   ProduceEvaluate();
   canBeLValue();
   IsProducibleForPureJava();
   IsProducibleForJNI();
}
declare class aReftoTypeJavaProducer extends aReferenceTypeJavaProducer {
   myClassDef: string ;
   ProduceInLine(where:aJavaExportText, options:string);
   TypeJavaName();
   DefaultReturnValue();
   ProduceMethodInContent();
   ProduceMethodOutContent();
   IsToBeProducedAsSessionBean();
   GetJSPValueAsString();
}
declare class aRefToXXXProducer extends aJavaProducer {
}
declare class aListOfInstancesTypeJavaProducer extends aListofReftosTypeJavaProducer {
   DefaultReturnValue();
   TypeJavaName();
   JavaName();
}
/**
*most of the modifications done in this class are to cater for multirole type 
conact srivatsa for any details
*/
declare class aListofReftosTypeJavaProducer extends aReferenceTypeJavaProducer {
   Name();
   TypeJavaName();
   DefaultValue();
   DefaultReturnValue();
   canBeLValue();
   ProduceAssign();
   ProduceMethodInContent();
   ProduceMethodOutContent();
   JNIToWydeCast();
}
declare class aIROpDereferenceJavaProducer extends aIROpBasicUnaryJavaProducer {
   Upcase(str:string):string;
   JavaPriority();
   ProduceEvaluate();
   ProduceEvaluateAsSet(where:aJavaExportText, options:string);
}
declare class aIROpBasicUnaryJavaProducer extends aIROpNodeJavaProducer {
   ProduceFirstPass();
   ProduceThirdPass();
   ProduceEvaluate(where:aJavaExportText, options:string);
   ProduceEvaluateAsString(where:aJavaExportText, options:string);
   JavaPriority();
   ThrowsException();
}
declare class aIROpADDRJavaProducer extends aIROpBasicUnaryJavaProducer {
   JavaPriority();
   ProduceEvaluate();
}
declare class aIROpBinaryJavaProducer extends aIROpNodeJavaProducer {
   JavaOperator():string;
   ProduceFirstPass();
   ProduceThirdPass();
   CheckLeftOperand(where:aJavaExportText):boolean;
   GetLAccessString(where:aJavaExportText):boolean;
   GetRAccessString(where:aJavaExportText);
   ProduceEvaluate();
   ThrowsException();
}
declare class aCstringTypeJavaProducer extends aBasicTypeJavaProducer {
   TypeJavaName();
   DefaultValue();
   DefaultReturnValue();
   ProduceNew();
   ProduceMethodInContent();
   ProduceMethodOutContent();
   ProduceStandardParameterInitialisationForJNI();
   ProduceStandardParameterTerminateForJNI();
   ComputeCallStringForJNI();
   ProduceMethodContent();
   WrapperName();
   JNIType();
   ProduceInOutParameterInitialisationForJNI();
   ProduceInOutParameterTerminateForJNI();
   WrapperJNIGetFunction();
   WrapperJNISetFunction();
   TypeNameForRecordFunc();
   ProduceRecordInContent();
   ProduceRecordOutContent();
   JNITypeAsLetter();
   ConvertFromStringType();
}
declare class aArrayTypeJavaProducer extends aTypeJavaProducer {
   getArrayDefaultRetValue():string;
   TypeJavaName();
   DefaultValue();
   DefaultReturnValue();
   canBeLValue();
   ProduceSizeOf();
   Name();
   ProduceAssign();
   IsProducibleForPureJava();
   IsProducibleForJNI();
}
declare class aIROpIdentifierJavaProducer extends aIROpNodeJavaProducer {
   asTypeProducer();
   canBeLValue();
   evaluatesToThing();
   canBeInOutArg();
   ProduceEvaluate(where:aJavaExportText, options:string);
   GetGoodValue();
   GetJavaDataType();
   getType();
   ProduceAssign();
   ProduceFirstPass();
   ProduceThirdPass();
   ThrowsException();
}
declare class aPointerTypeJavaProducer extends aBasicTypeJavaProducer {
   Produce(where:aJavaExportText, options:string);
   TypeJavaName();
   DefaultValue();
   DefaultReturnValue();
   ProduceNew();
   ProduceStandardParameterInitialisationForJNI();
   ProduceStandardParameterTerminateForJNI();
   ComputeCallStringForJNI();
   ProduceMethodContent();
   JNIType();
   IsProducibleForPureJava();
   IsProducibleForJNI();
}
declare class aIROpSetJavaProducer extends aIROpNodeJavaProducer {
   JavaPriority();
   ProduceEvaluate(where:aJavaExportText, options:string);
}
declare class aOpSetToSetJavaProducer extends aOpConversionJavaProducer {
   ProduceEvaluate();
}
declare class aOpConversionJavaProducer extends aIROpBasicUnaryJavaProducer {
}
declare class aOpCharConstantJavaProducer extends aOpIntConstantJavaProducer {
/**
*Portability Check: OK
*/
   ProduceEvaluate(where:aJavaExportText, options:string);
/**
*Portability Check: OK
*/
   ProduceAsString();
}
declare class aOpIntConstantJavaProducer extends aIROpNodeJavaProducer {
   ProduceAsString();
/**
*Portability Check: OK
*/
   GetGoodValue();
   ProduceEvaluate(where:aJavaExportText, options:string);
/**
*Portability Check: OK
*/
   evaluatesToOne();
}
declare class aZZIncJavaProducer extends aIROpNodeJavaProducer {
   LP: string ;
   RP: string ;
   valStr: string ;
   add: string ;
   ProduceEvaluate(where:aJavaExportText, options:string);
}
declare class aListJavaProducer extends aJavaProducer {
   Produce(where:aJavaExportText, options:string);
   ProduceWithToken(where:aJavaExportText, options:string, myToken:string);
}
declare class aIRChoiceRangeJavaProducer extends aJavaProducer {
   Produce(where:aJavaExportText, options:string);
   ProduceAssign(where:aJavaExportText, options:string, theValueToCompare:aIROpNodeJavaProducer);
}
declare class aIRCaseChoiceJavaProducer extends aJavaProducer {
   Produce(where:aJavaExportText, options:string);
}
declare class aCaseChoiceValueJavaProducer extends aIRChoiceRangeJavaProducer {
   Produce(where:aJavaExportText, options:string);
}
declare class aOpRealConstantJavaProducer extends aIROpNodeJavaProducer {
   ProduceAsString();
   ProduceEvaluate(where:aJavaExportText, options:string);
}
declare class aListOfCaseChoicesJavaProducer extends aListJavaProducer {
   Produce(where:aJavaExportText, options:string);
}
declare class aIrStatementEnumAssignJavaProducer extends aIRStatementAssignJavaProducer {
}
declare class aIrStatementIncByteJavaProducer extends aIrStatementIncJavaProducer {
   Produce(where:aJavaExportText, options:string);
}
declare class aIrStatementDecByteJavaProducer extends aIrStatementDecJavaProducer {
   Produce(where:aJavaExportText, options:string);
}
declare class aJavaTmpVar extends aIROpNodeJavaProducer {
   myType: string ;
   asTypeProducer();
   ProduceEvaluate(where:aJavaExportText, options:string);
}
declare class aZZConstStringJavaProducer extends aIROpNodeJavaProducer {
   value: string ;
   ProduceEvaluate(where:aJavaExportText, options:string);
}
declare class aIROpIntrinsicWithParmsJavaProducer extends aIROpNodeJavaProducer {
   ProduceEvaluate(where:aJavaExportText, options:string);
   ProduceAsStatement();
   ProduceFirstPass();
   ProduceThirdPass();
}
declare class aOpStringConstantJavaProducer extends aIROpNodeJavaProducer {
   ProduceAsString();
   ProduceEvaluate(where:aJavaExportText, options:string);
}
declare class aIROpIntrinsicModuleNameJavaProducer extends aIROpNodeJavaProducer {
   ProduceEvaluate(where:aJavaExportText, options:string);
}
declare class aIROpIntrinsicMethodNameJavaProducer extends aIROpNodeJavaProducer {
   ProduceEvaluate(where:aJavaExportText, options:string);
}
declare class aIROpScenarioSelectJavaProducer extends aIROpBasicUnaryJavaProducer {
   ProduceEvaluate(where:aJavaExportText, options:string);
}
declare class aIROpInt_ChsJavaProducer extends aIROpBasicUnaryJavaProducer {
   JavaPriority();
   ProduceEvaluate(where:aJavaExportText, options:string);
   evaluatesToMinusOne();
}
declare class aIROpBIT_NOTJavaProducer extends aIROpBasicUnaryJavaProducer {
   JavaPriority();
   ProduceEvaluate(where:aJavaExportText, options:string);
}
declare class aIROpBOL_NOTJavaProducer extends aIROpBasicUnaryJavaProducer {
   JavaPriority();
   ProduceEvaluate(where:aJavaExportText, options:string);
}
declare class aIROpNotNilJavaProducer extends aIROpBasicUnaryJavaProducer {
   JavaPriority();
   ProduceEvaluate(where:aJavaExportText, options:string);
}
declare class aOpCallRetInstanceJavaProducer extends aIROpBasicUnaryJavaProducer {
}
declare class aOpPushParameterJavaProducer extends aIROpBasicUnaryJavaProducer {
   canBeInOutArg();
   matchesParm();
   getType();
}
declare class aIROpIntrinsicWithParmJavaProducer extends aIROpBasicUnaryJavaProducer {
   ProduceEvaluate();
}
declare class aIROpTypeOfJavaProducer extends aIROpBasicUnaryJavaProducer {
   asTypeProducer();
   ProduceEvaluate(where:aJavaExportText, options:string);
}
declare class aIROpCastJavaProducer extends aIROpBasicUnaryJavaProducer {
   JavaPriority();
   ProduceEvaluate(where:aJavaExportText, options:string);
}
declare class aOpWriteElementJavaProducer extends aIROpBasicUnaryJavaProducer {
   Produce();
   ProduceAsString();
   ProduceEvaluateAsString(where:aJavaExportText, options:string);
}
declare class aOpMakeSetJavaProducer extends aIROpBasicUnaryJavaProducer {
   ProduceEvaluate();
}
declare class aOpCallRetSetJavaProducer extends aIROpBasicUnaryJavaProducer {
   ProduceEvaluate();
}
declare class aOpAbsIntJavaProducer extends aIROpBasicUnaryJavaProducer {
   ProduceEvaluate();
}
declare class aOpSqrIntJavaProducer extends aIROpBasicUnaryJavaProducer {
   ProduceEvaluate();
}
declare class aOpSqrRootJavaProducer extends aIROpBasicUnaryJavaProducer {
   ProduceEvaluate();
}
declare class aIROpUnaryJavaProducer extends aIROpBasicUnaryJavaProducer {
}
declare class aIROpRea_ChsJavaProducer extends aIROpInt_ChsJavaProducer {
}
declare class aOpPushMySelfJavaProducer extends aOpPushParameterJavaProducer {
   canBeInOutArg();
   evaluatesToAnUIAgent();
   ProduceEvaluate(where:aJavaExportText, options:string);
   matchesParm();
}
declare class aOpPushRefToListOfJavaProducer extends aOpPushParameterJavaProducer {
   getType();
}
declare class aIROpIntrinsicLengthJavaProducer extends aIROpIntrinsicWithParmJavaProducer {
   ProduceEvaluate(where:aJavaExportText, options:string);
}
declare class aIROpIntrinsicFirstJavaProducer extends aIROpIntrinsicWithParmJavaProducer {
   ProduceEvaluate();
}
declare class aIROpIntrinsicLastJavaProducer extends aIROpIntrinsicWithParmJavaProducer {
   ProduceEvaluate();
}
declare class aIROpIntrinsicSuccJavaProducer extends aIROpIntrinsicWithParmJavaProducer {
   ProduceEvaluate();
}
declare class aIROpIntrinsicPredJavaProducer extends aIROpIntrinsicWithParmJavaProducer {
   ProduceEvaluate(where:aJavaExportText, options:string);
}
declare class aIROpIntrinsicOrdJavaProducer extends aIROpIntrinsicWithParmJavaProducer {
   ProduceEvaluate();
}
declare class aEnumTypeJavaProducer extends aSubRangeTypeJavaProducer {
   GetFQNameForType();
   TypeJavaName();
   FindSize():number;
   GetFirst():aConstEnum;
   DefaultValue();
   DefaultReturnValue();
   ProduceIntStaticValues(Enumfile:aJavaExportText);
   ProduceMethodValueOf(EnumFile:aJavaExportText);
   ProduceIsInEnum(EnumFile:aJavaExportText);
   ProduceArrayOfValuesMethod(where:aJavaExportText, options:string);
   ProduceSuccMethod(where:aJavaExportText, options:string);
   ProducePredMethod(where:aJavaExportText, options:string);
   ProduceOrdMethod(EnumFile:aJavaExportText, options:string);
   ProduceFileClassContent();
   Produce(where:aJavaExportText, options:string);
   ProduceArraySize();
   findMinAndMaxRanges();
   ProduceFirst();
   ProduceLast();
   ProduceSucc();
   ProducePred();
   ProduceInOutParameterInitialisationForJNI();
   ProduceOrd(where:aJavaExportText, options:string, OpProducer:aIROpNodeJavaProducer);
   JNIType();
   ConvertFromStringType();
   GetJSPValueAsString();
}
declare class aConstEnumJavaProducer extends aConstDescJavaProducer {
   ValueAsInt():string;
   Name();
   Produce(where:aJavaExportText, options:string);
}
declare class aConstDescJavaProducer extends aIdentifierDescJavaProducer {
   IsDefinedInMethod: string ;
   ValueAsCstring():string;
   Produce(where:aJavaExportText, options:string);
}
declare class aIROpIntrinsicChrJavaProducer extends aIROpIntrinsicWithParmJavaProducer {
   ProduceEvaluate();
}
declare class aIROpIntrinsicSizeOfJavaProducer extends aIROpIntrinsicWithParmJavaProducer {
   ProduceEvaluate(where:aJavaExportText, options:string);
}
declare class aIROpIntrinsicSizeOfTypeJavaProducer extends aIROpIntrinsicWithParmJavaProducer {
   ProduceEvaluate(where:aJavaExportText, options:string);
}
declare class aIROpIntrinsicMMEntityJavaProducer extends aIROpIntrinsicWithParmJavaProducer {
   ProduceEvaluate(where:aJavaExportText, options:string);
}
declare class aIROpIntrinsic__LINE__JavaProducer extends aIROpIntrinsicWithParmJavaProducer {
   ProduceEvaluate();
}
declare class aIROpIntrinsicTextLengthJavaProducer extends aIROpIntrinsicLengthJavaProducer {
   ProduceEvaluate();
}
declare class aIROpIntrinsicSequenceLengthJavaProducer extends aIROpIntrinsicLengthJavaProducer {
   ProduceEvaluate(where:aJavaExportText, options:string);
}
declare class aIROpTypeOfInstanceJavaProducer extends aIROpTypeOfJavaProducer {
}
declare class aIROpCastReturnValueJavaProducer extends aIROpCastJavaProducer {
}
declare class aOpAbsRealJavaProducer extends aOpAbsIntJavaProducer {
   ProduceEvaluate();
}
declare class aOpSqrRealJavaProducer extends aOpSqrIntJavaProducer {
   ProduceEvaluate();
}
declare class aOpIntToInt8JavaProducer extends aOpConversionJavaProducer {
}
declare class aIROpC2SJavaProducer extends aIROpUnaryJavaProducer {
/**
*Portability Check: OK
*/
   ProduceEvaluate(where:aJavaExportText, options:string);
}
declare class aIROpCallReturnValueJavaProducer extends aIROpIdentifierJavaProducer {
   ProduceEvaluate();
}
declare class aIROpModuleIdentifierJavaProducer extends aIROpIdentifierJavaProducer {
   evaluatesToAnUIAgent();
   ProduceEvaluate(where:aJavaExportText, options:string);
}
declare class aIROpConstantIdentifierJavaProducer extends aIROpIdentifierJavaProducer {
   evaluatesToNil();
   ProduceEvaluate(where:aJavaExportText, options:string);
}
declare class aIROpEnumIdentifierJavaProducer extends aIROpIdentifierJavaProducer {
   ProduceEvaluate();
}
declare class aIROpSelfJavaProducer extends aIROpIdentifierJavaProducer {
   evaluatesToAnUIAgent();
   asTypeProducer();
   ProduceEvaluate(where:aJavaExportText, options:string);
   getType();
}
declare class aIROpResultJavaProducer extends aIROpIdentifierJavaProducer {
   canBeInOutArg();
   asTypeProducer();
   ProduceEvaluate(where:aJavaExportText, options:string);
   getType();
   canBeLValue();
}
declare class aIROpRecordVariantVarIdentifierJavaProducer extends aIROpIdentifierJavaProducer {
   ProduceEvaluate();
}
declare class aIROpSystemModuleIdentifierJavaProducer extends aIROpModuleIdentifierJavaProducer {
   ProduceEvaluate();
}
declare class aIROpInheritedCallJavaProducer extends aIROpCallJavaProducer {
   isInheritedCall();
   ProduceEvaluate();
   ProduceAsStatement(where:aJavaExportText, options:string);
   ProduceFirstPass();
   ProduceThirdPass();
}
declare class aIROpVirtualCallJavaProducer extends aIROpCallJavaProducer {
   ProduceEvaluate();
}
declare class aIROpStackCallJavaProducer extends aIROpCallJavaProducer {
}
declare class aIROpCallFromAddressJavaProducer extends aIROpCallJavaProducer {
   ProduceFirstPass();
   ProduceThirdPass();
   ProduceEvaluate();
}
declare class aIROpInheritedStackCallJavaProducer extends aIROpInheritedCallJavaProducer {
}
declare class aIROpVirtualStackCallJavaProducer extends aIROpVirtualCallJavaProducer {
}
declare class aIROpStackCallFromAddressJavaProducer extends aIROpStackCallJavaProducer {
   ProduceFirstPass();
   ProduceEvaluate();
}
declare class aOpConcatJavaProducer extends aIROpIntrinsicWithParmsJavaProducer {
   ProduceEvaluate(where:aJavaExportText, options:string);
   Produce(where:aJavaExportText, options:string);
}
declare class aOpInsertJavaProducer extends aIROpIntrinsicWithParmsJavaProducer {
   ProduceEvaluate();
}
declare class aOpSTRJavaProducer extends aIROpIntrinsicWithParmsJavaProducer {
   ProduceEvaluate(where:aJavaExportText, options:string);
}
declare class aOpIntrinsicMemberJavaProducer extends aIROpIntrinsicWithParmsJavaProducer {
   ProduceEvaluate(where:aJavaExportText, options:string);
}
declare class aIROpIntrinsicNewJavaProducer extends aIROpIntrinsicWithParmsJavaProducer {
   ProduceAsStatement(where:aJavaExportText, options:string);
}
declare class aIROpIntrinsicDisposeJavaProducer extends aIROpIntrinsicWithParmsJavaProducer {
   ProduceAsStatement(where:aJavaExportText, options:string);
}
declare class aIROpIntrinsicValJavaProducer extends aIROpIntrinsicWithParmsJavaProducer {
   ProduceEvaluate();
}
declare class aOpFileIOJavaProducer extends aIROpIntrinsicWithParmsJavaProducer {
}
declare class aOpFillcharJavaProducer extends aIROpIntrinsicWithParmsJavaProducer {
}
declare class aOpMoveJavaProducer extends aIROpIntrinsicWithParmsJavaProducer {
}
declare class aOpdeleteJavaProducer extends aIROpIntrinsicWithParmsJavaProducer {
}
declare class aOpIntrinsicMemberFromStringJavaProducer extends aOpIntrinsicMemberJavaProducer {
   ProduceEvaluate(where:aJavaExportText, options:string);
}
declare class aIROpIntrinsicNewRefToJavaProducer extends aIROpIntrinsicNewJavaProducer {
   ProduceAsStatement(where:aJavaExportText, options:string);
}
declare class aIROpIntrinsicNewListOfJavaProducer extends aIROpIntrinsicNewJavaProducer {
   ProduceAsStatement();
}
declare class aIROpIntrinsicNewPtrJavaProducer extends aIROpIntrinsicNewJavaProducer {
   ProduceAsStatement(where:aJavaExportText, options:string);
   ProduceEvaluate();
}
declare class aIROpIntrinsicDisposeRefToJavaProducer extends aIROpIntrinsicDisposeJavaProducer {
}
declare class aIROpIntrinsicDisposeListOfJavaProducer extends aIROpIntrinsicDisposeJavaProducer {
}
declare class aIROpIntrinsicDisposePtrJavaProducer extends aIROpIntrinsicDisposeJavaProducer {
}
declare class aOpWriteTypedJavaProducer extends aOpFileIOJavaProducer {
}
declare class aOpWriteTextJavaProducer extends aOpFileIOJavaProducer {
   ProduceAsStatement(where:aJavaExportText, options:string);
}
declare class aOpReadTypedJavaProducer extends aOpFileIOJavaProducer {
}
declare class aOpReadTextJavaProducer extends aOpFileIOJavaProducer {
}
declare class aIROpPriorityMultiplyJavaProducer extends aIROpBinaryJavaProducer {
   JavaPriority();
}
declare class aIROpPriorityAdditionJavaProducer extends aIROpBinaryJavaProducer {
   JavaPriority();
}
declare class aIROpPriorityRelationalJavaProducer extends aIROpBinaryJavaProducer {
   JavaPriority();
}
declare class aIROpBOL_ANDJavaProducer extends aIROpBinaryJavaProducer {
   JavaPriority();
   JavaOperator();
}
declare class aIROpBOL_ORJavaProducer extends aIROpBinaryJavaProducer {
   JavaPriority();
   JavaOperator();
}
declare class aIROpPrioritySpecialJavaProducer extends aIROpBinaryJavaProducer {
   JavaPriority();
   ProduceEvaluate();
}
declare class aIROpSelectJavaProducer extends aIROpBinaryJavaProducer {
   JavaPriority();
   canBeInOutArg();
   canBeLValue();
   evaluatesToNil();
   IsARefToFieldSelect(LProducer:aIROpNodeJavaProducer, RProducer:aIROpNodeJavaProducer):boolean;
   ProduceSet();
   ProduceEvaluate(where:aJavaExportText, options:string);
   getType();
   ProduceAssign(where:aJavaExportText, options:string, theRValue:aIROpNodeJavaProducer);
   GetGoodValue();
}
declare class aIROpIndexJavaProducer extends aIROpBinaryJavaProducer {
   JavaPriority();
   ProduceEvaluate();
}
declare class aIROpRangeJavaProducer extends aIROpBinaryJavaProducer {
   ProduceEvaluate();
}
declare class aIROpRangeCheckJavaProducer extends aIROpBinaryJavaProducer {
   ProduceEvaluate();
}
declare class aIROpINT_MULJavaProducer extends aIROpPriorityMultiplyJavaProducer {
   JavaOperator();
   ProduceEvaluate(where:aJavaExportText, options:string);
}
declare class aIROpINT_DIVJavaProducer extends aIROpPriorityMultiplyJavaProducer {
   JavaOperator();
   ProduceEvaluate(where:aJavaExportText, options:string);
}
declare class aIROpREA_MULJavaProducer extends aIROpINT_MULJavaProducer {
}
declare class aIROpREA_DIVJavaProducer extends aIROpINT_DIVJavaProducer {
}
declare class aIROpINT_ADDJavaProducer extends aIROpPriorityAdditionJavaProducer {
   JavaOperator();
   ProduceEvaluate(where:aJavaExportText, options:string);
}
declare class aIROpINT_SUBJavaProducer extends aIROpPriorityAdditionJavaProducer {
   JavaOperator();
}
declare class aIROpCSTR_ADDJavaProducer extends aIROpPriorityAdditionJavaProducer {
   JavaOperator();
}
declare class aIROpStr_DAndJavaProducer extends aIROpPriorityAdditionJavaProducer {
   JavaOperator();
}
declare class aIROpIntPtr_AddJavaProducer extends aIROpPriorityAdditionJavaProducer {
   JavaOperator();
}
declare class aIROpPtrPtr_SubJavaProducer extends aIROpPriorityAdditionJavaProducer {
   JavaOperator();
}
declare class aIROpREA_ADDJavaProducer extends aIROpINT_ADDJavaProducer {
}
declare class aIROpREA_SUBJavaProducer extends aIROpINT_SUBJavaProducer {
}
declare class aIROpSTR_ADDJavaProducer extends aIROpCSTR_ADDJavaProducer {
}
declare class aIROpSTR_ADDSJavaProducer extends aIROpCSTR_ADDJavaProducer {
}
declare class aIROpORD_GTJavaProducer extends aIROpPriorityRelationalJavaProducer {
   JavaOperator();
}
declare class aIROpORD_LTJavaProducer extends aIROpPriorityRelationalJavaProducer {
   JavaOperator();
}
declare class aIROpORD_GEJavaProducer extends aIROpPriorityRelationalJavaProducer {
   JavaOperator();
}
declare class aIROpORD_LEJavaProducer extends aIROpPriorityRelationalJavaProducer {
   JavaOperator();
}
declare class aIROpStr_LKJavaProducer extends aIROpPriorityRelationalJavaProducer {
   JavaOperator();
   ProduceEvaluate(where:aJavaExportText, options:string);
}
declare class aIROpEQJavaProducer extends aIROpPriorityRelationalJavaProducer {
   JavaOperator();
   JavaPriority();
   ProduceEvaluateNew(where:aJavaExportText, options:string);
   ProduceEvaluate(where:aJavaExportText, options:string);
}
declare class aIROpNEJavaProducer extends aIROpPriorityRelationalJavaProducer {
   ProduceEvaluate();
   JavaOperator();
}
declare class aIROpREA_GTJavaProducer extends aIROpORD_GTJavaProducer {
}
declare class aIROpSTR_GTJavaProducer extends aIROpORD_GTJavaProducer {
   JavaOperator();
   JavaPriority();
   ProduceEvaluate(where:aJavaExportText, options:string);
}
declare class aIROpREA_LTJavaProducer extends aIROpORD_LTJavaProducer {
}
declare class aIROpSTR_LTJavaProducer extends aIROpORD_LTJavaProducer {
   JavaOperator();
   JavaPriority();
   ProduceEvaluate(where:aJavaExportText, options:string);
}
declare class aIROpREA_GEJavaProducer extends aIROpORD_GEJavaProducer {
}
declare class aIROpSTR_GEJavaProducer extends aIROpORD_GEJavaProducer {
   JavaOperator();
   JavaPriority();
   ProduceEvaluate(where:aJavaExportText, options:string);
}
declare class aIROpREA_LEJavaProducer extends aIROpORD_LEJavaProducer {
}
declare class aIROpSTR_LEJavaProducer extends aIROpORD_LEJavaProducer {
   JavaOperator();
   JavaPriority();
   ProduceEvaluate(where:aJavaExportText, options:string);
}
declare class aIROpStringEQJavaProducer extends aIROpEQJavaProducer {
   JavaOperator();
   JavaPriority();
   ProduceEvaluateNew();
   ProduceEvaluate(where:aJavaExportText, options:string);
}
declare class aIROpStringNEJavaProducer extends aIROpNEJavaProducer {
   JavaOperator();
   JavaPriority();
   ProduceEvaluate();
}
declare class aIROpINT_MODJavaProducer extends aIROpPrioritySpecialJavaProducer {
   JavaOperator();
}
declare class aIROpBIT_ANDJavaProducer extends aIROpPrioritySpecialJavaProducer {
   JavaOperator();
}
declare class aIROpBIT_ORJavaProducer extends aIROpPrioritySpecialJavaProducer {
   JavaOperator();
}
declare class aIROpBIT_XORJavaProducer extends aIROpPrioritySpecialJavaProducer {
   JavaOperator();
}
declare class aIROpBOL_XORJavaProducer extends aIROpPrioritySpecialJavaProducer {
   JavaOperator();
}
declare class aIROpSetMulJavaProducer extends aIROpPrioritySpecialJavaProducer {
   JavaOperator();
   ProduceEvaluate(where:aJavaExportText, options:string);
}
declare class aIROpSetAddJavaProducer extends aIROpPrioritySpecialJavaProducer {
   JavaOperator();
   ProduceEvaluate(where:aJavaExportText, options:string);
}
declare class aIROpSetSubJavaProducer extends aIROpPrioritySpecialJavaProducer {
   JavaOperator();
   ProduceEvaluate(where:aJavaExportText, options:string);
}
declare class aIROpInJavaProducer extends aIROpPrioritySpecialJavaProducer {
   ProduceEvaluate(where:aJavaExportText, options:string);
}
declare class aIROpSetGEJavaProducer extends aIROpPrioritySpecialJavaProducer {
   ProduceEvaluate(where:aJavaExportText, options:string);
}
declare class aIROpSet_LEJavaProducer extends aIROpPrioritySpecialJavaProducer {
   ProduceEvaluate(where:aJavaExportText, options:string);
}
declare class aIROpINT_SHRJavaProducer extends aIROpPrioritySpecialJavaProducer {
   JavaOperator();
}
declare class aIROpINT_SHLJavaProducer extends aIROpPrioritySpecialJavaProducer {
   JavaOperator();
}
declare class aIROpInBigSetJavaProducer extends aIROpInJavaProducer {
   ProduceEvaluate(where:aJavaExportText, options:string);
}
declare class aIROpSelfSelectJavaProducer extends aIROpSelectJavaProducer {
   GetJavaDataType();
}
declare class aIROpRecordSelectJavaProducer extends aIROpSelectJavaProducer {
   canBeInOutArg();
   RecordSeparator(OpProducer:aIROpNodeJavaProducer):string;
   ProduceEvaluate(where:aJavaExportText, options:string);
   ProduceAssign(where:aJavaExportText, options:string, theRValue:aIROpNodeJavaProducer);
}
declare class aIROpRefToSelectJavaProducer extends aIROpSelectJavaProducer {
   ProduceEvaluateAsRefTo(where:aJavaExportText, options:string);
   ProduceAssign(where:aJavaExportText, options:string, theRValue:aIROpNodeJavaProducer);
   ProduceNew(where:aJavaExportText, options:string, AcceptedClassProducer:aClassDefJavaProducer);
}
declare class aModuleVarDescJavaProducer extends aInstanceVarDescJavaProducer {
   ForModule();
   Name();
   GetVarAccessString();
   ProduceProtoIn();
   ProduceProtoOut();
   ProduceMethodInOutHeader();
}
declare class aIROpNameSelectJavaProducer extends aIROpSelectJavaProducer {
   ProduceEvaluate();
}
declare class aIROpArrayIndexJavaProducer extends aIROpIndexJavaProducer {
   ProduceEvaluate();
}
declare class aIROpSequenceIndexJavaProducer extends aIROpIndexJavaProducer {
   ProduceEvaluate();
}
declare class aIROpStringIndexJavaProducer extends aIROpIndexJavaProducer {
   canBeLValue();
   ProduceEvaluate(where:aJavaExportText, options:string);
   ProduceAssign(where:aJavaExportText, options:string, theRValue:aIROpNodeJavaProducer);
}
declare class aIROpListOfIndexJavaProducer extends aIROpIndexJavaProducer {
   canBeLValue();
   ProduceEvaluate();
   ProduceAssign(where:aJavaExportText, options:string, theRValue:aIROpNodeJavaProducer);
}
declare class aOpInt8ConstantJavaProducer extends aOpIntConstantJavaProducer {
   ProduceAsString();
   ProduceEvaluate(where:aJavaExportText, options:string);
}
declare class aOpBoolConstantJavaProducer extends aOpIntConstantJavaProducer {
   ProduceAsString();
/**
*Portability Check: OK
*/
   ProduceEvaluate();
}
declare class aOpPointerConstantJavaProducer extends aOpIntConstantJavaProducer {
   ProduceAsString();
   ProduceEvaluate(where:aJavaExportText, options:string);
}
declare class aMethodImplemJavaProducer extends aEntityJavaProducer {
   IsAnOverride: string ;
   ProduceIncrementVariable(where:aJavaExportText, options:string, FirstStatement:aIRStatement):boolean;
   ProduceSwitchVariable(where:aJavaExportText, options:string, FirstStatement:aIRStatement):boolean;
   ThrowsException():boolean;
   Produce(where:aJavaExportText, options:string);
   ProduceThirdPass();
}
declare class aRenamingTypeJavaProducer extends aTypeJavaProducer {
   myRenamedTypeProducer: string ;
   RenamedTypeProducer():aTypeJavaProducer;
   TypeJavaName();
   DefaultReturnValue();
   DefaultValue();
   IsProducibleForPureJava();
   IsProducibleForJNI();
   canBeLValue();
   ProduceSizeOf();
   GetFQNameForType();
   GetFQNameForFileType();
   GetFQFileName();
   GetFQName();
   ProduceBanner();
   ProducePackage();
   ProduceImports();
   ProduceFileBanner();
   ProduceFileClassContent();
   ProduceFile();
   ProduceVariableDeclaration();
   Produce(where:aJavaExportText, options:string);
   ProduceSimple();
   JNIToWydeCast();
   JNIType();
   JNITypeAsLetter();
   ZeroForJNIType();
   WrapperName();
   WrapperJNIGetFunction();
   WrapperJNISetFunction();
   ConvertFromStringType();
   ProduceNew();
   ProduceForEach();
   ProduceOrd();
   ProduceMethodInContent();
   ProduceMethodOutContent();
   ProduceFieldID();
   ProduceRecordInContent();
   ProduceRecordIn();
   ProduceRecordOutContent();
   ProduceRecordOut();
   ProduceMethodContent();
   ProduceInOutParameterInitialisationForJNI();
   ProduceInOutParameterTerminateForJNI();
   ProduceStandardParameterInitialisationForJNI();
   ProduceParameterInitialisationForJNI();
   ProduceStandardParameterTerminateForJNI();
   ComputeCallStringForJNI();
}
declare class aSetTypeJavaProducer extends aBasicTypeJavaProducer {
   findMinAndMaxRanges(forThisSubRange:aSubRangeType, minValue:number, maxValue:number);
   GetFQNameForType();
   TypeJavaName();
   DefaultValue();
   DefaultReturnValue();
   IsProducibleForPureJava();
   IsProducibleForJNI();
   InOutParamName(s:string):string;
   ProduceMethodOutContent();
   ProduceMethodInContent();
   ProduceMethodContent();
   ComputeCallStringForJNI();
   FirstVal(s:string):string;
   LastVal(s:string):string;
   ProduceStandardParameterInitialisationForJNI();
   ProduceInOutParameterInitialisationForJNI();
   ProduceInOutParameterTerminateForJNI();
   JNITypeAsLetter();
   ProduceRecordInContent();
   ProduceRecordOutContent();
}
declare class aAnyTypeJavaProducer extends aBasicTypeJavaProducer {
   FindTypeProducerBeneathAnyTypeProducer(where:aJavaExportText, VariableName:string, theMethodDesc:aMethodDesc):aTypeJavaProducer;
   ProduceFindingTypeAny(where:aJavaExportText, VariableName:string, theMethodDesc:aMethodDesc);
   TypeJavaName();
   IsProducibleForPureJava();
   IsProducibleForJNI();
}
declare class aNumTypeJavaProducer extends aBasicTypeJavaProducer {
   TypeJavaName();
   DefaultValue();
   DefaultReturnValue();
   WrapperName();
   WrapperJNIGetFunction();
   WrapperJNISetFunction();
   JNIType();
   IsProducibleForPureJava();
   IsProducibleForJNI();
   JNITypeAsLetter();
   ConvertFromStringType();
}
declare class aTextTypeJavaProducer extends aBasicTypeJavaProducer {
   Name();
   TypeJavaName();
   DefaultValue();
   DefaultReturnValue();
   ProduceMethodInContent();
   ProduceMethodOutContent();
   ProduceStandardParameterInitialisationForJNI();
   ProduceStandardParameterTerminateForJNI();
   ComputeCallStringForJNI();
   ProduceMethodContent();
   JNIType();
   WrapperJNIGetFunction();
   WrapperJNISetFunction();
   ProduceInOutParameterInitialisationForJNI();
   ProduceInOutParameterTerminateForJNI();
   ConvertFromStringType();
}
declare class aBooleanTypeJavaProducer extends aIntTypeJavaProducer {
   TypeJavaName();
   DefaultValue();
   DefaultReturnValue();
   WrapperName();
   WrapperJNIGetFunction();
   WrapperJNISetFunction();
   JNIType();
   ZeroForJNIType();
   JNITypeAsLetter();
   ConvertFromStringType();
}
declare class aCharTypeJavaProducer extends aIntTypeJavaProducer {
   DefaultValue();
   TypeJavaName();
   WrapperName();
   WrapperJNIGetFunction();
   WrapperJNISetFunction();
   JNIType();
   ZeroForJNIType();
   JNITypeAsLetter();
}
declare class aEnumSetTypeJavaProducer extends aEnumTypeJavaProducer {
   DefaultReturnValue();
   Produce(where:aJavaExportText, options:string);
}
declare class aSequenceTypeJavaProducer extends aArrayTypeJavaProducer {
}
declare class aRecordVarDescJavaProducer extends aVarDescJavaProducer {
   Produce(where:aJavaExportText, options:string);
}
declare class aLocalVarDescJavaProducer extends aVarDescJavaProducer {
   Produce(where:aJavaExportText, options:string);
}
declare class aAbsoluteInstanceVarDescJavaProducer extends aInstanceVarDescJavaProducer {
   Name();
   GetVarAccessString();
   IsProducibleForPureJava();
   IsProducibleForJNI();
}
declare class aOverrideInstanceVarDescJavaProducer extends aInstanceVarDescJavaProducer {
   JavaName();
   DoProduceNativeAccessors();
   DoProduceStandardAccessors();
   Produce();
   ProduceJNI(where:aProducedText, options:string);
   IsProducibleForPureJava();
}
declare class aAbsoluteRecordVarDescJavaProducer extends aRecordVarDescJavaProducer {
   IsProducibleForPureJava();
   IsProducibleForJNI();
}
declare class aAbsoluteResultVarDescJavaProducer extends aLocalVarDescJavaProducer {
}
declare class aAbsoluteSelfVarDescJavaProducer extends aLocalVarDescJavaProducer {
}
declare class aAbsoluteVarDescJavaProducer extends aLocalVarDescJavaProducer {
   Produce(where:aJavaExportText, options:aMethodDesc);
   JavaName();
}
declare class aImplicitLocalVarDescJavaProducer extends aLocalVarDescJavaProducer {
}
declare class aExternalMethodDescJavaProducer extends aMethodDescJavaProducer {
   IsAbstract();
   Produce(where:aJavaExportText, options:string);
   ProduceClassOfMethodCall();
}
declare class aOverrideMethodDescJavaProducer extends aMethodDescJavaProducer {
   ProduceNativeCode();
   ProducePureJava();
   IsProducibleForPureJava();
   IsProducibleForJNI();
}
declare class aConstBooleanJavaProducer extends aConstDescJavaProducer {
   ValueAsCstring();
   Name();
}
declare class aConstCharJavaProducer extends aConstDescJavaProducer {
   ValueAsCstring();
}
declare class aConstInt1JavaProducer extends aConstDescJavaProducer {
   ValueAsCstring();
}
declare class aConstInt2JavaProducer extends aConstDescJavaProducer {
   ValueAsCstring();
}
declare class aConstInt4JavaProducer extends aConstDescJavaProducer {
   ValueAsCstring();
}
declare class aConstInt8JavaProducer extends aConstDescJavaProducer {
   ValueAsCstring();
}
declare class aConstRealJavaProducer extends aConstDescJavaProducer {
   ValueAsCstring();
}
declare class aMultiRoleTypeJavaProducer extends aRoleTypeJavaProducer {
   AcceptedClassName();
}
declare class aSingleRoleTypeJavaProducer extends aRoleTypeJavaProducer {
   AcceptedClassName();
}
declare class aJavaReferenceVariableRepresentation extends aVarDescJavaRepresentation {
}
declare class aJavaRecordDescVariableRepresentation extends aVarDescJavaRepresentation {
}
declare class aJavaListofVariableRepresentation extends aJavaReferenceVariableRepresentation {
}
declare class aJavaReftoVariableRepresentation extends aJavaReferenceVariableRepresentation {
}
declare class JavaProducerExtAgent extends aUIAgent {
   DoYourJob: string ;
}
declare class aJavaProducerExtension extends aWideExtension {
   theEJBMapper: string ;
   GetProducer():aEJBProducer;
   Init();
   DoYourJob();
   FolderParentName();
   MenuText();
   ButtonBMPName();
}
declare class aIrStatementNum4AssignJavaProducer extends aIRStatementAssignJavaProducer {
   Produce(where:aJavaExportText, options:string);
}
declare class aIrStatementSubRangeAssignJavaProducer extends aIRStatementAssignJavaProducer {
   Produce(where:aJavaExportText, options:string);
}
declare class aIRStatementJavaProducer extends aJavaProducer {
   Produce();
   ProduceFirstPass();
   ProduceThirdPass();
   ThrowsException():boolean;
   StatementsThrowsException(CurStatement:aIRStatement):boolean;
}
declare class aIRStatementAssignJavaProducer extends aIRStatementJavaProducer {
   ProduceCondition(VariableName:string, RProducer:aIROpNodeJavaProducer, theProduced:aJavaExportText, options:string);
   ReturnCond(VariableName:string):string;
   ProduceByteAssignCommand(VariableName:string, LProducer:aIROpNodeJavaProducer, RProducer:aIROpNodeJavaProducer, theProduced:aJavaExportText, options:string);
   Produce(where:aJavaExportText, options:string);
   ProduceFirstPass();
   ProduceThirdPass();
}
declare class aIrStatementIfJavaProducer extends aIRStatementJavaProducer {
   ProduceFirstPass();
   Produce(where:aJavaExportText, options:string);
   ProduceThirdPass();
   ThrowsException();
}
declare class aIrStatementIfElseIfJavaProducer extends aIrStatementIfJavaProducer {
   ProduceFirstPass();
   Produce(where:aJavaExportText, options:string);
   ProduceThirdPass();
   ThrowsException();
}
declare class aIrStatementCallJavaProducer extends aIRStatementJavaProducer {
   ProduceFirstPass();
   ProduceThirdPass();
   Produce(where:aJavaExportText, options:string);
   ThrowsException();
}
declare class aIrStatementDecJavaProducer extends aIRStatementAssignJavaProducer {
   ProduceFirstPass();
   ProduceThirdPass();
   Produce(where:aJavaExportText, options:string);
}
declare class aIrStatementForEachJavaProducer extends aIrStatementLoopJavaProducer {
   CounterName: string ;
   UsingCounter: string ;
   ProduceFirstPass();
   ProduceThirdPass();
   isWrapperType(theType:string):boolean;
   ProduceWithCounter(where:aJavaExportText, options:string, CounterProducer:aIROpNodeJavaProducer);
   ProduceForEnumOrSet(where:aJavaExportText, EnumTypeProducer:aEnumTypeJavaProducer, ForEnum:boolean);
   GetEnumProducerFor(Object:aLightObject, ForEnum:boolean):aEnumTypeJavaProducer;
   CheckIsEnumOrSet(Domain:aIROpNode, ForEnum:boolean):aEnumTypeJavaProducer;
   Produce(where:aJavaExportText, options:string);
}
declare class aIrStatementForEachUsingCounterJavaProducer extends aIrStatementForEachJavaProducer {
   Produce();
}
declare class aIrStatementForJavaProducer extends aIrStatementLoopJavaProducer {
   ProduceFirstPass();
   Produce(where:aJavaExportText, options:string);
   ProduceThirdPass();
}
declare class aIrStatementIncByConstJavaProducer extends aIrStatementIncJavaProducer {
   ProduceFirstPass();
   ProduceThirdPass();
/**
*Portability Check: OK
*/
   Produce(where:aJavaExportText, options:string);
}
declare class aIrStatementIncByOneJavaProducer extends aIrStatementIncByConstJavaProducer {
}
declare class aIrStatementIncJavaProducer extends aIRStatementAssignJavaProducer {
   ProduceFirstPass();
   ProduceThirdPass();
   Produce(where:aJavaExportText, options:string);
}
declare class aIrStatementListOfAssignJavaProducer extends aIRStatementAssignJavaProducer {
   ProduceFirstPass();
   ProduceThirdPass();
}
declare class aIrStatementLoopJavaProducer extends aIRStatementJavaProducer {
   Produce(where:aJavaExportText, options:string);
   StatementsThrowsException();
}
declare class aIrStatementRefToAssignJavaProducer extends aIRStatementAssignJavaProducer {
   ProduceFirstPass();
   ProduceThirdPass();
}
declare class aIrStatementRepeatJavaProducer extends aIrStatementLoopJavaProducer {
   Produce(where:aJavaExportText, options:string);
   ProduceThirdPass();
   StatementsThrowsException();
}
declare class aIrStatementSetAssignJavaProducer extends aIRStatementAssignJavaProducer {
   ProduceFirstPass();
   ProduceThirdPass();
   Produce(where:aJavaExportText, options:string);
}
declare class aIrStatementWhileJavaProducer extends aIrStatementLoopJavaProducer {
   ProduceFirstPass();
   Produce(where:aJavaExportText, options:string);
   ProduceThirdPass();
   StatementsThrowsException();
}
declare class aIrStatementBreakJavaProducer extends aIRStatementJavaProducer {
   Produce(where:aJavaExportText, options:string);
}
declare class aIrStatementCaseJavaProducer extends aIRStatementJavaProducer {
   nameOfValue():string;
   IsSimpleSwitchKind():boolean;
   Produce(where:aJavaExportText, options:string);
}
declare class aIrStatementCommentJavaProducer extends aIRStatementJavaProducer {
   Produce(where:aJavaExportText, options:string);
}
declare class aIrStatementContinueJavaProducer extends aIRStatementJavaProducer {
   Produce(where:aJavaExportText, options:string);
}
declare class aIrStatementDecByConstJavaProducer extends aIrStatementDecJavaProducer {
   ProduceFirstPass();
   ProduceThirdPass();
/**
*Portability Check: OK
*/
   Produce(where:aJavaExportText, options:string);
}
declare class aIrStatementExitJavaProducer extends aIRStatementJavaProducer {
   Produce(where:aJavaExportText, options:string);
}
declare class aIrStatementReturnJavaProducer extends aIRStatementJavaProducer {
   ProduceFirstPass();
   ProduceThirdPass();
   Produce(where:aJavaExportText, options:string);
}
declare class aOQLStFetchJavaProducer extends aIRStatementJavaProducer {
   Produce();
}
declare class aOQLStSelectJavaProducer extends aIRStatementJavaProducer {
   Produce();
}
declare class aStringTypeJavaProducer extends aCstringTypeJavaProducer {
   ProduceMethodOutContent();
   ProduceMethodContent();
}
declare class JavaVariablesAgent extends aUIAgent {
   JavaVarsToProduce: string ;
}
declare class aRecordDescJavaRepresentation extends aTypeJavaRepresentation {
   JavaVarsToProduce: string ;
   DoProduceAsSessionBean: string ;
   myNativeVarCount: string ;
   myProductionStyle: string ;
   IsToBeProduceAsSessionBean():boolean;
   ProductionStyle():string;
   InitFromMM();
   DoUpdateFromMM();
   OpenVarScenario(Rank:number);
   VarsAreToBeNative():boolean;
}
declare class aEnumTypeJavaRepresentation extends aTypeJavaRepresentation {
   AddInAppropriateListOf(theRep:aModuleDefJavaRepresentation):boolean;
}
declare class aVoidTypeJavaProducer extends aTypeJavaProducer {
   JNIType();
   ZeroForJNIType();
}
declare class aConstStringJavaProducer extends aConstDescJavaProducer {
   ValueAsCstring();
}
declare class aIROpIdSelectJavaProducer extends aIROpSelectJavaProducer {
   ProduceEvaluate();
}
declare class aJavaEntity extends aEntity {
   MustCheckVarHasChanged(CurVar:aVarDesc):boolean;
   HasReallyChanged(thePrevVersion:aJavaEntity):boolean;
   HasChanged();
}
declare class JavaClassScenariosScenAgent extends aUIAgent {
   JavaScenariosToProduce: string ;
   BeanName: string ;
   BeanNameStaticText: string ;
}
declare class aClassDefJavaMainFolderAgent extends aFolderViewAgent {
}
declare class ContextInfosAgent extends aUIAgent {
   myURL: string ;
   myURLStaticText: string ;
   myUser: string ;
   myUserStaticText: string ;
   myPassword: string ;
   myPasswordStaticText: string ;
   myApplicationServer: string ;
   StaticText: string ;
}
declare class aModuleDefJavaRepresentation001Agent extends aFolderViewAgent {
}
declare class JavaPackagesToImportAgent extends aUIAgent {
   PackageToImport: string ;
}
declare class JavaOptionsAgent extends aUIAgent {
   JavaRootProductionPath: string ;
   StaticText: string ;
   JavaProductionPath: string ;
   JavaProductionPathStaticText: string ;
   PackageName: string ;
   PackageNameStaticText: string ;
   PackageToImport: string ;
   PackageToImportStaticText: string ;
   JavaRootProductionPath_ValueStored(:aUIAgent);
}
declare class JavaOptionsFolderAgent extends aFolderViewAgent {
}
declare class JNIOptionsAgent extends aFolderViewAgent {
}
declare class JSPOptionsAgent extends aUIAgent {
   JSPProductionPath: string ;
   StaticText: string ;
}
declare class MainPackageFolderAgent extends aFolderViewAgent {
}
declare class DependanciesScenAgent extends aUIAgent {
   Dependancies: string ;
   DependanciesGroupBox: string ;
}
declare class aMethodDescJavaProducer001Agent extends aUIAgent {
   TmpText: string ;
}
declare class MainFolderScenarioAgent extends aFolderViewAgent {
}
declare class MainScenAgent extends aUIAgent {
   MainFolderScenario: string ;
}
declare class InfosScenAgent extends aUIAgent {
}
declare class aJavaImportPackageScenAgent extends aUIAgent {
   Name: string ;
   NameStaticText: string ;
}
declare class aJavaImportPackage extends aEntity {
}
declare class aIROpIntrinsicUpcaseStrJavaProducer extends aIROpIntrinsicWithParmJavaProducer {
   ProduceEvaluate(where:aJavaExportText, options:string);
}
declare class aIrStatementDecSetJavaProducer extends aIrStatementIncSetJavaProducer {
   Operator();
}
declare class aIrStatementIncSetJavaProducer extends aIrStatementIncJavaProducer {
   Operator():string;
   Produce(where:aJavaExportText, options:string);
}
/**
*; aXSLForJSPProducer (aXSLProducer) (Def Version:10) (Implem Version:13)

uses aEntity, aQVarPresentor, aClassDef

TargetJSP : CString


procedure Init protected override
   inherited self.Init
   self.IsForJSP = True
endProc 

procedure BuildXSLHeader override
   var BackCode : CString
   var ForeCode : CString
   
   if not self.HeaderOpen
      self.HeaderOpen = True
      switch self.Kind
         when xNormal
            self.WriteIndentln('<xsl:template match="/">')
            self.WriteIndentln(Concat('<FORM name="MainWEDForm" action="', self.TargetJSP, 
               '" METHOD="POST">'))
         endWhen
         when xFolders
            self.WriteIndentln('<xsl:template match="/">')
         endWhen
         when xBuildList
            self.WriteIndentln('<xsl:template match="//' + self.ClassTagName + '_' + 
               self.EntityProduced.Name + '">')
         endWhen
         when xBuildRef
            self.WriteIndentln('<xsl:template match="//' + self.ClassTagName + '">')
         endWhen
         when xMethodType, xReturnedObject
         endWhen
      endSwitch
   endIf
endProc 

procedure ProduceIdTag(ForQVP : aQVarPresentor, DoUnIndent : Boolean) override
   ; empty
endProc 

procedure ProduceNameTag(ForQVP : aQVarPresentor) override
   if self.EntityProduced <> Nil
      self.Writeln(Concat('<xsl:attribute name="NAME">', self.CurClassDef.Name, '_', 
         self.EntityProduced.Name, '</xsl:attribute>'))
   endIf
endProc 

procedure ProduceIdTagTemplate(ForQVP : aQVarPresentor, DoUnIndent : Boolean) override
   ; empty
endProc 



*/
declare class aXSLForJSPProducer extends aXSLProducer {
}
/**
*const cSeparatorToken = '!'


function GetValue return CString override
   uses wEJBProducer, aClassDefJavaProducer, aClassDefJavaRepresentation
   
   _Result = cSeparatorToken + '<%= ' + wEJBProducer.CurrentClassProducer.myJavaClassRep.BeanName + 
      '.get' + self.EntityProduced.Name + '() %>' + cSeparatorToken
endFunc 

procedure Init protected override
   inherited self.Init
   self.IsForJSP = True
endProc 



*/
declare class aXMLForJSPProducer extends aXMLProducer {
}
declare class aScenarioJavaProducer extends aEntityJavaProducer {
   JSPAccessString: string ;
   LinesOfQVP: string ;
   IsInnerScen: string ;
   GetGoodScenario():aScenario;
   ComputeListOfLinesOfQVPs(ForScenario:aScenario);
   ScenarioNameForFile();
   TargetNameForFile():string;
   InBrowserName():string;
   InBrowserTargetName():string;
   FileNameWithPath():string;
   TargetFileNameWithPath():string;
   InitProducer();
   DisposeProducer();
   ProduceHTMLHeaderContent(where:aJavaExportText, options:string);
   OpenBody(where:aJavaExportText, options:string);
   ProduceJSPDeclaration(where:aJavaExportText, options:string);
   ProduceJSPHeader(where:aJavaExportText, options:string);
   ProduceJSPFooter(where:aJavaExportText, options:string);
   ComputeDims(QVPRank:number, NbQVPsInLine:number, theQVPList:aListOfInstances, CurQVPRec:aEWEDControlDescriptor, Width:number, Height:number, QVPWidth:number, QVPHeight:number);
   ProduceTables(where:aJavaExportText, theLines:aListOfInstances, Width:number, Height:number);
   ProduceStoreToVarJSP(where:aJavaExportText, theLines:aListOfInstances);
   ProduceActionJSP(where:aJavaExportText, theLines:aListOfInstances);
   ProduceAction(where:aJavaExportText, QVPProducer:aQVarPresentorJavaProducer);
   GetStoreToVarMethodName():string;
   ProduceDefaultActionJSP(where:aJavaExportText);
   ProduceLinkJSP(where:aJavaExportText, theLines:aListOfInstances);
   ProduceControls(where:aJavaExportText, options:string);
   ProduceTarget(where:aJavaExportText, options:string);
   ProduceControlsForReturnScenario(where:aJavaExportText, QVPProducer:aQVPReturnTypeScenarioJavaProducer);
   ProduceDefaultHiddenControls(where:aJavaExportText, options:string);
   Produce(where:aJavaExportText, options:string);
   ProduceStoreToVar(where:aJavaExportText, QVPProducer:aQVarPresentorJavaProducer);
   ProduceDefaultControlParameters(where:aJavaExportText, QVPProducer:aQVarPresentorJavaProducer);
   ProduceSpecialControlParameters(where:aJavaExportText, QVPProducer:aQVarPresentorJavaProducer);
   ProduceControlParameters(where:aJavaExportText, QVPProducer:aQVarPresentorJavaProducer);
   ProduceDefaultStyle(where:aJavaExportText, QVPProducer:aQVarPresentorJavaProducer);
   ProduceSpecialStyle(where:aJavaExportText, QVPProducer:aQVarPresentorJavaProducer);
   ProduceStyle(where:aJavaExportText, QVPProducer:aQVarPresentorJavaProducer);
   ProduceParameters(where:aJavaExportText, QVPProducer:aQVarPresentorJavaProducer);
   GetSize(QVPProducer:aQVarPresentorJavaProducer):number;
   ControlSize(QVPProducer:aQVarPresentorJavaProducer):string;
   AffectedName(QVPProducer:aQVarPresentorJavaProducer):string;
   ProduceHiddenControl(where:string, options:string);
   RegisterControlInSession(where:aJavaExportText, QVPProducer:aQVarPresentorJavaProducer);
}
declare class aQVarPresentorJavaProducer extends aEntityJavaProducer {
   QVPDesc: string ;
   Width: string ;
   Height: string ;
   QVPVar: string ;
   JSPAccessOut: string ;
   JSPAccessIn: string ;
   ComputePathThruAccessString():string;
   SetWidth(Width:number);
   ConstantJSPName():string;
   JSPName(Delimiter:string):string;
   HiddenControlName():string;
   GetTopQVar(FromQVP:aQVarPresentor):aVarDesc;
   ComputeJSPAccessString(FromScen:aScenarioJavaProducer);
   RecastedIdentifier(VarName:string):string;
   ProduceAccessIn(where:aJavaExportText, Value:string);
   ProduceStoreToVar(where:aJavaExportText);
   ProduceStoreToVarJSP(where:string);
   ProduceActionJSP(where:string);
   BackColorCode():string;
   GetSize():number;
   FontAttributes():string;
   OpenFontTag(where:string);
   CloseFontTag(where:string);
   TdParameters(CurWidth:number, CurHeight:number):string;
   ProduceControls(where:aJavaExportText);
   Produce(where:aJavaExportText, options:string);
   ProduceHiddenControl(where:string);
   ScenarioNameForFile();
}
declare module wHTMLMod {
   var BuildingClassAsView: string ;
   var BuildingListOfAsGrid: string ;
   var InnerScenCount: string ;
   var WithStyleSheet: string ;
   var CurrentIndexInView: string ;
   var ViewLocations: string ;
   var ConsoleDisabled: string ;
   var CurrentQVPProducer: string ;
   var TargetJSPFile: string ;
   var TargetAllowed: string ;
   function BuildingInnerScen():boolean;
   function OpenJSPDirective(where:aJavaExportText);
   function OpenJSPDeclaration(where:aJavaExportText);
   function CloseJSPDeclaration(where:aJavaExportText);
   function CloseJSPDirective(where:aJavaExportText);
   function ValuedAttrib(Attribute:string, Value:string):string;
   function JSPExpression(Expression:string):string;
   function JSPDirective(Expression:string):string;
   function ValuedJSPAttribute(Attribute:string, Value:string):string;
   function OpenSimpleTag(where:aProducedText, Tag:string);
   function OpenTag(where:aProducedText, Tag:string, Parameters:string);
   function OpenTagWithParameters(where:aJavaExportText, Tag:string, ForScen:aScenarioJavaProducer, ForQVP:aQVarPresentorJavaProducer);
   function OpenTagWithParametersNoIndent(where:aJavaExportText, Tag:string, ForScen:aScenarioJavaProducer, ForQVP:aQVarPresentorJavaProducer);
   function CloseTag(where:aProducedText, Tag:string);
   function CloseTagNoIndent(where:aProducedText, Tag:string);
   function OpenTable(where:aProducedText, CellPading:number, CellSpacing:number, Width:number);
   function CloseTable(where:aProducedText);
   function ProduceHiddenControl(where:aJavaExportText, QVPProducer:aQVarPresentorJavaProducer, OrName:string);
   function ProduceHiddenControlForLink(where:aJavaExportText, DefaultLink:string);
   function DefaultStyle(ForQVP:aQVarPresentor):string;
   function ComputePrevAndNextIndex(PrevIndex:number, NextIndex:number);
   function ProduceForward(where:aJavaExportText, Link:string);
   function ProduceScriptBase(where:aJavaExportText, Link:string);
   function ProduceHugeComment(where:aJavaExportText, Comment:string);
   function GenerateParamShape(FolderProducer:aClassAsFolderViewJavaProducer, ForQvar:aQVPXXXAsFolder, ForScenName:string, where:string, MapName:string, GifFileName:string, FolderText:string);
   function DrawFolderGif(FromFolder:aClassAsFolderView, SelectedFolder:number, ForQVar:aQVPXXXAsFolder, FolderText:string, FileName:string);
   function FontHeightFromName(FontName:string, FontSize:number, fontSels:string):number;
   function FontWidthFromName(FontName:string, FontSize:number, fontSels:string):number;
   function GetScenTitle(theScenario:aScenario):string;
   function GetColorCode(ForColor:string):string;
   function GetBitMapSrc(BitMapSrc:string):string;
   function ColorToRGBString(Color:string):string;
   function GetRelativePath(FromPath:string, ToPath:string):string;
}
declare class aXXXAsBitMapJavaProducer extends aSimpleButFastScenarioJavaProducer {
   OpenTag();
   CloseTag();
   ProduceSpecialControlParameters(where:aJavaExportText, QVPProducer:aQVPXXXAsBitMapJavaProducer);
   AffectedValue();
   AffectedInputType();
   ProduceStoreToVar();
}
declare class aXXXAsCheckBoxJavaProducer extends aSimpleButFastScenarioJavaProducer {
   InputType();
   ProduceContent(where:aJavaExportText, options:string);
   GetJSPValue();
   AffectedValue();
}
declare class aXXXAsComboBoxJavaProducer extends aSimpleButFastScenarioJavaProducer {
   OpenTag();
   CloseTag();
   ProduceDefaultControlParameters();
}
declare class aXXXAsEFJavaProducer extends aSimpleButFastScenarioJavaProducer {
   InputType(QVPProducer:aQVPXXXAsEFJavaProducer):string;
   AffectedInputType(QVPProducer:aQVPXXXAsEFJavaProducer):string;
   ProduceSpecialControlParameters(where:aJavaExportText, QVPProducer:aQVPXXXAsEFJavaProducer);
}
declare class aXXXAsRadioButtonJavaProducer extends aSimpleButFastScenarioJavaProducer {
}
declare class aXXXAsStaticTextJavaProducer extends aSimpleButFastScenarioJavaProducer {
   GetHTMLValue();
   OpenTag();
   ProduceContent(where:aJavaExportText, options:string);
   CloseTag();
   ProduceStoreToVarJSP();
   ProduceActionJSP();
}
declare class aQVPWithExplanationJavaProducer extends aQVarPresentorJavaProducer {
   GetEnumType():aEnumType;
   ProduceMethodCall(where:aJavaExportText);
}
declare class aQVPXXXAsBitMapJavaProducer extends aQVPWithExplanationJavaProducer {
}
declare class aQVPXXXAsPushButtonJavaProducer extends aQVPWithExplanationJavaProducer {
   JSPName();
   GetLink():string;
}
declare class aQVPXXXASRadioButtonJavaProducer extends aQVPWithExplanationJavaProducer {
   GetEnumType();
   SetWidth();
}
declare class aQVPXXXAsEFJavaProducer extends aQVPWithExplanationJavaProducer {
   JSPName();
   GetSize();
   ProduceStoreToVarJSP();
}
declare class aQVPXXXAsCheckBoxJavaProducer extends aQVPWithExplanationJavaProducer {
   AddMyText():boolean;
   GetEnumType();
}
declare class aSimpleButFastScenarioJavaProducer extends aScenarioJavaProducer {
   InputType(QVPProducer:aQVarPresentorJavaProducer):string;
   AffectedInputType(QVPProducer:aQVarPresentorJavaProducer):string;
   GetJSPValue(QVPProducer:aQVarPresentorJavaProducer):string;
   GetHTMLValue(QVPProducer:aQVarPresentorJavaProducer):string;
   AffectedValue(QVPProducer:aQVarPresentorJavaProducer):string;
   ControlTag(QVPProducer:aQVarPresentorJavaProducer):string;
   OpenTag(where:string, options:string);
   ProduceContent(where:string, options:string);
   CloseTag(where:string, options:string);
   Produce();
   ProduceControls();
   ProduceDefaultControlParameters();
}
declare class aEnumAsComboBoxJavaProducer extends aXXXAsComboBoxJavaProducer {
   ProduceContent(where:aJavaExportText, options:string);
}
declare class aEnumAsStaticGRBJavaProducer extends aScenarioJavaProducer {
   CurChoice: string ;
   BooleanName: string ;
   ProduceJSPBefore(where:aJavaExportText, QVPProducer:aQVarPresentorJavaProducer);
   GetJSPValue(QVPProducer:aQVarPresentorJavaProducer):string;
   ProduceDefaultControlParameters();
   ProduceSpecialControlParameters();
   ProduceChoice(where:aJavaExportText, QVPProducer:aQVarPresentorJavaProducer);
   Produce(where:aJavaExportText, options:string);
}
declare class aQVPReturnTypeScenarioJavaProducer extends aQVarPresentorJavaProducer {
   ProduceControls();
   ComputeJSPAccessString();
   BackColorCode();
}
declare class aClassAsFolderViewJavaProducer extends aClassAsViewJavaProducer {
   FolderNameForFile(Index:number):string;
   InBrowserFolderName(Index:number):string;
   InBrowserTargetFolderName(Index:number):string;
   HiddenControlName():string;
   ProduceFolder(where:aJavaExportText, QVP:aQVarPresentor, AtIndex:number);
   Produce(where:aJavaExportText, options:string);
   InBrowserName();
   ProduceTarget();
   InitProducer();
   DisposeProducer();
}
declare class aClassAsSplitViewJavaProducer extends aClassAsFolderViewJavaProducer {
   InBrowserName();
   ComputeFrameDisposition(TotalFactor:string):string;
   ProduceFrameFor(where:string, CurQVP:aQVarPresentor);
   ProduceJSPDirective(where:aJavaExportText);
   ProduceJSPHeader();
   Produce(where:aJavaExportText, options:string);
   ProduceJSPFooter();
}
declare class aClassAsViewJavaProducer extends aScenarioJavaProducer {
   InitViewParameters();
   TerminateViewParameters();
   Produce(where:aJavaExportText, options:string);
   ProduceTarget();
}
declare class aEnumAsComboBoxEntryJavaProducer extends aEnumAsComboBoxJavaProducer {
}
declare class aMethodTypeAsPushButtonJavaProducer extends aXXXAsPushButtonJavaProducer {
   RegisterControlInSession();
   InputType();
   ProduceStoreToVar(where:aJavaExportText, QVPProducer:aQVPWithExplanationJavaProducer);
   BuildingNextOrPrevForClassAsView(QVPProducer:aQVPWithExplanationJavaProducer):boolean;
   ProduceDefaultControlParameters();
   HandlePrevAndNextForClassAsView(where:aJavaExportText, QVPProducer:aQVPWithExplanationJavaProducer):boolean;
   GetLink(QVPProducer:aQVPXXXAsPushButtonJavaProducer):string;
   ProduceSpecialControlParameters(where:aJavaExportText, QVPProducer:aQVPXXXAsPushButtonJavaProducer);
   OpenTag();
   ProduceHiddenControl();
   Produce();
   ProduceAction(where:aJavaExportText, QVPProducer:aQVPWithExplanationJavaProducer);
}
declare class aQVPReftoAsHTMLLinkJavaProducer extends aQVPReftoAsHLinkJavaProducer {
   GetLink();
}
declare class aQVPXXXAsHTMLLinkJavaProducer extends aQVPXXXAsPushButtonJavaProducer {
   ProduceStoreToVarJSP();
   GetLink();
}
declare class aReftoAsHLinkJavaProducer extends aXXXAsHTMLLinkJavaProducer {
   OpenTag(where:aJavaExportText, options:string);
   ProduceContent(where:aJavaExportText, options:string);
   ProduceSpecialControlParameters(where:aJavaExportText, QVPProducer:aQVPReftoAsHLinkJavaProducer);
}
declare class aReturnTypeScenarioJavaProducer extends aScenarioJavaProducer {
   ProduceStoreToVar();
}
declare class aSetAsStaticGCBJavaProducer extends aEnumAsStaticGRBJavaProducer {
   ProduceDefaultControlParameters();
   GetJSPValue();
   ProduceJSPBefore();
   ProduceTargetJSPForChoice(where:aJavaExportText, QVPProducer:aQVPWithExplanationJavaProducer);
   ProduceStoreToVar(where:aJavaExportText, QVPProducer:aQVPWithExplanationJavaProducer);
}
declare class aToolBarScenarioJavaProducer extends aScenarioJavaProducer {
   ProduceStoreToVarJSP();
   ProduceActionJSP();
   ProduceAction();
   ProduceLinkJSP();
   ProduceControls();
   Produce();
}
declare class aVoidAsComboBoxEntryJavaProducer extends aVoidAsComboBoxJavaProducer {
}
declare class aVoidAsComboBoxJavaProducer extends aXXXAsComboBoxJavaProducer {
   ProduceContent(where:aJavaExportText, options:string);
}
declare class aVoidAsRadioButtonJavaProducer extends aXXXAsRadioButtonJavaProducer {
   InputType();
   ProduceContent(where:aJavaExportText, options:string);
}
declare class aXXXAsGroupBoxJavaProducer extends aXXXAsStaticTextJavaProducer {
}
declare class aXXXAsHScrollBarJavaProducer extends aSimpleButFastScenarioJavaProducer {
   ProduceStoreToVarJSP();
   ProduceActionJSP();
   ProduceAction();
   ProduceLinkJSP();
   Produce();
   ProduceControls();
   ProduceContent();
}
declare class aXXXAsHTMLLinkJavaProducer extends aXXXAsStaticTextJavaProducer {
   OpenTag(where:string, options:aQVarPresentorJavaProducer);
   CloseTag();
   ProduceDefaultControlParameters();
   ProduceSpecialControlParameters(where:aJavaExportText, QVPProducer:aQVPXXXAsHTMLLinkJavaProducer);
}
declare class aXXXAsPushButtonJavaProducer extends aSimpleButFastScenarioJavaProducer {
   InputType();
   ProduceSpecialControlParameters(where:aJavaExportText, QVPProducer:aQVPXXXAsBitMapJavaProducer);
   AffectedValue();
}
declare class aXXXAsVScrollBarJavaProducer extends aXXXAsHScrollBarJavaProducer {
}
declare class aConstPointerJavaProducer extends aConstDescJavaProducer {
   ValueAsCstring();
}
declare class aOpDBExecJavaProducer extends aIROpNodeJavaProducer {
   ProduceEvaluate();
}
declare class aScenarioWithStyleSheetJavaProducer extends aScenarioJavaProducer {
   ProduceHTMLHeaderContent();
   OpenBody();
   ProduceJSPHeader();
   ProduceJSPFooter();
}
declare class aQVPGridScenarioJavaProducer extends aQVarPresentorJavaProducer {
}
declare class aQVPListOfAsGridScenarioJavaProducer extends aQVPGridScenarioJavaProducer {
   GetAcceptedClassDef():aClassDef;
   TdParameters();
}
declare class aQVPListOfAsListCtrlJavaProducer extends aQVPXXXAsListCtrlJavaProducer {
}
declare class aQVPReftoAsHLinkJavaProducer extends aQVPXXXAsPushButtonJavaProducer {
   GetTargetScen():aScenarioJavaProducer;
   GetLink();
   ProduceStoreToVarJSP();
   ProduceActionJSP();
}
declare class aQVPXXXAsListBoxJavaProducer extends aQVPWithExplanationJavaProducer {
   ProduceStoreToVarJSP();
   ProduceActionJSP();
   TdParameters();
}
declare class aQVPXXXAsListCtrlJavaProducer extends aQVPXXXAsListBoxJavaProducer {
}
declare class aQVPXXXAsMLEJavaProducer extends aQVPWithExplanationJavaProducer {
}
declare class aQVPXXXAsStaticTextJavaProducer extends aQVPWithExplanationJavaProducer {
   ProduceStoreToVarJSP();
   ProduceActionJSP();
}
declare class aJSPProducedText extends aJavaExportText {
   SumLine();
   GetSum();
}
declare class aGridScenarioJavaProducer extends aSimpleButFastScenarioJavaProducer {
}
declare class aListOfAsGridScenarioJavaProducer extends aGridScenarioJavaProducer {
   InitConstants();
   TerminateConstants();
   ProduceDefaultControlParameters();
   OpenTag();
   GetColumnWidth(CurColumn:aListOfAsGridColumnQualifier, QVPProducer:aQVPListOfAsGridScenarioJavaProducer, AtRank:number):number;
   ProduceControlForMethods(where:aJavaExportText, QVPProducer:aQVPListOfAsGridScenarioJavaProducer);
   ProduceRemainingColumn(where:aJavaExportText, TotalWidth:number, QVPProducer:aQVPListOfAsGridScenarioJavaProducer);
   ProduceTableTitles(where:aJavaExportText, QVPProducer:aQVPListOfAsGridScenarioJavaProducer);
   ProduceLines(where:aJavaExportText, QVPProducer:aQVPListOfAsGridScenarioJavaProducer);
   ProduceContent(where:aJavaExportText, options:string);
   CloseTag();
   ProduceStoreToVar(where:aJavaExportText, QVPProducer:aQVPListOfAsGridScenarioJavaProducer);
   ProduceAction(where:aJavaExportText, QVPProducer:aQVPListOfAsGridScenarioJavaProducer);
}
declare class aListOfAsListCtrlScenarioJavaProducer extends aXXXAsListBoxJavaProducer {
   ProduceDefaultControlParameters(where:aJavaExportText, QVPProducer:aQVPListOfAsListCtrlJavaProducer);
   GetColumnWidth(ColumnQualifier:aListOfAsListCtrlColumnQualifier, QVPProducer:aQVPListOfAsListCtrlJavaProducer):number;
   ColumnAlignement(ColumnIndex:number, qvpproducer:aQVPListOfAsListCtrlJavaProducer):string;
   ProduceTableTitles(where:aJavaExportText, options:string);
   OpenTag();
   ProduceContent(where:aJavaExportText, options:string);
   CloseTag();
}
declare class aMethodTypeAsBitMapJavaProducer extends aMethodTypeAsHTMLLinkJavaProducer {
   ProduceContent(where:aJavaExportText, options:string);
}
declare class aMethodTypeAsHTMLLinkJavaProducer extends aMethodTypeAsPushButtonJavaProducer {
   ControlTag();
   ProduceDefaultControlParameters(where:aJavaExportText, QVPProducer:aQVPXXXAsHTMLLinkJavaProducer);
   ProduceContent(where:aJavaExportText, options:string);
}
declare class aXXXAsListBoxJavaProducer extends aSimpleButFastScenarioJavaProducer {
   OpenTag();
   CloseTag();
   ProduceContent(where:aJavaExportText, options:string);
   ProduceStoreToVarJSP();
   ProduceActionJSP();
}
declare class aXXXAsMLEJavaProducer extends aSimpleButFastScenarioJavaProducer {
   ProduceSpecialControlParameters(where:aJavaExportText, QVPProducer:aQVPXXXAsMLEJavaProducer);
   ProduceContent(where:aJavaExportText, options:string);
   AffectedValue();
   OpenTag();
   CloseTag();
}
declare class aGenericListOfScenarioJavaProducer extends aXXXAsListBoxJavaProducer {
}
declare class aQVPGenericListOfScenarioJavaProducer extends aQVPXXXAsListBoxJavaProducer {
}
declare class aDecimalTypeJavaProducer extends aBasicTypeJavaProducer {
   TypeJavaName();
   DefaultValue();
   DefaultReturnValue();
   WrapperName();
   WrapperJNIGetFunction();
   WrapperJNISetFunction();
   JNIType();
   IsProducibleForPureJava();
   IsProducibleForJNI();
   JNITypeAsLetter();
   ConvertFromStringType();
}
declare class UMLObjectLightAgent extends aUIAgent {
   UMLObjectFolder: string ;
}
declare class UMLObjectFullAgent extends aUIAgent {
   UMLObjectFullFolder: string ;
}
declare class UMLObjectPopupAgent extends aMenuItemControlAgent {
   NotifyInit();
}
declare class UMLObjectToolbarAgent extends aToolBarUIAgent {
   SaveSaveAndCloseClose: string ;
}
declare class UMLObjectFirstPageAgent extends aUIAgent {
   Name: string ;
   NameStaticText: string ;
   myText: string ;
   myTextStaticText: string ;
   Version: string ;
   VersionStaticText: string ;
   myOwner: string ;
   myOwnerStaticText: string ;
}
declare class UMLObjectCommentAgent extends aUIAgent {
   Comment: string ;
}
declare class UMLObjectLightFolderAgent extends aFolderViewAgent {
}
declare class UMLObjectFullFolderAgent extends aFolderViewAgent {
}
/**
*UML objects is the Root class of all UML metamodel classes.
It is an atomic constituent of a UML project.
*/
declare class aUMLObject extends aEntity {
   RegisterObject(theObject:aUMLObject);
   GetOption():aUMLOption;
   EntityClassVisible():boolean;
   GetUMLElements():aListOfRefTos;
   CanBeDroppedInDiagram(theDiagram:aUMLDiagram):boolean;
   GetProject():aUMLProject;
   isGraphDependant():boolean;
   isOwnerDependant():boolean;
   UnRegisterElement(Object:aUMLObject);
   RegisterElement(Object:aUMLObject);
   RegisterAssociation(Association:aUMLAssociation);
   Register(InObject:aUMLObject);
   UnRegister();
   RegisterIfProject();
   GetModifiableVersion():aUMLObject;
   GetAllDescendants(theList:aListOfInstances);
   OpenPopup(atX:number, atY:number);
   GetChildTree(theObject:aFullObject, ptheVar:string, theType:aType);
   CanBeOwnedByThisClass(UMLObject:aUMLObject):boolean;
   GetAllValidOwnedClass():aListOfInstances;
   ActionExecuted(theUIAgent:aUIAgent);
   OwnObjects():boolean;
   CopyDefaultVariables(theObject:aUMLObject);
   TopOwner():aUMLObject;
   EntityClass():string;
   StringExtract();
   GetUMLObjectKind():string;
   ScenarioInGraph(TheGraph:aUMLGraph):aScenario;
   UnRegisterObject(theObject:aUMLObject);
   ElementsVarDesc():aInstanceVarDesc;
   HasChanged();
   GetEditName():string;
   SetEditName(Name:string);
}
declare class aUMLNote extends aUMLObject {
   EntityClass();
}
/**
*A constraint is a Boolean expression over one or several elements which must always be true. A
constraint can be specified in several different ways, e.g. using natural language or a constraint
language.
*/
declare class aUMLConstraint extends aUMLObject {
   EntityClass();
}
declare class aUMLTaggedValue extends aUMLObject {
   StringExtract();
   EntityClass();
}
declare class UMLModelElementFullFolderAgent extends aFolderViewAgent {
}
declare class UMLModelElementFirstPageAgent extends UMLObjectFirstPageAgent {
   DocumentFileStaticText: string ;
   DocumentFile001: string ;
}
declare class UMLModelElementConstraintsAgent extends aUIAgent {
   Constraints: string ;
}
declare class UMLModelElementNotesAgent extends aUIAgent {
   Notes: string ;
}
declare class UMLModelElementDependenciesAgent extends aUIAgent {
   Dependencies: string ;
}
declare class UMLModelElementTaggedValuesAgent extends aUIAgent {
   TaggedValues: string ;
}
declare class UMLModelElementInGraphAgent extends aAutoSizeGraphFrameUIAgent {
   MustPaintLine: string ;
   MustPaintBack: string ;
   NotifyGetChar();
   PaintBack();
   PaintLine();
}
/**
*A model element is an element that is an abstraction drawn from the system being modeled.
In the metamodel a ModelElement is a named entity in a Model.
It is the base for all modeling metaclasses in the UML.
*/
declare class aUMLModelElement extends aUMLObject {
   DocumentFile: string ;
   Constraints: string ;
   Notes: string ;
   Dependencies: string ;
   TaggedValues: string ;
   RegisterInAssociation(theAssociation:aUMLAssociation);
   UnRegisterInAssociation(theAssociation:aUMLAssociation);
   RegisterDependency(theDependency:aUMLDependency);
   UnRegisterDependency(theDependency:aUMLDependency);
   UnRegisterObject();
   UnRegister();
   isAlive();
}
declare class UMLClassifierFirstPageAgent extends UMLModelElementFirstPageAgent {
   Associations: string ;
}
declare class UMLClassifierInGraphAgent extends aAutoSizeGraphFrameUIAgent {
}
/**
*A classifier is an element that describes behavioral and structural features; it comes in several
specific forms, including class, data type,  and others that are defined in other metamodel
packages.
*/
declare class aUMLClassifier extends aUMLModelElement {
   Associations: string ;
   CanBeOwnedByThisClass();
   RegisterInAssociation();
   UnRegisterInAssociation();
   UnRegister();
   GetUMLObjectKind();
}
declare class UMLAssociationFirstPageAgent extends UMLModelElementFirstPageAgent {
   StartLink: string ;
   StartLinkStaticText: string ;
   EndLink: string ;
   EndLinkStaticText: string ;
}
/**
*An association defines a semantic relationship between classifiers; the instances of an association
are a set of tuples relating instances of the classifiers. Each tuple value may appear at most once.
*/
declare class aUMLAssociation extends aUMLModelElement {
   StartLink: string ;
   EndLink: string ;
   Associate(theStartObject:aUMLModelElement, theEndObject:aUMLModelElement);
   Disassociate();
   isGraphDependant();
   Register(InObject:aUMLModelElement);
   UnRegister();
   InDiagramExtract():string;
}
declare class UMLToolbarAgent extends aToolBarUIAgent {
   myOwner: string ;
   Presenter: string ;
   Print: string ;
   ActionClose001: string ;
   UMLToolbarMore: string ;
}
declare class aUMLToolbar extends aUMLObject {
   Dependency: string ;
   ToolbarItemsInitFromDiagram();
   Init();
   Terminate();
   StringExtract();
}
declare class UMLDiagramAgent extends aUIAgent {
   Presenter: string ;
   UMLGraphAsControl: string ;
   Toolbar: string ;
   UMLToolbar: string ;
   InteractWithUser();
}
declare class UMLDiagramFirstPageAgent extends UMLObjectFirstPageAgent {
   UMLElements: string ;
}
declare class UMLDiagramFullAgent extends aUIAgent {
   UMLObjectFullFolder: string ;
   ActionValid001: string ;
}
declare class UMLDraggableToolsAgent extends aUIAgent {
   Presenter: string ;
   DraggableTools: string ;
}
declare class UMLToolsFolderAgent extends aUIAgent {
   Presenter: string ;
   aGraph003: string ;
}
/**
*UML diagram is the root class of all UML diagram classes.

*/
declare class aUMLDiagram extends aUMLObject {
   Presenter: string ;
   Toolbar: string ;
   UMLElements: string ;
   Modified: string ;
   GetGraphClassName():string;
   GetToolBar():aUMLToolbar;
   Init();
   CreateToolbar();
   DestroyToolbar();
   ActionSaveAndClose();
   ActionClose();
   ActionSave();
   GetBitmap();
   CreateObject(theObject:aUMLObject):string;
   Accept();
   HasChanged();
   GetUMLElements();
   UnRegister();
   GetModifiableVersion();
   RegisterObject();
   GetUMLObjectKind();
   GetUMLDiagramKind():string;
}
declare class UMLProjectFullAgent extends UMLObjectFullAgent {
}
declare class ModelElementsAgent extends aUIAgent {
   UMLModelElements: string ;
/**
*Portability Check: OK
*/
   UMLModelElements_Executed(:aUIAgent, SelectedRank:number, Option:number):number;
}
declare class DiagramsAgent extends aUIAgent {
   OpenedDiagrams: string ;
   SelectCurrentDiagram();
   OpenedDiagrams_Selected(SelectedRank:number):number;
   OpenedDiagrams_ValueLoaded();
   LoadValue();
}
declare class ProjectSplitAgent extends aSplitViewAgent {
}
declare class MDIUMLProjectAgent extends aOpenWhereClosedUIAgent {
   ProjectSplit: string ;
   NotifyCheck();
}
declare class UMLProjectMoreToolbarFolderAgent extends aUIAgent {
   Presenter: string ;
   GetDelegationGraph: string ;
}
declare class UMLProjectMDIToolBarAgent extends aFolderViewAgent {
}
declare class UMLProjectDraggableToolsToolbarFolderAgent extends aUIAgent {
   GetDelegationGraph: string ;
}
declare class aUMLProject004Agent extends aFolderViewAgent {
}
declare class aUMLProject005Agent extends aFolderViewAgent {
}
declare class aUMLProject006Agent extends aFolderViewAgent {
}
declare class aUMLProject extends aUMLObject {
   UMLModelElements: string ;
   Container: string ;
   OpenedDiagrams: string ;
   CurrentDiagram: string ;
   TableOfAllOwnedClass: string ;
   OwnedId: string ;
   DelegationGraph: string ;
   OpenedDiagramsBackup: string ;
   CurrentDiagramBackup: string ;
   InitAfterLoad();
   GetDelegationGraph():aDelegationGraph;
   GetProject();
   EntityClass();
   GetBitmap();
   OwnObjects();
   GetUMLElements();
   OpenDiagram(theDiagram:aUMLDiagram);
   ViewDiagram(theDiagram:aUMLDiagram);
   CloseDiagram(theDiagram:aUMLDiagram);
   GetListOfOwnedClass(theClassDef:aClassDef):aListOfInstances;
   SetListOfOwnedClass(theClassDef:aClassDef, theList:aListOfInstances);
   FreeListOfOwnedClass(theClassDef:aClassDef);
   UIRefreshTree();
   RefreshAll();
   RefreshGraphes();
   Init();
   Print(theUIAgent:aUIAgent);
   GetIDAllocater();
   GetNsIdAndIdforOwnedEntity();
   IdNameSpaceId();
   InOutSyncCategory();
   IsAnInOutSyncEntity();
   RegisterYourselfInIDE();
   NotifyDeletion();
   DeleteMyself();
   IsAnExportableEntity();
   StringExtract();
   CreateToolBarForCurrentDiagram();
   SetCurrentDiagram(Rank:number);
}
declare class aUMLExtension001Agent extends aUIAgent {
   DoYourJob: string ;
}
declare class aUMLExtension extends aWideExtension {
   FolderParentName();
   DoYourJob();
   MenuText();
   ButtonBMPName();
}
declare class aUMLContainer001Agent extends aOpenWhereClosedUIAgent {
   UMLProjects: string ;
}
declare class aUMLContainer extends aEntity {
   UMLProjects: string ;
   DelegationGraph: string ;
   Init();
   AppendObject(theProject:aUMLProject);
   RemoveObject(theProject:aUMLProject);
   RefreshAfterSynchronization();
   InitAfterLoad();
   GetBitmap();
}
declare class UMLActorDrawAgent extends aDrawGraphUIAgent {
   Ellipse001: string ;
   Segment: string ;
   Segment001: string ;
   Segment002: string ;
   Segment003: string ;
}
declare module xUMLMod {
   function GetUMLContainer():aUMLContainer;
   function ResetNewVersionInOwner(theOldVersion:aFullObject, theNewVersion:aFullObject, OwnerVarDesc:aVarDesc);
   function NotifyGetCharOnObject(TheUIAgent:aGraphFrameUIAgent, TheObject:aUMLObject, theUIComponent:string, Ch:number, VKey:string, theCount:number, Flags:string):number;
   function NotifyGetChar(TheUIAgent:aGraphFrameUIAgent, theUIComponent:string, Ch:number, VKey:string, theCount:number, Flags:string):number;
}
declare class UMLGraphAsControlAgent extends aGraphModifierInDlgWindowAgent {
   NotifyCanReceiveDroppedObject();
   FindXXXAsFrameAgentFor();
   LoadFromVar();
   NotifyInit();
   MaxDist();
   Init();
   NotifyDblClkOnObject();
}
declare class UMLGraphPopupMenuAgent extends PopupMenuForGraphOverAgent {
   EditProperties: string ;
   Separator010: string ;
}
declare class aUMLGraph extends aGraph {
   EditProperties(TheUIAgent:aUIAgent);
   GetModifiableVersion():string;
   ScenarioForObjectInGraph();
   StartPrint();
   GetOption();
}
declare class UMLOptionMainAgent extends aUIAgent {
   ModifyEntityAtDrop: string ;
   EntityClassVisible: string ;
   FocusOfControl: string ;
   FocusOfControlWidth: string ;
   FocusOfControlWidthStaticText: string ;
   SingleFocusOfControl: string ;
   SplitWholeBox: string ;
   StateBackColor: string ;
   StateBackColorStaticText: string ;
   MaxDist: string ;
   MaxDistStaticText: string ;
   ShowUnsupportedFeatures: string ;
   FeaturesHidden: string ;
   ShowUnsupportedFeatures_ValueLoaded();
   LoadValue();
}
declare class aUMLOption extends aOption {
   ModifyEntityAtDrop: string ;
   EntityClassVisible: string ;
   FocusOfControl: string ;
   SingleFocusOfControl: string ;
   FocusOfControlWidth: string ;
   SplitWholeBox: string ;
   StateBackColor: string ;
   MaxDist: string ;
   ShowUnsupportedFeatures: string ;
   Init();
   GetFocusOfControl():boolean;
   GetSingleFocusOfControl():boolean;
   GetFocusOfControlWidth():number;
}
/**
*A model is an abstraction of a modeled system, specifying the modeled system from a certain
viewpoint and at a certain level of abstraction. A model is complete in the sense that it fully
describes the whole modeled system at the chosen level of abstraction and viewpoint.
*/
declare class aUMLModel extends aUMLPackage {
   StringExtract();
   CanBeOwnedByThisClass();
   GetAllValidOwnedClass();
   GetBitmap();
}
declare class UMLPackageGraphAgent extends aRectangleWithTitleGraphFrameUIAgent {
   Name: string ;
}
declare class UMLPackageFirstPageAgent extends UMLModelElementFirstPageAgent {
   UMLElements: string ;
}
/**
*A package is a grouping of model elements.
*/
declare class aUMLPackage extends aUMLModelElement {
   UMLElements: string ;
   EntityClass();
   CanBeOwnedByThisClass();
   UnRegisterObject();
   GetAllValidOwnedClass();
   GetBitmap();
   OwnObjects();
   GetUMLElements();
   Init();
   GetAssociations():aUMLListOfAssociations;
   UnRegister();
   HasChanged();
   RegisterAssociation();
}
declare class UMLPickerBasicAgent extends aUIAgent {
   Candidates: string ;
}
declare class aUMLPicker extends aInListPicker {
}
declare class aUMLDesignModel extends aUMLModel {
   StringExtract();
}
declare class aUMLAnalysisModel extends aUMLModel {
   StringExtract();
}
declare class UMLDependencyInGraphAgent extends UMLModelElementInGraphAgent {
   Name: string ;
   StartLink: string ;
   EndLink: string ;
   Init();
   CalcLinkFrom();
   CalcLinkTo();
}
/**
*A dependency specifies that the semantics of a model element requires the presence of
another model element. This implies that if the source is somehow modified the dependent
must probably be modified. The reason for the dependency can be specified in several different
ways, e.g. using natural language or an algorithm, but is often implicit.
*/
declare class aUMLDependency extends aUMLAssociation {
   EntityClass();
   GetBitmap();
   Associate();
   Disassociate();
   isOwnerDependant();
   isGraphDependant();
   Register(InObject:aUMLModelElement);
}
declare class aUMLSingleRoleType extends aSingleRoleType {
   CreateNewInstance(FromThisObject:aUMLObject):aFullObject;
   ModifyThisObject(FromThisObject:aUMLObject, toThisObject:aUMLObject, fromThisUIAgent:aUIAgent, theNewVersion:aUMLObject, FromThisVar:string, atThisRank:number):string;
   ConsultThisObject();
   canBreakLinkBetween();
   IsDroppedObjectUsable();
   NewInstanceFromDroppedObject();
   BeforeMoveUpOrDown();
   ExAskForActions(ActionsDescriptionList:aListOfInstances, atX:number, atY:number, FromThisObject:aFullObject, fromThisUIAgent:aUIAgent, PtrTo_FromThisVar:string):number;
   AuthorizeAction(FromThisObject:aFullObject, toThisObject:aUMLObject, fromThisUIAgent:aUIAgent, ActionKind:string, FromThisExecMode:string):boolean;
}
declare class aUMLGraphDraggableAssociation extends aUMLGraphDraggableObject {
   FromFrameUIAgent: string ;
   ToFrameUIAgent: string ;
   FromObject: string ;
   ToObject: string ;
   ResetVariables();
   XForDrop():number;
   YForDrop():number;
   DropAssociation(theAssociation:aUMLObject);
   UMLObjectsRelated():string;
   GetFrameAgent():aGraphFrameUIAgent;
   CreateNewElementAtDrop();
   CanBeDroppedIn();
   RegisterRefreshAndUpdateNewlyCreatedObject();
}
declare class aUMLSingleComponentType extends aSingleRoleType {
   CreateNewInstance();
}
declare class aUMLSingleAppProjRoleType extends aSingleRoleType {
   CreateNewInstance();
}
declare class aUMLGraphDraggableObject extends aGraphDraggableEntity {
   ModelElement: string ;
   ScenarioToUse: string ;
   NewElementOwner: string ;
   Diagram: string ;
   DesignWindow: string ;
   x: string ;
   y: string ;
   InitFromGraph();
   Initialize(theClassDef:aClassDef);
   Terminate();
   RegisterNewElement(Element:aUMLObject);
   ActionNewFullElement(Silent:boolean):aUMLObject;
   ActionNewElement():aUMLObject;
   ActionNewSilentElement():aUMLObject;
   GetDiagram():aUMLDiagram;
   GetElementOwner():aUMLObject;
   CreateNewElementAtDrop():aUMLObject;
   RegisterRefreshAndUpdateNewlyCreatedObject(ThisObject:aUMLObject);
   NotifyDropped(theUIComponent:string, X:number, Y:number, thisObject:aUMLObject);
/**
*Portability Check: OK
*/
   AcceptObjectOnDrop(Object:aUMLObject, Param:string):boolean;
   GetFrameAgentAt(ObjectKinds:string, X:number, Y:number):aGraphFrameUIAgent;
   GetFrameAgentAtXY(ObjectKinds:string):aGraphFrameUIAgent;
   GetFrameAgentAtX(ObjectKinds:string, X:number, Y:number):aGraphFrameUIAgent;
   GetScenarioToUse();
}
declare class aUMLProjectsRole extends aInOutSyncRole {
   ConsultThisObject();
   ModifyThisObject();
   canBreakLinkBetween();
   AuthorizeAction();
   NewAcceptedInstance();
}
declare class aUMLListOfAssociations extends aUMLPackage {
   GetBitmap();
   Init();
   StringExtract();
   CanBeOwnedByThisClass();
   HasChanged();
   GetUMLElements();
   GetAssociations();
   GetUMLObjectKind();
}
declare class UMLUseCaseFirstPageAgent extends UMLClassifierFirstPageAgent {
   IsExternal: string ;
}
declare class UMLUseCaseInGraphAgent extends UMLModelElementInGraphAgent {
   Ellipse: string ;
   Name: string ;
}
/**
*The purpose of a use case is to define a piece of behavior of an entity without revealing the internal structure of the entity.
Each use case specifies a service the entity provides to its users, i.e. a specific way of using the entity.
It specifies a complete sequence initiated by a user; i.e. the interactions between the users and the entity as well as the responses performed by the entity, as they are perceived from the outside, are specified.

*/
declare class aUMLUseCase extends aUMLClassifier {
   IsExternal: string ;
   CanBeDroppedInDiagram();
   EntityClass();
   CanBeOwnedByThisClass();
   GetBitmap();
}
declare class UMLUseCaseAssociationFirstPageAgent extends UMLAssociationFirstPageAgent {
   AssociationType: string ;
   AssociationTypeStaticText: string ;
}
declare class aUMLUseCaseAssociationInGraphAgent extends UMLModelElementInGraphAgent {
   AssociationType: string ;
   StartLink: string ;
   EndLink: string ;
   Name: string ;
   Init();
   CalcLinkFrom();
   CalcLinkTo();
   GetLinkKindFor();
   IsSubUIAgentHidden();
   LoadValue();
}
declare class UMLUseCaseAssociationGraphAgent extends aXXXAsAutoSizeGTUIAgent {
}
declare class aUMLUseCaseAssociation extends aUMLAssociation {
   AssociationType: string ;
   EntityClass();
   GetBitmap();
   CanBeDroppedInDiagram();
}
/**
*Use case diagrams show elements from the analysis model. The analysis model represents functionality
of a system or a class as mainfested to external interactors with the system.
*/
declare class aUMLUseCaseDiagram extends aUMLDiagram {
   GetGraphClassName();
   CreateToolbar();
   EntityClass();
   CanBeOwnedByThisClass();
   GetBitmap();
   GetUMLDiagramKind();
}
declare class aUMLUseCaseGraph extends aUMLGraph {
   StringExtract();
}
declare class UMLUseCaseToolbarAgent extends UMLToolbarAgent {
   Actor: string ;
   UseCase: string ;
   UseCaseAssociation: string ;
}
declare class aUMLUseCaseToolbar extends aUMLToolbar {
   Actor: string ;
   UseCase: string ;
   UseCaseAssociation: string ;
   Init();
   Terminate();
   StringExtract();
   ToolbarItemsInitFromDiagram();
}
declare class UMLActorFirstPageAgent extends UMLClassifierFirstPageAgent {
   ActorType: string ;
   ActorTypeStaticText: string ;
}
declare class UMLActorInGraphAgent extends UMLModelElementInGraphAgent {
   UMLActorDraw: string ;
   Name: string ;
}
/**
*Actors model parties outside an entity such as a system, a software, or a human, which interact with the entity.
Each actor defines a coherent set of roles users of the entity can play when interacting with the entity. 

*/
declare class aUMLActor extends aUMLClassifier {
   ActorType: string ;
   EntityClass();
   CanBeOwnedByThisClass();
   GetBitmap();
   CanBeDroppedInDiagram();
}
declare class aUMLActivityGraph extends aUMLStateGraph {
   StringExtract();
}
/**
*An activity model is a variation of a state machine in which the states are Activities representing
the performance of operations and the transitions are triggered by the completion of the operations.
It represents a state machine of a procedure itself; the procedure is the implementation of an operation
on the owning class.
*/
declare class aUMLActivityDiagram extends aUMLStateDiagram {
   GetGraphClassName();
   CreateToolbar();
   EntityClass();
   CanBeOwnedByThisClass();
   GetBitmap();
   GetUMLDiagramKind();
}
declare class UMLActivityToolbarAgent extends UMLStateToolbarAgent {
   ActionState: string ;
   Decision: string ;
   Partition: string ;
   ClassifierInState: string ;
   LoadValue();
}
declare class aUMLActivityToolbar extends aUMLStateToolbar {
   ActionState: string ;
   Decision: string ;
   Partition: string ;
   ClassifierInState: string ;
   Init();
   Terminate();
   StringExtract();
   ToolbarItemsInitFromDiagram();
}
declare class UMLPartitionGraphAgent extends aRectangleWithTitleGraphFrameUIAgent {
   Name: string ;
}
declare class UMLPartitionFirstPageAgent extends UMLObjectFirstPageAgent {
   Contents: string ;
}
/**
*A partition is a mechanism for dividing the states of an activity model into groups. Partitions often
correspond to organizational units in a business model. They may be used to allocate characteristics
or resources among the states of an activity model.
*/
declare class aUMLPartition extends aUMLModelElement {
   Contents: string ;
   isGraphDependant();
   EntityClass();
   GetBitmap();
}
declare class UMLClassifierInStateGraphAgent extends aRectangleWithTitleGraphFrameUIAgent {
   Classifier: string ;
   Name002: string ;
   InState: string ;
   Name003: string ;
}
declare class UMLClassifierInStateFirstPageAgent extends UMLClassifierFirstPageAgent {
   Classifier: string ;
   ClassifierStaticText: string ;
   InState: string ;
   InStateStaticText: string ;
}
/**
*A classifier in state characterizes instances of a given classifier for a particular state. In an
activity model, it may be input and/or output to an action through an object flow state.
*/
declare class aUMLClassifierInState extends aUMLClassifier {
   Classifier: string ;
   InState: string ;
   EntityClass();
   isGraphDependant();
   GetBitmap();
}
declare class aUMLDecision extends aUMLPseudoStateJunction {
   EntityClass();
   GetBitmap();
   ScenarioInGraph();
}
declare class UMLClassifierRoleFirstPageAgent extends UMLClassifierFirstPageAgent {
   Multiplicity: string ;
   Classifier: string ;
   ClassifierStaticText: string ;
}
declare class UMLClassifierRoleGraphAgent extends aRectangleWithTitleGraphFrameUIAgent {
   Name: string ;
   Classifier: string ;
   Name001: string ;
}
/**
*A classifier role is a specific role played by a participant in a collaboration. It specifies a restricted
view of a classifier, defined by what is required in the collaboration.
*/
declare class aUMLClassifierRole extends aUMLClassifier {
   Classifier: string ;
   Multiplicity: string ;
   EntityClass();
   GetBitmap();
   InSequenceDiagramExtract():string;
   CanBeDroppedInDiagram();
}
/**
*A collaboration diagram shows an interaction organized around the objects in the interaction and
their links to each other. Unlike a sequence diagram, a collaboration diagram shows the relationships
among the object roles. On the other hand, a collaboration diagram does not show time as a
separate dimension, so the sequence of messages and the concurrent threads must be determined
using sequence numbers.
*/
declare class aUMLCollaborationDiagram extends aUMLDiagram {
   GetGraphClassName();
   CreateToolbar();
   EntityClass();
   CanBeOwnedByThisClass();
   GetBitmap();
   GetUMLDiagramKind();
}
declare class aUMLCollaborationGraph extends aUMLGraph {
   StringExtract();
}
declare class UMLCollaborationToolbarAgent extends UMLToolbarAgent {
   Message: string ;
   ClassifierRole: string ;
}
declare class aUMLCollaborationToolbar extends aUMLToolbar {
   ClassifierRole: string ;
   Message: string ;
   NewMessage():aUMLGraphDraggableAssociation;
   Init();
   Terminate();
   StringExtract();
   ToolbarItemsInitFromDiagram();
}
declare class UMLMessageFirstPageAgent extends UMLAssociationFirstPageAgent {
   Method: string ;
   MethodStaticText: string ;
   Synchronous: string ;
   Response: string ;
   Response001: string ;
   ResponseStaticText: string ;
}
/**
*A message defines how a particular request is used in an interaction.
*/
declare class aUMLMessage extends aUMLAssociation {
   Method: string ;
   Synchronous: string ;
   IsResponse: string ;
   HostActivation: string ;
   TargetActivation: string ;
   Response: string ;
   CreationMessage: string ;
   RecursiveCall():boolean;
   EntityClass();
   GetBitmap();
   CanBeDroppedInDiagram();
   GetUMLObjectKind();
   CanAnswer(ThisMessage:aUMLMessage):boolean;
   RegisterInAssociation(theAssociation:aUMLMessage);
   UnRegisterInAssociation();
   StartMasterObject():aUMLObject;
   EndMasterObject():aUMLObject;
   SetResponse(Response:aUMLMessage);
   GetResponse():aUMLMessage;
   CancelObject();
   HasFocusOfControl():boolean;
   ScenarioInGraph();
}
/**
*A sequence diagram shows an interaction arranged in time sequence. In particular, it shows the
objects participating in the interaction by their “lifelines” and the messages that they exchange
arranged in time sequence. It does not show the associations among the objects.
*/
declare class aUMLSequenceDiagram extends aUMLCollaborationDiagram {
   GetGraphClassName();
   CreateToolbar();
   EntityClass();
   CanBeOwnedByThisClass();
   GetBitmap();
   GetUMLDiagramKind();
}
declare class aUMLSequenceGraph extends aUMLCollaborationGraph {
   StringExtract();
}
declare class UMLSequenceToolbarAgent extends UMLCollaborationToolbarAgent {
   CutLife: string ;
}
declare class aUMLSequenceToolbar extends aUMLCollaborationToolbar {
   CutLife: string ;
   Init();
   Terminate();
   NewMessage():aUMLSequenceDiagramDraggableMessage;
   ToolbarItemsInitFromDiagram();
}
declare class UMLGuardFirstPageAgent extends UMLModelElementFirstPageAgent {
   BooleanFunction: string ;
   BooleanFunctionStaticText: string ;
}
/**
*A guard condition is a boolean expression that may be attached to a transition in order to determine
whether that transition is enabled or not.
*/
declare class aUMLGuard extends aUMLModelElement {
   BooleanFunction: string ;
   EntityClass();
   isGraphDependant();
   CanBeOwnedByThisClass();
   Register(InObject:aUMLAction);
}
declare class UMLStateToolbarAgent extends UMLToolbarAgent {
   State: string ;
   PseudoState: string ;
   StartState: string ;
   EndState: string ;
   Transition: string ;
   VerticalBar: string ;
   HorizontalSyncBar: string ;
   VerticalSyncBar: string ;
   LoadValue();
}
declare class aUMLStateToolbar extends aUMLToolbar {
   State: string ;
   StartState: string ;
   EndState: string ;
   PseudoState: string ;
   Transition: string ;
   SplitBar: string ;
   HorizontalSyncBar: string ;
   VerticalSyncBar: string ;
   Init();
   Terminate();
   StringExtract();
   ToolbarItemsInitFromDiagram();
}
declare class aUMLStateGraph extends aUMLGraph {
   StringExtract();
}
/**
*A statechart diagram shows the sequences of states that an object or an interaction goes through
during its life in response to received stimuli, together with its responses and actions.
*/
declare class aUMLStateDiagram extends aUMLDiagram {
   GetGraphClassName();
   CreateToolbar();
   EntityClass();
   CanBeOwnedByThisClass();
   GetBitmap();
   GetUMLDiagramKind();
}
declare class UMLStateVertexTransitionsAgent extends aUIAgent {
   OutgoingTransitionGroupBox: string ;
   IncomingTransitionGroupBox: string ;
   IncomingTransition001: string ;
   OutgoingTransition: string ;
}
declare class UMLStateVertexFolderAgent extends aFolderViewAgent {
}
/**
*A StateVertex is an abstraction of a node in a statechart diagram. In general, it can be the source or
destination of any number of transitions.
*/
declare class aUMLStateVertex extends aUMLModelElement {
   IncomingTransition: string ;
   OutgoingTransition: string ;
   Kind: string ;
   RegisterInAssociation();
   UnRegisterInAssociation();
   BeforeAccept();
   GetUMLObjectKind();
   ClassIdFromData();
   InStateDiagramExtract():string;
   GetBitmap();
   AggregationPart():number;
   IsEventedState():boolean;
   CanBeDroppedInDiagram();
}
declare class UMLStateGraphAgent extends aRoundGraphFrameUIAgent {
   Name: string ;
   IncomingTransition: string ;
   OutgoingTransition: string ;
}
declare class UMLStateFirstPageAgent extends UMLModelElementFirstPageAgent {
}
/**
*A State is a condition or situation during the life of an object during which is satisfies some
condition, performs some activity, or waits for some event. A state models a dynamic situation in
which, typically, one or more (implicit or explicit) conditions hold.
*/
declare class aUMLState extends aUMLEventedState {
   EntityClass();
}
declare class UMLActionStateFirstPageAgent extends UMLModelElementFirstPageAgent {
}
/**
*An action state represents the execution of an atomic action, typically the invocation of an
operation.
*/
declare class aUMLActionState extends aUMLStateVertex {
   Action: string ;
   EntityClass();
   GetBitmap();
   ScenarioInGraph();
}
declare class UMLPseudoStateGraphAgent extends aRectangleWithTitleGraphFrameUIAgent {
   Name: string ;
   IncomingTransition: string ;
   OutgoingTransition: string ;
}
/**
*A pseudo state is an abstraction of different types of nodes in the state machine graph which
represent transient points in transition paths from one state to another (e.g., branch and fork points).
Pseudo states are used to construct complex transitions from simple transitions.
*/
declare class aUMLPseudoStateJunction extends aUMLPseudoState {
   DynamicChoice: string ;
   EntityClass();
   GetBitmap();
   ScenarioInGraph();
}
declare class UMLTransitionFirstPageAgent extends UMLModelElementFirstPageAgent {
   TriggerStaticText: string ;
   GuardStaticText: string ;
   EffectStaticText: string ;
   SourceStaticText: string ;
   TargetStaticText: string ;
   StartLink: string ;
}
declare class UMLTransitionGraphAgent extends aEllipseGraphFrameUIAgent {
   Name: string ;
   StartLink: string ;
   EndLink: string ;
   CalcLinkFrom();
   CalcLinkTo();
}
/**
*A Transition is a relationship between a source state vertex and a target state vertex. It may be part
of a compound transition, which takes the state machine from one state configuration to another,
representing the complete response of the state machine to a particular event instance for a given
source state configuration.
*/
declare class aUMLTransition extends aUMLAssociation {
   Action: string ;
   Init();
   EntityClass();
   isGraphDependant();
   GetBitmap();
   CanBeDroppedInDiagram();
   SetEditName();
   GetEditName();
   InDiagramExtract();
   StringExtract();
}
/**
*An event is the specification of a significant occurrence that has a location in time and space. An
instance of an event can lead to the activation of a behavioral feature in an object.
*/
declare class aUMLEvent extends aUMLModelElement {
   isGraphDependant();
   EntityClass();
   CanBeOwnedByThisClass();
   StringExtract();
   Register(InObject:aUMLAction);
}
/**
*A SignalEvent represents events that result from the reception of a signal by an object.
*/
declare class aUMLSignalEvent extends aUMLEvent {
   EntityClass();
}
declare class UMLChangeEventFirstPageAgent extends UMLModelElementFirstPageAgent {
   BooleanFunction: string ;
   BooleanFunctionStaticText: string ;
}
/**
*A change event is an event that is generated when one or more attributes or relationships change
value according to an explicit expression.
*/
declare class aUMLChangeEvent extends aUMLEvent {
   BooleanFunction: string ;
   EntityClass();
}
declare class UMLTimeEventFirstPageAgent extends UMLModelElementFirstPageAgent {
   Duration: string ;
   DurationStaticText: string ;
}
/**
*A TimeEvent is a subtype of Event for modeling event instances resulting from the expiration of a
deadline.

*/
declare class aUMLTimeEvent extends aUMLEvent {
   Duration: string ;
   EntityClass();
}
declare class UMLCallEventFirstPageAgent extends UMLModelElementFirstPageAgent {
   Operation: string ;
   OperationStaticText: string ;
}
/**
*A call event is the reception of a request to invoke an operation. The expected result is the
execution of the operation.
*/
declare class aUMLCallEvent extends aUMLEvent {
   Operation: string ;
   EntityClass();
}
declare class aUMLProject007Agent extends aFolderViewAgent {
}
declare class UMLClassifierRoleInSequenceDiagramAgent extends UMLModelElementInGraphAgent {
   DragX: string ;
   DragY: string ;
   InSequenceDiagramExtract: string ;
   TheResult: string ;
   UMLClassifierRoleExtEndLife: string ;
   EndLifeAgent():aGraphFrameUIAgent;
   SetEndLife(Y:number);
   MinY():number;
   EraseLifeLineOnActivations(PS:string);
   DrawLifeLine(Ps:string, xPaint:number, yPaint:number, WidthPaint:number, HeightPaint:number);
   DrawBackLinks();
   CalcRectFromLinks();
   CalcLinkFrom();
   CalcLinkTo();
   DrawHorzLine();
   ActivationFromY(Y:number):UMLMessageFocusOfControlFrameAgent;
   MostStackedActivationFromY(Y:number):UMLMessageFocusOfControlFrameAgent;
   PutMyFrameToMoveList();
   Init();
   IsCreationPoint(PointAgent:aPointUIAgent):boolean;
   CalcExpectedPosForFrame();
   CalcExpectedReposForFrame();
   MinAutoWidthHeight();
}
declare class UMLClassifierRoleExtEndLifeAgent extends aExtGraphUIAgent {
   aUMLClassifierRole003: string ;
   YForOutput: string ;
   GetExtUIAgent();
   SetExtUIAgentVar(UIAgent:UMLClassifierRoleEndLifeFrameAgent);
   FinalizeFrameUIAgent(QVarPresentor:aQVarPresentor, UIAgent:aGraphFrameUIAgent);
   OutputEndLife(Y:number);
   SetExtDefaultPos();
}
declare class UMLClassifierRoleEndLifeFrameAgent extends aAutoSizeGraphFrameUIAgent {
   aUMLClassifierRole004: string ;
   MasterFrameUIAgent: string ;
   FromExtUIAgent: string ;
   FromFrameUIAgent():aGraphFrameUIAgent;
   AuthorizedDx();
   AuthorizedDy();
   Finalize();
   PaintBack();
   NotifyTerminate();
   SetExtUIAgent();
   NotifyDelete();
}
declare class UMLClassifierRoleEndLifeXTextAgent extends aXXXAsAutoSizeGTUIAgent {
   GetText();
   WidthMargin();
   HeightMargin();
}
declare class UMLClassifierRoleDefaultActivationFrameAgent extends aActivationGraphFrameUIAgent {
   CalcLinkFrom();
}
declare class UMLClassifierRoleExtDefaultActivationAgent extends aExtFocusOfControlAgent {
   UMLClassifierRoleDefaultActivationFrame: string ;
   SetExtUIAgent(UIAgent:UMLClassifierRoleDefaultActivationFrameAgent);
   GetExtUIAgent();
   SetExtDefaultPos();
}
declare class UMLMessageInSequenceDiagramAgent extends UMLAssociationFrameAgent {
   UMLMessageExtFocusOfControl: string ;
   LinkPoint();
   MaxY():number;
   MaxX():number;
   MinX():number;
   AuthorizedDx();
   AuthorizedDy();
   MaxDistToLine();
   MarkLinksToDestroy();
   CalcExpectedPosForFrame();
   CalcExpectedPos();
}
declare class UMLMessageInGraphWithTitleAgent extends aRectangleWithTitleGraphFrameUIAgent {
   StartLink: string ;
   EndLink: string ;
   CalcLinkFrom();
   CalcLinkTo();
   PaintBack();
   DrawTitleLine();
}
declare class UMLMessageLinkAgent extends UMLAssociationLinkAgent {
   ThingShouldBeResponse: string ;
   PointsToRight():boolean;
   GetLinkKind();
   GetLineKind();
   GetExtGraphUIAgent():aExtGraphUIAgent;
   GetToFrameUIAgent();
   GetFromFrameUIAgent();
   CreateLinkFor();
   NewLinkScenario();
   BuildLinkUIAgent();
   GetFromObject();
   LoadValue();
   NotifyInit();
}
declare class UMLMessageExtFocusOfControlAgent extends aExtGraphUIAgent {
   UMLMessageFocusOfControlFrame: string ;
   LoadValue();
   SetExtUIAgentVar(UIAgent:UMLMessageFocusOfControlFrameAgent);
   GetExtUIAgent();
   GetToFrameUIAgent();
   GetToY():number;
   SetExtDefaultPos();
   OutputExtFrame();
   GetTargetFrameUIAgent():aGraphFrameUIAgent;
   SetExtDefaultSize();
}
declare class UMLMessageFocusOfControlFrameAgent extends aAutoSizeGraphFrameUIAgent {
   OriginatorExtUIAgent: string ;
   MasterHostsLifeLine(MasterAgent:aGraphFrameUIAgent):boolean;
   HostedByLifeLine():boolean;
   CanBeSelected();
   MaxHeight():number;
   AuthorizedDx();
   ExpectedWidth():number;
   CalcAuthorizedDyFor(thisFrame:aFrame, LinkUIAgent:aLinkUIAgent, MinY:number, MaxY:number);
   CanChangeHeight();
   ActivationFromY(Y:number):UMLMessageFocusOfControlFrameAgent;
   MostStackedActivationFromY(Y:number):UMLMessageFocusOfControlFrameAgent;
   Paint();
   CalcExpectedPosForFrame();
   CalcExpectedPos();
   CalcExpectedReposForFrame();
   AuthorizedDw();
   GiveForm();
   AutoWidthHeightFromSubAgents();
   LoadValue();
   CalcLinkFrom();
   NotifyTerminate();
   MarkLinksToDestroy();
   SetExtUIAgent(Agent:UMLMessageExtFocusOfControlAgent);
   NotifyDelete();
   GiverOfNewVersionsOfThisScenario();
   GetExpectedMasterFrameUIAgent();
}
declare class UMLSequenceGraphAsControlAgent extends UMLGraphAsControlAgent {
   ActivationAgentOfObject(Object:aUMLObject, CreateIfPossible:boolean):aGraphFrameUIAgent;
}
declare class aUMLSequenceDiagramDraggableMessage extends aUMLGraphDraggableAssociation {
   CreationMessage: string ;
   GetFocusOfControlWidth():number;
   DropIt();
   CreateNewElementAtDrop();
   CanBeDroppedIn();
   XForDrop();
   YForDrop();
   GetFrameAgentAt();
}
declare class aUMLGraphDraggableEndLife extends aUMLGraphDraggableObject {
   CreateNewElementAtDrop();
   CanBeDroppedIn();
}
declare class aActivationGraphFrameUIAgent extends aAutoSizeGraphFrameUIAgent {
   MasterFrameUIAgent: string ;
   HostedByLifeLine():boolean;
   MaxHeight():number;
   SetMasterFrameUIAgent(Master:UMLClassifierRoleInSequenceDiagramAgent);
   AuthorizedDx();
   AuthorizedDy();
   Finalize();
   CalcAutoWidthHeight();
   CalcAuthorizedDyFor(thisPoint:aPoint, LinkUIAgent:aLinkUIAgent, MinDy:number, MaxDy:number, Dy:number):number;
   CalcAuthorizedDxDyDwDhFor();
   CanChangeHeight();
   MostStackedActivationFromY(Y:number):aActivationGraphFrameUIAgent;
}
declare class aResponseRole extends aSingleRoleType {
   pickInMemOnly(inThis:aListOfInstances, checkObjects:boolean, FromThisObject:aEntity, pFromThisVar:string):boolean;
   Accepts(FromThisObject:aUMLMessage, toThisObject:aUMLMessage):boolean;
   SearchAndPick(FromThisObject:aUMLMessage, FromThisVar:string, fromThisUIAgent:aUIAgent, TheCriterium:string, TheArgument:string, atThisRank:number):string;
   canBreakLinkBetween(FromThisObject:aUMLMessage, toThisObject:aFullObject, fromThisVar:string):boolean;
}
declare class aExtFocusOfControlAgent extends aExtGraphUIAgent {
   SetExtDefaultSize();
}
declare class UMLAssociationFrameAgent extends UMLModelElementInGraphAgent {
   InDiagramExtract: string ;
   Result: string ;
   UMLAssociationLink: string ;
   StartLink: string ;
   EndLink: string ;
   Init();
   LinkPoint(LinkVar:RefToTypeForGraphAgent):aPoint;
   GetUMLMessageLink():UMLAssociationLinkAgent;
   Recursive():boolean;
   MaxDistToLine():number;
   DrawWhenFastDrag();
   MarkLinksToDestroy();
   GetLinkForeColorFor();
   CalcExpectedPos();
}
declare class UMLAssociationLinkAgent extends aLinkBetweenTwoFrameUIAgent {
   StartLink: string ;
   EndLink: string ;
   BuildLinkUIAgent();
}
declare class UMLToolbarDependencyAgent extends UMLToolbarMoreAgent {
   Dependency: string ;
}
declare class UMLToolbarMoreAgent extends aUIAgent {
}
declare class UMLDiagramDebugAgent extends aUIAgent {
   UMLElements: string ;
}
declare class UMLProjectPropertiesAgent extends aUIAgent {
   NamedEntityCreater: string ;
}
declare class LisOpenedDiagramsAgent extends aListOfFolderUIAgent {
   Loading: string ;
   LoadValue();
}
declare class aDelegationGraph extends aGraph {
   GraphToDelegate: string ;
   AlignLeft();
   AlignRight();
   AlignTop();
   AlignBottom();
   AlignWidth();
   AlignHeight();
   AlignInterWidth();
   AlignInterHeight();
   AlignHorzCenter();
   AlignVertCenter();
   AlignGroup();
   AlignUnGroup();
   EnableOrDisableArrows();
   EnableOrDisableDT();
   SendToFront();
   SendToBack();
   ShowSelectedFrames();
   HideSelectedFrames();
   ModifyKinds();
}
declare class aGraphEntityFromPresentedObjectHashTable extends aHashTable {
   Allocate(pKey:aFullObject):string;
   Free(pHashElement:string);
   Compare(pHashElement:string, pKey:aFullObject):boolean;
/**
*Portability Check: OK
*/
   HashCode(pKey:aFullObject):number;
/**
*Portability Check: OK
*/
   AppendGraphEntity(GraphEntity:aGraphEntity);
   FindGraphEntity(PresentedObject:aFullObject):aGraphEntity;
}
declare class UMLDecisionFrameAgent extends aIsoFrameUIAgent {
   PaintDiamondShape(Ps:string, XPaint:number, YPaint:number, WidthPaint:number, HeightPaint:number);
   PaintBack();
   PaintBorder();
   Paint();
}
declare class UMLClassifierRoleDebugAgent extends aUIAgent {
}
declare class UMLCollaborationToolbarMoreAgent extends aUIAgent {
   Message002: string ;
   ClassifierRole002: string ;
}
declare class UMLToolbarMoreOverrideInCollaborationAgent extends UMLToolbarDependencyAgent {
   UMLCollaborationToolbarMore: string ;
}
declare class UMLMessageDebugAgent extends aUIAgent {
   HostActivation: string ;
   HostActivationStaticText: string ;
   TargetActivation: string ;
   TargetActivationStaticText: string ;
}
declare class UMLSequenceToolbarMoreAgent extends UMLCollaborationToolbarMoreAgent {
   CutLife001: string ;
}
declare class UMLToolbarMoreOverrideInSequenceDiagramAgent extends UMLToolbarMoreAgent {
}
declare class UMLStateGraphAsControlAgent extends UMLGraphAsControlAgent {
}
declare class UMLActionStateFrameAgent extends aGraphFrameUIAgent {
   RoundParameter: string ;
   InStateDiagramExtract: string ;
   _Result: string ;
   PaintBack();
   PaintBorder();
   Paint();
   NotifyRangeHasChanged();
   NotifyButtonDblClk();
   Show();
   Hide();
   GetFrameInfo(Frame:aFrame, Agent:aGraphFrameUIAgent, Object:aUMLObject, IsState:boolean, IsAggregation:boolean);
   GetMasterFrameInfo(MasterFrame:aFrame, MasterAgent:aGraphFrameUIAgent, MasterObject:aUMLObject, MasterIsState:boolean, MasterIsAggregation:boolean);
   NotifyGetChar();
   WillCalcLinkFromCenters();
   AutoWidth();
   CanChangeWidth();
   AutoHeight();
   CanChangeHeight();
   CalcAutoWidthHeight();
   GetBackColor();
   GetExpectedMasterFrameUIAgent();
}
declare class UMLPseudoStateJunctionAgent extends UMLPseudoStateFinalAgent {
   LoadValue();
}
declare class UMLPseudoStateJunctionFirstPageAgent extends UMLModelElementFirstPageAgent {
   DynamicChoice: string ;
}
declare class UMLActionFirstPageAgent extends UMLModelElementFirstPageAgent {
   Trigger: string ;
   TriggerStaticText: string ;
   Guard: string ;
   GuardStaticText: string ;
   Effect: string ;
   EffectStaticText: string ;
}
declare class aUMLAction extends aUMLModelElement {
   Trigger: string ;
   Guard: string ;
   Effect: string ;
   Init();
   GuardExtract():string;
   EffectExtract():string;
   TriggerExtract():string;
   InStateExtract():string;
   StringExtract();
   SetEditName();
   GetEditName();
   Register(InObject:aUMLTransition);
}
declare class aUMLGraphDraggableInState extends aUMLGraphDraggableObject {
   GetElementOwner();
   RegisterNewElement();
}
declare class aUMLGeneralizationState extends aUMLCompositeState {
}
declare class aUMLCompositeState extends aUMLEventedState {
   SubStates: string ;
   GetUMLElements();
}
declare class UMLStateInStatediagramAgent extends aRoundGraphFrameUIAgent {
   IncomingTransition: string ;
   OutgoingTransition: string ;
   InStateDiagramExtract: string ;
   Result: string ;
   Actions: string ;
   GetFrameInfo(Frame:aFrame, Agent:aGraphFrameUIAgent, Object:aUMLObject, IsState:boolean, IsAggregation:boolean);
   GetMasterFrameInfo(MasterFrame:aFrame, MasterAgent:aGraphFrameUIAgent, MasterObject:aUMLObject, MasterIsState:boolean, MasterIsAggregation:boolean);
   NotifyGetChar();
   WillCalcLinkFromCenters();
   AutoWidth();
   CanChangeWidth();
   AutoHeight();
   CanChangeHeight();
   GetSplitWholeBox():boolean;
   MaxY(ps:string):number;
   SetMaxY(ps:string, MaxY:number);
   CalcAutoWidthHeight();
   GetBackColor();
   CalcExpectedPosForFrame();
   CalcExpectedReposForFrame();
   CalcExpectedPosFromFramePosOrAutoSize();
   LoadValue();
   GetExpectedMasterFrameUIAgent();
}
declare class UMLEventedStateSplitAgent extends aSplitFrameUIAgent {
   GetFrameInfo(Frame:aFrame, Agent:aGraphFrameUIAgent, Object:aUMLObject, IsState:boolean, IsAggregation:boolean);
   GetMasterFrameInfo(MasterFrame:aFrame, MasterAgent:aGraphFrameUIAgent, MasterObject:aUMLObject, MasterIsState:boolean, MasterIsAggregation:boolean);
   LoadValue();
   SetTopSplit(ps:string, Top:number);
   TopSplit();
   CalcExpectedReposForFrame();
   CalcExpectedPosFromFramePosOrAutoSize();
   CalcMasterExpectedPosFromPosOrAutoSize();
   GetExpectedMasterFrameUIAgent();
}
declare class UMLEventedStateActionsListAgent extends aUIAgent {
   Actions001: string ;
}
declare class UMLEventedStateFolderAgent extends aFolderViewAgent {
}
declare class aUMLEventedState extends aUMLStateVertex {
   Actions: string ;
   ScenarioInGraph();
   ClassIdFromData();
   IsEventedState();
   IsAggregationState():boolean;
}
declare class aUMLAggregationState extends aUMLCompositeState {
   IsAggregationState();
   CreateAndGetDefaultSubState():aUMLGeneralizationState;
   InitAfterRecast();
}
declare class aUMLGraphDraggableStateAggregationSeparator extends aUMLGraphDraggableObject {
   Horizontal: string ;
   AgentIsAggregation(Agent:aGraphFrameUIAgent):boolean;
   CreateNewElementAtDrop();
   GetFrameAgentAt();
}
declare class aUMLDraggableTransition extends aUMLGraphDraggableAssociation {
   UMLObjectsRelated();
}
declare class UMLInitialPseudoStateInGraphAgent extends UMLPseudoStateFinalAgent {
   NotifyInit();
}
declare class aUMLInitialPseudoState extends aUMLPseudoState {
   GetBitmap();
   ScenarioInGraph();
   OwnerExtract():string;
   StringExtract();
}
declare class UMLPseudoStateFinalAgent extends aIsoFrameUIAgent {
   UMLPseudoStateDrawGraphScenario: string ;
   GetExpectedMasterFrameUIAgent();
}
declare class UMLPseudoStateDrawGraphScenarioAgent extends aDrawGraphUIAgent {
   Ellipse: string ;
   Ellipse001: string ;
}
declare class aUMLPseudoState extends aUMLStateVertex {
   isGraphDependant();
}
declare class aUMLFinalState extends aUMLPseudoState {
   GetBitmap();
   ScenarioInGraph();
}
declare class aUMLSync extends aUMLSyncOrFork {
}
declare class UMLSyncOrForkHorizontalFrameAgent extends UMLSyncOrForkFrameAgent {
   CanChangeHeight();
   AutoWidth();
}
declare class UMLSyncOrForkVerticalFrameAgent extends UMLSyncOrForkFrameAgent {
   CanChangeWidth();
   AutoHeight();
}
declare class UMLSyncOrForkFrameAgent extends UMLModelElementInGraphAgent {
   Init();
   WillCalcLinkFromCenters();
   Thickness():number;
   AutoWidthHeightFromSubAgents();
   GetExpectedMasterFrameUIAgent();
}
declare class aUMLSyncOrFork extends aUMLPseudoState {
}
declare class aUMLHistoryIndicator extends aUMLPseudoState {
}
declare class aUMLFork extends aUMLSyncOrFork {
}
declare class aUMLOperation extends aUMLModelElement {
   Method: string ;
   StringExtract();
   Register(InObject:aUMLAction);
}
declare class aUMLContainer002Agent extends aToolBarUIAgent {
}
declare class aUMLContainer001DockedAgent extends aUIAgent {
   UMLProjects: string ;
}
declare class aWSGlossaryDomainWSHTMLProducer extends aWSGlossaryTopicWSHTMLProducer {
   FileName();
   ListFileName():string;
   ProduceTopicListForThisLevel();
   ProduceTopicList();
   GetRGBBackColor();
   GetRGBForeColor();
   Produce(where:aProducedTextWithCheckSum, options:string);
   OpenBody();
   ProduceWhereIComeFrom();
   DevelopTreeFileURL():string;
   UnDevelopTreeFileName():string;
   ProduceLinkInTree(where:aProducedTextWithCheckSum, Developped:boolean);
   DevelopTreeForDomain(Domain:aWSGlossaryDomain, where:aProducedTextWithCheckSum);
}
declare class HowToProduceScenOverrideAgent extends HowToProduceScenAgent {
   TopicSubjects: string ;
   TopicSubjectsGroupBox: string ;
   ProduceQuoteForAmbiguousTopic: string ;
   BackGroundColor: string ;
   BackGroundColorStaticText: string ;
   TextColor: string ;
   TextColorStaticText: string ;
   LinkColor: string ;
   LinkColorStaticText: string ;
   ActiveLinkColor: string ;
   ActiveLinkColorStaticText: string ;
   VisitedLinkColor: string ;
   VisitedLinkColorStaticText: string ;
   GenerateUsedGlossariesAsSubFolder: string ;
}
declare class aWSGlossaryHTMLGenerator extends aWSRootGenerator {
   TopicSubjects: string ;
   ProduceQuoteForAmbiguousTopic: string ;
   BackGroundColor: string ;
   TextColor: string ;
   LinkColor: string ;
   ActiveLinkColor: string ;
   VisitedLinkColor: string ;
   DefaultFont: string ;
   GenerateUsedGlossariesAsSubFolder: string ;
   GetEntityName();
   WebSiteIndex():string;
   InitOn();
   InitGenerator();
   TerminateGenerator();
   InitFactory();
   GetTargetFactory();
}
declare class aWSGlossaryWSHTMLProducer extends aWSGlossaryEntityWSHTMLProducer {
   FileName();
   TreeFileName():string;
   InBrowserName();
   TopicListFileName():string;
   DefaultPageName():string;
   ProduceCSS(ForFrame:string):aProducedTextWithCheckSum;
   ProduceLiCSS(CSSFile:aProducedTextWithCheckSum);
   ProduceTopicCSS();
   ProduceTreeCSS();
   ProduceListCSS();
   ProduceCSSFiles();
   ProduceMainFrame();
   ProduceDefaultPage();
   ProduceAllTopicsLink(where:aProducedTextWithCheckSum);
   ProduceTreeForDomain(ProducerOfDomainToDevelop:aWSGlossaryDomainWSHTMLProducer);
   ProduceTreeOfDomains();
   ProduceTopicListForEachLevel();
   ProduceTopicGlobalList(ListOfAllTopics:aListOfInstances);
   FillListOfAllTopics(theList:aListOfInstances);
   Produce();
   GetRGBBackColor();
   GetRGBForeColor();
}
declare class aWSGlossaryParserExtensionForHTML extends aWSGlossaryParserExtension {
   TextToParse: string ;
   TextLength: string ;
   ResultText: string ;
   ContainsAmbiguousTopic: string ;
   ResetOn(ThisText:string);
   Terminate();
   GoldCharToHTMLString(c:number):string;
   ConvertToHTMLText(ThisText:string);
   WriteNormalText();
   WriteEntity();
   WriteEntities();
   WriteReturn();
}
declare class aWSGlossarySynonymWSHTMLProducer extends aWSGlossaryTopicOrSynonymWSHTMLProducer {
   ProduceHrefAndCloseBracket();
}
declare class aWSGlossaryTopicWSHTMLProducer extends aWSGlossaryTopicOrSynonymWSHTMLProducer {
   ProduceCSS(CSSFile:aProducedTextWithCheckSum);
   FileName();
   ProduceEntryInList(where:aProducedTextWithCheckSum);
   DoNeedToProduceSection(Section:string):boolean;
   ProduceMenu(where:aProducedTextWithCheckSum, ForSubject:string);
   ProduceDefintion(where:aProducedTextWithCheckSum, ContainsAmbiguousTopic:boolean);
   ProduceExplanation(where:aProducedTextWithCheckSum, ContainsAmbiguousTopic:boolean);
   ProduceExample(where:aProducedTextWithCheckSum, ContainsAmbiguousTopic:boolean);
   ProduceComment(where:aProducedTextWithCheckSum, options:string);
   ProduceSynonyms(where:aProducedTextWithCheckSum, options:string);
   ProduceConcept(where:aProducedTextWithCheckSum, options:string);
   SaveAndProduceGraph(where:aProducedTextWithCheckSum, thisGraph:aGraph, hisName:string);
   ProduceGraph(where:aProducedTextWithCheckSum, options:string);
   ProduceSlides(where:aProducedTextWithCheckSum, options:string);
   ProduceWhereIComeFrom(where:aProducedTextWithCheckSum, options:string);
   Produce(where:aProducedTextWithCheckSum, options:string);
   GetRGBBackColor();
   GetRGBForeColor();
   OpenBody();
}
declare class aWSGlossaryTopicOrSynonymWSHTMLProducer extends aWSGlossaryEntityWSHTMLProducer {
   ProduceLink();
}
declare class aWSGlossaryEntityWSHTMLProducer extends aProducer {
   target();
   GetRGBBackColor():string;
   GetRGBForeColor():string;
   FileName():string;
   InBrowserName():string;
   ProduceReport(Name:string);
   ProduceTitleContent(where:aProducedTextWithCheckSum, options:string);
   ProduceHead(where:aProducedTextWithCheckSum, options:string);
   OpenBody(where:aProducedTextWithCheckSum, options:string);
   CloseBody(where:aProducedTextWithCheckSum, options:string);
   OpenHTMLDocument(where:aProducedTextWithCheckSum, options:string);
   CloseHTMLDocument(where:aProducedTextWithCheckSum, options:string);
   ProduceLink(InText:string, WithText:string);
   ProduceParsedText(where:aProducedTextWithCheckSum, ForText:string, ContainsAmbiguousTopic:boolean);
   ProduceText(where:aProducedTextWithCheckSum, ForText:string);
   ProduceHrefAndCloseBracket(InText:string);
   OpenTextAttribute(InText:string);
   CloseTextAttribute(InText:string);
}
declare class aWSPredefinedSpecificationDomainWSHTMLProducer extends aWSGlossaryDomainWSHTMLProducer {
}
declare class aWSProjectHTMLGenerator extends aWSGlossaryHTMLGenerator {
   DefaultProductionDirectory();
}
declare class aWSPrototypeListWSHTMLProducer extends aWSPredefinedSpecificationDomainWSHTMLProducer {
   Produce();
   ProduceLinkInTree();
}
declare class aWSUsedGlossariesWSHTMLProducer extends aWSPredefinedSpecificationDomainWSHTMLProducer {
   GenerateGlossaryInSubFolder(where:aProducedTextWithCheckSum, thisGlossary:aWSGlossary);
   ProduceLinkFor(where:aProducedTextWithCheckSum, UsedGlossary:aWSGlossary);
   Produce();
}
declare class aWSHTMLProducerFactory extends aProducerFactory {
   Init();
}
declare class aWSGlossaryDomainWSXMLProducer extends aWSGlossaryTopicWSXMLProducer {
   GetTag();
/**
*Portability Check: OK
*/
   Produce();
}
declare class aWSGlossaryEntityWSXMLProducer extends aProducer {
   ProduceFontInfos(Node:aXMLNamedNode);
}
declare class aWSGlossaryTopicWSXMLProducer extends aWSGlossaryEntityWSXMLProducer {
   GetTag():string;
/**
*Portability Check: OK
*/
   Produce();
}
declare class aWSGlossaryWSXMLProducer extends aWSGlossaryEntityWSXMLProducer {
   Report(Name:string);
   target();
   Produce();
}
declare class aWSXMLProducerFactory extends aProducerFactory {
   Init();
}
declare class aWSGlossaryXMLGenerator extends aWSRootGenerator {
   GetTargetFactory();
   DefaultProductionDirectory();
   InitGenerator();
   InitFactory();
   GetEntityName();
}
declare class aWSPrototypeListWSXMLProducer extends aWSGlossaryDomainWSXMLProducer {
/**
*Portability Check: OK
*/
   Produce();
}
declare class aWSUsedGlossariesWSXMLProducer extends aWSGlossaryDomainWSXMLProducer {
/**
*Portability Check: OK
*/
   Produce();
}
declare class aWBGlossaryEntityFirstPageOverrideAgent extends aWBGlossaryEntity002Agent {
   HandleScopes: string ;
   StopParsing: string ;
}
declare class aWSGlossary002Agent extends aUIAgent {
   GlossaryKind: string ;
   Name: string ;
   NameStaticText: string ;
   FromFile: string ;
   StaticText: string ;
   GlossaryKind_ValueStored(:aUIAgent);
   LoadValue();
}
declare class aWSGlossary003Agent extends aUIAgent {
   AddUsedGlossariesDomain: string ;
}
declare class ResetFontAttributesScenAgent extends aUIAgent {
   DummyForResetFontAttributes: string ;
}
declare class aWSGlossary extends aWSGlossaryEntity {
   HandleScopes: string ;
   LastOwnedId: string ;
   StopParsing: string ;
   OpenUsedGlossaryInOtherPresentor: string ;
   GlossaryKind: string ;
   FromFile: string ;
   TopDomains: string ;
   AllDomains: string ;
   TopicsHashTable: string ;
   HashTableUpToDate: string ;
   InRefresh: string ;
   ForceRefreshCount: string ;
   MaxNbTopicWords: string ;
   DomainLoaded: string ;
   MustForceReload: string ;
   myPresentor: string ;
   DummyForRegisterUnRegisteredDomain();
   DummyForComputeDomainsPositions();
   InitFontAttributes();
   EmptyDomains();
   GetDomainOrder():string;
   ReloadDomains();
   StringExtract();
   InitHashTable();
   ComputeProximityFrom(FromEntity:aWSGlossaryEntity, CurEntity:aWSGlossaryTopicOrSynonym);
   GetLinkedEntityByHashName(FromEntity:aWSGlossaryEntity, EntityName:string, Entity:aWSGlossaryEntity, Entities:aListOfInstances);
   GetLinkedEntityByName(FromEntity:aWSGlossaryEntity, EntityName:string, Entity:aWSGlossaryEntity, Entities:aListOfInstances);
   BindNewPresentor(Presentor:aWSGlossaryPresentor);
   NewPresentor():aWSGlossaryPresentor;
   OpenIn(ExecMode:string);
   GenerateHTML();
   GenerateXML();
   IdNameSpaceId();
   GetSubElement();
   NewVersion();
   TitleClassName();
   GetForeColor();
   GetBackColor();
   GetFontName();
   GetFontSize();
   GetFontSels();
   IsAnInOutSyncEntity();
   InOutSyncCategory();
   RenameTopic(Topic:aWSGlossaryTopic):string;
   RenameSynonym(Synonym:aWSGlossarySynonym):string;
   FillHashTable();
   GetXMLTag();
   LoadFromXMLFile(Transaction:aTransaction);
   RegisterAndAcceptTransaction(Transaction:aTransaction);
   ImportFromXML(Transaction:aTransaction);
   CheckDoNoExist():boolean;
   MakeUsedGlossariesDomain():aWSUsedGlossaries;
   UICreate();
   UIConsult();
   UIModify();
   CanBeDeleteByUser():boolean;
   DeleteMyself();
   Authorize();
   GetPresentor();
   GetNsIdAndIdforOwnedEntity();
   DoClone();
   CheckInWithContent();
   CheckOutWithContent();
   SyncWithContent();
   DeliverWithContent();
   AddUsedGlossariesDomain();
   GetBitmap();
   UIDeclaredCheckInWithContent();
   UIVisibleCheckInWithContent():boolean;
   UIDeclaredCheckOutWithContent();
   UIVisibleCheckOutWithContent():boolean;
   UIDeclaredGenerateHTML();
   UIDeclaredGenerateXML();
   UIVisibleUIModalModify():boolean;
   UIDeclaredUIModalModify();
   UIDeclaredUIModalConsult();
   ActionValid();
   DummyForResetFontAttributes();
   IsAnExportableEntity();
}
declare class aWBGlossaryEntity002OverrideAgent extends aWBGlossaryEntity002Agent {
   CreateAsSubDomain: string ;
   InDomain: string ;
   GlossaryStaticText: string ;
   GetGlossaryName: string ;
   ChangeGlossary: string ;
}
declare class WSInGlossaryChangeScenAgent extends aUIAgent {
   GroupBox: string ;
   Glossary005: string ;
}
declare class aWSGlossaryDomain extends aWSGlossaryTopic {
   Glossary: string ;
   InDomain: string ;
   Topics: string ;
   SubDomains: string ;
   LastOwnedId: string ;
   Position: string ;
   CreateAsSubDomain: string ;
   InitFontAttributes();
   Init();
   GetForeColor();
   GetBackColor();
   GetFontName();
   GetFontSize();
   GetFontSels();
   GetSubElement();
   FillHashTable();
   MakeNewVersion():aWSGlossaryDomain;
   IdNameSpaceId();
   StringExtract();
   TitleClassName();
   GetGlossary();
   IsAnInOutSyncEntity();
   InOutSyncCategory();
   getNewOwnedId();
   GetBitmap();
   IsCheckedOutByLoggedUser():boolean;
   IsASubDomainOf(Domain:aWSGlossaryDomain):boolean;
   CanBeDeletedByUser():boolean;
   RemoveFromGlossary(Transaction:aTransaction);
   DeleteMyself();
   NotifyDeletion();
   GetDefaultEntityToSelect():aWSGlossaryEntity;
   NotifyMyNameHasChanged();
   GetDomain();
   GetPresentor();
   ForScenExtract();
   LoadFromXML(Glossary:aWSGlossary, Parent:aWSGlossaryDomain, XMLNode:aXMLNamedNode, Transaction:aTransaction);
   GetNsIdAndIdforOwnedEntity();
   MoveTo(fromThisGlossary:aWSGlossary, toThisGlossary:aWSGlossary);
   RefreshCurrentPresentorAfterMove();
   ChangeGlossary();
   MoveContentToCommonGlossary();
   CloneHierarchIn(ParentClonedDomain:aWSGlossaryDomain, Transaction:aTransaction);
   IsValid();
   IsConsistent();
   IsAnExportableEntity();
   Authorize();
}
declare class aWSGlossaryDomainsRole extends aSingleRoleType {
   ModifyThisObject();
   AuthorizeAction();
   AfterMoveUpOrDown();
   AskForActions();
}
declare class aWSGlossaryDomainTopicsRole extends aSingleRoleType {
   OnChange();
   AuthorizeAction();
   canBreakLinkBetween();
}
declare class WBGlossaryEntityPresentationAgent extends aUIAgent {
   ForeColor: string ;
   ForeColorStaticText: string ;
   BackColor: string ;
   BackColorStaticText: string ;
   FontName: string ;
   FontNameStaticText: string ;
   FontSize: string ;
   FontSizeStaticText: string ;
   FontSels: string ;
   LoadValue();
}
declare class aWBGlossaryEntity002Agent extends aUIAgent {
   Name: string ;
   NameStaticText: string ;
   WBGlossaryEntityPresentation: string ;
}
declare class SelectedGlossaryEntityAgent extends aUIAgent {
}
declare class ColorizedTextAgent extends aUIAgent {
   TextControl: string ;
   TextChanged: string ;
   HasChangedSinceLastTimer: string ;
   CurrentRefreshCount: string ;
   NotifyInit();
   NotifyTimer();
   TextControl_ValueLoaded();
   TextControl_Changed():number;
   LoadFromVar();
   TextControl_GetChar(Ch:number, VKey:string, theCount:number, Flags:string):number;
   TextControl_ButtonDblClk(No:number, X:number, Y:number):number;
   SetBackColor();
   TextControl_Selected(SelectedRank:number):number;
}
declare class aWSGlossaryEntity extends aEntity {
   ForeColor: string ;
   BackColor: string ;
   FontName: string ;
   FontSize: string ;
   FontSels: string ;
   ScopeLevel: string ;
   InitFontAttributes();
   Init();
   GetSubElement(theObject:aFullObject, ptheVar:string, theType:aType);
   TitleClassName():string;
   StringExtract();
   NameNameSpaceId();
   GetForeColor():string;
   GetBackColor():string;
   GetFontName():string;
   GetFontSize():number;
   GetFontSels():string;
   SetForeColor(ForeColor:string);
   SetBackColor(BackColor:string);
   SetFontName(FontName:string);
   SetFontSize(FontSize:number);
   SetFontSels(FontSels:string);
   GetGlossary():aWSGlossary;
   GetDomain():aWSGlossaryDomain;
   AppendInHashTable(HashTable:aDataByStringHashTable, ForGlossary:aWSGlossary, theObject:aWSGlossaryEntity, Name:string);
   AppendWithNumberInHashTable(HashTable:aDataByStringHashTable, ForGlossary:aWSGlossary, theObject:aWSGlossaryEntity, Name:string);
   GetSelectableEntity():aWSGlossaryEntity;
   FillHashTable(HashTable:aDataByStringHashTable, ForGlossary:aWSGlossary);
   GetPresentor():aWSGlossaryPresentor;
   GetNameGlossaryElementNameFromXMLNode(XMLNode:aXMLNamedNode);
   XMLNodeValueAsCString(Node:aXMLNamedNode):string;
   LoadFontInfosFromXML(XMLNode:aXMLNamedNode);
   GetXMLTag():string;
   GetGlossaryName():string;
}
declare class aWSGlossaryParserExtension extends aLightObject {
   WriteNormalText(FromPos:number, ToPos:number);
   WriteEntity(FromPos:number, ToPos:number, Entity:aWSGlossaryEntity);
   WriteEntities(FromPos:number, ToPos:number, Entities:aListOfInstances);
   WriteReturn();
}
declare class aWBGlossaryPresentorCurEntityAgent extends aUIAgent {
   BitMap: string ;
   GlossaryEntityAsModify001: string ;
   GlossaryEntityAsConsult001: string ;
   GlossaryEntityAsModify():aWSGlossaryEntity;
   GlossaryEntityAsConsult():aWSGlossaryEntity;
   LoadValue();
   NotifyInit();
}
declare class SelectedDomainTopicsAgent extends aUIAgent {
   SelectedDomain: string ;
   StaticText: string ;
   Topics: string ;
   NotifyInit();
   Topics_Init():number;
   Topics_ButtonUp(:aUIAgent, No:number, X:number, Y:number):number;
   Topics_GetChar(:aUIAgent, Ch:number, VKey:string, theCount:number, Flags:string):number;
}
declare class aWBGlossaryPresentor002Agent extends aSplitViewAgent {
}
declare class aWBGlossaryPresentorToolBarAgent extends aUIAgent {
   aWBGlossaryPresentor002: string ;
}
declare class aWBGlossaryPresentorDomainsAgent extends aUIAgent {
   Glossary: string ;
   TopDomains: string ;
   StaticText: string ;
   TopDomains_ValueStored(:aUIAgent);
   NotifyInit();
   NotifyTerminate();
   TopDomains_ValueLoaded(:aUIAgent);
   TopDomains_ButtonUp(:aUIAgent, No:number, X:number, Y:number):number;
   TopDomains_GetChar(:aUIAgent, Ch:number, VKey:string, theCount:number, Flags:string):number;
}
declare class WBGlossaryPresentorTopicsSelectorAgent extends aUIAgent {
   StaticText: string ;
   TopicsToShow: string ;
   TopicsToShow_Executed(SelectedRank:number, Option:number):number;
}
declare class GlossaryPresentorConsistencyCheckerScenAgent extends aUIAgent {
   AmbiguousTopicS: string ;
   DoCheckConsistency: string ;
   StaticText: string ;
   DoDispelAmbiguity: string ;
   ConsistencyCheckerReport: string ;
   StaticText001: string ;
   LoadValue();
}
declare class WBGlossaryPresentorSynonymsSelectorAgent extends aUIAgent {
   SynonymsToShow: string ;
   SynonymsToShowStaticText: string ;
   SynonymsToShow_Executed(SelectedRank:number, Option:number):number;
}
declare class WBGlossaryPresentorDomainsSelectorAgent extends aUIAgent {
   DomainsToShow: string ;
   DomainsToShowStaticText: string ;
   DomainsToShow_Executed(SelectedRank:number, Option:number):number;
}
declare class WBGlossaryPresentorTopicsSynonymsSelectorAgent extends aUIAgent {
   WBGlossaryPresentorTopicsSelector: string ;
   WBGlossaryPresentorSynonymsSelector: string ;
}
declare class WBGlossaryPresentorTopicsSynonymsDomainsSelectorAgent extends aUIAgent {
   WBGlossaryPresentorTopicsSelector: string ;
   WBGlossaryPresentorSynonymsSelector: string ;
   WBGlossaryPresentorDomainsSelector: string ;
}
declare class aWSGlossaryPresentor001Agent extends aUIAgent {
   Glossary: string ;
   DummyForRegisterUnRegisteredDomain: string ;
}
declare class PatchDomainPositionsAgent extends aUIAgent {
   PatchDomainPositions: string ;
}
declare class WSGlossaryPresentorForIDEAgent extends aOpenWhereClosedUIAgent {
   PresentorForIDE: string ;
   NotifyCheck();
}
declare class PresentorForIDEAgent extends aSplitViewAgent {
}
declare class MoreToolBarScenAgent extends aUIAgent {
   ActionNewDomain: string ;
   ActionNewTopic: string ;
   PrevHistoric: string ;
   NextHistoric: string ;
   GenerateHTML: string ;
   GenerateXML: string ;
   CheckConsistency: string ;
   EditProperties: string ;
   ConsultProperties: string ;
   CheckOutSelectedDomain: string ;
   PrevHistoric_Init(:aUIAgent):number;
   NextHistoric_Init(:aUIAgent):number;
   CheckOutSelectedDomain_Init(:aUIAgent):number;
}
declare class WSGlossaryPresentorWAMToolbarScenAgent extends aFolderViewAgent {
}
declare class PresentorToolBarAgent extends aToolBarUIAgent {
   SaveSaveAndCloseClose: string ;
}
declare class aWSGlossaryPresentor extends aEntity {
   Glossary: string ;
   MainDomain: string ;
   SelectedDomain: string ;
   CurGlossaryEntity: string ;
   ProposedName: string ;
   TopicsUIAgent: string ;
   DomainsUIAgent: string ;
   CurEntityUIAgent: string ;
   Historic: string ;
   HistoricPos: string ;
   InRefresh: string ;
   InHistoric: string ;
   PrevEP: string ;
   NextEP: string ;
   CheckOutEP: string ;
   Viewer: string ;
   CannotNotifyTopicSelected: string ;
   TopicsToShow: string ;
   SynonymsToShow: string ;
   DomainsToShow: string ;
   PickedEntityInSelector: string ;
   AmbiguousTopics: string ;
   ConsistencyCheckerReport: string ;
   OpenInConsultation: string ;
   RefreshCurGlossaryEntity();
   SelectEntity(Entity:aWSGlossaryEntity);
   SelectTopic(Topic:aWSGlossaryTopic);
   SelectDomain(Domain:aWSGlossaryDomain);
   IndexTopicIfNecessaryAndUserIsOk(Topic:aWSGlossaryTopic);
   EnableButton(thisButton:aLightObject);
   DisableButton(thisButton:aLightObject);
   PrepareForeditionIn(ExecMode:string);
   RefreshListOfDomains();
   RefreshListOfTopics();
   NotifyDomainCreated(Domain:aWSGlossaryDomain);
   UpDateViewer(FromEntity:aEntity);
   EnableOrDisablePrevNext();
   AppendInHistoric(theObject:aEntity);
   PrepareSelectedTopicForModification():boolean;
   PrepareSelectedDomainForModification(AskForCheckOut:boolean):boolean;
   PrepareSelectedEntityForModification():boolean;
   SetSelectedTopic(Topic:aWSGlossaryTopic);
   SetSelectedDomain(Domain:aWSGlossaryDomain);
   SetSelectedDefaultDomain();
   CheckOutSelectedDomain();
   StringExtract();
   ResetHistoric();
   NewTopic(ProposedName:string);
   NewDomain(ProposedName:string);
   NewSubDomain(ProposedName:string, ParentDomain:aWSGlossaryDomain);
   ActionNewTopic();
   ActionNewDomain();
   ActionOpenTopic(theUIAgent:aUIAgent);
   ShowEntity(Entity:aWSGlossaryEntity);
   ShowTopic(FromEntity:aWSGlossaryEntity, TopicName:string);
   ExtractWords(MLEAgent:aMLEAgent, Words:string, ToggleWords:boolean);
   ShowTopicFrom(FromEntity:aWSGlossaryEntity, MLEAgent:aMLEAgent);
   ToggleTopicFrom(MLEAgent:aMLEAgent);
   GetDefaultDomainToSelect():aWSGlossaryDomain;
   PrevHistoric();
   NextHistoric();
   RestoreToAliveEntity();
   HasChanged();
   Open();
   NotifyPresentorClosed();
   IsSystemCloseAccepted();
   IdNameSpaceId();
   NameNameSpaceId();
   TopicNameChanged(Topic:aWSGlossaryTopic);
   DomainNameChanged(Domain:aWSGlossaryDomain);
   GenerateHTML();
   GenerateXML();
   NotifyTopicDeleted(Topic:aWSGlossaryTopic);
   NotifyDomainRemoved(Domain:aWSGlossaryDomain);
   SelectConcept():string;
   GetClassDefFromConcept(theConcept:string):aClassDef;
   NewAppropriatePickerForConcept(theConcept:string):aPicker;
   SelectConceptEntity(TheArgument:string, theConcept:string):aEntity;
   CreateModelizedConcept(ProposedName:string, theConcept:string):aEntity;
   DoCheckConsistencyOfDomain(Domain:aWSGlossaryDomain);
   ReportConsistencyMessage(s:string);
   DoDispelAmbiguityOfDomain(Domain:aWSGlossaryDomain);
   FillAmbiguousTopicsList();
   DoDispelAmbiguity();
   DoCheckConsistency();
   CheckConsistency();
   SelectDomainAfterDeletion(Domain:aWSGlossaryDomain);
   GetCloserEntityInScope(FromList:aListOfInstances):aWSGlossaryEntity;
   SaveEx();
   Save();
   PatchDomainPositions();
   CheckInGlossaryWithContent();
   CheckOutGlossaryWithContent();
   DuplicateGlossary();
   ModifyProperties();
   ConsultProperties();
}
declare class aWSGlossaryPresentorCurGlossaryTopicRole extends aSingleRoleType {
}
declare class GlossaryTopicSynonymAgent extends aUIAgent {
   Name: string ;
   NameStaticText: string ;
}
declare class aWSGlossarySynonym extends aWSGlossaryTopicOrSynonym {
   GlossaryEntity: string ;
   Init();
   MakeNewVersion():aWSGlossarySynonym;
   GetForeColor();
   GetBackColor();
   GetFontName();
   GetFontSize();
   GetFontSels();
   GetGlossaryEntity():aWSGlossaryEntity;
   GetTopic();
   GetGlossary();
   GetDomain();
   TitleClassName();
   GetSelectableEntity();
   isAlive();
   LoadFromXML();
}
declare class aWSGlossaryTopDomainsRole extends aWSGlossaryDomainsRole {
   NewAcceptedInstance();
   canBreakLinkBetween();
}
declare class TopicDefinitionAgent extends ColorizedTextAgent {
}
declare class TopicExplanationAgent extends ColorizedTextAgent {
}
declare class TopicExampleAgent extends ColorizedTextAgent {
}
declare class TopicFolderAgent extends aFolderViewAgent {
}
declare class TopicPresentationAgent extends aUIAgent {
   WBGlossaryEntityPresentation: string ;
}
declare class aWBGlossaryTopicNameScenAgent extends aUIAgent {
   Name: string ;
   NameStaticText: string ;
   NotifyTerminate();
}
declare class GlossaryTopicNameFolderAgent extends SelectedGlossaryEntityAgent {
   Name: string ;
   NameStaticText: string ;
   TopicFolder: string ;
   NameChanged: string ;
   ForScenExtract: string ;
   Name_ValueStored(:aUIAgent);
   Name_Changed(:aUIAgent):number;
}
declare class aWBGlossaryTopicNameAndDomainScenAgent extends aUIAgent {
   Name: string ;
   NameStaticText: string ;
   Domain: string ;
   DomainStaticText: string ;
}
declare class SoftwareEntityScenAgent extends aUIAgent {
   ModelizedConceptStaticText: string ;
   theModelizedConcept: string ;
   ModelizedConcept001: string ;
   _Result: string ;
   Viewer: string ;
   EntityMMViewerMainScen: string ;
   GetViewer: string ;
   GetViewerStaticText: string ;
   theModelizedConcept_ValueStored(:aUIAgent);
}
declare class TopicSynonymsAgent extends aUIAgent {
   Synonyms: string ;
   Synonyms_ValueStored(:aUIAgent);
}
declare class WBGlossaryTopicDiagramsAgent extends aUIAgent {
   myGraphAndDiagrams: string ;
}
declare class aWSGlossaryTopicSlidesAgent extends aUIAgent {
   mySlides: string ;
}
declare class aWSGlossaryTopic extends aWSGlossaryTopicOrSynonym {
   Domain: string ;
   Definition: string ;
   Explanation: string ;
   Example: string ;
   Synonyms: string ;
   SoftwareEntity: string ;
   mySoftwareEntity: string ;
   Diagrams: string ;
   IsDeleted: string ;
   myGraphAndDiagrams: string ;
   mySlides: string ;
   BackupGlossary: string ;
   ForScenExtract():string;
   InitFontAttributes();
   GetForeColor();
   GetBackColor();
   GetFontName();
   GetFontSize();
   GetFontSels();
   FillHashTable();
   MakeNewVersion():aWSGlossaryTopic;
   IdNameSpaceId();
   TitleClassName();
   GetBitmap();
   GetTopic();
   GetGlossary();
   GetDomain();
   DeleteMyself();
   isAlive();
   GetPresentor();
   NotifyMyNameHasChanged();
   GetViewer(theObject:string, theScenario:string);
   GetSoftwareEntityKindFromEntity():string;
   LoadFromXML(Glossary:aWSGlossary, Parent:aWSGlossaryDomain, XMLNode:aXMLNamedNode, Transaction:aTransaction);
}
declare class aWSGlossaryTopicDiagramsRole extends aSingleRoleType {
   FillListForUMLObjectWithGraph(UMLObject:aUMLObject, inThis:aListOfInstances);
   pickInMemOnly();
}
declare class aWSGlossaryTopicDomain extends aSingleRoleType {
   pickInMemOnly();
}
declare class aWSGlossaryTopicGraphsRole extends aWSGlossaryTopicDiagramsRole {
   pickInMemOnly();
}
declare class aWSGlossaryTopicOrSynonym extends aWSGlossaryEntity {
   Proximity: string ;
   GetTopic():aWSGlossaryTopic;
   StringExtract();
   LoadFromXML(Glossary:aWSGlossary, Parent:aWSGlossaryEntity, XMLNode:aXMLNamedNode, Transaction:aTransaction);
}
declare class aWSGlossaryTopicSynonymsRole extends aSingleRoleType {
   OnChange();
}
declare module wWSOtherGlossaryMod {
   function Init();
   function CreateClass(Name:string, Ancestor:aClassDef):aClassDef;
   function CreateModule(Name:string):aEntity;
   function ExtractWordFromLine(Line:string, X:number):string;
   function ToggleWord(theTextUIAgent:aUIAgent);
}
declare class aWSSoftwareEntityRole extends aSingleRoleType {
   canBreakLinkBetween();
   SearchAndPick();
   NewAcceptedInstance();
}
declare class aWSGlossaryDomainInDomainRole extends aSingleRoleType {
   pickInMemOnly();
   OnChange();
   canBreakLinkBetween();
}
declare class aWSGlossaryDomainSubDomainsRole extends aWSGlossaryDomainsRole {
   NewAcceptedInstance();
   canBreakLinkBetween();
   AfterMoveUpOrDown();
}
declare module wWSGlossaryMod {
   var TopicsSeparators: string ;
   var KeepedTextSeparators: string ;
   var Inited: string ;
   var CurrentPresentor: string ;
   var AGlossaryIsOpenedInModification: string ;
   function IsDigitChar(Ch:number):boolean;
   function Init();
   function ExtractWordFromLine(Line:string, X:number):string;
   function ChangeSelectionFont(MLEAgent:aMLEAgent, FontName:string, FontSize:number, FontSels:string, TextColor:string, BackColor:string);
   function ChangeSelectionPosition(MLEAgent:aMLEAgent, Position:number);
   function Parse(Glossary:aWSGlossary, FromEntity:aWSGlossaryEntity, MLEAgent:aMLEAgent, theText:string, Dependancies:aListOfInstances, ParserExtension:aWSGlossaryParserExtension);
   function ToggleWord(theTextUIAgent:aUIAgent);
   function HashName(Str:string, NbWords:number):string;
   function IsWithAccent(Ch:number):boolean;
   function IsTopicChar(Ch:number):boolean;
   function GetDomainPosition(BetweenPosition1:string, AndPosition2:string):string;
   function GetDomainPositionBetweenDomains(Domain1:aWSGlossaryDomain, Domain2:aWSGlossaryDomain):string;
   function ComputeDomainPosition(Domain:aWSGlossaryDomain, DomainPosition:string);
   function ComputeTopDomainsPosition(Glossary:aWSGlossary);
   function GetLastPositionInList(theList:aListOfInstances):string;
   function GetCousinsLevel(Entity1:aWSGlossaryTopicOrSynonym, Entity2:aWSGlossaryTopicOrSynonym):number;
   function FillListWhenLoggedUserIsOwnerOfDomains(theList:aListOfInstances, thisGlossary:aWSGlossary, MustBeOwner:boolean);
   function CheckInGlossaryAndContent(thisGlossary:aWSGlossary);
   function CheckOutGlossaryAndContent(thisGlossary:aWSGlossary);
   function DeliverGlossaryAndContent(thisGlossary:aWSGlossary);
   function SyncGlossaryAndContent(thisGlossary:aWSGlossary);
   function NotifyObjectCreated(thisEntity:aEntity);
   function NotifyObjectModified(thisEntity:aEntity);
   function HTMLName(FromName:string):string;
}
declare module wWSGlossaryConceptMaker {
   function AskToCreateClass(ProposedName:string):aEntity;
   function AskToCreateModule(ProposedName:string):aEntity;
   function AskToCreateVar(ProposedName:string):aEntity;
   function AskToCreateMethod(ProposedName:string):aEntity;
   function AskToCreateType(ProposedName:string):aEntity;
   function AskToCreateConst(ProposedName:string):aEntity;
   function CreateModelizedConcept(theConcept:string, ProposedName:string):aEntity;
}
declare class ModuleCreationScenAgent extends aUIAgent {
   Name: string ;
   NameStaticText: string ;
   AllowOverride: string ;
}
declare class ClassCreationScenAgent extends aUIAgent {
   Name: string ;
   NameStaticText: string ;
   Ancestor: string ;
   AncestorStaticText: string ;
   AllowOverride: string ;
}
declare class VarCreationScenAgent extends aUIAgent {
   Name: string ;
   NameStaticText: string ;
   VarType: string ;
   VarTypeStaticText: string ;
   InClassOrModule: string ;
   InClassOrModuleStaticText: string ;
}
declare class MethodCreationScenAgent extends aUIAgent {
   MethodName: string ;
   MethodNameStaticText: string ;
   InClassOrModule: string ;
   InClassOrModuleStaticText: string ;
}
declare class TypeCreationScenAgent extends aUIAgent {
   InClassOrModule: string ;
   InClassOrModuleStaticText: string ;
   TypeName: string ;
   TypeNameStaticText: string ;
}
declare class ConstCreationScenAgent extends aUIAgent {
   ConstName: string ;
   ConstNameStaticText: string ;
   Value: string ;
   ValueStaticText: string ;
}
declare class aWSMMEntityMaker extends aEntity {
   Ancestor: string ;
   InClassOrModule: string ;
   AllowOverride: string ;
   VarType: string ;
   MethodName: string ;
   TypeName: string ;
   ConstName: string ;
   Value: string ;
   CreateClass():aClassDef;
   CreateModule():aModuleDef;
   AddVar():aEntity;
   AddMethod():aEntity;
   AddType():aEntity;
   AddConst():aEntity;
}
declare class aWSSlideCreationScenAgent extends aUIAgent {
   GraphAsControl: string ;
   DraggableTools: string ;
}
declare class aWSSlide extends aGraph {
}
declare module WWSGlossaryProducer {
   var CurrentGlossaryGenerator: string ;
   var CurrentWSGlossaryProducer: string ;
   var HTMLParserExtension: string ;
   var DebugWriteTopic: string ;
   var TreeOfDomainsFlatened: string ;
   function GeneratorNameFrom(thisEntity:aEntity, thisTarget:string):string;
   function FindGeneratorFor(thisEntity:aEntity, thisTarget:string):aWSRootGenerator;
   function GetGeneratorClassFor(thisEntity:aEntity, thisTarget:string):aClassDef;
   function NewGeneratorFor(thisEntity:aEntity, thisTarget:string):aWSRootGenerator;
   function GeneratorFor(thisEntity:aEntity, thisTarget:string):aWSRootGenerator;
   function Generate(ForThisEntity:aEntity, thisTarget:string);
   function GenerateHTML(ForThisEntity:aEntity);
   function GenerateXML(Glossary:aWSGlossary);
}
declare class HowToProduceScenAgent extends aUIAgent {
   ProductionRoot: string ;
   StaticText: string ;
}
declare class RootSpecsGenerationPanelAgent extends aUIAgent {
   Comment: string ;
   ShowResult: string ;
   Make: string ;
   myEntity: string ;
   myEntityStaticText: string ;
   Comment_ButtonDblClk(:aUIAgent, No:number, X:number, Y:number):number;
}
declare class RootSpecsMainScenForSingleAgent extends aFolderViewAgent {
}
declare class SingleRootSpecsModalScenAgent extends aUIAgent {
   RootSpecsMainScenForSingle: string ;
}
declare class aWSRootGenerator extends aEntity {
   myEntity: string ;
   ProductionRoot: string ;
   GetEntityName():string;
   DefaultProductionDirectory():string;
   InitOn(thisEntity:aEntity);
   ReportLineExecute(theUIAgent:aUIAgent);
   BlankReport();
   WriteLnInOutText(theString:string);
   GetTargetFactory():string;
   InitFactory();
   InitGenerator();
   TerminateGenerator();
   ReportProductionOfEntity(theEntity:aEntity);
   ReportEndOfProductionOfEntity(theEntity:aEntity);
   HandleProductionOfEntity(theEntity:aEntity);
   ShowResult();
   StringExtract();
   MakeOneEntity(theEntity:aEntity);
   Make();
   InitAfterLoad();
   InitAfterNewVersion();
   NameNameSpaceId();
}
declare class GlossariesExtensionAgent extends aUIAgent {
   DoYourJob: string ;
}
declare class aWSpecGlossariesExtension extends aWideExtension {
   Catalog: string ;
   FolderParentName();
   MenuText();
   DoYourJob();
}
declare class InDeliverCategoryListVirtualScenOverrideAgent extends InDeliverCategoryListVirtualScenAgent {
   Entities: string ;
   Entities_Init():number;
   Entities_ComputeColumn(theCellContent:string, ColIndex:number, LineIndex:number, theListofReftos:aListOfInstances):number;
   Entities_SortColumn(Data1:number, Data2:number):number;
   Entities_Executed(SelectedRank:number, Option:number):number;
}
declare class aInDeliverCatForDomains extends aInDeliverCategory {
}
declare class aWSProjectInitScenAgent extends aUIAgent {
   ProjectKind: string ;
   Name001: string ;
   ProjectNameStaticText: string ;
   FromFile: string ;
   FileStaticText: string ;
   EnableOrDisableFile();
   ProjectKind_ValueStored(:aUIAgent);
   LoadValue();
}
declare class aWSProject extends aWSGlossary {
   ProjectGlossary: string ;
   ProjectKind: string ;
   NewPresentor():aWSSpecificationPresentor;
   MakeNewDomain(DomainName:string, InDomain:aWSGlossaryDomain):aWSGlossaryDomain;
   MakePrototypeListDomain():aWSPrototypeList;
   InitFollowUp();
   MakeGlossaries();
   InitBusinessProject();
   InitDevelopmentUnit();
   InitArchitectureCustomisation();
   TitleClassName();
   GetDomainOrder();
   UICreate();
   LoadFromXMLFile();
   GetBitmap();
   UIDeclaredCheckInWithContent();
   UIDeclaredCheckOutWithContent();
   UIDeclaredGenerateHTML();
   UIDeclaredGenerateXML();
   UIDeclaredUIModalModify();
   UIDeclaredUIModalConsult();
   UIVisibleCheckOutWithContent();
}
declare class aWSPSDUsedGlossariesScenAgent extends SelectedGlossaryEntityAgent {
   Glossaries: string ;
   StaticText: string ;
}
declare class aWSUsedGlossaries extends aWSPredefinedSpecificationDomain {
   Glossaries: string ;
   FillHashTable();
   LoadFromXML();
}
declare class aWSUsedGlossariesRole extends aSingleRoleType {
   OnChange();
   pickInMemOnly();
   ConsultThisObject();
}
declare class aWBGlossaryPresentorCurTopicOverrideAgent extends aWBGlossaryPresentorCurEntityAgent {
}
declare class aWSSpecificationPresentor extends aWSGlossaryPresentor {
}
declare class aWSApplicationDescListScenAgent extends SelectedGlossaryEntityAgent {
   myApplis: string ;
   StaticText: string ;
}
declare class aWSPrototypeList extends aWSPredefinedSpecificationDomain {
   myApplis: string ;
   LoadFromXML();
}
declare class aWSPredefinedSpecificationDomain extends aWSSpecificationDomain {
}
declare class aWSSpecificationDomain extends aWSGlossaryDomain {
   TitleClassName();
   Authorize();
   GetBitmap();
}
declare class aWSApplicationDescListRole extends aSingleRoleType {
   AskForActions();
   ConsultThisObject();
   InitPickerForSearch();
}
declare class aWSpecProjectsExtension001Agent extends aUIAgent {
   DoYourJob: string ;
}
declare class aWSpecProjectsExtension extends aWideExtension {
   Catalog: string ;
   FolderParentName();
   MenuText();
   DoYourJob();
}
declare class aBcpDBDef001Agent extends aUIAgent {
   DefaultStorageIsBcp: string ;
   DefaultBcpBatchSize: string ;
   DefaultBcpBatchSizeStaticText: string ;
   DefaultPacketSize: string ;
   DefaultPacketSizeStaticText: string ;
   SuspendIndexing: string ;
   SuspendPrimaryKeyConstraints: string ;
   DBMgrClassDef: string ;
   DBMgrClassDefStaticText: string ;
   SuspendIndexing_ValueLoaded(:aUIAgent);
   SuspendIndexing_ValueStored(:aUIAgent);
}
declare class aBcpDBDef002Agent extends aFolderViewAgent {
}
declare class aBcpDBDef extends aRenamingSQLDBDef {
   DefaultStorageIsBcp: string ;
   DefaultBcpBatchSize: string ;
   DefaultPacketSize: string ;
   SuspendIndexing: string ;
   SuspendPrimaryKeyConstraints: string ;
   ExternalBcpType(theMMType:aType):number;
   NewDBMgr();
   PRBGeneratorClassName();
   Init();
   WriteTitle();
   StringExtract();
   IsValid();
}
/**
*this DBMgr is implemented only for PRB (see aBcpPRBProject) 
not yet implemented for Sql desc interpretation

*/
declare class aBcpDBMgr extends aStaticSQLServerDBMgr {
   IsInBCP: string ;
   BcpDBConnections: string ;
   TotalRowsSinceDBOpened: string ;
   BcpErrorsDirectory: string ;
   NbBcpConnectionKept: string ;
   BcpBatchSize: string ;
   PacketSize: string ;
   HasBcpTransaction: string ;
   SuspendIndexing: string ;
   SuspendPrimaryKeyConstraints: string ;
   SuspendedIndexesInfo: string ;
   HashByTableNameSuspendedIndexesInfo: string ;
   GetErrorForConnect(hDBC:string, hStmt:string, ErrNum:number, ErrMsg:string);
   RaiseSQLMotorErrorForConnect(hDBC:string, InModule:string, InFunction:string, BcpIntoTable:string, Severity:string);
   BcpInitINTable(hDBC:string, tableName:string);
   AllocBcpConnection():string;
   GetBcpDBConnection(tableName:string, theConnectionRank:number, thePRB:aBcpPRB, indexTableRank:number):string;
   DropBcpConnection(hDBC:string);
   DropExistingBcpConnections();
   fOpen();
   fClose();
   BcpDoneConnection(hDBC:string):number;
   BcpBatchConnection(hDBC:string):number;
   BcpStatsInText(inText:string);
   BcpStats();
   RestoreSuspendedIndexes();
   BcpDoneExistingConnections();
   CommitBcpTransaction();
   RollBackBcpTransaction();
   Commit();
   Statistic();
   RTbcp_sendrow(hdbc:string, theConnectionRank:number, theResult:boolean);
   needsToStoreList();
   SetPrevVersionToNotCurrent();
   VersionCount();
   ThingCount();
   IsResponsibleForItsLife();
   SetToNotResponsibleForItsLife();
   LatestVersionFor();
   SqlExecDDL(theDDL:string);
   DoCommitDDLs();
   SearchForStoredVersions();
}
declare module xBcp {
   function bcp_bind(hdbc:string, pData:string, cbIndicator:number, cbData:string, pTerm:string, cbTerm:number, eDataType:number, idxServerCol:number):string;
   function RTbcp_bind(hdbc:string, pData:string, cbIndicator:number, cbData:string, pTerm:string, cbTerm:number, eDataType:number, idxServerCol:number, thedb:aBcpDBMgr, theResult:boolean);
   function RTbcp_bindText(hdbc:string, pData:string, cbIndicator:number, cbData:string, NullData:number, pTerm:string, cbTerm:number, eDataType:number, idxServerCol:number, thedb:aBcpDBMgr, theResult:boolean);
   function bcp_colptr(hdbc:string, pData:string, idxServerCol:number):string;
   function bcp_collen(hdbc:string, cbData:string, idxServerCol:number):string;
   function RTbcp_colptr(hdbc:string, pData:string, idxServerCol:number, thedb:aBcpDBMgr, theResult:boolean);
   function RTbcp_collen(hdbc:string, cbData:string, idxServerCol:number, thedb:aBcpDBMgr, theResult:boolean);
   function RTbcp_Col(hdbc:string, pData:string, cbData:string, idxServerCol:number, thedb:aBcpDBMgr, theResult:boolean);
   function bcp_init(hdbc:string, szTable:string, szDataFile:string, szErrorFile:string, eDirection:number):string;
   function bcp_sendrow(hdbc:string):string;
   function bcp_done(hdbc:string):string;
   function bcp_batch(hdbc:string):string;
   function bcp_moretext(hdbc:string, cbData:string, pData:string):string;
   function bcp_control(hdbc:string, eOption:number, iValue:string):string;
   function DateToDBDateTime(theDate:string, theDBDateTime:string);
   function SQLGetDiagRec(HandleType:string, Handle:string, RecNumber:string, Sqlstate:string, NativeError:string, MessageText:string, BufferLength:string, TextLength:string):string;
}
declare class aBcpPRB extends aODBCPRB {
   BcpStoreListOfInfo(joinTableName:string, pConnRank:string, fromThisOject:aFullObject, someListOf:aListOfInstances, theVarLink:string, indexTableRank:number, fullRefto:boolean, NoVersion:boolean):boolean;
   Bcp_BindListOwnerVars(theDB:aBcpDBMgr, InhStmt:string, fromThisObject:aFullObject, bindData:string, listVersion:number, FirstBind:boolean):boolean;
   Bcp_BindListOfJoinRow(theDB:aBcpDBMgr, InHStmt:string, RowInfo:string, bindData:string, extractBindData:string, isStoreExtract:boolean, FirstBind:boolean, fullrefto:boolean, NoVersion:boolean);
   storeListOf();
   DropIndexes(theDB:aBcpDBMgr, withPK:boolean, indexTableRank:number);
   CreateIndexes(theDB:aBcpDBMgr, withPK:boolean, indexTableRank:number);
   BeginCountUpdate();
}
declare class aDB2DBDefSpecificAgent extends aUIAgent {
   SqlMappingForInt1StaticText: string ;
   SqlMappingForBooleansStaticText: string ;
   SqlMappingForEnumsStaticText: string ;
   SqlMappingForInt1001: string ;
   SqlMappingForBooleans001: string ;
   SqlMappingForEnums001: string ;
   DefaultLOBLength: string ;
   TheLenStaticText: string ;
   TheUnit: string ;
   TheUnitStaticText: string ;
   TheLen001: string ;
   DefaultTableTableSpace: string ;
   DefaultTableTableSpaceStaticText: string ;
   DefaultLONGTableSpace: string ;
   DefaultLONGTableSpaceStaticText: string ;
   DefaultIndexTableSpace: string ;
   DefaultIndexTableSpaceStaticText: string ;
   DoMapCharToUnicode: string ;
   EncryptionBrokerClassDef: string ;
   EncryptionBrokerClassDefStaticText: string ;
   AccentInsensitive: string ;
   AccentInsensitive001: string ;
   AccentInsensitive002: string ;
   AccentInsensitive003: string ;
   CaseInsensitive: string ;
   IndexAccentCase: string ;
   IndexAccentCaseStaticText: string ;
}
declare class aDB2DBDefFolderAgent extends aFolderViewAgent {
}
declare class aDB2DBDefoverridingRopOkCancelAgent extends aUIAgent {
}
/**
*Database definition for IBM DB2 Universal Database (Version >=5.2).

1/ DB2 Driver considerations
- DB2 offers API througth the ODBC driver manager or througth the native DB2 driver (DB2 CLI). 
  The native DB2 driver is using ODBC API definitions (ODBC API version 3).
  After testing, using one or the other results in the same performance. So no more need any option in the DB2DBDef and 
  finally I do use ODBC driver manager so as the effort to implement DB2PRB and ProduceCPP for OQL is minimal
- Only FORWARD_ONLY and STATIC Cursor Types are supported; KEYSET_DRIVEN and DYNAMIC cursors are not supported 
- STATIC cursors cannot be used when a LOB is fetched (ex: OQL select x.myText) the driver returns error SQLState=01S02. I cannot find
   any documentation in DB2 library about that. For OQL the default cursorType is STATIC, so the developer have to change manually
   the cursortype to FORWARD_ONLY using the method aOQLCursor.SetCursorType().
- I can use cForwardOnlyCursor (faster cursor) for OQL because DB2 does not 
  generate error HY000:[Microsoft][ODBC SQL Server Driver]Connection is busy with results for another hstmt !
  In clear, that means that ODBC Sql server driver does not support 2 ForwardOnly Cursors beeing executed at same time
                        and ODBC DB2 driver does
  That is a real good point for DB2 !!
  
  The fact to set the default cursor type to ForwardOnly by the way resolve another problem:
  it automatically avoids error SQLState=01S02 when doing OQL select on a LOB column (select x.MyText)
- Cannot execute a Sql "Select ... where ?=?"                   : it raise the error SQL0417N; According to the DB2 documentation
  I should     produce "Select ... where cast(? as integer) = ? "
- SQLTables is case dependant while the table names are not!!!
- SchemaName is mandatory when calling SQLPrimaryKeys while it is not when calling SQLTables

2/ DB2 DataBase considerations
- Names of table, column, index, view are limited to 18 characters (in DB2 V5)
- in DB2 version > 7, Names of table are limited to 128, columns are limited to 64
- The number of column in an index is limited to 16
- The sum of the internal lengths of columns in the PRIMARY KEY clause or a UNIQUE clause is limited to 255 (in DB2 V5)
- No conversion needed for Int8 : I can use direcly the BIG_INT type (note that this type is now available 
  in MS Sql Server 2000 and I have to handle it in future version of SqlServerDBDef)
- There is no mapping for tiny ints (int1, enums): so the DB def gives the choice for SmallInt or Char3.
- DDL syntax for Primary Key is different than for Sql Sever and Oracle
- I have not find how to define a CLUSTERED Primary key
- DDL syntax for indexes is different for Clustered/NonClustered otions
- Varying-length character strings are of three types: VARCHAR, LONG VARCHAR, and CLOB. 
         VARCHAR types are varying-length strings of up to 4000 bytes. 
         LONG VARCHAR types are varying-length strings of up to 32,700 bytes.
         CLOB types are varying-length strings of up to 2 gigabytes : the length is mandatory
- The corresponding varying-length binary strings are : VARCHAR FOR BIT DATA, LONG VARCHAR FOR BIT DATA and BLOB
- Fixed-Length Character Strings (CHAR) are 1 to 254 inlusive. CHAR FOR BIT DATA too.
- PurgeDB is temporary overriden because DB2 cannot accept the syntax DELETE <table_name>, it only accepts the 
  syntax DELETE FROM <table_name>. Sql Server and Oracle accepts both syntaxes. aODBCDBMgr::PurgeDB() will have to be modified 
  in future version
- The method PurgeDB is also overriden because the DELETE statement returns warning error SQL0513W because 
  the statement does not contain any where clause
- Cannot do an order by on a VARCHAR255 because of error : SQL0134N :An expression resulting in a string data type 
  with a maximum length greater than 254 bytes is not permitted in:
   - A SELECT DISTINCT statement 
   - A GROUP BY clause 
   - An ORDER BY clause 
   - A column function with DISTINCT 
   - A SELECT or VALUES statement of a set operator other than UNION ALL.
- the keyword UPPER does not exist in DB2, I have to use UCASE instead. UPPER is used in Sql server an oracle. Sql server support both keywords
- same for LOWER : LCASE is to be used. 


3/ WAM<->DB2 mapping considerations
- the class aDB2SqlTypeWithPrecisionForChar is used to map CHARACTER, VARCHAR because 'FOR BIT DATA' is an option in the DDL
- Default mapping for Text vars is CLOB with default length = 512 KBytes.
- Dates are mapped using aDB2DateType : it should be generic to any ODBC DB mgr (make aSqlServerDateType generic ! (aODBCDateType))



*/
declare class aDB2DBDef extends aODBCDBDef {
   UseODBCDriverManager: string ;
   SqlMappingForInt1: string ;
   SqlMappingForBooleans: string ;
   SqlMappingForEnums: string ;
   DefaultLOBLength: string ;
   DefaultTableTableSpace: string ;
   DefaultLONGTableSpace: string ;
   DefaultIndexTableSpace: string ;
   DoMapCharToUnicode: string ;
   EncryptionBrokerClassDef: string ;
   EncryptionBrokerData: string ;
   AccentInsensitive: string ;
   CaseInsensitive: string ;
   IndexAccentCase: string ;
   MaxDBEntitiesNameLength();
   AddReservedNames();
   GetLOBLengthInBytes(fromLOBLength:string):number;
   Init();
   WriteTitle();
   NewDBMgr();
   AddNumericTypeWamversionIf5100();
   AddWithPrecisionTypeWamversionIf5400();
   NeedPatchFromWamInfTo5400():boolean;
   InitTypes();
   NeedPatchFromWamInfTo8500():boolean;
   PatchFromWamInfTo8500();
   PatchFromWamInfTo5100IfNeeded(VarAddressInError:string, Message:string, MessageDisplayed:boolean, MessageCanBeDisplayed:boolean):boolean;
   IsValid();
   StringExtract();
   SqlTypeAndDataFromDBValues();
   BestFitDBType();
   SqlTypeIsCompatibleWithMMType();
   CreateDefaultTableDescs();
   BestMMTypeForData();
   PRBGeneratorClassName();
   ProduceIndexDDL();
   ExternalType();
   GetLegalNameFrom();
/**
*Portability Check: OK
*/
   GetStoragePropertyDDL();
   ColumnTypeDDLProducedAtEnd();
/**
*Portability Check: OK
*/
   ProduceSQLTop();
   SqlNestedRequestOnTupleMayUseIN();
   GetEncryptionBrokerClassId();
   GetListOfSqlEncryptionData();
   GetTheXMLProducer():aDB2XMLDBDefExporterImporter;
   IsAccentSensitive();
   IndexAccentCaseSensitivity();
   IsCaseSensitive();
}
declare class aDB2DateType extends aSqlType {
   BindValue();
   BindDataForFetchForCol();
   ConvertDataAfterFetchForCol();
   FreeBufferAfterBind();
   BufferSizeForFetch();
   BindDataForArrayFetch();
}
declare class aDB2DBMgr extends aODBCDBMgr {
   SQLAllocHandleProcAddress: string ;
   SQLSetEnvAttrProcAddress: string ;
   SQLSetConnectAttrProcAddress: string ;
   SQLConnectProcAddress: string ;
   SQLBindParameterProcAddress: string ;
   SQLBindColProcAddress: string ;
   SQLTransactProcAddress: string ;
   SQLDisconnectProcAddress: string ;
   SQLFreeHandleProcAddress: string ;
   SQLGetDiagFieldProcAddress: string ;
   SQLExecDirectProcAddress: string ;
   SQLTablesProcAddress: string ;
   SQLFetchProcAddress: string ;
   SQLColumnsProcAddress: string ;
   SQLFreeStmtProcAddress: string ;
   SQLCloseCursorProcAddress: string ;
   SQLSetCursorNameProcAddress: string ;
   SQLSetStmtAttrProcAddress: string ;
   SQLFetchScrollProcAddress: string ;
   SQLPrimaryKeysProcAddress: string ;
   SQLExecuteProcAddress: string ;
   SQLPrepareProcAddress: string ;
   SQLGetInfoProcAddress: string ;
   LockDBStmt: string ;
   LockIDAllocStmt: string ;
   CloseOnCommitStmts: string ;
   InitThisProcAddress(DllName:string, ProcName:string, wellInited:boolean):string;
   InitDriverProcAddresses():boolean;
   LockDB();
   UnlockDB();
   LockCurrentVersionOf();
   UnLockCurrentVersionOf();
/**
*Portability Check: OK
*/
   SetNamedLock();
   IsNamedLockSet(LockName:string):boolean;
   ReSetNamedLock();
/**
*Portability Check: OK
*/
   fOpen();
   NewInstanceId();
   fClose();
   SqlExecStrForStmt();
   BindParameterInStmt();
   SqlBindForFetch();
   DoesTableExist();
   DoesColumnExist();
   ColumnDescription();
   SqlFreeStatement();
   SqlFetchStatement();
   SqlAllocStatement();
/**
*Portability Check: OK
*/
   SetUpCursor();
   SqlFetchExtendedStatement();
   SqlBindForExtendedFetch();
/**
*Portability Check: OK
*/
   PrepareStmtForColumnWiseFetch();
/**
*Portability Check: OK
*/
   PrepareStmtForRowWiseFetch();
   GetTables();
   GetColumns();
   GetPrimaryKey();
   SqlExecute();
   SqlPrepareTextStatement();
   SqlPrepareStrStatement();
   DBVersionInfo();
   Init();
   RTSQLBindParameterWhereIndexVars(hStmt:string, ipar:number, FromThisId:string, absVersion:number, isSpecificVersion:boolean, theResult:boolean);
   RTSQLBindParameterRefto(myPB:aPB, thisObject:aFullObject, InhStmt:string, IntoThisAddress:string, ipar:number, fullRefto:boolean, theResult:boolean, NoVersion:boolean);
   RTSQLBindParameterReftoWithExtract(myPB:aPB, thisObject:aFullObject, InhStmt:string, IntoThisAddress:string, ipar:number, bindData:string, fullRefto:boolean, theResult:boolean, NoVersion:boolean);
   RTSQLBindColRefto(InhStmt:string, IntoThisAddress:string, ColumnNumber:number, fullRefto:boolean, theResult:boolean, NoVersion:boolean, indp:string);
   RTSQLBindColReftoWithExtract(InhStmt:string, IntoThisAddress:string, ColumnNumber:number, bindData:string, fullRefto:boolean, theResult:boolean, NoVersion:boolean, indp:string);
   RTConvertReftoWithExtractAfterFetch(IntoThisAddress:string, bindData:string, NoVersion:boolean);
   LockDBForIDAllocator();
   UnlockDBForIDAllocator();
   Commit();
   Statistic();
/**
*Portability Check: OK
*/
   RTloadCountsFor(FromThisId:string, theHeader:string):boolean;
   loadCountsFor();
   RTHasMoreRecentVersionInDB(theFullId:string):boolean;
   HasMoreRecentVersionInDB();
   RTLatestVersionFor(theFullId:string);
   LatestVersionFor();
   TransactionLockKind();
   SqlBindCol();
}
declare class aDB2SqlTypeWithPrecisionForChar extends aSqlTypeWithPrecision {
   IsForBitData: string ;
   ColumnTypeDDL();
   StringExtract();
}
declare class aStaticDB2DBMgr extends aDB2DBMgr {
   StatementPool: string ;
   RegisterRequestBrokerList();
   DeregisterRequestBrokerList();
   Statistic();
   RegisterDBConnection();
   fOpen();
   fClose();
   GetStatement(theStatementRank:number, FreeingKind:string, needParsing:boolean):string;
   GetStatementForStr(theStatementRank:number, FreeingKind:string, theRequest:string):string;
   GetStatementFor(theStatementRank:number, FreeingKind:string, theRequest:string):string;
   GetMultiFetchStatementForStr(theStatementRank:number, FreeingKind:string, theRequest:string, NumToFetch:number):string;
   loadListOf();
   storeMainFor();
   storeListOf();
   updateMainFor();
   ZapMainFor();
   loadMainFor(thisObject:aFullObject, FromThisFullId:string, myPB:aPB, IsCurrent:string);
   SetPrevVersionToNotCurrent();
   NewPBFor();
   VersionCount();
   SearchForStoredVersions();
   ThingCount();
   SetFlagFor();
   SetPhantom();
   UpdateListRefCount();
   updateListOf();
   FastLoadListOf();
   NbrVersionsKept();
   FreezeMain();
   ZapListOf();
/**
*Portability Check: OK
*/
   updateHeaderFor();
   ArrayFetchFastLoadListOf();
   ODBCVarDependentOneTableAPIterator_position();
   ODBCVarDependentOneTableAPIterator_move();
   GetMainTableInfo();
   HasMoreRecentVersionInDB();
   LatestVersionFor();
/**
*Portability Check: OK
*/
   loadCountsFor();
   BeginCountUpdate();
   ExecuteCountUpdate();
   GetListTableName();
   SetPrevVersionToNotCurrentWithCheck();
}
declare class aDB2PRBProject extends aODBCPRBProject {
   DBKindTypeExtract();
   ProduceDBSpecificUses();
   TypeForReftoBindData();
   TypeForReftoWithExtractBindData();
   RootPRBDBMgrClassDef();
   ProduceBindValueWhereIndexVars();
   ProduceReftoBindValue();
   ProduceReftoWithExtractBindValue();
   ProduceReftoBindDataForFetchForCol();
   ProduceReftoWithExtractBindDataForFetchForCol();
   ProduceConvertReftoAfterFetchForCol();
   ProduceConvertReftoWithExtractAfterFetchForCol();
   PRBAncestorClassDef();
}
declare class aDB2SqlRefToColumnSetDescPRBProducer extends aSqlRefToColumnSetDescPRBProducer {
   ProduceConvertDataAfterFetch();
   ProduceConvertDataAfterArrayFetch();
}
declare class aDB2PRB extends aODBCPRB {
   LatestVersionFor();
/**
*Portability Check: OK
*/
   loadCountsFor();
   HasMoreRecentVersionInDB();
}
declare class aDB2DBDefDocProducer extends aODBCDBDefDocProducer {
   WriteDBDefInfoDatabaseSpecific();
   KindOfEntity();
}
declare class aDB2XMLDBDefExporterImporter extends aXMLDBDefExporterImporter {
   GenerateDBDefSpecialInfo();
   ImportDBDefSpecialInfo();
}
declare class aXMLXXXAsStaticText extends aXXXAsStaticText {
   ProduceXML(XMLProd:aXMLProducer, PtrTo_Options:string);
   ProduceXSL(XSLProd:aXSLProducer, ForQVP:aQVarPresentor);
   Produce();
}
declare class aXMLXXXAsRadioButton extends aXXXAsRadioButton {
   ProduceXSL(XSLProd:aXSLProducer, ForQVP:aQVarPresentor);
   Produce();
}
declare class aXMLXXXAsPushButton extends aXXXAsPushButton {
   ProduceXML(XMLProd:aXMLProducer, ForQVP:aQVPXXXAsPushButton);
   ProduceXSLForVirtual(XSLProd:aXSLProducer, ForQVP:aQVPXXXAsPushButton);
   HasExecuteEvent(OfQVP:aQVarPresentor):boolean;
   ProduceXSL(XSLProd:aXSLProducer, ForQVP:aQVPXXXAsPushButton);
   Produce();
}
declare class aXMLXXXAsMLE extends aXXXAsMLE {
   WriteCharDependingOnQVP(XMLProd:aXMLProducer, CurChar:number, theQVP:aQVPXXXAsMLE, CurPos:number, length:number);
   ProduceXMLOfMLEForTextType(XMLProd:aXMLProducer, theQvp:aQVPXXXAsMLE, CurTextType:aTextType, CurAddr:string);
   ProduceXML(XMLProd:aXMLProducer, theQvp:aQVPXXXAsMLE);
   ProduceXSL(XSLProd:aXSLProducer, theQvp:aQVPXXXAsMLE);
   Produce();
}
declare class aXMLXXXAsGroupBox extends aXXXAsGroupBox {
   ProduceXSL(PtrTo_Where:string, PtrTo_Options:string);
   Produce();
}
declare class aXMLXXXAsEF extends aXXXAsEF {
/**
*Portability Check: OK
*/
   ProduceXML(XMLProd:aXMLProducer, theEFQVP:aQVPXXXAsEF);
   AddQVPSpecialParameters(XSLProd:aXSLProducer, theEFQVP:aQVPXXXAsEF, CurString:string);
   ProduceXSL(XSLProd:aXSLProducer, theEFQVP:aQVPXXXAsEF);
   Produce();
}
declare class aXMLXXXAsCheckBox extends aXXXAsCheckBox {
   Produce();
}
declare class aXMLMethodTypeAsBitMap extends aMethodTypeAsBitMap {
   ProduceXML(XMLProd:aXMLProducer, theQVP:aQVPXXXAsBitMap);
   UpdateXSL(XSLProd:aXSLProducer, theQVP:aQVPXXXAsBitMap);
   ProduceXSL(XSLProd:aXSLProducer, theQVP:aQVPXXXAsBitMap);
   Produce();
}
declare class aXMLEnumAsStaticGRB extends aEnumAsStaticGRB {
   ProduceXSLforChoice(CurChoice:aConstEnum, FontString:string, XSLProd:aXSLProducer, theQVP:aQVarPresentor);
   ProduceXSL(XSLProd:aXSLProducer, theQVP:aQVPXXXAsRadioButton);
/**
*Portability Check: OK
*/
   Produce();
}
declare class aXMLEnumAsComboBox extends aEnumAsComboBox {
   ConstEnumText(CurChoice:aConstEnum):string;
   Produce();
}
declare class aXMLGenericListOfScenario extends aGenericListOfScenario {
/**
*Portability Check: OK
*/
   ProduceXML(XMLProd:aXMLProducer, TheQVar:aQVarPresentor);
   ProduceSelectWithSize(XSLProd:aXSLProducer, TheQVP:aQVarPresentor, Count:number);
   ProduceXSL(XSLProd:aXSLProducer, TheQVar:aQVarPresentor);
   Produce();
}
declare class aXMLHTMLListGridScenario extends aHTMLListGridScenario {
   ProduceFontAttributesForColomn(ForQVP:aListOfAsGridColumnQualifier, XSLProd:aXSLProducer);
   ColumFont(ColorForeCode:string):string;
/**
*Portability Check: OK
*/
   ProduceXML(PtrTo_Where:string, PtrTo_Options:string);
   ProduceXSL(PtrTo_Where:string, PtrTo_Options:string);
   Produce();
}
declare class aXMLIndexedBuildInListScenario extends aIndexedBuildInListScenario {
/**
*Portability Check: OK
*/
   Produce();
}
declare class aXMLSetAsStaticGCB extends aSetAsStaticGCB {
   ProduceXML(XMLProd:aXMLProducer, ForQVP:aQVarPresentor);
   ProduceXSL(XSLProd:aXSLProducer, ForQVP:aQVarPresentor);
   Produce();
}
declare class aXMLVoidAsListBox extends aVoidAsListBox {
   Produce();
}
declare class aXMLWebBrowserScenario extends aWebBrowserScenario {
   ProduceXML(XMLProd:aXMLProducer, theQVP:aQVPXXXAsOleControl);
   ProduceXSL(XSLProd:aXSLProducer, theQVP:aQVPXXXAsOleControl);
   Produce();
}
declare class aXMLXXXAsHTMLLink extends aXXXAsHTMLLink {
   Produce();
}
declare class aXMLHTMLListLinkforFolders extends aHTMLListLinkforFolders {
   ColumFont(ForQVP:aQVPHTMLListLinkforFolders):string;
/**
*Portability Check: OK
*/
   Produce();
}
declare class aXMLBuildInRefScenario extends aBuildInRefScenario {
   Produce();
}
declare class aXMLClassAsFolderView extends aClassAsFolderView {
   ProduceButtonFromQVP(InText:string, CurSelection:number, CurQvar:aQVarPresentor, ForQVP:aQVPXXXAsFolder);
   ProduceButtonAfterorBeforeSelected(InText:string, ForQVP:aQVPXXXAsFolder, CurSelection:number, After:boolean);
   GetSelectedQvp(FromProd:aXMLRootProducer):aQVarPresentor;
   DrawCurFolderGif(Selected:number, ForQVP:aQVPXXXAsFolder, FolderText:string, FullFileName:string);
   ProduceXSLFolder(ForQVP:aQVPXXXAsFolder, FromProd:aXMLProducer, WithFileName:string, ForScen:aScenario);
   GetCurrentXSLFileName(XSLFileName:string, ForProd:aXMLRootProducer, ForScen:aScenario, ForAgent:aUIAgent, theQVP:aQVPXXXAsFolder);
/**
*Portability Check: OK
*/
   Produce();
}
declare class aXMLClassAsSplitView extends aClassAsSplitView {
   ProduceXSLFolder(ForQVP:aQVPXXXAsFolder, FromProd:aXMLProducer, WithFileName:string, ForScen:aScenario);
   GetCurrentXSLFileName(XSLFileName:string, ForProd:aXMLRootProducer, ForScen:aScenario, ForAgent:aUIAgent);
   Produce();
}
declare class aXMLGenericRefToScenario extends aGenericRefToScenario {
   ProduceInputTag(XSLProd:aXSLProducer, TheQVP:aQVarPresentor);
/**
*Portability Check: OK
*/
   ProduceXML(XMLProd:aXMLProducer, TheQVar:aQVarPresentor);
   ProduceXSL(XSLProd:aXSLProducer, TheQVar:aQVarPresentor);
/**
*Portability Check: OK
*/
   Produce();
}
declare class aXMLListOfAsGridScenario extends aListOfAsGridScenario {
/**
*Portability Check: OK
*/
   ProduceXML(XMLProd:aXMLProducer, TheQVP:aQVPListOfAsGridScenario);
   ProduceFontAttributesForColomn(ForQVP:aListOfAsGridColumnQualifier, XSLProd:aXSLProducer);
   ColumFont(ColorForeCode:string):string;
   ProduceXSLVerticalTitle(ForColumn:aListOfAsGridColumnQualifier, XSLProd:aXSLProducer, TheQVP:aQVPListOfAsGridScenario);
   ProduceXSLHorizontalTitle(ForColumn:aListOfAsGridColumnQualifier, XSLProd:aXSLProducer, TheQVP:aQVPListOfAsGridScenario, TableWidth:string);
   GetGridContentColors(TheQVP:aQVPListOfAsGridScenario, ColorBackCode:string, ColorForeCode:string);
   ProduceXSL(XSLProd:aXSLProducer, TheQVP:aQVPListOfAsGridScenario);
   Produce();
}
declare class aXMLListOfFolderScenario extends aListOfFolderScenario {
   RemoveHTMLChars(InString:string, RemoveSpace:boolean):string;
   GetOwnerName(ForQvp:aQVPXXXAsFolder):string;
   ProduceButtonFromObj(InText:string, CurSelection:number, CurRef:aLightObject, ForQVP:aQVPXXXAsFolder, theType:aListofReftosType, VarAddr:string);
   ProduceButtonAfterorBeforeSelected(InText:string, ForQVP:aQVPXXXAsFolder, CurSelection:number, After:boolean, theType:aListofReftosType, VarAddr:string);
   ProduceXSLFolderButton(ForQVP:aQVPXXXAsFolder, FromProd:aXMLProducer, WithFileName:string, ForScen:aScenario, theType:aListofReftosType, VarAddr:string, TagName:string);
   ProduceXSLFolder(ForQVP:aQVPXXXAsFolder, FromProd:aXMLProducer, WithFileName:string, ForScen:aScenario, FolderText:string, TagName:string);
   GetXSLFileName(XSLFileName:string, ForProd:aXMLRootProducer, ForScen:aScenario, theQVP:aQVPXXXAsFolder, FolderText:string);
/**
*Portability Check: OK
*/
   Produce();
}
declare class aXMLMethodTypeAsHTMLLink extends aMethodTypeAsHTMLLink {
   Produce();
}
declare class aXMLPathThruScenario extends aPathThruScenario {
   Produce();
}
declare class aXMLReftoAsHLink extends aReftoAsHLink {
   UpdateXSL(XSLProd:aXSLProducer, theQVP:aQVarPresentor);
/**
*Portability Check: OK
*/
   Produce();
}
declare class aXMLReftoAsHTMLLink extends aReftoAsHTMLLink {
   UpdateXSL(XSLProd:aXSLProducer, theQVP:aQVarPresentor);
/**
*Portability Check: OK
*/
   Produce();
}
declare class aXMLScenarioWithStyleSheet extends aScenarioWithStyleSheet {
   Produce();
}
declare class aXMLVoidAsEntryField extends aVoidAsEntryField {
   ProduceInputTag(XSLProd:aXSLProducer, TheQVP:aQVarPresentor);
   ProduceXSL(XSLProd:aXSLProducer, TheQVP:aQVarPresentor);
/**
*Portability Check: OK
*/
   ProduceXML(XMLProd:aXMLProducer, TheQVP:aQVarPresentor);
   Produce();
}
declare class XSLGeneratorPackagesAgent extends aUIAgent {
   myPackages002: string ;
   myPackages002_Selected(SelectedRank:number):number;
   NotifyInit();
}
declare class aXSLGeneratorSpliWithCommentAgent extends aSplitViewAgent {
}
declare class aXSLGeneratorMainAgent extends aOpenWhereClosedUIAgent {
   aXSLGeneratorSpliWithComment: string ;
   NotifyCheck();
}
declare class aXSLGeneratorToolBarAgent extends aToolBarUIAgent {
   SaveSaveAndCloseClose: string ;
}
declare class aXSLGeneratorStatusAgent extends aToolBarUIAgent {
   ProgressWorking: string ;
}
declare class XSLGeneratorCommentAgent extends aUIAgent {
   Comment: string ;
   Comment_ButtonDblClk(:aUIAgent, No:number, X:number, Y:number):number;
}
declare class aXSLGeneratorFileViewerAgent extends aUIAgent {
   Viewer: string ;
   Url: string ;
   StaticText: string ;
   SaveXSLFile: string ;
}
declare class aXSLGeneratorBrowserAgent extends aUIAgent {
   Url: string ;
}
declare class aXSLGenerator extends aEntity {
   myPackages: string ;
   ProgressWorking: string ;
   Viewer: string ;
   CurPackage: string ;
   Url: string ;
   ProducerClassName: string ;
   FolderForTopOkCancel: string ;
   CurrentEntityAgent: string ;
   InitAfterLoad();
   SetProgressWorking(i:number);
   HasChanged();
   BeforeAccept();
   LineExecuted(ForAgent:aTextUIAgent);
   SaveXSLFile();
   StringExtract();
   IsConsistent();
   PrepareSelectedProjectForEdition();
   Save();
   RefreshAfterSynchronization();
}
declare class aXSLGeneratorExtension001Agent extends aUIAgent {
   DoYourJob: string ;
}
declare class aXSLGeneratorExtension extends aWideExtension {
   GetGenerator():aXSLGenerator;
   DoYourJob();
   FolderParentName();
   MenuText();
   ButtonBMPName();
}
declare class aXSLModuleRepresentation001Agent extends aUIAgent {
   Presenting: string ;
   PresentingStaticText: string ;
}
declare class aXSLModuleRepresentationFolderAgent extends aFolderViewAgent {
}
declare class XSLModuleRepresentationScenToGenAgent extends aUIAgent {
   ScenariosToGenerate001: string ;
   ScenariosToGenerate001_ButtonUp(No:number, X:number, Y:number):number;
}
declare class XSLModuleRepresentationAvailableScensAgent extends aUIAgent {
   Presenting: string ;
   AvailableScenarios: string ;
}
declare class XSLModuleRepresentationScensAgent extends aSplitViewAgent {
}
declare class XSLModuleRepresentationPopUpAgent extends aMenuItemControlAgent {
   UIConsultScen: string ;
   UIReadXSLFile: string ;
   UIReadHTMLFile: string ;
   UIReadWorkingXSLFile: string ;
   WinDiffXSLDeployedAndWorking: string ;
   UIDeployXSL: string ;
   ViewXSLProductionItems: string ;
   ShowUpdatedXSL: string ;
   UIReadXSLFile_ValueLoaded(:aUIAgent);
   ShowUpdatedXSL_ValueLoaded(:aUIAgent);
   WinDiffXSLDeployedAndWorking_ValueLoaded(:aUIAgent);
   UIReadHTMLFile_ValueLoaded(:aUIAgent);
   UIReadWorkingXSLFile_ValueLoaded(:aUIAgent);
   UIDeployXSL_ValueLoaded(:aUIAgent);
}
declare class aXSLModuleRepresentation extends aEntity {
   Presenting: string ;
   ScenariosToGenerate: string ;
   CurScen: string ;
   InitScenarios();
   StringExtract();
   HasChanged();
   UIConsultScen();
   ViewThisFile(FileName:string);
   GetFreezedDeployedXSLfile():string;
   GetNotFreezedDeployedXSLfile():string;
   UIReadDeployedXSLFile();
   GetWorkingHTMLfile():string;
   UIReadHTMLFile();
   GetWorkingXSLfile():string;
   GetWorkingFreezedXSLfile():string;
   UIReadWorkingXSLFile();
   WinDiffXSLDeployedAndWorking();
   IsConsistent();
   GetBitmap();
   UIDeployXSL();
   ViewXSLProductionItems();
   LoadXSLFiles(theServer:aEWEDServer);
   ShowHTMLSample();
}
declare class XSLLightObjectsAgent extends aUIAgent {
   theLightObjectClassDef: string ;
   Descendants: string ;
   LoadValue();
/**
*Portability Check: OK
*/
   Descendants_Executed(SelectedRank:number, Option:number):number;
   NotifyTimer();
}
declare class XSLAppliClassesAgent extends aUIAgent {
   theAppliClassDef: string ;
   Descendants: string ;
   timerLaunched: string ;
   LoadValue();
/**
*Portability Check: OK
*/
   Descendants_Executed(SelectedRank:number, Option:number):number;
   NotifyTimer();
}
declare class XSLModulesAndClassesAgent extends aFolderViewAgent {
}
declare class aXSLPackageModulesAgent extends aUIAgent {
   Modules: string ;
   Modules_Selected(SelectedRank:number):number;
}
declare class aXSLPackage002Agent extends aSplitViewAgent {
}
declare class aXSLPackageTopAgent extends aUIAgent {
   aXSLPackage002: string ;
   Generate: string ;
   GenerateHTML: string ;
   UpdateXSLFromHTML: string ;
   UIDeployAllXSL: string ;
}
declare class aXSLPackageMainAgent extends aUIAgent {
   NotifyCheck();
}
declare class aXSLPackageOptionsAgent extends aUIAgent {
   OverrideWarning: string ;
   ViewInBrowser: string ;
   NoOverride: string ;
   ExternalBrowser: string ;
   AcceptDirtyHTML001: string ;
}
declare class aXSLPackage001Agent extends aFolderViewAgent {
}
declare class aXSLPackagePopUpForExistAgent extends aMenuItemControlAgent {
   UIConsultRep: string ;
   UIModifyRep: string ;
   UIDelete: string ;
   UIDeleteWithDescendants: string ;
}
declare class aXSLPackagePopUpToCreateAgent extends aMenuItemControlAgent {
   UICreateWithDescendants: string ;
   UICreate001: string ;
}
declare class aXSLPackage003Agent extends aUIAgent {
   Modules: string ;
   aXSLModuleRepresentation002: string ;
}
declare class aXSLPackage extends aEntity {
   Modules: string ;
   theLightObjectClassDef: string ;
   theAppliClassDef: string ;
   OverrideWarning: string ;
   NoOverride: string ;
   ViewInBrowser: string ;
   ExternalBrowser: string ;
   CurDef: string ;
   LastOwnedId: string ;
   XSLGenId: string ;
   XSLGenNsId: string ;
   ProdOption: string ;
   ReloadInvalidHTML: string ;
   getXSLGeneratorProject():aXSLGenerator;
   SelectThisModule(Rank:number);
   Init();
   InitAfterLoad();
   RepresentationThisModuleDef(theModuleDef:aModuleDef):aXSLModuleRepresentation;
   SetBMPToNode(thisNode:string, ThisTree:aListOfTreeUIAgent);
   StringExtract();
   AppendScenInList(CurScen:aScenario, InList:aListOfInstances);
   FillListOfScenToGenerateAndReturnCount(ToGenerate:aListOfInstances):number;
   GetNeweWedServer():aEWEDServer;
   GenerateDeployedXSL();
   CreateForClassAndDescendants(ForDef:aModuleDef);
   DeleteForClassAndDescendants(ForDef:aModuleDef);
   UICreatex();
   UICreateWithDescendants();
   UIDelete();
   UIDeleteWithDescendants();
   UIModifyRep();
   UIConsultRep();
   ShowPopUpFor(TheDef:aModuleDef, x:number, y:number);
   CopyImages();
   GetHTMLFilename(ForScen:aScenario):string;
   UIGenerateHTML();
   DisplayErrorAttemptingLoadingHTML(Generator:aXSLGenerator, theDocument:aDocumentDOMXML, theFileName:string, XSLFileName:string);
   GetFromPos(InText:string, FromPos:number):number;
   DoUpdateXSLTextFromHTMLText(THTML:string, TXSL:string, Generator:aXSLGenerator, XSLFileName:string, XSLProd:aXSLProducer, CurScen:aScenario, theProd:aEWEDProducer, FreezedName:string):boolean;
   UIUpdateXSLFromHTML();
   UIDeployAllXSL();
   IsConsistent();
   GetNsIdAndIdforOwnedEntity();
   IsAnInOutSyncEntity();
   InOutSyncCategory();
   NotifyDeletion();
   IsAnExportableEntity();
   RegisterYourselfInIDE();
   GetIDAllocater();
   GetBitmap();
}
declare class aXSLPackageModulesRole extends aSingleRoleType {
   IsDroppedObjectUsable();
   NewInstanceFromDroppedObject();
}
declare class aXSLRepScenRole extends aSingleRoleType {
   IsDroppedObjectUsable();
}
declare class aXMLListOfAsHTMLLinkScenario extends aListOfAsHTMLLinkScenario {
/**
*Portability Check: OK
*/
   Produce();
}
declare class aXMLListOfAsHLinkScenario extends aListOfAsHLinkScenario {
   Produce();
}
declare class aXMLReturnScenarioMethodTypeScenario extends aReturnScenarioMethodTypeScenario {
/**
*Portability Check: OK
*/
   Produce();
}
declare class aXMLXXXAsBitMap extends aXXXAsBitMap {
   DoCopy(SrcPath:string, ShortFile:string);
   ProduceXMLForBitMapControlVirtual(XMLProd:aXMLProducer, theQVP:aQVPXXXAsBitMap);
   ProduceXML(XMLProd:aXMLProducer, theQVP:aQVPXXXAsBitMap);
   ProduceXSLForBitMapControl(XSLProd:aXSLProducer, theQVP:aQVPXXXAsBitMap);
   ProduceXSLForBitMapControlVirtual(XSLProd:aXSLProducer, theQVP:aQVPXXXAsBitMap);
   ProduceXSL(XSLProd:aXSLProducer, theQVP:aQVPXXXAsBitMap);
   UpdateXSL(XSLProd:aXSLProducer, theQVP:aQVPXXXAsBitMap);
   Produce();
}
declare class aXMLVoidAsComboBoxEntry extends aVoidAsComboBoxEntry {
   Produce();
}
declare class aXMLVoidAsMLE extends aVoidAsMLE {
   Produce();
}
declare class aXMLXXXAsComboBox extends aXXXAsComboBox {
   Produce();
}
declare class aXMLArrayTypeAsListBox extends aArrayTypeAsListBox {
   Produce();
}
declare class aXMLEnumAsComboBoxEntry extends aEnumAsComboBoxEntry {
   ConstEnumText(CurChoice:aConstEnum):string;
   Produce();
}
declare class aXMLEnumAsListBox extends aEnumAsListBox {
   ProduceXML(XMLProd:aXMLProducer, theQvp:aQVarPresentor);
   ProduceXSL(XSLProd:aXSLProducer, theQvp:aQVarPresentor);
   Produce();
}
declare class aXMLSetAsListBox extends aSetAsListBox {
/**
*Portability Check: OK
*/
   Produce();
}
declare class aXMLSetAsListCtrl extends aSetAsListCtrl {
/**
*Portability Check: OK
*/
   Produce();
}
declare class aXMLSubRangeTypeAsListBox extends aSubRangeTypeAsListBox {
   Produce();
}
declare class aXMLScenario extends aScenario {
   Produce();
}
declare class aXMLReturnTypeScenario extends aReturnTypeScenario {
   ProduceXML(XMLProd:aXMLProducer, theQVP:aQVPReturnTypeScenario, theRefScenario:aScenario, theMethod:aMethodDesc, theMethodType:aMethodType, theReturnType:aType);
   ProduceXSL(XSLProd:aXSLProducer, theQVP:aQVPReturnTypeScenario, theRefScenario:aScenario, theMethod:aMethodDesc, theMethodType:aMethodType, theReturnType:aType);
   Produce();
}
declare class CurPackageAgent extends aUIAgent {
   CurPackage: string ;
   FolderForTopOkCancel: string ;
   FolderForTopOkCancel_Init():number;
   CurPackage_Init():number;
}
declare class XSLGeneratorPackagesWithSelectedAgent extends aSplitViewAgent {
}
declare class WEDProductionsDescAgent extends aUIAgent {
   TreeBox: string ;
   InitWith(ThisList:aListOfInstances);
}
declare class aXMLCStringTypeAsHTMLLink extends aCStringTypeAsHTMLLink {
   ProduceXML(XMLProd:aXMLProducer, ForQVP:aQVarPresentor);
   ProduceXSL(XSLProd:aXSLProducer, ForQVP:aQVarPresentor);
   UpdateXSL(XSLProd:aXSLProducer, theQVP:aQVarPresentor);
   Produce();
}
declare class aXMLHTMLPickableListCtrl extends aHTMLPickableListCtrl {
   GetListAgent(FromAgent:aUIAgent, ForQVP:aQVarPresentor):aUIAgent;
   Produce();
}
declare class aXMLListofAsExternalListCtrl extends aListofAsExternalListCtrl {
/**
*Portability Check: OK
*/
   ProduceXMLForListOfInstances(XMLProd:aXMLProducer, TheQVP:aQVPListOfAsExternalListCtrl, ForAgent:ListOfInstancesAsExternalListCtrlAgent);
   ProduceXSLForListOfInstances(XSLProd:aXSLProducer, TheQVP:aQVPListOfAsExternalListCtrl);
   ProduceInScen(TheProd:aXMLRootProducer, ForQVP:aQVPListOfAsExternalListCtrl, ForAgent:aListOfAsListCtrlUIAgent);
   ProduceForListOfInstancesAgent(TheProd:aXMLRootProducer, ForQVP:aQVPListOfAsExternalListCtrl, ForAgent:ListOfInstancesAsExternalListCtrlAgent);
   GetAgentFromVarDesc(VarDesc:aVarDesc, VarType:aType, ForAgent:aUIAgent):aUIAgent;
   Produce();
}
declare class aXMLListOfAsListCtrlScenario extends aListOfAsListCtrlScenario {
   Produce();
}
declare class aXMLReftoAsComboBoxScenario extends aReftoAsComboBoxScenario {
   GetAgentFromQualifierAndObject(theQVP:aQVarPresentor, InAgent:aUIAgent, ForObject:aLightObject):aUIAgent;
   GetRefAgent(FromAgent:aUIAgent, ForQVP:aQVarPresentor, ForProd:aXMLProducer, ForObject:aLightObject):aUIAgent;
/**
*Portability Check: OK
*/
   ProduceXML(XMLProd:aXMLProducer, ForQVP:aQVarPresentor, ForAgent:aReftoAsComboBoxUIAgent);
   ProduceXSL(XSLProd:aXSLProducer, ForQVP:aQVarPresentor);
   Produce();
}
declare class aXSLPackageRole extends aSingleRoleType {
   AuthorizeAction();
   canBreakLinkBetween();
   AskForActions();
}
declare class aXMLBuildInMethodTypeScenario extends aBuildInMethodTypeScenario {
   Produce();
}
declare class aXMLDataTemplateScenario extends aDataTemplateScenario {
   Produce();
}
declare class aXMLHTMLRefToTableScenario extends aHTMLRefToTableScenario {
/**
*Portability Check: OK
*/
   ProduceXML(XMLProd:aXMLProducer, TheQVP:aQVPRefToHTMLTable);
   ProduceFontAttributesForColomn(ForQVP:aListOfAsGridColumnQualifier, XSLProd:aXSLProducer);
   ColumFont(ColorForeCode:string):string;
   OpenFontSels(XSLProd:aXSLProducer, TheFont:string);
   CloseFontSels(XSLProd:aXSLProducer, TheFont:string);
   ProduceXSL(XSLProd:aXSLProducer, TheQVP:aQVPRefToHTMLTable);
   Produce();
}
declare class aXMLRefScenario extends aRefScenario {
   ProduceXSL(XSLProd:aXSLProducer, theQVP:aQVPRefScenario, RefObject:aLightObject);
   Produce();
}
declare class aXMLListOfTreeScenario extends aListOfTreeScenario {
   Produce();
}
/**
*To implement for eWAM 5
But keep it empty in eWAM 4 for Recast reasons
*/
declare class aXMLVoidAsTreeBox extends aVoidAsTreeBox {
}
/**
*One can think that the class 'aXMLXXXAsCheckBox' should be enought. But this
class is necessary to keep class heriarchy. For example to keep the good run
time UIAgent thank to the methode 'DefaultUIAgentClassId'.
*/
declare class aXMLBooleanTypeAsCheckBox extends aBooleanTypeAsCheckBox {
   Produce();
}
/**
*One can think that the class 'aXMLXXXAsComboBox' should be enought. But this class is necessary to keep class heriarchy.
For example to keep the good runtime UIAgent thank to the methode 'DefaultUIAgentClassId'.

*/
declare class aXMLSubRangeTypeAsComboBox extends aSubRangeTypeAsComboBox {
   Produce();
}
/**
*One can think that the class 'aXMLXXXAsCheckBox' should be enought. But this class is necessary to keep class heriarchy.
For example to keep the good runtime UIAgent thank to the methode 'DefaultUIAgentClassId'.
*/
declare class aXMLVoidAsCheckBox extends aVoidAsCheckBox {
   Produce();
}
/**
*One can think that the class 'aXMLXXXAsComboBox' should be enought. But this class is necessary to keep class heriarchy.
For example to keep the good runtime UIAgent thank to the methode 'DefaultUIAgentClassId'.
*/
declare class aXMLVoidAsComboBox extends aVoidAsComboBox {
   Produce();
}
declare class aXMLMethodTypeAsPushButton extends aMethodTypeAsPushButton {
   ProduceXML(XMLProd:aXMLProducer, ForQVP:aQVPXXXAsPushButton);
   ProduceXSLForVirtual(XSLProd:aXSLProducer, ForQVP:aQVPXXXAsPushButton);
   HasExecuteEvent(OfQVP:aQVarPresentor):boolean;
   ProduceXSL(XSLProd:aXSLProducer, ForQVP:aQVPXXXAsPushButton);
   Produce();
}
declare class aXMLVoidAsStaticText extends aVoidAsStaticText {
   ProduceXML(XMLProd:aXMLProducer, PtrTo_Options:string);
   ProduceXSL(XSLProd:aXSLProducer, ForQVP:aQVarPresentor);
   Produce();
}
declare class aIntegrationWelcome001Agent extends aUIAgent {
   AppliVersion: string ;
   AppliVersionStaticText: string ;
   ModifyVersion: string ;
   BitMap: string ;
   ActionClose001: string ;
}
declare class aIntegrationWelcome002Agent extends aUIAgent {
   AppliVersion: string ;
   AppliVersionStaticText: string ;
   AppliVersion001: string ;
}
declare class aIntegrationWelcome extends aEntity {
   AppliVersion: string ;
   Init();
   ModifyVersion();
}
declare class aUMLIntermediateAssociation extends aUMLIntermediateNamedObject {
   RoleA: string ;
   RoleB: string ;
   UMLAssociation: string ;
   Import();
   StringExtract();
   ObjectKeyword();
   UMLObject():aUMLAssociation;
   GenerateUMLAssociation(Into:aUMLPackage);
   ProperGenerate(Into:aUMLPackage);
   DefaultEntityForGeneration():aUMLPackage;
   EnableGeneration(Into:aUMLPackage):boolean;
   ObjectKind();
}
declare class TextBlocScenarioAgent extends aUIAgent {
   InText: string ;
   InTextStaticText: string ;
   MinPos: string ;
   MinPosStaticText: string ;
   MaxPos: string ;
   MaxPosStaticText: string ;
   LoadFromFile: string ;
   AsText: string ;
   Into001: string ;
   MethodTypeAsPushButton: string ;
}
declare class aUMLTextBlock extends aUMLImportLightRoot {
   InText: string ;
   MinPos: string ;
   MaxPos: string ;
   CloneMyVars(ToThis:aUMLTextBlock);
   IsEmpty():boolean;
   FindFirst(TheString:string):number;
   ReduceToNextSubBloc(Opening:string, Closing:string);
   ReduceToFirstEnclosed(Opening:string, Closing:string);
   AsCString():string;
   ReadChar(AtPos:number):number;
   LoadFromFile();
   AsText(Into:string);
   CharIsBlank(TheChar:number):boolean;
   RemoveBeginningBlank();
   ReduceToFirstEnclosedLabel(TheLabel:string, Opening:string, Closing:string);
   IsParenthesis():boolean;
   IsWord():boolean;
   IsQuoted():boolean;
   IsComment():boolean;
   ParseWithGauge(TheGauge:aGauge);
}
declare class aUMLIntermediateClassAttribute extends aUMLIntermediateNamedObject {
   TheType: string ;
   Initv: string ;
   ExportControl: string ;
   Import();
   ObjectKeyword();
}
declare class UMLIntermediateModelScenarioAgent extends aUIAgent {
   TheImportedClasses: string ;
   TheImportedClassesGroupBox: string ;
   TheDiagrams: string ;
   TheDiagramsGroupBox: string ;
   Associations: string ;
   AssociationsGroupBox: string ;
}
declare class aUMLIntermediateModel extends aUMLIntermediatePackage {
   Classes: string ;
   Associations: string ;
   Diagrams: string ;
   TheGauge: string ;
   TheUMLImportTool: string ;
   TriggeredInit();
   Init();
   StringExtract();
   DoYourJob();
   TestIt(First:number, Second:number, Third:number):aLightObject;
}
declare class UMLIntermediateClassScenarioAgent extends aUIAgent {
   ClassAttributes: string ;
   ClassAttributesGroupBox: string ;
   Operations: string ;
   OperationsGroupBox: string ;
   Associations: string ;
   AssociationsGroupBox: string ;
   Dependencies: string ;
   DependenciesGroupBox: string ;
}
declare class aUMLIntermediateClass extends aUMLIntermediateType {
   ClassAttributes: string ;
   Operations: string ;
   Associations: string ;
   Superclasses: string ;
   Dependencies: string ;
   Cardinality: string ;
   MyActor: string ;
   Myfather: string ;
   NameSpaceReservedWord: string ;
   InitHashTableOneLevel(theHashTable:aStringHashTable, WithThisClassDef:aClassDef);
   InitHashTable(theHashTable:aStringHashTable, WithThisClassDef:aClassDef);
   GetNameFor(theHashTable:aStringHashTable, Name:string, FixedPrefix:string, UsingPrefix:string):string;
   GetAndPutNameFor(theHashTable:aStringHashTable, Name:string, FixedPrefix:string, UsingPrefix:string):string;
   PrefixAllTokens(InString:string, Prefix:string, Separator:number);
   Import();
   ObjectKeyword();
   AsGold();
   GenerateUses();
   InitPreDefinedWord();
   ClassIsFullClass(TheDef:aClassDef):boolean;
   GenerateClass(FatherClass:aClassDef);
   GenerateActor(InPackage:aUMLPackage);
   UMLObject();
   ProperGenerate();
   EnableGeneration();
   ObjectKind();
}
declare class aUMLIntermediateClassDiagram extends aUMLIntermediateDiagram {
   Title: string ;
   Zoom: string ;
   ParseTitle();
   ParseZoom();
   ParseItems();
   ObjectKeyword();
   Import();
}
declare class aUMLIntermediateClassView extends aUMLIntermediateAssociableGraphItem {
   IncludeAttribute: string ;
   IncludeOperation: string ;
   Import();
   GraphItemGenerate();
}
declare class aUMLCommentBlock extends aUMLTextBlock {
   StringExtract();
   IsComment();
   ParseWithGauge();
}
declare class aUMLIntermediateGraphItem extends aUMLIntermediateObjectWithReference {
   Location: string ;
   Vertices: string ;
   Import();
   DefaultEntityForGeneration():aUMLDiagram;
   GraphItemGenerate(Into:aUMLDiagram);
   ProperGenerate(Into:aUMLDiagram);
   LocationForDrop():string;
   CleanMe();
   Between(First:aUMLIntermediateObject, Second:aUMLIntermediateObject):string;
}
declare class aUMLImportConstInit extends aUMLImportLightRoot {
   TheMap: string ;
   DefaultMap();
   DefaultMap_();
   FillWithDefault(TheHashTable:aDataByStringHashTable);
   DefaultHash():aDataByStringHashTable;
}
declare class _DefaultWideExtensionOverrideAgent extends aUIAgent {
   DoYourJob: string ;
}
declare class aUMLImportExtension extends aWideExtension {
   TheImporter: string ;
   DoYourJob();
   MenuText();
   FolderParentName();
   ButtonBMPName();
}
declare class UMLImportToolMainScenarioAgent extends aOpenWhereClosedUIAgent {
   UMLImportToolStatusBarScenario: string ;
   TheFile: string ;
   TheFileGroupBox: string ;
   DoYourJob: string ;
   RootClassChoice: string ;
   NotifyRangeHasChanged();
}
declare class DebugAgent extends aUIAgent {
   TheModel: string ;
   TheModelStaticText: string ;
   InitTheModelImport: string ;
}
declare class UMLImportToolStatusBarScenarioAgent extends aUIAgent {
   Status: string ;
   TheGauge: string ;
   Laps: string ;
}
declare class aUMLImportTool extends aEntity {
   TheModel: string ;
   TheReparser: string ;
   TheRoot: string ;
   VirtualRoot: string ;
   TheUMLProject: string ;
   TheAnalysisModel: string ;
   VirtualAnalysisModel: string ;
   TheFile: string ;
   TheGauge: string ;
   Status: string ;
   CreateRootClass: string ;
   RootName: string ;
   InitTheModelImport();
   DoYourJob();
   FirstIcon();
   ActionSaveAndClose();
   Init();
}
declare class aUMLNamedObject001Agent extends aUIAgent {
   Name: string ;
   NameStaticText: string ;
}
declare class aUMLIntermediateNamedObject extends aUMLIntermediateObject {
   Name: string ;
   Comment: string ;
   Capital(ThisString:string);
   RecDelCharAndCapitalize(ThisChar:number, ThisString:string);
   Goldify(ThisLabel:string);
   StringExtract();
   Import();
   AsGold();
}
declare class aUMLIntermediateObject extends aUMLImportRoot {
   MyOwner: string ;
   MyImage: string ;
   Generate(Into:aEntity);
   ObjectKind():string;
   ObjectKeyword():string;
   IsInside(Cur:number, Min:number, Max:number):boolean;
   Import();
   StringExtract();
   AsGold():string;
   MyPackage():aUMLIntermediatePackage;
   OwnerPackage():aUMLIntermediatePackage;
   UMLObject():aUMLObject;
   ProperGenerate(Into:aEntity);
   DefaultEntityForGeneration():aEntity;
   EnableGeneration(Into:aEntity):boolean;
}
declare class aUMLIntermediateObjectWithReference extends aUMLIntermediateObject {
   Supplier: string ;
   UMLLabel: string ;
   RefObject: string ;
   Import();
   StringExtract();
   EnableGeneration(Into:aUMLPackage):boolean;
}
declare class aUMLOperation001Agent extends aUMLNamedObject001Agent {
   Parameters: string ;
   ParametersGroupBox: string ;
   Result: string ;
   ResultStaticText: string ;
   OpExportControl: string ;
   OpExportControlStaticText: string ;
}
declare class aUMLIntermediateOperation extends aUMLIntermediateNamedObject {
   Parameters: string ;
   Result: string ;
   Concurrency: string ;
   OpExportControl: string ;
   Uid: string ;
   ObjectKeyword();
   Import();
}
declare class aUMLParameter001Agent extends aUMLNamedObject001Agent {
   MyType: string ;
   MyTypeStaticText: string ;
}
declare class aUMLIntermediateParameter extends aUMLIntermediateNamedObject {
   MyType: string ;
   ObjectKeyword();
   NameAndTypeFromName();
   Import();
}
declare class aUMLParenthesisBlock extends aUMLTextBlock {
   SubBlocks: string ;
   Init();
   ProcessClosingParenthesis(TextMinPos:number);
   BlocParseWithGauge(TheGauge:aGauge);
   StringExtract();
   IsParenthesis();
   SearchLabel(TheLabel:string):number;
   ReadLabelValue(TheLabel:string):aUMLTextBlock;
   ReadVariable(VarLabel:string):string;
   IsInside(Cur:number, Min:number, Max:number):boolean;
   ReadBoolean(BoolLabel:string):boolean;
   ReadNumber(NumLabel:string):number;
   ReadList(ListLabel:string):aUMLParenthesisBlock;
   ReadValue(ValueLabel:string):string;
   ReadParenthesis(TheLabel:string):aUMLParenthesisBlock;
   FlattenedTree():aListOfInstances;
   RecursiveGetLabeledParenthesis(TheLabel:string):aListOfInstances;
   ParseWithGauge();
   CleanMe();
}
declare class aPetalImporter extends aUMLRootImporter {
   ClassImport();
   ClassAttributeImport();
   NameImport();
   ObjectIdImport();
   OperationImport();
   ParserType();
   InheritanceKeyword();
   Import();
   ObjectKeyword();
   AssociationImport();
   RoleImport();
   Init();
   NewpId():string;
   Test();
   ObjectIdSize();
   ObjectReferenceImport();
   UseCaseDiagramImport();
   GraphItemImport();
   ClassViewImport();
   UseCaseViewImport();
   AssociationViewImport();
   PackageImport();
   UseCaseImport();
}
declare class aUMLQuotedBlock extends aUMLTextBlock {
   StringExtract();
   IsQuoted();
   ParseWithGauge();
}
declare class aUMLIntermediateRole extends aUMLIntermediateObjectWithReference {
   Cardinality: string ;
   Navigable: string ;
   Aggregation: string ;
   Import();
   ObjectKeyword();
}
declare class UMLFileScenarioAgent extends aUIAgent {
   TheFileName: string ;
   TheFileNameStaticText: string ;
   IsLoaded: string ;
   TheText: string ;
   LoadFromFile: string ;
}
declare class aUMLFile extends aUMLImportLightRoot {
   TheText: string ;
   TheFileName: string ;
   IsLoaded: string ;
   Position(TheString:string, MinPos:number, Maxpos:number):number;
   ReadChar(AtPos:number):number;
   LoadFromFile();
   Copy(StringLength:number, atPos:number):string;
   MyLength():number;
   CopyText(Into:string, fromHere:number, toThere:number);
   ReadLn(TheString:string, CurPos:number);
}
declare class aUMLImportLightRoot extends aLightObject {
   IsParsed: string ;
   Debug();
   CleanMe();
}
declare class aUMLIntermediateType extends aUMLIntermediateNamedObject {
   Import();
   AsGold();
   IsPetalClass():boolean;
   ObjectKeyword();
}
declare class aUMLWordBlock extends aUMLTextBlock {
   CharIsBlank();
   StringExtract();
   IsWord();
   ParseWithGauge();
}
declare class aUMLTypeNameToWAMTypeMap extends aWordToObjectMap {
   ConstructHashTable();
   NewPoint(TheWord:string, TheObject:aType);
}
declare class aUMLTypeWordToWAMTypePoint extends aWordToObjectPoint {
}
declare class aUMLImportRoot extends aUMLImportLightRoot {
   Importer: string ;
   UnParsed: string ;
   Import();
   IsPendingsList():boolean;
}
declare class aUMLRootImporter001Agent extends aUIAgent {
   Test: string ;
}
declare class aUMLRootImporter extends aUMLImportLightRoot {
   ObjectsHash: string ;
   ObjectsKeywords: string ;
   LinksKeywords: string ;
   TypeFromName: string ;
   ConversionFactor: string ;
   Init();
   Terminate();
   ParseList(TheList:aListOfInstances, OfWhat:aClassDef, TheText:aUMLParenthesisBlock);
   ClassImport(ForClass:aUMLIntermediateClass);
   ClassAttributeImport(ForAttribute:aUMLIntermediateClassAttribute);
   RoleImport(ForRole:aUMLIntermediateRole);
   TypeImport(ForType:aUMLIntermediateType);
   NameImport(ForObject:aUMLIntermediateNamedObject);
   ObjectIdImport(ForObject:aUMLIntermediateObject);
   ObjectKeyword(ForObject:aUMLIntermediateObject):string;
   OperationImport(ForOperation:aUMLIntermediateOperation);
   ParserType():string;
   InheritanceKeyword():string;
   AssociationImport(ForAssociation:aUMLIntermediateAssociation);
   Import(ForImport:aUMLIntermediateModel);
   ObjectIdSize():number;
   FindObjectOrAppendLink(Link:aUMLIntermediateLink, pId:string):aUMLIntermediateObject;
   LinkImport(ForLink:aUMLIntermediateLink);
   NewpId():string;
   ObjectCount():number;
   InheritanceLinkImport(ForLink:aUMLIntermediateLink);
   Test(TheString:string):aLightObject;
   ObjectReferenceImport(ForObject:aUMLIntermediateObjectWithReference);
   ResolveTypeFromName(TheVar:aUMLIntermediateType, Name:string);
   UseCaseDiagramImport(ForUseCase:aUMLIntermediateUseCaseDiagram);
   GraphItemImport(ForItem:aUMLIntermediateGraphItem);
   ClassViewImport(ForClassView:aUMLIntermediateClassView);
   UseCaseViewImport(ForClassView:aUMLIntermediateUseCaseView);
   AssociationViewImport(ForAssociationView:aUMLIntermediateAssociationView);
   RoleViewImport(ForRoleView:aUMLIntermediateRoleView);
   UnitConversion(x:number):number;
   PackageImport(ForPackage:aUMLIntermediatePackage);
   UseCaseImport(ForUseCase:aUMLIntermediateUseCase);
}
declare class aWordToObjectMap extends aFullObject {
   TheMap: string ;
   FillHashTable(TheHashTable:aDataByStringHashTable);
   ConstructHashTable():aDataByStringHashTable;
   NewPoint(TheWord:string, TheObject:aFullObject);
}
declare class aWordToObjectPoint extends aFullObject {
   TheWord: string ;
   TheObject: string ;
}
declare class aCDIFImporter001Agent extends aUIAgent {
   Test: string ;
}
declare class aCDIFImporter extends aUMLRootImporter {
   ObjectIdSize();
   ClassAttributeImport();
   NameImport();
   CStringToCDIFId(TheIdString:string):string;
   ObjectIdImport();
   OperationImport();
   ParserType();
   InheritanceKeyword();
   BinaryLinkImport(ForBloc:aUMLParenthesisBlock, FirstObject:aUMLIntermediateObject, SecondObject:aUMLIntermediateObject);
   LinkImport();
   Import();
   ObjectKeyword();
   AssociationImport();
   PackageImport(ForPackage:aUMLIntermediateModel);
   NewpId():string;
   Test();
   InheritanceLinkImport();
   Init();
}
declare class aUMLIntermediateDependencyView extends aUMLIntermediateGraphItem {
   GraphItemGenerate();
}
declare class aUMLIntermediateInheritanceRelationShip extends aUMLIntermediateObjectWithReference {
   ProperGenerate(Into:aUMLPackage);
   UMLObject();
}
declare class aUMLIntermediateInheritanceView extends aUMLIntermediateDependencyView {
}
declare class aUMLIntermediateUseCaseDiagram extends aUMLIntermediateDiagram {
   Title: string ;
   Zoom: string ;
   MaxHeight: string ;
   MaxWidth: string ;
   OriginX: string ;
   OriginY: string ;
   Import();
   ObjectKeyword();
   ProperGenerate(Into:aUMLPackage);
   UMLObject():aUMLDiagram;
}
declare class aUMLIntermediateUseCase extends aUMLIntermediateNamedObject {
   ObjectKeyword();
   ProperGenerate(Into:aUMLPackage);
   UMLObject();
   ObjectKind();
   Import();
}
declare class ObjectsAgent extends aUIAgent {
   TheImportedObjects: string ;
}
declare class aUMLIntermediatePackage extends aUMLIntermediateNamedObject {
   TheImportedObjects: string ;
   Import();
   FlattenedTree():aListOfInstances;
   ProperGenerate(Into:aUMLPackage);
   ObjectKind();
}
declare class aUMLIntermediateDiagram001Agent extends aUMLNamedObject001Agent {
   Items: string ;
}
declare class aUMLIntermediateDiagram extends aUMLIntermediateNamedObject {
   Handle: string ;
   Items: string ;
   ObjectKind();
   ItemOfObject(Object:aUMLIntermediateObject):aUMLIntermediateGraphItem;
}
declare class aUMLIntermediateDependency extends aUMLIntermediateObjectWithReference {
   ProperGenerate(Into:aUMLPackage);
   UMLObject();
   DefaultEntityForGeneration();
}
declare class aUMLIntermediateLink extends aUMLImportRoot {
   Objects: string ;
   Ids: string ;
   Resolve();
   IdIsAlreadyThere(Id:string):boolean;
   AppendObject(Object:aUMLIntermediateObject, Id:string);
   IdsDiffers(pFirst:string, pSecond:string, IdSize:number):boolean;
   TryResolvingFrom(Object:aUMLIntermediateObject, pId:string):boolean;
   Init();
   InitForIdSize(Size:number);
   Import();
   CleanMe();
   Terminate();
}
declare class aUMLIntermediateLinkClassAssociated extends aUMLIntermediateLink {
   Resolve();
}
declare class aUMLIntermediateLinkClassInheritsFromClass extends aUMLIntermediateLink {
   Resolve();
   Import();
}
declare class aUMLIntermediateLinkClassOwnsAttribute extends aUMLIntermediateLink {
   Resolve();
}
declare class aUMLIntermediateLinkClassOwnsOperation extends aUMLIntermediateLink {
   Resolve();
}
declare class aUMLIntermediateLinkSimpleReference extends aUMLIntermediateLink {
   Resolve();
}
declare class aUMLIntermediateRoleView extends aUMLIntermediateGraphItem {
}
declare class aUMLIntermediateUseCaseView extends aUMLIntermediateAssociableGraphItem {
   Width: string ;
   Height: string ;
   Import();
   GraphItemGenerate();
}
declare class aPendingsList extends aUMLImportRoot {
   Pendings: string ;
   Init();
   Terminate();
   IsPendingsList();
   Resolve():boolean;
}
declare class aPendingsListOfLinks extends aPendingsList {
   FromObject: string ;
   pFromId: string ;
   Resolve();
}
declare class aPendingsListOfVars extends aPendingsList {
   FromObject: string ;
   AppendVar(theVar:string);
   Resolve();
}
declare class aMultiLevelHashTable extends aHashTableByDataHashTable {
   MultiAppendObject(Object:aLightObject, pData:string, DataSize:number);
   MultiGetObject(pData:string, DataSize:number):aLightObject;
   MultiDeleteObject(pData:string, DataSize:number);
}
declare class aHashTableByDataHashTable extends aHashTable {
   Allocate(pKey:string):string;
   Free(pHashElement:string);
   Compare(pHashElement:string, pKey:string):boolean;
   Scramble(This:string);
   HashCode(pKey:string):number;
   AppendObject(Object:aLightObject, Data:number);
   DeleteFromData(Data:number);
   GetObjectFromData(Data:number):aLightObject;
}
declare class aUMLIntermediateAssociationView extends aUMLIntermediateGraphItem {
   RoleViewA: string ;
   RoleViewB: string ;
   Import();
   LocationForDrop();
   GraphItemGenerate();
}
declare class aUMLIntermediateAssociableGraphItem extends aUMLIntermediateGraphItem {
   AssociableEntity():aUMLObject;
}
declare class RootClassChoiceAgent extends aUIAgent {
   GroupBox: string ;
   CreateRootClass: string ;
   RootName: string ;
   RootNameStaticText: string ;
   TheRoot: string ;
   NotifyRangeHasChanged();
   CreateRootClass_ValueLoaded();
   CreateRootClass_ValueStored(:aUIAgent);
}
declare class aUMLIntermediateLink001Agent extends aUIAgent {
   Objects: string ;
   Ids: string ;
}
declare class PerfNewMainAgent extends aUIAgent {
   CurrentMethodName: string ;
   CurrentMethodNameStaticText: string ;
   GroupBox: string ;
   PushButton: string ;
   PushButton001: string ;
   InitialTimings: string ;
   ClearStats: string ;
   TimingsThreshold: string ;
   TimingsThresholdStaticText: string ;
   HelpButton: string ;
   aPerfAnalyzerMainFolder: string ;
   PushButton_Executed(SelectedRank:number, Option:number):number;
   PushButton001_Executed(SelectedRank:number, Option:number):number;
}
declare class PerfNewFoldersAgent extends aFolderViewAgent {
}
declare class CallByCallAsObjectAgent extends aUIAgent {
   myStatDefs: string ;
   OrderListStatByName: string ;
   OrderListStatByClassName: string ;
   OrderListStatByElapsed: string ;
   OrderListStatByTime: string ;
   StaticText: string ;
   OriginalStatOrder: string ;
   myStatDefs_Executed(SelectedRank:number, Option:number):number;
   myStatDefs_Selected(SelectedRank:number):number;
}
declare class MethodAsObjectsAgent extends aUIAgent {
   myMethDefs: string ;
   OrderListMethByTime: string ;
   OrderListMethByElapsed: string ;
   OrderListMethByName: string ;
   OrderListMethByClassName: string ;
   OrderListMethByCalls: string ;
   OrderListMethTotAverage: string ;
   myMethDefs_Executed(SelectedRank:number, Option:number):number;
   myMethDefs_Selected(SelectedRank:number):number;
   NotifyInit();
}
declare class DepthReportAgent extends aUIAgent {
   Report001: string ;
   ReportFNStaticText: string ;
   withTime: string ;
   withElapsed: string ;
   withClassName: string ;
   BuildReport: string ;
   SaveReport: string ;
   ReportFN001: string ;
   ClearDepthReport: string ;
   Report001_ButtonDblClk(No:number, X:number, Y:number):number;
   Report001_ButtonUp(No:number, X:number, Y:number):number;
}
declare class DepthReportAsTreeBoxAgent extends aUIAgent {
   TreeBox: string ;
   LoadValue();
/**
*Portability Check: OK
*/
   TreeBox_Executed(:aUIAgent, SelectedRank:number, Option:number):number;
/**
*Portability Check: OK
*/
   TreeBox_Selected(:aUIAgent, SelectedRank:number):number;
}
declare class MethReportAgent extends aUIAgent {
   MethReport: string ;
   BuildMethReport001: string ;
   ClearMethReport: string ;
   SaveMethReport: string ;
   MethReportFN: string ;
   StaticText: string ;
   SortBy: string ;
   SortByStaticText: string ;
}
declare class PerAnalyserPopUpMenuAgent extends aMenuItemControlAgent {
   CalculateTimeForSelectedMethods: string ;
}
/**
*This Class is a Tool which MUST be used with a specific version of WAM/WED,
NOT the standard release version. It is not intended to be delivered to customers as is.


*/
declare class aPerfAnalyzer extends aPerfAnalyzerRoot {
   myGod: string ;
   FSortByTime: string ;
   SortByTime: string ;
   FSortByClass: string ;
   SortByClass: string ;
   FSortByName: string ;
   SortByName: string ;
   FSortBySpare: string ;
   SortBySpare: string ;
   FSortByLevel: string ;
   SortBylevel: string ;
   FSortByAverage: string ;
   SortByAverage: string ;
   WasOk: string ;
   InitialCheck: string ;
   InitialBound: string ;
   ClearStatsOnLeaving: string ;
   InitialStat: string ;
   InitialProc: string ;
   msd: string ;
   mpd: string ;
   OwnList: string ;
   Sorter: string ;
   InitialSorter: string ;
   MethList: string ;
   MethSorter: string ;
   myStats: string ;
   myMeths: string ;
   Report: string ;
   ReportFN: string ;
   withTime: string ;
   withElapsed: string ;
   withClassName: string ;
   MethReport: string ;
   MethReportFN: string ;
   SortBy: string ;
   CurrentMethodName: string ;
   FirstSelectedMethod: string ;
   LastSelectedMethod: string ;
   myStatDefs: string ;
   myMethDefs: string ;
   OldPtr: string ;
   InitialTimings: string ;
   TimingsThreshold: string ;
   myTreeBox: string ;
   MinDepth: string ;
   StatCount: string ;
   ProcCount: string ;
   myListOfStats: string ;
   myListOfStatsSum: string ;
   myListOfStatsSumByLevel: string ;
   withCallHook: string ;
   withLoadInstHook: string ;
   withDBAccessHook: string ;
   DataFile: string ;
   MemoryStatSize: string ;
   ChooseAction: string ;
   AnalyzerStarted: string ;
   UseLogFile: string ;
   Run: string ;
   PrepareMethodList();
   ClearmyListOfStats();
   ClearmyListOfStatsSum();
   ClearmyListOfStatsSumByLevel();
   InitDBDef();
   DisposeDBDef();
   SetDefaultDB():aDBMgr;
   ReturnToPreviousDBMgr(DBMgr:aDBMgr);
   LoadListOfStats();
   SetLoadInstanceHook();
   UnsetLoadInstanceHook();
   SetOQLSelectHook();
   UnsetOQLSelectHook();
   SetEnterInvocHook();
   UnsetEnterInvocHook();
   SetLeaveInvocHook();
   UnsetLeaveInvocHook();
   IsValidRec(CurStat:string):boolean;
   BuildInverseListForThisLevel(Level:number, FromIndex:number, ToIndex:number);
   BuildInverseList();
   BuildReport();
   ConsultThisMethod(theMethodRec:string);
   ConsultThisMethodAsDef(theMethod:aStatDef);
   ExecutedLine(theUIAgent:aTextUIAgent);
   ClearMethReport();
   ClearDepthReport();
   BuildMethReport();
   BuildByProc();
   CalculateTimeForThisLevel(Level:number, FromCount:number, ToCount:number):number;
   ComputeTimeUnexplained();
   SaveReport();
   SaveMethReport();
   InitMethDefs();
   InitStatDefs();
   Init();
   DesignTreeBoxReport(TreeBox:aVoidAsTreeBoxUIAgent);
   ClearStats();
   Terminate();
   ActionSelectMethodAtThisRank(SelectedRank:number, forWhat:string);
   ActionConsultMethodAtThisRank(SelectedRank:number, forWhat:string);
   IsSelectedMethod(CurMethodRec:string, ForMethodName:string, ForClassName:string):boolean;
   IsSelectedMethodDef(CurMethodDef:aStatDef, ForMethodName:string, ForClassName:string):boolean;
   ExtractNames(MethodName:string, ClassName:string);
   FindMethodOnArrayAndSelect(thisUIAgent:PerfNewFoldersAgent, SelectNext:boolean);
   DisplayPopUpOnDepthText(theTextAgent:aTextUIAgent, x:number, y:number);
   TreatTime(TimeInMS:number, CountOfMethods:number, message:string);
   CalculateTimeForSelectedMethods();
   StringExtract();
   ReInitStatDefsAndRefresh();
   OrderListStatByTime();
   OrderListStatByElapsed();
   OrderListStatByName();
   OrderListStatByClassName();
   OriginalStatOrder();
   ReInitMethDefsAndRefresh();
   OrderListMethByTime();
   OrderListMethByElapsed();
   OrderListMethByName();
   OrderListMethByClassName();
   OrderListMethByCalls();
   OrderListMethTotAverage();
   DoSumStat();
   DoSumStatByParameters();
   FindPreviousFather(fatherStatSum:aPerfAnalyzerStat, statSum:aPerfAnalyzerStat):aPerfAnalyzerStat;
   DoSumStatByLevels();
   DoTreeOfStatsLikeStack();
   StartAnalyzer();
   StopAnalyzer();
}
declare module xPerfAnalyzer {
   var myGod: string ;
   function CompareTime(ThisRec:string, ThatRec:string):boolean;
   function CompareName(ThisRec:string, ThatRec:string):boolean;
   function CompareClass(ThisRec:string, ThatRec:string):boolean;
   function CompareSpare(ThisRec:string, ThatRec:string):boolean;
   function CompareLevel(ThisRec:string, ThatRec:string):boolean;
   function CompareAverage(ThisRec:string, ThatRec:string):boolean;
   function StopInterpreterRecord();
   function StartInterpreterRecord();
   function StartInterpreterRecordWithOptions(Threshold:number);
   function ClearInterpreterStats();
   function GlobalEmptyProc();
/**
*Portability Check: OK
*/
   function ReadData(File:string, pValue:string, Size:number, Failed:boolean);
   function ReadInt4(File:string, Value:number, Failed:boolean);
   function ReadInt8(File:string, Value:number, Failed:boolean);
   function ReadpText(File:string, pValue:string, Failed:boolean);
   function ReadText(File:string, Value:string, Failed:boolean);
   function SkipText(File:string, Failed:string);
/**
*Portability Check: OK
*/
   function WriteData(File:string, pValue:string, Size:number, Failed:boolean);
   function WriteInt4(File:string, Value:number, Failed:boolean);
   function WriteInt8(File:string, Value:number, Failed:boolean);
   function WriteText(File:string, Value:string, Failed:boolean);
}
declare class AnalyserOptionAgent extends aUIAgent {
   ClearReport: string ;
   ViewReport: string ;
   ShowTimings: string ;
   TimingsThreshold: string ;
   TimingsThresholdStaticText: string ;
}
declare class aAnalyzerOption extends aOption {
   myGod: string ;
   ShowTimings: string ;
   TimingsThreshold: string ;
   Init();
   InitAfterLoad();
   ClearReport(theUIAgent:aUIAgent);
   ViewReport(theUIAgent:aUIAgent);
   BeforeAccept();
}
declare class aPerfAnalyzerPopUpExtension extends aWideExtension {
   DoYourJob();
   FolderParentName();
   MenuText();
}
declare class aStatDef extends aFullObject {
   Spare: string ;
   Level: string ;
   Time: string ;
   Name: string ;
   myClassName: string ;
/**
*Portability Check: OK
*/
   StringExtract();
}
declare class CallByCall2Agent extends aUIAgent {
   myStatDefs: string ;
   myStatDefs_Executed(SelectedRank:number, Option:number):number;
   myStatDefs_Selected(SelectedRank:number):number;
}
declare class MethodsAsObjects2Agent extends aUIAgent {
   myMethDefs: string ;
   myMethDefs_Executed(SelectedRank:number, Option:number):number;
   myMethDefs_Selected(SelectedRank:number):number;
   NotifyInit();
}
declare class aPerfAnalyzer001Agent extends aUIAgent {
   myListOfStats: string ;
   LoadListOfStats: string ;
   ClearmyListOfStats: string ;
}
declare class aPerfAnalyzer002Agent extends aUIAgent {
   myListOfStatsSum: string ;
   DoSumStat: string ;
   DoSumStatByParameters: string ;
   ClearmyListOfStatsSum: string ;
}
declare class aPerfAnalyzer003Agent extends aUIAgent {
   DoSumStatByLevels: string ;
   myListOfStatsSumByLevel001: string ;
   ClearmyListOfStatsSumByLevel: string ;
   myListOfStatsSumByLevel001_GetParent(theParent:aLightObject, theChild:aLightObject):number;
}
declare class aPerfAnalyzer004Agent extends aUIAgent {
   myListOfStats: string ;
   DoTreeOfStatsLikeStack: string ;
   ClearmyListOfStats: string ;
   myListOfStats_GetParent(theParent:aLightObject, theChild:aLightObject):number;
}
declare class aPerfAnalyzerFolderExtensionAgent extends aFolderViewAgent {
}
declare class aPerfAnalyzerMainFolderAgent extends aFolderViewAgent {
}
declare class aPerfAnalyzer005Agent extends aUIAgent {
   aPerfAnalyzerFolderExtension: string ;
}
declare class aPerfAnalyzer006Agent extends aUIAgent {
   PerfNewFolders: string ;
}
declare class aPerfAnalyzerNewMainAgent extends aUIAgent {
   InitialTimings: string ;
   withCallHook: string ;
   withLoadInstHook: string ;
   DataFile: string ;
   ChooseAction: string ;
   DataFile001: string ;
   aPerfAnalyzer006: string ;
   aPerfAnalyzer005: string ;
   TimingsThreshold: string ;
   TimingsThresholdStaticText: string ;
   MemoryStatSize: string ;
   MemoryStatSizeStaticText: string ;
   ClearStats: string ;
   withCallHook_Selected(:aUIAgent, SelectedRank:number):number;
   DataFile_Init(:aUIAgent):number;
   ChooseAction_Selected(:aUIAgent, SelectedRank:number):number;
   DataFile001_Init():number;
   aPerfAnalyzer006_Init(:aUIAgent):number;
   aPerfAnalyzer005_Init(:aUIAgent):number;
   InitialTimings_Selected(:aUIAgent, SelectedRank:number):number;
   TimingsThresholdStaticText_Init(:aUIAgent):number;
   TimingsThreshold_Init(:aUIAgent):number;
   MemoryStatSize_Init(:aUIAgent):number;
   MemoryStatSizeStaticText_Init(:aUIAgent):number;
   withLoadInstHook_Init(:aUIAgent):number;
   ClearStats_Init(:aUIAgent):number;
}
declare class PerfAnalyzerMainWithRunAgent extends aUIAgent {
   MemoryStatSize: string ;
   MemoryStatSizeStaticText: string ;
   TimingsThreshold: string ;
   TimingsThresholdStaticText: string ;
   StartAnalyzer001: string ;
   StopAnalyzer001: string ;
   UseLogFile: string ;
   GroupBox: string ;
   CurrentRun: string ;
   PerfAnalyzerDesktopRunClean: string ;
   JustSums: string ;
   PerfAnalyzerDesktopRunFolderLight: string ;
   ManageButtons();
   StartAnalyzer001_Init():number;
   StopAnalyzer001_Init():number;
   StopAnalyzer001_Executed(SelectedRank:number, Option:number):number;
   StartAnalyzer001_Executed(SelectedRank:number, Option:number):number;
   JustSums_ValueStored(:aUIAgent);
}
declare class aPerfAnalyzerClass extends aPerfAnalyzerRoot {
   TheClassName: string ;
   TheMethodName: string ;
   TheMT: string ;
   TheParamStringSize: string ;
   PSScalculated: string ;
   PAID: string ;
   Trigger: string ;
   StringExtract();
   GetMethodType():aMethodType;
   GetParametersStringSize():number;
}
declare class aPerfAnalyzerDesktopOptions extends aPerfAnalyzerRoot {
   ListOfTriggeringOptions: string ;
   Init();
   Terminate();
}
declare class aPerfAnalyserDesktopRunTotoAgent extends aUIAgent {
   RunDesc: string ;
   RunDescStaticText: string ;
   StartDate: string ;
   StartDateStaticText: string ;
   EndDate: string ;
   EndDateStaticText: string ;
   StartTime001: string ;
   StartTimeStaticText: string ;
   EndTime: string ;
   EndTimeStaticText: string ;
   ChooseReport001: string ;
   ChooseReportStaticText: string ;
   ReportChoice: string ;
   ReportChoiceStaticText: string ;
   ReportChoice_Selected(:aUIAgent, SelectedRank:number):number;
}
declare class PerfAnalyzerDesktopRunStatListAgent extends aUIAgent {
   StatList: string ;
   NotifyInit();
}
declare class PerfAnalyzerDesktopRunStatSumAgent extends aUIAgent {
   ListOfStatsSum: string ;
}
declare class PerfAnalyzerDesktopRunStatSumByLevelTreeAgent extends aUIAgent {
   ListOfStatsSumByLevel: string ;
   ListOfStatsSumByLevel_GetParent(theParent:aLightObject, theChild:aLightObject):number;
}
declare class PerfAnalyzerDesktopRunStatListTreeAgent extends aUIAgent {
   StatList: string ;
   StatList_GetParent(theParent:aLightObject, theChild:aLightObject):number;
}
declare class PerfAnalyzerDesktopRunMemoryAgent extends aUIAgent {
   StaticText: string ;
}
declare class PerfAnalyzerDesktopRunCPUAgent extends aUIAgent {
   StaticText: string ;
}
declare class PerfAnalyzerDesktopRunMDIChildAgent extends aUIAgent {
   ChooseReportStaticText: string ;
   aPerfAnalyserDesktopRunSuperposition: string ;
}
declare class aPerfAnalyserDesktopRunToolBarLeftAgent extends aToolBarUIAgent {
   ReportChoice: string ;
   ReportChoice_Selected(:aUIAgent, SelectedRank:number):number;
   ReportChoice_ButtonDblClk(:aUIAgent, No:number, X:number, Y:number):number;
}
declare class PerfAnalyzerDesktopRunFolderAgent extends aFolderViewAgent {
}
declare class PerfAnalyzerDesktopRunLightStatAgent extends aUIAgent {
   LightStatList: string ;
   Action: string ;
   ConsultCode();
   ConsultLI();
   LightStatList_Executed(:aUIAgent, SelectedRank:number, Option:number):number;
}
declare class PerfAnalyserDesktopRunLightStatAgentPopUpAgent extends aMenuItemControlAgent {
   ConsultCode: string ;
   ConsultLI: string ;
}
declare class PerfAnalyzerDesktopRunLightStatSumAgent extends aUIAgent {
   LightStatSumList: string ;
   Action: string ;
   ConsultCode();
   ConsultLI();
   LightStatSumList_Executed(SelectedRank:number, Option:number):number;
   NotifyInit();
}
declare class aPerfAnalyserDesktopRunLightStatSumAgent001Agent extends aMenuItemControlAgent {
   ConsultCode: string ;
   ConsultLI: string ;
}
declare class PerfAnalyzerDesktopRun003Agent extends aUIAgent {
   aPerfAnalyserDesktopRunFolderLight: string ;
}
declare class PerfAnalyzerDesktopRunFolderLightAgent extends aFolderViewAgent {
}
declare class PerfAnalyzerDesktopRunLightStatSumByLevelAgent extends aUIAgent {
   PerfAnalyserDesktopRunStatSumTree: string ;
}
declare class PerfAnalyzerDesktopRunListTreeCtrlAgent extends PerfAnalyzerDesktopRunListTreeAgent {
   CreateColumns();
   SetStatNodeText();
   GetList();
   ExpandTree();
   IsChild();
   ExecuteTree();
   StatHasChildren();
}
declare class PerfAnalyzerDesktopRunLightStackTreeAgent extends aUIAgent {
   ShowColumnsInDetailsTree: string ;
   GetDetailsTreeScenario: string ;
   ShowColumnsInDetailsTree_ValueStored();
   NotifyInit();
}
declare class aPerfAnalyserDesktopRunLightStackTreeAgent001Agent extends aMenuItemControlAgent {
   ConsultCode: string ;
   ConsultLI: string ;
   CreateTrigger: string ;
}
declare class PerfAnalyzerDesktopRunSuperpositionAgent extends aUIAgent {
   ReportChoice: string ;
   GetReportScenario: string ;
   ReportChoice_ButtonDblClk(No:number, X:number, Y:number):number;
   ReportChoice_ValueStored(:aUIAgent);
}
declare class PerfAnalyzerDesktopRunSumsTreeCommonAgent extends PerfAnalyzerDesktopRunListTreeAgent {
   ColumnsCreated: string ;
   CreateColumns();
   SetStatNodeText(Stat:aPerfAnalyzerLightStatSum, Node:string);
   GetList();
   IsChild(Stat:aPerfAnalyzerLightExtendedStat, Father:aPerfAnalyzerLightStat):boolean;
   SortByCall();
   SortByTime();
   NotifyColumnExecuted();
   ExecuteTree();
   NotifyInit();
   CreateStatNode(Father:string, Statistic:aPerfAnalyzerLightStatSum, HasChildren:boolean, TheText:string):string;
}
declare class PerfAnalyzerDesktopRunStatSumByParamsAgent extends aUIAgent {
   LightStatSumByParamsList: string ;
   Action: string ;
   Show();
   ConsultCode();
   ConsultLI();
   LightStatSumByParamsList_Executed(SelectedRank:number, Option:number):number;
   NotifyInit();
}
declare class aPerfAnalyserDesktopRunStatSumByParamsAgent001Agent extends aMenuItemControlAgent {
   ConsultCode: string ;
   ConsultLI: string ;
}
declare class PerfAnalyzerDesktopRunTrigOptionsListAgent extends aUIAgent {
   ListOfTriggeringOptions: string ;
   Action: string ;
   AppendNewMe();
   ModifyMe();
   DeleteMe();
   ListOfTriggeringOptions_Executed(:aUIAgent, SelectedRank:number, Option:number):number;
   ListOfTriggeringOptions_ButtonDblClk(:aUIAgent, No:number, X:number, Y:number):number;
}
declare class aPerfAnalyserDesktopRunTrigOptionsListAgent001Agent extends aMenuItemControlAgent {
   AppendNewMe: string ;
   ModifyMe: string ;
   DeleteMe: string ;
}
declare class PerfAnalyzerDesktopRunBasicOptionsAgent extends aUIAgent {
   LogFromStart: string ;
   LogMemory: string ;
   LogInstanceLoad: string ;
   LogDBAccess: string ;
   LoadListOfTriggeringOptions: string ;
   SaveListOfTriggeringOptions: string ;
   tempLogFile: string ;
   StaticText: string ;
   GroupBox: string ;
   LogParameters: string ;
   Finalize();
}
declare class PerfAnalyzerDesktopRunTempFileAgent extends aUIAgent {
   tempFile: string ;
   ActionValid001: string ;
   ActionCancel001: string ;
}
declare class PerfAnalyzerDesktopRun001Agent extends aUIAgent {
   CSVFile: string ;
   ActionValid001: string ;
   ActionCancel001: string ;
}
declare class aPerfAnalyzerDesktopRun extends aPerfAnalyzerRoot {
   RunDesc: string ;
   StatList: string ;
   StartTime: string ;
   StartDate: string ;
   EndTime: string ;
   EndDate: string ;
   LogFromStart: string ;
   LogMemory: string ;
   LogInstanceLoad: string ;
   LogDBAccess: string ;
   LogParameters: string ;
   ListOfStatsSum: string ;
   ListOfStatsSumByLevel: string ;
   ReportChoice: string ;
   Statistics: string ;
   LightStatSumList: string ;
   LightStatSumByParamsList: string ;
   Sums: string ;
   Agent: string ;
   ListOfTriggeringOptions: string ;
   CurrentRunLogStatus: string ;
   TempFile: string ;
   CSVFile: string ;
   XMLDBDef: string ;
   TempLogFile: string ;
   TempLogDesc: string ;
   LastBuffLevel: string ;
   LoadDataFromFile: string ;
   MaxLevel: string ;
   ShowColumnsInDetailsTree: string ;
   Cleaned: string ;
   Stack: string ;
   Restarts: string ;
   Process: string ;
   WithCallHook: string ;
   WithLoadInstHook: string ;
   WithDBAccessHook: string ;
   MemoryStatSize: string ;
   UseLogFile: string ;
   LetAnalyzerOnDuringDisplay: string ;
   JustSums: string ;
   SumsStack: string ;
   SumFromStatistic: string ;
   SumChainFromStatistic: string ;
   StackToKeep: string ;
   T: string ;
   Triggers: string ;
   TempMethods: string ;
   Methods: string ;
   InitXMLDBDef(FileName:string):boolean;
   SaveOptions(FileName:string);
   LoadOptions(FileName:string);
   AppendNewTriggerToOptionList();
   AppendTriggerFromStatToOptionList(Statistic:aPerfAnalyzerLightStat);
   DeleteTriggerFromOptionList(Trigger:aPerfAnalyzerDesktopTrigger);
   LoadListOfTriggeringOptions();
   SaveListOfTriggeringOptions();
   Init();
   Terminate();
   FindMethod(TheClass:aClassDef, MethodName:string):aMethodDesc;
/**
*Portability Check: OK
*/
   LoadAnalyzedClassAndMethodFromFile(File:string);
   OpenStatisticsFile(Start:number, Classes:number, Stack:number):string;
/**
*Portability Check: OK
*/
   LoadAnalyzedClassAndMethod();
/**
*Portability Check: OK
*/
   LoadAllStatsAndDoSum();
/**
*Portability Check: OK
*/
   LoadAllStatsAndDoSumByParameters();
   FindPreviousFather(fatherStatSum:aPerfAnalyzerLightExtendedStat, Sum:aPerfAnalyzerLightExtendedStat):aPerfAnalyzerLightExtendedStat;
   GetStatSum(Statistic:aPerfAnalyzerLightStat):aPerfAnalyzerLightStatSum;
   DoSumStat();
   DoSumStatByParameters();
/**
*Portability Check: OK
*/
   ReadNextStatSum(File:string, Statistic:aPerfAnalyzerLightStat, LICount:number, Start:number, Failed:boolean):boolean;
   GetSum(Statistic:aPerfAnalyzerLightStat, Parent:aPerfAnalyzerLightStatSum):aPerfAnalyzerLightStatSum;
   ReadNextStatSums(File:string, Parent:aPerfAnalyzerLightStatSumChain, Statistic:aPerfAnalyzerLightStat, LICount:number, Start:number, Stop:boolean, Failed:boolean);
/**
*Portability Check: OK
*/
   LoadAllStatsAndDoSumByLevel();
   DoSumStatByLevel(It:aListIterator, Parent:aPerfAnalyzerLightStatSum, Statistic:aPerfAnalyzerLightStat);
   DoSumStatByLevels();
   GetLastInsertedObject(InsertAtRank:number):aPerfAnalyzerLightExtendedStat;
/**
*Portability Check: OK
*/
   ReadNextStat(File:string, Size:number, Failed:boolean):aPerfAnalyzerLightStat;
   ReadNextStats(File:string, List:aListOfInstances, MinLevel:number, Size:number, Failed:boolean, Statistic:aPerfAnalyzerLightStat);
/**
*Portability Check: OK
*/
   LoadAllStatsJustThat();
/**
*Portability Check: OK
*/
   LoadRunFromFiles();
/**
*Portability Check: OK
*/
   LoadNextStatsFromFile(Statistic:aPerfAnalyzerLightExtendedStat, List:aListOfInstances);
   LoadAndInsertNextStatsFromFile(Statistic:aPerfAnalyzerLightExtendedStat, Rank:number):aPerfAnalyzerLightStat;
   ConsultThisMethodAsDef(Statistic:aPerfAnalyzerLightStat);
   ExtractCSVListOfStats();
   ExtractCSVListOfStatSums();
   ExtractCSVListOfStatSumByParams();
   ExtractCSVListOfStatTree();
   ExtractCSVListOfStatSumByLevelTree();
   ExportCSVReport();
   NewStatistic():aPerfAnalyzerLightStat;
   SortByCall();
   SortByTime();
   GetDetailsTreeScenario():string;
   GetReportScenario():string;
   CleanWithStack(List:aListOfInstances, Stack:aListOfInstances);
   CleanWithoutStack(List:aListOfInstances, Stack:aListOfInstances);
   CleanSums();
   CleanStatistics();
   UICleanAll();
   GetMainScen():string;
   WriteBuffer(Buffer:string, Size:number, TheText:string);
   MustLogMemory(Trigger:aPerfAnalyzerDesktopTrigger):boolean;
   MustLogParameters(Trigger:aPerfAnalyzerDesktopTrigger):boolean;
   LogLoadInstances(Trigger:aPerfAnalyzerDesktopTrigger):boolean;
   LogOQLSelect(Trigger:aPerfAnalyzerDesktopTrigger):boolean;
/**
*Portability Check: OK
*/
   WriteChildStats(File:string, Failed:boolean, Statistic:aPerfAnalyzerLightStat, It:aListIterator, StackPos:number);
/**
*Portability Check: OK
*/
   StoreAllStatsInFile();
   BeforeMethodExecution(Buffer:string);
/**
*Portability Check: OK
*/
   AfterMethodExecution(Buffer:string);
   StoreWhatIsLeft();
   LoadInstanceExec(Buffer:string);
   OQLSelectExec(Buffer:string);
   WindowClosed();
}
declare class PerfAnalyzerDesktopRunDesc001Agent extends aUIAgent {
   RunClassAndMethod: string ;
   RunClassAndMethodStaticText: string ;
   aPerfAnalyserDesktopRunDescFolder: string ;
}
declare class PerfAnalyzerDesktopRunDescTriggerListAgent extends aUIAgent {
   TriggerList: string ;
}
declare class PerfAnalyzerDesktopRunDescFilterListAgent extends aUIAgent {
   FilterList: string ;
}
declare class PerfAnalyzerDesktopRunDescFolderCreationAgent extends aFolderViewAgent {
}
declare class PerfAnalyzerDesktopRunDescRunListAgent extends aUIAgent {
   Runs: string ;
   Action: string ;
   ConsultMe();
   ModifyMe();
   Runs_Executed(:aUIAgent, SelectedRank:number, Option:number):number;
}
declare class aPerfAnalyserDesktopRunDescRunListAgent001Agent extends aMenuItemControlAgent {
   ConsultMe: string ;
   ModifyMe: string ;
}
declare class PerfAnalyzerDesktopRunDescMainCreateAgent extends aUIAgent {
   aPerfAnalyserDesktopRunDescFolder: string ;
   ChooseLogActivation: string ;
   ChooseLogActivationStaticText: string ;
   Perfanalyser: string ;
}
declare class PerfAnalyzerDesktopRunDescMDIChildAgent extends aUIAgent {
   aPerfAnalyserDesktopRunDescMain: string ;
   aPerfAnalyserDesktopRunDescToolbarUp: string ;
}
declare class PerfAnalyzerDesktopRunDescToolbarUpAgent extends aToolBarUIAgent {
   SaveMe: string ;
   SaveAndCloseMe: string ;
   CloseMe: string ;
}
declare class PerfAnalyzerDesktopRunDescOptionsAgent extends aUIAgent {
   LogMemory: string ;
   LogInstanceLoad: string ;
   LogDBAccess: string ;
   ChosenFileDirectory: string ;
   ChosenFileDirectoryGroupBox: string ;
   ChosenFileNameMethode: string ;
   ChosenFileName001: string ;
   ChosenFileNameStaticText: string ;
   Threshold: string ;
   ThresholdStaticText: string ;
   MemoryLevel: string ;
   MemoryLevelStaticText: string ;
}
declare class PerfAnalyzerDesktopRunDescFolderModificationAgent extends aFolderViewAgent {
}
declare class PerfAnalyzerDesktopRunDescMainModificationAgent extends aUIAgent {
   RunClassAndMethod: string ;
   RunClassAndMethodStaticText: string ;
   aPerfAnalyserDesktopRunDescFolderModification: string ;
}
declare class PerfAnalyzerDesktopRunDescMDIModifyAgent extends aUIAgent {
   aPerfAnalyserDesktopRunDescMainModification: string ;
   aPerfAnalyserDesktopRunDescToolbarUp: string ;
}
declare class PerfAnalyzerDesktopRunDescRunAgent extends aUIAgent {
   CurrentRun: string ;
   aPerfAnalyserDesktopRunFolder: string ;
}
declare class PerfAnalyzerDesktopRunDescFolderALLAgent extends aFolderViewAgent {
}
declare class PerfAnalyzerDesktopRunDescFinalMainAgent extends aUIAgent {
   aPerfAnalyserDesktopRunDescFolderALL: string ;
   ChooseLogActivation: string ;
   ChooseLogActivationStaticText: string ;
}
declare class aPerfAnalyzerDesktopRunDesc extends aPerfAnalyzerRoot {
   RunClassAndMethod: string ;
   LogFromStart: string ;
   TriggerList: string ;
   FilterList: string ;
   Runs: string ;
   LogMemory: string ;
   LogInstanceLoad: string ;
   LogDBAccess: string ;
   ChosenFileDirectory: string ;
   ChosenFileNameMethode: string ;
   ChosenFileName: string ;
   ChooseLogActivation: string ;
   AdvancedMode: string ;
   Perfanalyser: string ;
   CurrentRun: string ;
   Threshold: string ;
   MemoryLevel: string ;
   GetTheClassName():string;
   GetTheMethodName():string;
   SaveMe();
   SaveAndCloseMe();
   CloseMe();
   Init();
}
declare class PerfAnalyzerDesktopTriggerMainAgent extends aUIAgent {
   TrigClassNameStaticText: string ;
   TrigMethodNameStaticText: string ;
   StartLogAtEnter: string ;
   StopLogAfter: string ;
   LogMemory: string ;
   LogInstanceLoad: string ;
   LogOnPrivateThreshold: string ;
   PrivateThreshold001: string ;
   ActionValid001: string ;
   ActionCancel001: string ;
   PrivateThreshold002: string ;
   Method001: string ;
   myOwner001: string ;
   Method002: string ;
}
declare class aPerfAnalyzerDesktopTrigger extends aPerfAnalyzerRoot {
   Method: string ;
   StartLogAtEnter: string ;
   StopLogAfter: string ;
   LogMemory: string ;
   LogInstanceLoad: string ;
   LogDBAccess: string ;
   LogOnPrivateThreshold: string ;
   PrivateThreshold: string ;
   GetClassNameFromMethod(Method:aMethodDesc):string;
   GetMethodNameFromMethod(Method:aMethodDesc):string;
   GetClassName():string;
   GetMethodName():string;
   StringExtract();
}
declare class aPerfAnalyzerInstance extends aPerfAnalyzerRoot {
   MyClassId: string ;
   MyNSId: string ;
   MyId: string ;
   MyVersion: string ;
   GetClassName():string;
   WriteInBuffer(Buffer:string):string;
   WriteInFile(File:string, Failed:boolean);
   ReadFromFile(File:string, Failed:boolean);
}
declare class PerfAnalyzerDesktopMainMDIAgent extends aUIAgent {
   PerfAnalyserDesktopMenuFile: string ;
   MDIWindowMenuItem: string ;
}
declare class PerfAnalyzerDesktopToolbarUpAgent extends aToolBarUIAgent {
   StartMe: string ;
   StopMe: string ;
}
declare class PerfAnalyzerDesktopToolbarLeftAgent extends aToolBarUIAgent {
   LoadRunFromFiles: string ;
}
declare class PerfAnalyzerDesktopLeftMenuAgent extends aUIAgent {
}
declare class PerfAnalyzerDesktopMDIQuickStatsAgent extends aUIAgent {
   PerfAnalyzer: string ;
   PerfAnalyzer006: string ;
}
declare class PerfAnalyzerDesktopMDIFiltersAgent extends aUIAgent {
}
declare class PerfAnalyzerDesktopMDITriggersAgent extends aUIAgent {
}
declare class PerfAnalyzerDesktopMDIRunDescAgent extends aUIAgent {
   RunDescList001: string ;
   Action: string ;
   ConsulMe();
   ModifyMe();
   RunDescList001_Executed(:aUIAgent, SelectedRank:number, Option:number):number;
}
declare class aPerfAnalyserDesktopMDIRunDescAgent001Agent extends aMenuItemControlAgent {
   ConsulMe: string ;
   ModifyMe: string ;
}
declare class PerfAnalyzerDesktopMenuFileAgent extends aMenuItemControlAgent {
   LoadRunFromFiles: string ;
}
declare class PerfAnalyzerDesktopLoadRunDescOptionsAgent extends aUIAgent {
   LoadOfRunDescType: string ;
   LoadOfRunDescTypeStaticText: string ;
   DirectoryOfStats: string ;
   DirectoryOfStatsStaticText: string ;
   TgvFileName: string ;
   TgvFileNameStaticText: string ;
}
declare class PerfAnalyzerDesktopMDILoadOptionsAgent extends aUIAgent {
   PerfAnalyzerDesktopLoadRunDescOptions: string ;
}
declare class PerfAnalyzerDesktopChooseFileAgent extends aUIAgent {
   CurrentStatFilePath: string ;
   ActionValid001: string ;
   ActionCancel001: string ;
   StaticText: string ;
   MaxLevel: string ;
   MaxLevelStaticText: string ;
   Finalize();
}
declare class aPerfAnalyzerDesktop extends aPerfAnalyzerRoot {
   PerfAnalyzer: string ;
   RunDescList: string ;
   StatisticsDirectory: string ;
   RunDesc: string ;
   Run: string ;
   DBDefList: string ;
   RunDescType: string ;
   TgvFileName: string ;
   AnalyzerClassHashTable: string ;
   StatisticsFilePath: string ;
   StatisticsDescFilePath: string ;
   MaxLevel: string ;
   NewRunDesc();
   DisplayLoadRunDescOptions();
   CreateDBDefForTgvFile(FileName:string);
   LoadTGVLogsFromDirectory(Directory:string);
   LoadRunDescFromDBDef(TheDBDef:aDBDef);
   LoadRunDescList();
   LoadRunDescListFromDirectory();
   DisplayRunDesc();
   DisplayRuns();
   DisplayOptions();
   DisplayMemory();
   DisplayStats();
   StartMe();
   StopMe();
   Init();
   LoadRunFromFiles();
}
declare class aPerfAnalyzerLightExtendedStat extends aPerfAnalyzerLightStat {
   Father: string ;
   Node: string ;
   Offset: string ;
   Init();
   Extended();
}
declare class PerfAnalyzerLightStatLoadedInstancesAgent extends aUIAgent {
   LoadedInstances: string ;
}
declare class aPerfAnalyzerLightStat extends aPerfAnalyzerLightRoot {
   TheTime: string ;
   TimeInAnalyzer: string ;
   ElapsedTime: string ;
   Level: string ;
   VirtualMemory: string ;
   Parameters: string ;
   ParametersBuffer: string ;
   TempParameter: string ;
   Method: string ;
   Completed: string ;
   LoadedInstances: string ;
   NumOfOQLSelect: string ;
   AppendInstanceLoaded(LoadedInstance:aPerfAnalyzerInstance);
   GetRealExecTime():number;
   GetRealElapseTime():number;
   GetLoadedInstanceNumber():number;
   GetTheClassName():string;
   GetTheMethodName():string;
   GetClassAndMethodName():string;
   GetMethodType(ClassName:string, MethodName:string):aMethodType;
   HasParamWithValue(ParamName:string, Value:string):boolean;
   DisplayParameters(InBuffer:string, MethType:aMethodType);
   ParamDisplay();
   GetParametersBufferSize():number;
   GetParameters():string;
   GetParametersForDisplay():string;
   GetParametersAsOneStringSize():number;
   Size(WithParameters:boolean):number;
/**
*Portability Check: OK
*/
   WriteInFile(File:string, WithParameters:boolean, Failed:boolean);
   ReadCoreFromFile(File:string, AnalyzerClassHashTable:aPerfAnalyzerMethodFromId, WithParameters:boolean, WithLoadedInstances:boolean, LoadedInstancesCount:number, Failed:boolean, MaxLevel:number);
/**
*Portability Check: OK
*/
   ReadFromFileBackward(File:string, AnalyzerClassHashTable:aPerfAnalyzerMethodFromId, WithParameters:boolean, WithLoadedInstances:boolean, LoadedInstancesCount:number, Failed:boolean, MaxLevel:number);
/**
*Portability Check: OK
*/
   ReadFromFile(File:string, AnalyzerClassHashTable:aPerfAnalyzerMethodFromId, WithParameters:boolean, WithLoadedInstances:boolean, LoadedInstancesCount:number, Failed:boolean, MaxLevel:number);
   WriteInBuffer(Buffer:string, WithParameters:boolean):string;
   StringExtract();
   WriteHeaderInText(mytext:string);
   WriteInText(mytext:string);
   SetParameters(Buffer:string, Size:number, OnlyOut:boolean, OnlyNSId:boolean);
   Extended():boolean;
}
declare class aPerfAnalyzerLightStatSum extends aPerfAnalyzerLightExtendedStat {
   Calls: string ;
   AverageTime: string ;
   AverageAnalyzerTime: string ;
   AverageElapsedTime: string ;
   LoadedInstancesCount: string ;
   OQLSelectsCount: string ;
   Rank: string ;
   Init();
   GetAddedExecTime():number;
   GetAverageExecTime():number;
   GetAverageElapseTime():number;
   CalcAverageTime();
   AddCallTime(TheTimeToAdd:number, TimeInAnalyserToAdd:number, ElapseTimeToAdd:number);
   AddLoadedInstancesAndOQLSelectsCount(InstancesCount:number, OQLSelectsCount:number);
   AddLoadedInstancesAndOQLSelects(LoadedInstances:aListOfInstances, OQLSelectsCount:number);
   CompareParameters(TheTextParameters:string):boolean;
   StringExtract();
   WriteHeaderInText();
   WriteInText();
}
declare class PerfAnalyzerStatMainAgent extends aUIAgent {
   theTime: string ;
   theTimeStaticText: string ;
   VirtualMemory: string ;
   VirtualMemoryStaticText: string ;
   Level: string ;
   LevelStaticText: string ;
   UsedMemory: string ;
   UsedMemoryStaticText: string ;
   Parameters: string ;
   ParametersStaticText: string ;
   tempParameter: string ;
   tempParameterStaticText: string ;
   ParamDisplay: string ;
   AnalyserClass: string ;
   AnalyserClassStaticText: string ;
   AnalyserClass001: string ;
   TheClassName: string ;
   TheClassNameStaticText: string ;
   TheMethodName: string ;
   TheMethodNameStaticText: string ;
   LoadedInstances: string ;
   LoadedInstancesStaticText: string ;
}
declare class aPerfAnalyzerStat extends aPerfAnalyzerRoot {
   TheTime: string ;
   TimeInAnalyser: string ;
   Level: string ;
   VirtualMemory: string ;
   UsedMemory: string ;
   Parameters: string ;
   TempParameter: string ;
   AnalyzerClass: string ;
   Completed: string ;
   Father: string ;
   Brother: string ;
   LoadedInstances: string ;
   GetLoadedInstanceNumber():number;
   GetTheClassName():string;
   GetTheMethodName():string;
   GetMethodType(ClassName:string, MethodName:string):aMethodType;
   DisplayParameters(InBuffer:string, methType:aMethodType);
   ParamDisplay();
   GetParameters():string;
   HasParamWithValue(ParamName:string, Value:string):boolean;
   StringExtract();
}
declare class PerfAnalyzerStatSumMainAgent extends PerfAnalyzerStatMainAgent {
   NumOfCalls: string ;
   NumOfCallsStaticText: string ;
   AverageTime: string ;
   AverageTimeStaticText: string ;
}
declare class aPerfAnalyzerStatSum extends aPerfAnalyzerStat {
   NumOfCalls: string ;
   AverageTime: string ;
   Closed: string ;
   GetFather():aPerfAnalyzerStatSum;
   CalcAverageTime();
   AddCallTime(TheTimeToAdd:number, TimeInAnalyserToAdd:number);
   CompareParameters(TheTextParameters:string):boolean;
   StringExtract();
}
declare module xPerfAnalyzerHook {
   var DBDef: string ;
   var Run: string ;
   function wGetCurrentProcessHandle():string;
   function wGetUsedMemory(ProcessHandle:string):number;
   function wGetVirtualMemory(ProcessHandle:string):number;
   function wGetHiResTime():number;
   function StoreObjectsInTGV();
   function StoreObjectInTGV(TheObj:aFullObject);
   function BeforeMethodExecutionHook(myMethodInvocation:aMethodInvocation, myCurGod:aInterpreter, myStack:string, mypStackSize:string, mypTime:string, myProcess:string, mypVirtualMemory:string, mypUsedMemory:string);
   function AfterMethodExecutionHook(myMethodInvocation:aMethodInvocation, myCurGod:aInterpreter, myStack:string, mypStackSize:string, mypTime:string, myProcess:string, mypVirtualMemory:string, mypUsedMemory:string);
   function LoadInstanceExecHook(myClassId:string, myNsID:string, myID:string, myVersion:string);
   function OQLSelectExecHook(myMTI:aMethodInvocation, myCurGod:aInterpreter);
   function SetPerformanceAnalyzerLoadInstanceHook(Address:string);
   function SetPerformanceAnalyzerOQLSelectHook(Address:string);
   function SetPerformanceAnalyzerEnterCallHook(Address:string);
   function SetPerformanceAnalyzerExitCallHook(Address:string);
   function UpcaseComparepString(pFirst:string, pSecond:string):number;
   function SetWaitCursor():number;
   function RestoreCursor(Cursor:number);
   function StartPerfAnalyzer(JustSums:boolean, useLogFile:boolean, logFile:string);
   function StopAndDisplayPerfAnalyzer(displayIt:boolean);
}
declare class aPerfAnalyzerDataByStringHashTable extends aDataByStringHashTable {
   DumpedUntil: string ;
   NewDumpLimit: string ;
   MyText: string ;
   OnExplore();
   AfterExplore();
   BeforeExplore();
   AppendInFile(FileName:string);
}
declare class PerfAnalyzerClassMainAgent extends aUIAgent {
   TheClassName: string ;
   TheClassNameStaticText: string ;
   TheMethodName: string ;
   TheMethodNameStaticText: string ;
}
declare class PerfAnalyzerDesktopRunMainAgent extends aUIAgent {
   GetMainScen: string ;
   LoadValue();
   NotifyTerminate();
}
declare class PerfAnalyzerDesktopRunListTreeAgent extends aListTreeCtrlUIAgent {
   PopUpStatistic: string ;
   AddStringValue(Node:string, Col:number, Value:string);
   AddValue(Node:string, Col:number, Value:number);
   AddColumn(Width:number, Title:string, Col:number);
   CreateColumns();
   SetStatNodeText(Stat:aPerfAnalyzerLightStat, Node:string);
   IsChild(Stat:aPerfAnalyzerLightStat, Father:aPerfAnalyzerLightStat):boolean;
   GetList():aListOfInstances;
   StatHasChildren(Stat:aPerfAnalyzerLightStat):boolean;
   CreateStatNode(Father:string, Statistic:aPerfAnalyzerLightStat, HasChildren:boolean, TheText:string):string;
   CreateSubNodes(Father:aPerfAnalyzerLightStat, FatherNode:string, It:aListIterator, Stat:aPerfAnalyzerLightStat);
   CreateNodes();
   CreateTree();
   CleanTree();
   ExpandTree(Stat:aPerfAnalyzerLightStat, Node:string);
   ConsultCode();
   ConsultLI();
   CreateTrigger();
   ExecuteTree(Stat:aPerfAnalyzerLightStat, Node:string);
   NotifyExecuted();
   SelectNode();
   CollapseIt();
   ExpandIt();
   NotifyGetChar();
   NotifyInit();
}
declare class PerfAnalyzerDesktopRunListTreeAgentMenuAgent extends aMenuItemControlAgent {
   ConsultCode: string ;
   ConsultLI: string ;
   CreateTrigger: string ;
}
declare class PerfAnalyzerDesktopRunTreeBoxAgent extends aXXXAsTreeBoxUIAgent {
   Stat: string ;
   CreateSubNodes(Father:aPerfAnalyzerLightStat, FatherNode:string, It:aListIterator, Stat:aPerfAnalyzerLightStat);
   CreateNodes();
   CreateTree();
   CleanTree();
   ConsultCode();
   ConsultLI();
   CreateTrigger();
   Details();
   ExpandTree(Stat:aPerfAnalyzerLightStat, Node:string);
   NotifyExecuted();
   NotifyInit();
}
declare class erfAnalyzerDesktopRunListTreeCtrlAgentMenuAgent extends aMenuItemControlAgent {
}
declare class PerfAnalyzerDesktopRunLAgent extends PerfAnalyzerDesktopRunLightStatAgent {
}
declare class PerfAnalyzerDesktopRunCleanAgent extends aUIAgent {
   Clean: string ;
}
declare class PerfAnalyzerLightStatMainAgent extends aUIAgent {
   TheTime: string ;
   TheTimeStaticText: string ;
   TimeInAnalyzer: string ;
   TimeInAnalyzerStaticText: string ;
   ElapsedTime: string ;
   ElapsedTimeStaticText: string ;
   VirtualMemory: string ;
   VirtualMemoryStaticText: string ;
   Parameters: string ;
   ParametersStaticText: string ;
   LoadedInstances: string ;
   LoadedInstancesGroupBox: string ;
   NumOfOQLSelect: string ;
   NumOfOQLSelectStaticText: string ;
   StaticText: string ;
   StaticText001: string ;
   MethodImplem: string ;
   DerivesFrom: string ;
   DerivesFrom001: string ;
   myOwner: string ;
}
declare class aPerfAnalyzerClassFromId extends aPerfAnalyzerObjectFromId {
   NewObject():aClassDef;
}
declare class PerfAnalyzerLightClassAgent extends aUIAgent {
   TheClassNameStaticText: string ;
   TheMethodNameStaticText: string ;
   TheClass001: string ;
   TheMethod001: string ;
}
declare class aPerfAnalyzerLightClass extends aPerfAnalyzerLightRoot {
   TheClass: string ;
   TheMethod: string ;
   MethodType: string ;
   ParametersStringSize: string ;
   ParametersStringSizeSet: string ;
   Id: string ;
   Trigger: string ;
   TheClassName():string;
   TheMethodName():string;
   FullMethodName():string;
   StringExtract();
   GetMethodType():aMethodType;
   GetParametersStringSize():number;
}
declare class aPerfAnalyzerLightRoot extends aLightObject {
}
declare class aPerfAnalyzerLightStatSumChain extends aPerfAnalyzerLightStatSum {
   PrevBrother: string ;
   NextBrother: string ;
   Child: string ;
   SetChildRanks(List:aListOfInstances, Father:aPerfAnalyzerLightStatSum);
}
declare class aPerfAnalyzerMethodFromId extends aPerfAnalyzerObjectFromId {
   DumpText: string ;
   NewObject():aMethodDesc;
   DefaultAction(pItemOut:aMethodDesc);
   Dump(TheText:string);
}
declare class aPerfAnalyzerObjectFromId extends aGoldHashTable {
   NewElement():string;
   InitElement(pItemIn:aFullObject, pElement:string);
   Code(pKey:string):number;
   pItemOutFromElement(pElement:string):aFullObject;
   pKeyFromItemIn(pItemIn:aEntity):aMethodImplem;
   NewObject():aFullObject;
   AllocateFromKey(pKey:string, pItemIn:aFullObject):string;
   FindOrAppendObject(Id:number):aFullObject;
   AppendObject(Object:aFullObject);
   FindObject(Id:number):aFullObject;
}
declare class aPerfAnalyzerRoot extends aFullObject {
}
declare class aPerfAnalyzerSumChainFromStatisticHashTable extends aPerfAnalyzerSumFromStatisticHashTable {
   NewSum():aPerfAnalyzerLightStatSumChain;
}
declare class aPerfAnalyzerSumFromStatisticHashTable extends aGoldHashTable {
   UseParams: string ;
   CaseDependant: string ;
   Key: string ;
   Init();
   NewElement():string;
   NewSum():aPerfAnalyzerLightStatSum;
   InitElement(pItemIn:aPerfAnalyzerLightStatSum, pElement:string);
   AllocateFromKey(pKey:aPerfAnalyzerLightStatSum, pItemIn:aPerfAnalyzerLightStatSum):string;
   StatMethodDesc(Stat:aPerfAnalyzerLightStat):aMethodDesc;
   AppendStat(Stat:aPerfAnalyzerLightStat, Father:aPerfAnalyzerLightStatSum):aPerfAnalyzerLightStatSum;
   AdjustEndChar(Params:string);
   CompareParams(FirstParams:string, SecondParams:string):boolean;
   CodeParams(Params:string):number;
   Compare(pFirstKey:aPerfAnalyzerLightStatSum, pSecondKey:aPerfAnalyzerLightStatSum):boolean;
   Code(pKey:aPerfAnalyzerLightStatSum):number;
   StringExtract();
   pItemOutFromElement(pElement:string):aPerfAnalyzerLightStatSum;
}
declare class aPerfAnalyzerTriggerFromMethod extends aGoldHashTable {
   NewElement():string;
   InitElement(pItemIn:aPerfAnalyzerDesktopTrigger, pElement:string);
   Code(pKey:aMethodDesc):number;
   pItemOutFromElement(pElement:string):aPerfAnalyzerDesktopTrigger;
   pKeyFromItemIn(pItemIn:aPerfAnalyzerDesktopTrigger):aMethodDesc;
   AllocateFromKey(pKey:aMethodDesc, pItemIn:aPerfAnalyzerDesktopTrigger):string;
   FindOrAppendTrigger(Method:aMethodDesc):aPerfAnalyzerDesktopTrigger;
   AppendTrigger(Trigger:aPerfAnalyzerDesktopTrigger);
   FindTrigger(Method:aMethodDesc):aPerfAnalyzerDesktopTrigger;
}
declare class aStatisticsHeap extends aHeap {
   CompareStatistics(FirstStatistic:aPerfAnalyzerLightStatSum, SecondStatistic:aPerfAnalyzerLightStatSum):boolean;
   IsInferior();
}
declare class aStatisticsTimeHeap extends aStatisticsHeap {
   CompareStatistics();
}
/**
*This module contains API for Performance analyzer
*/
declare module wPerfAnalyzer {
   function StartPerfAnalyzer(JustSums:boolean, useLogFile:boolean, logFile:string);
   function StopAndDisplayPerfAnalyzer(displayIt:boolean);
}
declare class TranslationExtensionButtonAgent extends aUIAgent {
   DoYourJob: string ;
}
declare class aTranslationExtension extends aWideExtension {
   theCatalog: string ;
   FolderParentName();
   MenuText();
   GetExistingCatalog():aTranslationCatalog;
   DoYourJob();
   ButtonBMPName();
}
declare class aTranslationCategory001Agent extends aUIAgent {
   NameAndTextComment: string ;
}
declare class aTranslationCategory extends aEntity {
   TranslateDir: string ;
   UseTranslator: string ;
   myCatalog: string ;
   GetWAMCatalog():aTranslationCatalog;
   GetIDAllocater();
   IsAnInOutSyncEntity();
   InOutSyncCategory();
   NotifyDeletion();
   RegisterYourselfInIDE();
   IsAnExportableEntity();
   UIConsult();
   UIModify();
   DeleteMyself();
   GetBitmap();
   NameNameSpaceId();
   StringExtract();
   FillEntitiesFromTranslationCategory(inList:aListOfInstances);
}
declare class TranslationsAgent extends aUIAgent {
   Traductions: string ;
}
declare class TraductionCatalogCheckingPanelAgent extends aUIAgent {
   TraductionsToCheck: string ;
   BuildListToCheck: string ;
   checkOutAllThatNeedChanged: string ;
}
declare class aTraductionCatalog001Agent extends aFolderViewAgent {
}
declare class aTraductionCatalog002Agent extends aOpenWhereClosedUIAgent {
   aTraductionCatalog001: string ;
}
declare class TraductionCategoriesAgent extends aUIAgent {
   TraductionCategories: string ;
}
declare class ByCategoryTraductionsAgent extends aUIAgent {
   ByCategories: string ;
   NotifyInit();
   ByCategories_Selected(:aUIAgent, SelectedRank:number):number;
}
declare class aTranslationCatalog extends aEntity {
   Translations: string ;
   TranslationCategories: string ;
   DefaultTranslationCategory: string ;
   TranslationsToCheck: string ;
   ByCategories: string ;
   TraductionNumberFor(Category:aTranslationCategory):number;
   PrepareForDisplayAndRefresh();
   SetAsDefaultForEdition(thisCategory:aTranslationCategory);
   BuildListToCheck();
   StringExtract();
   NewVersion();
   RefreshAfterSynchronization();
   InitAfterLoad();
   checkOutAllThatNeedChanged();
}
declare class aTranslationListEditor001Agent extends aUIAgent {
   workinglist: string ;
   workinglist_ValueLoaded(:aUIAgent);
}
declare class aTranslationListEditor extends aEntity {
   ClassTranslation: string ;
   giventranslations: string ;
   workinglist: string ;
   TranslateDir: string ;
   UseTranslator: string ;
   ShowTranslationThatMustBeChecked();
   prepareforedition();
   ApplyModifications();
   TranslateAllWithCurrentTranslator();
   Terminate();
   Duplicate();
   IsModifiableInIDEExecutionMode();
}
declare class aTranslationCategoryOptionRole extends aSingleRoleType {
   ModifyThisObject();
   ConsultThisObject();
   canBreakLinkBetween();
   AuthorizeAction();
   NewAcceptedInstance();
}
declare class aTranslationCatalogRole extends aSingleRoleType {
   IsDroppedObjectUsable(FromThisObject:aByCategoryTranslationCatalog, FromThisVar:string, DroppedObject:aFullObject):boolean;
   appendDescendants(thisClassDef:aClassDef, list:aListOfInstances);
   NewInstanceFromDroppedObject(FromThisObject:aByCategoryTranslationCatalog, FromThisVar:string, DroppedObject:aFullObject, ObjectUsed:boolean):aFullObject;
   ModifyThisObject();
   ConsultThisObject();
   canBreakLinkBetween();
   AuthorizeAction();
   NewAcceptedInstance();
   AskForActions();
}
declare class aClassTraduction002Agent extends aUIAgent {
   aClassTraduction004: string ;
   TraductionCategoryStaticText: string ;
   TraductionCategory001: string ;
}
declare class DefTraductionsAgent extends aUIAgent {
   TreeBox: string ;
   StaticText: string ;
   TreeBox_Init():number;
}
declare class ImplemTraductionsAgent extends aUIAgent {
   TreeBox: string ;
   StaticText: string ;
   TreeBox_Init():number;
}
declare class aClassTraduction004Agent extends aSplitViewAgent {
}
declare class aClassOrModuleTranslation extends aEntity {
   myClassOrModuleDef: string ;
   DefTranslations: string ;
   ImplemTranslations: string ;
   LastOwnedId: string ;
   TranslationCategory: string ;
   ApplyYourself();
   TranslatedClassId():number;
   isEmpty():boolean;
   NewQVarTranslationFor(theQVar:aQVarPresentor):aEntityTranslation;
   NewXAMLEntityTranslationFor(xamlEntity:aXAMLEntity):aEntityTranslation;
   NewTranslationFor(thisEntity:aEntity):aEntityTranslation;
   ExistingTranslationFor(theEntity:aEntity):aEntityTranslation;
   RemoveTranslation(this:aEntityTranslation);
   AppendQVarTranslationIfMissing(theQVar:aQVarPresentor);
   EntityIsMultiLang(thisEntity:aEntity):boolean;
   AppendXAMLEntityTranslationIfMissing(xamlEntity:aXAMLEntity);
   AppendConstTranslationIfNecessary(theConstDesc:aConstString);
   AppendEnumTranslationIfNecessary(theEnumType:aEnumType);
   RemoveDeletedTranslations();
   AppendTranslationOfEntity(thisEntity:aEntity);
   AppendTranslationOfRecordDesc(thisRecordDesc:aRecordDesc);
   AppendTranslationOfScen(scen:aScenario);
   PutInImplemExistingTranslationsIfNecessary();
   UpdateTranslationsList();
   initOn(thisModuleDef:aModuleDef);
   TranslatedModuleOrClassId():number;
   TranslatedEntityNsIdId(theNsId:number, theId:number);
   StringExtract();
   BuildTreeBox(TreeBox:aXXXAsTreeBoxUIAgent);
   BuildImplemTreeBox(TreeBox:aXXXAsTreeBoxUIAgent);
   GetWAMCatalog():aTranslationCatalog;
   GetIDAllocater();
   GetNsIdAndIdforOwnedEntity();
   IsAnInOutSyncEntity();
   InOutSyncCategory();
   NotifyDeletion();
   RegisterYourselfInIDE();
   IsAnExportableEntity();
   FillEditor(Editor:aTranslationListEditor);
   UIConsult();
   UIModify();
   DeleteMyself();
   GetBitmap();
   IsConsistent();
   CheckDeletion();
   NewVersion():aClassOrModuleTranslation;
   BeforeAccept();
   NameNameSpaceId();
   IsValid();
   EntityHasNewTranslation(thisEntity:aEntity):boolean;
   ScenHasNewTranslation(Scen:aScenario):boolean;
   HasNewTranslation():boolean;
   MustBeChecked():boolean;
   Duplicate();
   isForSystem():boolean;
   ChangeCategory(newCategory:aTranslationCategory);
}
declare class EntityTransactionMainAgent extends aUIAgent {
   TranslatedEntity: string ;
   TranslatedEntityStaticText: string ;
   Translation: string ;
   OriginalText: string ;
   GroupBox: string ;
   GroupBox001: string ;
}
declare class aEntityTranslation extends aEntity {
   TranslatedEntity: string ;
   Translation: string ;
   TranslatedVersion: string ;
   Description():string;
   PrepareForModification():aEntityTranslation;
   OriginalText():string;
   ApplyTranslation();
   TranslatedIsAlive():boolean;
   IsATranslationFor(thisEntity:aEntity):boolean;
   TranslationMustBeChecked():boolean;
   RemoveDeletedTranslations();
   BuildYourselfFor(thisEntity:aEntity):boolean;
   UpdateYourself():boolean;
   BeforeAccept();
   AddNewNodes(TreeBox:aXXXAsTreeBoxUIAgent, RootNode:string);
   fillEditor(Editor:aTranslationListEditor);
   StringExtract();
   IsConsistent();
   GetpTranslation():string;
   FillTheTranslationHashTable(pFullId:string, theHashTable:aDataByObjectHashTable);
   GetTranslation():string;
   SetTranslation(thisTranslation:string);
}
declare class aQVarTranslation extends aEntityTranslation {
   GetBitmap();
}
declare class aQVarWithExplanationTranslation extends aQVarTranslation {
   ExplanationTranslation: string ;
   AddNewNodes();
   fillEditor();
   BuildYourselfFor(thisEntity:aQVPWithExplanation):boolean;
   StringExtract();
   UpdateYourself();
   ApplyTranslation();
}
declare class aExplanationTranslation extends aEntityTranslation {
   OriginalText();
   ApplyTranslation();
   PrepareForModification():aExplanationTranslation;
   StringExtract();
}
declare class aQVPListofAsListCtrlTranslation extends aQVarTranslation {
   ColumnsTranslations: string ;
   RemoveDeletedTranslations();
   BuildYourselfFor();
   ColumnTranslationExistFor(thisEntity:aEntity):boolean;
   UpdateYourself();
   ApplyTranslation();
   AddNewNodes();
   fillEditor();
   IsConsistent();
   TranslationMustBeChecked();
   FillTheTranslationHashTable();
}
declare class aColumnTranslation extends aEntityTranslation {
   PrepareForModification():aColumnTranslation;
   GetBitmap();
}
declare class aConstDescTranslation extends aEntityTranslation {
   OriginalText();
   ApplyTranslation();
   GetBitmap();
   GetpTranslation();
   FillTheTranslationHashTable();
   GetTranslation();
   SetTranslation();
}
declare class aEnumTypeTranslation extends aEntityTranslation {
   EnumTranslations: string ;
   BuildYourselfFor();
   EnumTranslationExistFor(thisEntity:aEntity):boolean;
   UpdateYourself();
   ApplyTranslation();
   AddNewNodes();
   fillEditor();
   TranslationMustBeChecked();
   IsConsistent();
   FillTheTranslationHashTable();
}
declare class aEnumeratorTranslation extends aEntityTranslation {
   PrepareForModification():aEnumeratorTranslation;
   GetBitmap();
}
declare class aByCategoryTraductionCatalog001Agent extends aUIAgent {
   checkOutAllOfCategory: string ;
   ChangeCategoryOfContents: string ;
   Translations: string ;
   ExportTranslationsToCSVFile: string ;
   ImportTranslationFromCSVFile: string ;
}
declare class aByCategoryTraductionCatalog002Agent extends aUIAgent {
   TraductionsToCheck: string ;
   BuildListToCheck: string ;
   checkOutTranslationsToBeChecked: string ;
}
declare class aByCategoryTraductionCatalog003Agent extends aFolderViewAgent {
}
declare class aByCategoryTranslationCatalog extends aEntity {
   Category: string ;
   Translations: string ;
   myCatalog: string ;
   TranslationsToCheck: string ;
   StringExtract();
   BuildListToCheck();
   Reinit();
   checkOutAllOfCategory();
   checkOutTranslationsToBeChecked();
   ChangeCategoryOfContents();
   GetTranslationClassDefFor(thisMMEntity:aEntity):aClassDef;
   LookForExistingTranlationFor(thisDef:aEntity):aClassOrModuleTranslation;
   CreateTranslationForClassDef(curObject:aModuleDef, T:aTransaction, errMsg:string):aClassOrModuleTranslation;
   MakeNewVersionOfTranslationForClassDef(theTranslation:aClassOrModuleTranslation, curObject:aModuleDef, T:aTransaction, errMsg:string):aClassOrModuleTranslation;
   FindOrCreateTranslationForClassDef(curObject:aModuleDef, T:aTransaction, errMsg:string):aClassOrModuleTranslation;
   NewExportImport():aTranslationCatalogExportImport;
   ExportTranslationsToCSVFile();
   ImportTranslationFromCSVFile();
}
declare class aClassTraductionToCheckRole extends aSingleRoleType {
   AuthorizeAction();
}
declare class aFakeTranslationForEdition extends aFullObject {
   Description: string ;
   FromText: string ;
   ToText: string ;
   MyEditor: string ;
   Translate();
}
declare class MultiLangRunningContextAgent extends aUIAgent {
   AdjustLanguage: string ;
   Categories: string ;
   CategoriesStaticText: string ;
}
declare class aMultiLangRunningContext001Agent extends aFolderViewAgent {
}
declare class aMultiLangRunningContext extends aMUserRunningContext {
   Categories: string ;
   Traductions: string ;
   AdjustLanguage: string ;
   IsInitializing: string ;
   HashTable: string ;
   ApplyListOfTraductions(curListTraduction:aListOfInstances, thisModuleImplem:aModuleImplem);
   ContainsCategory(thisCategory:aTranslationCategory):boolean;
   ChangeLangIfNecessaryOf();
   TestInMultiLangMode();
   StringExtract();
}
declare class TraductionListEditorMainAgent extends aUIAgent {
   aTraductionListEditor002: string ;
   ComboBox: string ;
   AvailableTranslators: string ;
   TranslateAllWithCurrentTranslator: string ;
   TranslateDir: string ;
   ComboBox_Init(:aUIAgent):number;
   ComboBox_Selected(:aUIAgent, SelectedRank:number):number;
   ComboBox_Terminate(:aUIAgent):number;
}
declare class aTraductionListEditor001Agent extends aUIAgent {
   ClassTraduction: string ;
}
declare class aTraductionListEditor002Agent extends aFolderViewAgent {
}
declare class DuplicateForTraductionListEditorAgent extends aUIAgent {
   Duplicate: string ;
}
declare class DuplicateForClassOrModuleTraductionAgent extends aUIAgent {
   Duplicate: string ;
}
declare class aMultiLangRunningContextRole extends aSingleRoleType {
   pickInMemOnly();
}
declare class DefaultWideExtensionForaTanslationBundlePreparerExtensionAgent extends aUIAgent {
   DoYourJob: string ;
}
declare class aTanslationBundlePreparerExtension extends aWideExtension {
   FindOrCreateBundleTranslater():aTranslationDelBPreparer;
   DoYourJob();
   ButtonBMPName();
   MenuText();
   FolderParentName();
}
declare class aTranslationDelBPreparer001Agent extends aOpenWhereClosedUIAgent {
   Bundles: string ;
   BundlesStaticText: string ;
   TraductionCategory: string ;
   TraductionCategoryStaticText: string ;
   DoYourJob: string ;
   PrepareSystemTranslationBundle: string ;
   Comment: string ;
   DisplaySelectedTranslationBundle: string ;
   DisplaySystemTranslationBundle: string ;
   Bundles_Selected(:aUIAgent, SelectedRank:number):number;
   DisplaySelectedTranslationBundle_Init(:aUIAgent):number;
}
declare class aTranslationDelBPreparer extends aEntity {
   Bundles: string ;
   TraductionCategory: string ;
   traductions: string ;
   SelectedBundle: string ;
   BlankComment();
   RemoveDeleted();
   FindExistingSystemTranslationBundle():aDeliveriesBundlePreparer;
   FindExistingTranslationBundleFor(ThisB:aDeliveriesBundlePreparer):aDeliveriesBundlePreparer;
   FillTraductionList();
   DeliveryFromName(DName:string, InB:aDeliveriesBundlePreparer):string;
   PrepareNewBundleFor(thisBundlePreparer:aDeliveriesBundlePreparer):aDeliveriesBundlePreparer;
   TraductionOf(thisEntity:aEntity):aClassOrModuleTranslation;
   FillBundleWithTranslations(FromB:aDeliveriesBundlePreparer, B:aDeliveriesBundlePreparer);
   RemoveEmptyDeliveries(B:aDeliveriesBundlePreparer);
   DoYourJob();
   PrepareSystemTranslationBundle();
   IsSystemCloseAccepted();
   DisplaySelectedTranslationBundle();
   DisplaySystemTranslationBundle();
}
declare class aBundleTranslationPreparerRole extends aSingleRoleType {
   ConsultThisObject(FromThisObject:aFullObject, toThisObject:aEntity, fromThisUIAgent:aUIAgent);
}
declare class aTranslationCategoryWithLangAgent extends aUIAgent {
   aTranslationCategoryFolder: string ;
}
declare class aTranslationCategoryFolderAgent extends aFolderViewAgent {
}
declare class aTranslationCategoryLanguageAgent extends aUIAgent {
   TranslateDir: string ;
   FromLang: string ;
   FromLangStaticText: string ;
   ToLang: string ;
   ToLangStaticText: string ;
}
declare class aHttpTranslator001Agent extends aTranslatorPropertiesAgent {
   ServerHost: string ;
   ServerHostStaticText: string ;
   ServerPage: string ;
   ServerPageStaticText: string ;
   PostParams: string ;
   PostParamsStaticText: string ;
   OrigTextParamName: string ;
   OrigTextParamNameStaticText: string ;
   LanguagePairParamName: string ;
   LanguagePairParamNameStaticText: string ;
   TranslationAreaStart: string ;
   TranslationAreaStartStaticText: string ;
   TranslationAreaEnd: string ;
   TranslationAreaEndStaticText: string ;
   AddLangPairTextBothDirs: string ;
   AddLangPairText001: string ;
}
/**
*A prototype class for many html form based online  translators
a good list of such web sites can eventually be found on http://www.word2word.com/free.html
*/
declare class aHttpTranslator extends aTranslator {
   TranslationAreaStart: string ;
   TranslationAreaEnd: string ;
   ServerHost: string ;
   ServerPage: string ;
   PostParams: string ;
   OrigTextParamName: string ;
   LanguagePairParamName: string ;
   DirectionLangPairs: string ;
   URLEncodeText(txt:string, URLTxt:string);
   URLEncode(txt:string, URLTxt:string);
   HtmlToAsciiText(orig:string):string;
   HtmlToAscii(orig:string):string;
   PostHttpSite(hostname:string, pagename:string, thePost:string):string;
   HttpExtract(thePage:string, StartConst:string, EndConst:string):string;
   DefaultTranslationExtract(thePage:string):string;
   GetPostParams():string;
   CreatePostText(OrigText:string, LangPair:string):string;
   GetLangPairText(Direction:string):string;
   GetCodePage(TheText:string):number;
   GetTranslationDir();
   CanTranslate();
   GetTranslation();
   GetTranslatorName();
   AddLangPairText(Direction:string, LangPair:string);
   AddLangPairTextBothDirs(FromLang:string, ToLang:string, LangPair:string, LangPairRev:string);
   Init();
   Terminate();
   CanTranslateDir();
}
declare class aTrBabelFish extends aHttpTranslator {
   Init();
   GetTranslatorName();
}
declare class aTranslatorFolderAgent extends aFolderViewAgent {
}
declare class aTranslatorTranslationAgent extends aUIAgent {
   OriginalText: string ;
   TranslatedText: string ;
   TranslateDirection: string ;
   OriginalText001: string ;
   TranslatedText001: string ;
   TranslatedTextStaticText: string ;
   TranslateThis001: string ;
   TranslateDirection002: string ;
   TranslateThis();
}
declare class aTranslatorPropertiesAgent extends aUIAgent {
}
declare class tTranslationDirectionComboBoxesAgent extends aUIAgent {
   FromLang: string ;
   ToLang: string ;
   ToLangStaticText: string ;
}
declare class aTranslator extends aLightObject {
   GetDirectionString(Direction:string):string;
   GetDirectionFromString(DirName:string):string;
   InverseTranslateDir(Direction:string):string;
   CanTranslate(FromLang:string, ToLang:string):boolean;
   CanTranslateDir(Direction:string):boolean;
   GetTranslation(FromLang:string, ToLang:string, FromText:string, ToText:string):boolean;
   GetTranslationDir(Direction:string, FromText:string, ToText:string):boolean;
   GetTranslationCString(FromLang:string, ToLang:string, FromStr:string, ToStr:string):boolean;
   GetTranslationDirCString(Direction:string, FromStr:string, ToStr:string):boolean;
   GetTranslatorName():string;
   GetListOfWorkingDescendants(TheDescendants:aListOfInstances, OfClassDef:aClassDef);
}
declare class aTrGoogle extends aHttpTranslator {
   Init();
   GetTranslatorName();
}
declare class aTRPromt extends aHttpTranslator {
   Init();
   GetTranslatorName();
}
declare class aTrTranExp extends aHttpTranslator {
   LangStrings: string ;
   Init();
   GetLangPairText();
   GetTranslatorName();
   CanTranslateDir();
}
declare class aTrWorldLingo extends aHttpTranslator {
   FromLangs: string ;
   toLangs: string ;
   TextSubject: string ;
   Init();
   CanTranslateDir();
   GetLangPairText();
   GetTranslatorName();
   GetPostParams();
}
declare class aQVPListOfAsGridTranslation extends aQVarTranslation {
   ColumnsTranslations: string ;
   RemoveDeletedTranslations();
   BuildYourselfFor();
   ColumnTranslationExistFor(thisEntity:aEntity):boolean;
   UpdateYourself();
   ApplyTranslation();
   AddNewNodes();
   fillEditor();
   IsConsistent();
   TranslationMustBeChecked();
   FillTheTranslationHashTable();
}
declare class aRecordDescTranslation extends aEntityTranslation {
}
declare class TranslationCatalogToolBarAgent extends aToolBarUIAgent {
}
declare class aTraductionCatalog002DockedAgent extends aUIAgent {
   aTraductionCatalog001: string ;
}
declare class TranslationOptionsAgent extends aUIAgent {
   TranslationOptions: string ;
}
declare class aQVPListOfAsListTreeCtrlTranslation extends aQVPListofAsListCtrlTranslation {
   BuildYourselfFor();
   UpdateYourself();
}
declare class aQVPReftoAsHLinkTranslation extends aQVarWithExplanationTranslation {
   NoneStringTranslation: string ;
   AddNewNodes();
   fillEditor();
   BuildYourselfFor(thisEntity:aQVPReftoAsHLink):boolean;
   UpdateYourself();
   ApplyTranslation();
}
declare class aReftoAsHLinkNoneStringTranslation extends aEntityTranslation {
   OriginalText();
   ApplyTranslation();
   PrepareForModification():aReftoAsHLinkNoneStringTranslation;
   StringExtract();
}
declare class aTranslationRunningOption001Agent extends aUIAgent {
   TranslationCategories: string ;
   TranslationCategoriesStaticText: string ;
}
declare class aLanguageOption extends aEntity {
   TranslationCategories: string ;
   GetWAMCatalog():aTranslationCatalog;
   UIConsult();
   GetBitmap();
   StringExtract();
   IsConsistent();
   GetTree(FromObject:aLanguageOption, pList:string, ListType:aType);
}
declare module wMultiLang {
   function SetCurrentLanguageOption(theLanguage:aEntity):aEntity;
   function SetCurrentLanguageOptionFromName(theLanguageName:string):string;
   function GetCurrentLanguageOption():aEntity;
   function SortTranslation(ThisRec:string, ThatRec:string):boolean;
}
declare class aDynamicMultiLangBroker extends aDynamicMultiLangBrokerRoot {
   CurrentLanguage: string ;
   TranslationHashTablesList: string ;
   theRunningContext: string ;
   SetCurrentLanguage(theLanguage:aLanguageOption);
   GetCurrentLanguage():aLanguageOption;
   GetCurrentTraductionRank();
   GetLanguageAtRank(Rank:number):aLanguageOption;
   InitTranslationHashTables();
   FillTranslationHashTableWithList(ThisList:aListOfInstances, theTranslationHashTable:aDataByObjectHashTable);
   FillTranslationHashTableWith(ThisEntity:aEntity, LanguageRank:number);
   GetEntityTranslationForLanguage(ThisEntity:aEntity, LanguageRank:number):aEntityTranslation;
   GetCurrentEntityTranslation(theEntity:aEntity):aEntityTranslation;
   GetTextFor();
   GetExplanationTextFor();
   GetConstAddressValueFor();
   GetNoneStringFor();
   GetConstTranslationForLanguage();
}
declare class DynamicMultiLangRunningContextAgent extends aUIAgent {
   Categories: string ;
   CategoriesStaticText: string ;
   AdjustLanguage: string ;
   theMultiLangBrokerKind: string ;
   theMultiLangBrokerKindStaticText: string ;
}
declare class DynamicMultiLangRunningContext001Agent extends aFolderViewAgent {
}
declare class aDynamicMultiLangRunningContext extends aMUserRunningContext {
   PossibleLanguages: string ;
   Traductions: string ;
   AdjustLanguage: string ;
   IsInitializing: string ;
   HashTable: string ;
   theMultiLangBrokerKind: string ;
   ContainsCategory(thisCategory:aTranslationCategory):boolean;
   InithashTable();
   ChangeLangIfNecessaryOf();
   TestInMultiLangMode();
   TestInDynamicMultiLangMode();
   GetLanguageCount();
   NewDynamicMultiLangBroker();
   StringExtract();
   GetLanguageOptionFromName();
}
declare class TranslationCatalogExportImportMainAgent extends aOpenWhereClosedUIAgent {
   aTranslationCatalogExportImport002: string ;
}
declare class TranslationCatalogExportImportStatusBarAgent extends aToolBarUIAgent {
   JobDone: string ;
}
declare class TranslationCatalogExportImport_EXPORTAgent extends aUIAgent {
   ClassesToExport: string ;
   GenerateTranslation: string ;
   TranslationCategoryToExport: string ;
   GroupBox: string ;
   TranslationTextFile: string ;
   StaticText: string ;
   BuildTranslationTextFile: string ;
   aTranslationCatalogExportImport_Separators: string ;
   NotifyInit();
   GenerateTranslation_ValueStored();
}
declare class TranslationCatalogExportImport_IMPORTAgent extends aUIAgent {
   NewCategoryName: string ;
   NewCategoryNameStaticText: string ;
   TranslationTextFile: string ;
   StaticText: string ;
   aTranslationCatalogExportImport_Separators: string ;
   ImportCatalogTextFile: string ;
   CheckOnly: string ;
}
declare class aTranslationCatalogExportImport_FolderAgent extends aUIAgent {
   aTranslationCatalogExportImport001: string ;
}
declare class aTranslationCatalogExportImport001Agent extends aFolderViewAgent {
}
declare class TranslationCatalogExportImport_ReportAgent extends aUIAgent {
   Comment: string ;
   ClearComment: string ;
}
declare class aTranslationCatalogExportImport002Agent extends aSplitViewAgent {
}
declare class aTranslationCatalogExportImport_SeparatorsAgent extends aUIAgent {
   ColumnsSepStr: string ;
   ColumnsSepStrStaticText: string ;
   SeparatorEntity: string ;
   SeparatorEntityStaticText: string ;
}
declare class aTranslationCatalogExportImport extends aEntity {
   ClassesToExport: string ;
   ClassesHashTables: string ;
   ColumnsSepStr: string ;
   SeparatorEntity: string ;
   TranslationTextFile: string ;
   GenerateTranslation: string ;
   TranslationCategoryToExport: string ;
   theExistingKeys: string ;
   JobDone: string ;
   NewCategoryName: string ;
   CheckOnly: string ;
   Init();
   AppendError(msg:string);
   SetJobDoneTo(thisValue:number);
   InitHashTableFromFile(HashTable:aStringHashTable, curFile:string);
   GetOwnerPath(theEntity:aEntity, thePath:string);
   FindOrCreateTranslationForClassDef(newCategory:aTranslationCategory, curObject:aModuleDef, T:aTransaction):aClassOrModuleTranslation;
   GetMasterModuleDefOwnerFor(curEntity:aEntity):aModuleDef;
   FindEntityTranslationInEditor(curEntity:aEntity, curKey:string, curEditor:aTranslationListEditor):aEntityTranslation;
   UpdateTranslation(entityTranslation:aEntityTranslation, curEntity:aEntity, pValue:string, linenumber:number, sep:number, curKey:string);
   TreatFileLine(pKey:string, pValue:string, linenumber:number, existingEntitiesHashTable:aDataByStringHashTable, newCategory:aTranslationCategory, T:aTransaction, editors_Hatables:aDataByObjectHashTable);
   TreatFile(existingEntitiesHashTable:aDataByStringHashTable, newCategory:aTranslationCategory, T:aTransaction, editors_Hatables:aDataByObjectHashTable);
   IsMultiLangEntity(thisEntity:aEntity):boolean;
   FillEntitiesOfScenarioMenus(theScenario:aScenario, L:aListOfInstances);
   FillEntitiesOfScenario(theScenario:aScenario, L:aListOfInstances);
   FillEntitiesOfModuleDef(curModuleDef:aModuleDef, L:aListOfInstances);
   RegisterModuleDefInHashTable(curModuleDef:aModuleDef, existingEntitiesHashTable:aDataByStringHashTable);
   prepareExistingEntitiesHashTable(existingEntitiesHashTable:aDataByStringHashTable);
   GetExistingCatalog():aTranslationCatalog;
   FindOrCreateTranslationCategory():aTranslationCategory;
   ImportCatalogTextFile();
   AddInTableOfExitingKeys(theCstring:string);
   ParseString(theString:string, theSep:string, theLeft:string, theRight:string);
   BuildTheHashTableOfExistingKeys(thePath:string);
   IsTheKeyAlreadyDefineInFile(theKey:string):boolean;
   GenerateLineForEntity(curEntity:aEntity, editorList:aListOfInstances, theText:string);
   CheckParametersForExport():boolean;
   BuildTranslationTextFile();
   ClearComment();
   UIModifyForExport();
   UIModifyForImport();
}
declare class aTranslationCatalogExportRole extends aSingleRoleType {
   IsDroppedObjectUsable();
   NewInstanceFromDroppedObject();
   ConsultThisObject();
}
declare class aDynamicMultiLangBrokerRole extends aSingleRoleType {
   pickInMemOnly();
}
declare class aXTMLTextTranslation extends aEntityTranslation {
}
declare class aXAMLEntityTranslation extends aEntityTranslation {
}
declare class BundleIDFreezerBundlesToFreezeAgent extends aUIAgent {
   BundlesToFreeze: string ;
   BundlesToFreezeStaticText: string ;
   InitWithOfficialWynsureBundles: string ;
   ActionSimulate: string ;
   ActionFreeze: string ;
   Verbose: string ;
   MissingFilesAreErrors: string ;
   FlushEntitiesIDInFile: string ;
}
declare class aBundleIDFreezer001Agent extends aSplitViewAgent {
}
declare class aBundleIDFreezerMainAgent extends aUIAgent {
   aBundleIDFreezer001: string ;
}
declare class aBundleIDFreezerReportAgent extends aUIAgent {
   MyReport: string ;
}
declare class aWexBundleIDFreezer extends aWexConfMgtTool {
   BundlesToFreeze: string ;
   NbErrors: string ;
   NbWarnings: string ;
   Verbose: string ;
   MissingFilesAreErrors: string ;
   TheFileName: string ;
   SelectedBundleFile: string ;
   SelectedBundleFiles: string ;
   GetLastVersionBundle(forBundleref:aDeliveriesBundleReference, bundleversion:number):aDeliveriesBundle;
   FreezeBundle(curBundleref:aDeliveriesBundleReference, simul:boolean);
   ActionFreezeAllBundles(simul:boolean);
   ActionSimulate();
   ActionFreeze();
   AppendBundle(thisName:string);
   InitWithOfficialWynsureBundles();
   InitWithOfficialwInterfaceBundles();
   Init();
   GetLocalConfig():aLocalConfig;
   FlushEntitiesIDInFile();
   FindEntityInPreparers_SpecialForFile(TGVEntity:aEntity):aEntity;
   FreezeBundle_SpecialForFile(curFileName:string, simul:boolean);
   RunFreezeBundle_SpecialForFile();
   RunCheckFreezeBundle_SpecialForFile();
   UnFreezeBundleFile(curFileName:string);
   UnFreezeSelectedBundleFiles();
   StringExtract();
}
declare class aWexBundleIDFreezerRole extends aSingleRoleType {
   NewInstanceFromDroppedObject();
   IsDroppedObjectUsable();
}
declare class aBundleToolsEx extends aWideExtension {
   fixer: string ;
   FolderParentName();
   MenuText();
   StringExtract();
   DoYourJob();
}
declare class aBundleIDFreezerUnfreezeAgent extends aUIAgent {
   SelectedBundleFiles: string ;
   SelectedBundleFilesStaticText: string ;
   SelectedBundleFile001: string ;
   UnFreezeSelectedBundleFiles: string ;
   SelectedBundleFile001_ValueStored();
}
declare class aBundleIDFreezerTopFolderAgent extends aFolderViewAgent {
}
declare class WexConfMgtToolReportAgent extends aUIAgent {
   Report001: string ;
}
declare class aWexConfMgtTool extends aEntity {
   Report: string ;
   G: string ;
   ReportUIAgent: string ;
   Blankreport();
   PrepareReportAndGaugeBeforeRun();
   Init();
   InitAfterNewVersion();
   Scroll();
   WriteLnReport(msg:string);
   WriteLnComment(msg:string);
   WriteComment(msg:string);
   Terminate();
   IsAvailableForCurrentEWamVersion():boolean;
   IsVirtual():boolean;
   IsPersistent():boolean;
   PrepareSettingsBeforeGeneration();
   RestoreSettingsAfterGeneration();
}
declare class DefaultWideExtensionForaWexConfigToolsExtensionAgent extends aUIAgent {
   DoYourJob: string ;
}
declare class aWexConfigToolsExtensionMainAgent extends aUIAgent {
   AllTools: string ;
}
declare class aWexConfigurationsToolsExtension extends aWideExtension {
   AllTools: string ;
   InitToolsFromWideExtension();
   FindOrCreatePersistentToolFromClassDef(curDummyTool:aFullObject):aWexConfMgtTool;
   iniAvailableTools();
   InitAddOns();
   DoYourJob();
   FolderParentName();
   MenuText();
}
declare class WexClassAndModuleExtractMainAgent extends aUIAgent {
   WexClassAndModuleExtractSplit: string ;
}
declare class WexClassAndModuleExtractParamsAgent extends aUIAgent {
   StaticText: string ;
   RootDirectory: string ;
   RootDirectoryStaticText: string ;
   OrganizedDirectories: string ;
   ActionSaveToFiles: string ;
   G001: string ;
   PickRootDiractory: string ;
   RemoveVersionsNumberInFirstLine: string ;
   GenerateClassesAndModules: string ;
   GenerateOtherEntities: string ;
   GeneratorClassDefs: string ;
   GeneratorClassDefsStaticText: string ;
   InLoadValue: string ;
   ActionSave001: string ;
   ActionDisplaySettingsOnSelectedGenerator001: string ;
   EntitiesToSaveToFile: string ;
   GeneratorClassDefs_ItemChecked(:aUIAgent, Item:number, Checked:boolean):number;
   GeneratorClassDefs_ValueLoaded(:aUIAgent);
   ActionDisplaySettingsOnSelectedGenerator();
}
declare class WexClassAndModuleExtractSplitAgent extends aSplitViewAgent {
}
declare class aWexClassAndModuleExtract extends aWexConfMgtTool {
   EntitiesToSaveToFile: string ;
   RootDirectory: string ;
   KeepBundleStructure: string ;
   ProgressCounter: string ;
   RemoveClassVersionNumbersInFirstLine: string ;
   GenerateClassesAndModules: string ;
   GenerateOtherEntities: string ;
   PossibleGeneratorClassDefs: string ;
   ActiveGeneratorClassDefs: string ;
   GeneratorsOptions: string ;
   CountEntities(thisEntity:aEntity, counter:number);
   SaveEntityToFile(inDir:string, thisEntity:aEntity);
   FindSettingsForGeneratorClassDef(thisGenClassDef:aClassDef):aWexClassOrModuleExtractSettings;
   IsEnabledGenerator(thisClassDef:aClassDef):boolean;
   EnableDisableGenerator(thisClassDef:aClassDef, enableIt:boolean);
   FillPossibleGenerator(fromRootClass:aClassDef);
   RecursFillSettingsClassDef(thisSettingClass:aClassDef, inlist:aListOfInstances);
   FillGeneratorSettingsFromPossibleGenerators();
   CreateOrUpdatePossibleGenerators();
   Init();
   SaveModuleImplemToFile(inDir:string, theImplem:aModuleImplem);
   NewSerializerForEntity(thisSerialClassDef:aClassDef):aWexEntitySerializerForClassAndModuleExtract;
   SaveModuleToFile(inDir:string, thisModule:aModuleDef);
   CreateAndGetSubDirectory(inDirPath:string, subDirName:string, subDirPath:string);
   SaveBundlePreparerToFile(inDir:string, thisEntity:aDeliveriesBundlePreparer);
   SaveContainerToFile(inDir:string, thisEntity:aWAMContainer);
   SaveBundleInstallerToFile(inDir:string, thisEntity:aDeliveriesBundleInstaller);
   SaveOtherEntityToFile(inDir:string, thisEntity:aEntity);
   PickRootDirectory();
   ActionSaveToFiles(theUIagent:aUIAgent);
   CountEntitiesInBundlePreparer(thisEntity:aDeliveriesBundlePreparer, counter:number);
   CountEntitiesInBundleinstaller(thisEntity:aDeliveriesBundleInstaller, counter:number);
   StringExtract();
   IsPersistent();
   InitAfterNewVersion();
}
declare class aWexEntityXMLSerializerForClassAndModuleExtract extends aWexEntitySerializerForClassAndModuleExtract {
   SkipTechnicalVarInXML(thisVarlink:string):boolean;
   GenerateObjectAsXMLNode(thisEntity:aEntity, thisXMLNode:aXMLNamedNode);
   GenerateObjectAsInXMLFile(thisEntity:aFullObject, XMLFile:aXMLFile);
   GenerateObjectAsXMLText(thisEntity:aFullObject, thisXMLtext:string);
   WriteXMLContentToFile(fileName:string, XMLFile:aXMLFile);
   SaveModuleDefToFile();
   SaveAnyEntityToFile();
}
declare class aWexEntityToGenerateRoleType extends aSingleRoleType {
   NewInstanceFromDroppedObject();
}
declare class aWexEntitySerializerForClassAndModuleExtract extends aLightObject {
   GeneratorProject: string ;
   GeneratorSettings: string ;
   InitSettingsFromProject(project:aWexClassAndModuleExtract);
   AttachToGeneratorProject(theGenProject:aWexClassAndModuleExtract);
   SaveModuleDefToFile(inDir:string, thisModule:aModuleDef);
   SaveAnyEntityToFile(inDir:string, thisEntity:aEntity);
   ContentHasChanged(filename:string, newContent:string):boolean;
   WriteContentToFile(filename:string, newContent:string);
}
declare class aWexGoldSerializerForRepositoryExtract extends aWexEntitySerializerForClassAndModuleExtract {
   SaveAnyEntityToFile();
   SaveModuleImplemToFile(inDir:string, theImplem:aModuleImplem);
   SaveModuleDefToFile();
}
declare class aWexClassOrModuleExtractSettings extends aEntity {
   ForGeneratorClassDef():aClassDef;
   OnBeforeGeneration();
   OnAfterGeneration();
   IsVirutal():boolean;
}
declare class TopOkCancelForaWexGodClassOrModuleExtractSettingsAgent extends aUIAgent {
   MySourcePresentationOptions: string ;
   WydeOptionSource: string ;
}
declare class aWexGodClassOrModuleExtractSettings extends aWexClassOrModuleExtractSettings {
   MySourcePresentationOptions: string ;
   DefaultSourcePresentationOptions_Backup: string ;
   CopySourceOptions(fromOption:aWydeOption, toOption:aWydeOption);
   ChangeTemporaryIDESourcePresentationOptions();
   RestoreIDESourcePresentationOptions();
   InitDefaultSettings();
   Init();
   ForGeneratorClassDef();
   OnBeforeGeneration();
   OnAfterGeneration();
}
declare class aWxLangWordsOptionsExtension extends aWideExtension {
   NewCustoGoldCompilerOptions():aWxGOLDCompilerOptions;
   ChangeColdCompilerOptions();
   RegisterYourselfInIDE();
}
/**
*Style option for a given word in Gold editor
*/
declare class aWxLangWordOption extends aLightObject {
   WordColor: string ;
   Init();
}
declare class OptionForaWxLangWordsOptionsAgent extends aUIAgent {
   StaticText: string ;
   Comment: string ;
   SetDefaultWithExample: string ;
}
declare class aWxLangWordsOptions extends aOption {
   WordOptions: string ;
   SetDefaultName();
   SetDefaultWithExample();
   InitAfterLoad();
   Init();
   AddSimpleWord(thisWord:string, thisColor:string);
   VarDescFromUpcaseName(Instance:aLightObject, Name:string):aInstanceVarDesc;
   Recursive_AddWordsUsingMMIntrospection(ownerMMentity:aEntity, thisString:string, thisColor:string);
   AddWordsUsingMMIntrospection(thisString:string, thisColor:string);
   InitWordsFromIDEOptions();
   BeforeAccept();
   GetColor(theWord:string, foreColor:string);
}
declare class aWxGOLDCompilerOptions extends aGOLDCompilerOptions {
   IDEOptions: string ;
   GetColors();
}
declare class CodeAnalyzerInMDIAgent extends aOpenWhereClosedUIAgent {
   aCodeAnalyzer001: string ;
   CodeAnalyzerStatusBar: string ;
   NotifyCheck();
}
declare class ModulesToAnalyzeAgent extends aUIAgent {
   EntitiesToAnalyze: string ;
}
declare class CodeAnalyzerModulesAndRulesAgent extends aSplitViewAgent {
}
declare class CodeAnalyzerActionsAgent extends aUIAgent {
   Rules: string ;
   Rules001: string ;
   RuleInCodeAnalyser: string ;
   UIAgent001: string ;
   Rules_ItemChecked(:aUIAgent, Item:number, Checked:boolean):number;
   Rules_Selected(:aUIAgent, SelectedRank:number):number;
   Rules_Init(:aUIAgent):number;
   Rules_ValueLoaded(:aUIAgent);
}
declare class CodeAnalyzerResultAgent extends aUIAgent {
   ReportLines: string ;
   DT: string ;
   EntityMMViewerMainScen: string ;
   ms: string ;
   LoadFileToResult: string ;
   Analyze: string ;
   SetEntity(theEntity:aEntity);
   ReportLines_Selected(:aUIAgent, SelectedRank:number):number;
   EntityMMViewerMainScen_ValueLoaded(:aUIAgent);
}
declare class aCodeAnalyzer001Agent extends aSplitViewAgent {
}
declare class CodeAnalyzerStatusBarAgent extends aToolBarUIAgent {
   Pourcent: string ;
}
declare class SaveReportToFileAgent extends aUIAgent {
   ReportFileName: string ;
   ReportFileNameGroupBox: string ;
}
declare class LoadFileToReportAgent extends aUIAgent {
   LoadReportFileName: string ;
   LoadReportFileNameGroupBox: string ;
}
declare class aCodeAnalyzer002Agent extends aToolBarUIAgent {
   SaveSaveAndCloseClose: string ;
   Analyze: string ;
   LoadFileToResult: string ;
   SaveResultToFile: string ;
}
declare class ClassesToAnalyzeAgent extends aUIAgent {
   AllClasses: string ;
   AllModules: string ;
   StartClass: string ;
   StaticText001: string ;
   StaticText002: string ;
   SystemClass: string ;
   StaticText003: string ;
   AllClasses_Selected(:aUIAgent, SelectedRank:number):number;
   NotifyInit();
}
declare class aCodeAnalyzer extends aEntity {
   EntitiesToAnalyze: string ;
   AllEntitiesToAnalyze: string ;
   Classes: string ;
   AllModules: string ;
   StartClass: string ;
   Rules: string ;
   UIAgent: string ;
   ReportLines: string ;
   Percentage: string ;
   SaveReportFileName: string ;
   LoadReportFileName: string ;
   FieldSeparators: string ;
   SubFieldSeparators: string ;
   AutoRunWhenSavingClass: string ;
   EnableRule(RuleRank:number, Enable:boolean);
   AddDescendantsRule(thisClassDef:aClassDef, OldRulesClassDef:aListOfInstances);
   Init();
   InitAfterNewVersion();
   CanBeAnalyze(theEntity:aEntity):boolean;
   CreateAllEntitiesToAnalyze(theClassDef:aClassDef, theList:string);
   AddEntityToAnalyzeList(TheEntity:aEntity);
   FillEntitiesToAnalyze();
   Analyze();
   HasChanged();
   SaveResultToFile();
   MethodImplemFromNames(theClassName:string, theMethodName:string):aMethodImplem;
   LoadFileToResult();
   Terminate();
   BeforeAccept();
   UIModify();
   GetAutoRunCodeAnalyzer():aCodeAnalyzer;
   DisplayAutoRunOptions();
}
declare class aCodeAnalyzerIRProcessor extends aIRProcessor {
   Rules: string ;
   UIAgent: string ;
   Init();
   Terminate();
   AddRules(theRule:aCodeAnalyzerRule);
   HandleStatement();
   AfterHandleStatement();
   HandleOpNode();
   AfterHandleOpNode();
   HandleMethod();
   AfterHandleMethod();
   HandleClass();
   AfterHandleClass();
   HandleModule();
   BeforeHandleModuleClass();
   AfterHandleModule();
   ProcessScenario(curType:aType);
   ProcessModule();
}
declare class aCodeAnalyserExtension001Agent extends aUIAgent {
   DoYourJob: string ;
}
declare class aCodeAnalyzerExtension extends aWideExtension {
   FolderParentName();
   GetCodeAnalyser():aCodeAnalyzer;
   DoYourJob();
   MenuText();
   ButtonBMPName();
   GetClassControlerClassDef():aClassDef;
   InitClassControler();
   Init();
}
declare class aCodeAnalyzerMethodsOcur extends aLightObject {
   Methods: string ;
   Nbr: string ;
   Init();
   Terminate();
}
declare class CodeAnalyzerReportLineAgent extends aUIAgent {
   InClassOrModules: string ;
   InClassOrModulesStaticText: string ;
   InMethods: string ;
   InMethodsStaticText: string ;
   InfoString: string ;
   InfoStringStaticText: string ;
   aEntityMMViewerDT: string ;
   EntityMMViewerMainScen001: string ;
   SetEntity(theEntity:aEntity);
/**
*Portability Check: OK
*/
   InClassOrModules_Selected(:aUIAgent, SelectedRank:number):number;
/**
*Portability Check: OK
*/
   InMethods_Selected(:aUIAgent, SelectedRank:number):number;
   NotifyInit();
}
declare class aCodeAnalyzerReportLine extends aFullObject {
   ForRule: string ;
   InClassOrModules: string ;
   InMethods: string ;
   InfoInt: string ;
   InfoString: string ;
   GetClassName():string;
   GetMethodName():string;
   StringExtract();
}
declare class RuleInCodeAnalyserAgent extends aUIAgent {
}
declare class RuleInCodeAnalyserWithScopeAgent extends RuleInCodeAnalyserAgent {
   Scope: string ;
   StaticText: string ;
}
declare class aCodeAnalyzerRule extends aEntity {
   theCodeAnalyzer: string ;
   MustAnalyze: string ;
   NumberOfPass: string ;
   Scope: string ;
   CurModule: string ;
   CurClass: string ;
   CurMethod: string ;
   theCodeAnalyzerIRProcessor: string ;
   RuleDescription():string;
   Init();
   StringExtract();
   InitHashTables();
   KillHashTables();
   ExploreHashTables();
   NewOccur():aCodeAnalyzerMethodsOcur;
   IsVirtualRule():boolean;
   HandleClass(theClass:aClassDef);
   AfterHandleClass(theClass:aClassDef);
   HandleModule(theModule:aModuleDef);
   OnExploreHashTable(theHashTable:aHashTable, pHashElement:string);
   BeforeHandleModuleClass(theModule:aModuleDef);
   AfterHandleModule(theModule:aModuleDef);
   HandleStatement(theStatement:aIRStatement);
   AfterHandleStatement(theStatement:aIRStatement);
   HandleOpNode(theOp:aIROpNode);
   AfterHandleOpNode(theOp:aIROpNode);
   HandleMethod(theMethod:aMethodImplem);
   AfterHandleMethod(theMethod:aMethodImplem);
   AnalyseStarted();
   AnalyseFinished();
   Report(InClassOrModule:aModuleDef, InMethod:aMethodImplem, InfoInt:number, InfoString:string);
   Reports(CodeAnalyzerMethodsOcur:aCodeAnalyzerMethodsOcur, InfoString:string);
   ReportsMethods(Methods:aListOfInstances, Count:number, Info:string);
   ReportsClassesOrModules(ClassesOrModules:aListOfInstances, Count:number, Info:string);
   ReportClassOrModule(Count:number, Info:string);
   ReportMethod(Count:number, Info:string);
}
declare class aCARHashTable extends aDataByStringHashTable {
   theRule: string ;
   Init();
   OnExplore();
}
declare class aLocalsCodeAnalyzerRule001Agent extends RuleInCodeAnalyserWithScopeAgent {
   UnusedLocals: string ;
   ReinitedLocals: string ;
   InitedUnusedLocals: string ;
   HandleAbsoluteVarSeparatly: string ;
   UnusedConsts: string ;
   UnusedTypes: string ;
}
declare class aUnusedLocalsCAR extends aCodeAnalyzerRule {
   UnusedLocalsList: string ;
   ReinitedLocalsList: string ;
   InitedUnusedLocalsList: string ;
   UnusedConstsList: string ;
   UsedTypesList: string ;
   UnusedTypesList: string ;
   UnusedTypesListHandled: string ;
   TmpOccur: string ;
   UnusedLocals: string ;
   UnusedConsts: string ;
   UnusedTypes: string ;
   ReinitedLocals: string ;
   InitedUnusedLocals: string ;
   HandleAbsoluteVarSeparately: string ;
   LoopLevel: string ;
   LeftOpNode: string ;
   CurStatement: string ;
   LValue: string ;
   RuleDescription();
   IsVirtualRule();
   AnalyseStarted();
   AnalyseFinished();
   InitHashTables();
   KillHashTables();
   ExploreHashTables();
   HandleType(theType:aType);
   HandleMethod();
   HandleEntity(theEntity:aEntity);
   HandleStatement();
   HandleOpNode();
   AfterHandleStatement();
   AfterHandleOpNode();
   Init();
}
declare class aOpTreeElement extends aLightObject {
   theAny: string ;
   Host: string ;
   Subs: string ;
   HashCode: string ;
   TreeSize: string ;
   Equals(ThisOpTreeElement:aOpTreeElement, Strict:boolean):boolean;
   Init();
   Terminate();
}
declare class aAnyCARClassParam extends aFullObject {
   Name: string ;
   MustAnalyze: string ;
   NbrMax: string ;
   StringExtract();
}
declare class aSearchCAR001Agent extends RuleInCodeAnalyserWithScopeAgent {
   ContainingStaticText: string ;
   ExcludingStaticText: string ;
   ContainComboBox: string ;
   ExcludeComboBox: string ;
   SearchSelect: string ;
   StaticText005: string ;
   SetComboBox(theString:string, theLastStrings:aListOfInstances, theComboBox:aVoidAsXXXAgent);
   ContainComboBox_Executed(SelectedRank:number, Option:number):number;
   ContainComboBox_Selected(SelectedRank:number):number;
   ContainComboBox_Changed():number;
   ContainComboBox_LoseFocus():number;
   ExcludeComboBox_Executed(SelectedRank:number, Option:number):number;
   ExcludeComboBox_Selected(SelectedRank:number):number;
   ExcludeComboBox_Changed():number;
   ExcludeComboBox_LoseFocus():number;
   ContainComboBox_GetChar(:aUIAgent, Ch:number, VKey:string, theCount:number, Flags:string):number;
   ExcludeComboBox_GetChar(:aUIAgent, Ch:number, VKey:string, theCount:number, Flags:string):number;
   NotifyInit();
}
declare class aSearchCAR extends aCodeAnalyzerRule {
   SearchSelect: string ;
   Contain: string ;
   UpContain: string ;
   LastContains: string ;
   Exclude: string ;
   UpExclude: string ;
   LastExcludes: string ;
   ClassesOrModules: string ;
   ClassOrModuleCount: string ;
   ClassOrModuleInfo: string ;
   Methods: string ;
   MethodCount: string ;
   MethodInfo: string ;
   RuleDescription();
   IsVirtualRule();
   InitVars();
   Init();
   InitAfterNewVersion();
   Terminate();
   AnalyseStarted();
   AnalyseFound(Found:string):boolean;
   FoundInCommentOfClassOrModule(theText:string);
   FoundInCommentOfMethod(theText:string);
   FoundAndAppendClassModule(Found:string);
   FoundAndAppendMethod(Found:string);
   InitHashTables();
   KillHashTables();
   ExploreHashTables();
   AfterHandleClass();
   AfterHandleModule();
   AfterHandleMethod();
   HandleStatement();
   HandleOpNode();
}
declare class aCodeAnalyzerLineRole extends aSingleRoleType {
   ConsultThisObject();
}
declare class ClassesToAnalyzeAgent extends aUIAgent {
   AllModules: string ;
   StaticText: string ;
   StaticText001: string ;
   StartClass: string ;
   Classes: string ;
}
declare class aSFVCARRole extends aSingleRoleType {
   IsDroppedObjectUsable();
}
declare class CodeAnalyzerErrorsAgent extends aUIAgent {
   CodeAnalyzerResult: string ;
   StaticText: string ;
}
declare class CodeAnalyzerAutoRunOptionsAgent extends aUIAgent {
   RunCodeAnalyzerWhenSavingClass: string ;
   CodeAnalyzerActions: string ;
   GroupBox: string ;
}
declare class CodeAnalyzerActionsMainAgent extends aUIAgent {
   CodeAnalyzerActions: string ;
   DisplayAutoRunOptions: string ;
}
declare class SkippingPortabilityRuleRuleInCodeAnalyserAgent extends RuleInCodeAnalyserAgent {
   SkipCommented: string ;
}
declare class aPortabilityRule extends aCodeAnalyzerRule {
   SkipCommented: string ;
   SkipTag: string ;
   IsVirtualRule();
   AnalyseStarted();
   Init();
   kindOfVar(varDesc:aVarDesc):string;
}
declare class ClassOrModuleIDEControlerBlockingDefaultAgent extends ClassOrModuleIDEControlerBlockingEmptyAgent {
   CodeAnalyzer: string ;
   CodeAnalyzerErrors: string ;
}
declare class ClassOrModuleIDEControlerBlockingEmptyAgent extends aUIAgent {
}
declare class ClassOrModuleIDEControlerNonBlockingDefaultAgent extends ClassOrModuleIDEControlerNonBlockingEmptyAgent {
   ActionsOnErrors: string ;
   CodeAnalyzer: string ;
   CodeAnalyzerErrors: string ;
   ErrorMessageWhenNonBlocking: string ;
   ErrorMessageWhenNonBlocking001: string ;
   _Result: string ;
}
declare class ClassOrModuleIDEControlerNonBlockingEmptyAgent extends aOpenWhereClosedUIAgent {
}
declare class aClassOrModuleIDEControler extends aEntity {
   CodeAnalyzer: string ;
   ActionsOnErrors: string ;
   GeteWamDefaultCodeAnalyser():aCodeAnalyzer;
   ErrorMessageWhenNonBlocking():string;
   InitCodeAnalyzer();
   RegisterInIDE();
   CheckCodeAnalyzerOnEntity(theEntity:aEntity):boolean;
   HasBlockingCodeAnalyzerErrors():boolean;
   RunCodeAnalyzer(theMMEntity:aEntity, Message:string, MessageDisplayed:boolean, MessageCanBeDisplayed:boolean):boolean;
   RunControlers(theMMEntity:aEntity, Message:string, MessageDisplayed:boolean, MessageCanBeDisplayed:boolean):boolean;
   DisplayOrFocusOnControlerErrors(scen:aScenario):aUIAgent;
   HandleControlerErrors(hasErrors:boolean, theMMEntity:aEntity, Message:string, MessageDisplayed:boolean, MessageCanBeDisplayed:boolean):boolean;
   IsEntityModifiableInIDEExecutionMode(theMMEntity:aEntity, Message:string, MessageDisplayed:boolean, MessageCanBeDisplayed:boolean):boolean;
   CanBeModifiable(theMMEntity:aEntity, Message:string, MessageDisplayed:boolean, MessageCanBeDisplayed:boolean):boolean;
   StringExtract();
}
declare class aWEXIntegBatchLauncherDesc extends aWEXIntegrationStepDescriptor {
}
declare class WEXIntegrationStepCreationForaWEXIntegBreakPointRemoverDescAgen extends WEXIntegrationStepCreationAgent {
}
/**
*This step remove break points.
*/
declare class aWEXIntegBreakPointRemoverDesc extends aWEXIntegrationStepDescriptor {
   NewIntegrationStepExecution():aWEXIntegBreakPointRemoverExec;
}
/**
*This step remove break points
*/
declare class aWEXIntegBreakPointRemoverExec extends aWEXIntegrationStepExecution {
   EntitiesWithStopPoints: string ;
   Execute();
}
declare class WEXIntegrationStepCreationForaWEXIntegCheckConsistencyDescAgent extends WEXIntegrationStepCreationAgent {
   EntitiesToCheck: string ;
}
/**
*This step check consistency of classes/modules.
The user can define the scope with Container, Bundle, etc...
*/
declare class aWEXIntegCheckConsistencyDesc extends aWEXIntegrationStepDescriptor {
   EntitiesToCheck: string ;
   NewIntegrationStepExecution():aWEXIntegCheckConsistencyExec;
}
/**
*This step check consistency of entities.
Inconsistent entities are automatically put in a predifined container.
*/
declare class aWEXIntegCheckConsistencyExec extends aWEXIntegrationStepExecution {
   theConsistencyChecker: string ;
   NotConsistentEntities: string ;
   FillContainer():string;
   GetEntityNameFromCheckerReportLine(Line:string):string;
   AddClassFromName(Name:string);
   ScanConsistencyCheckerReport(ConsistencyCheckerReport:string);
   CanBeAnalyze(theEntity:aEntity):boolean;
   AddEntityToAnalyzeList(TheEntity:aEntity);
   Init();
   FillEntitiesToAnalyze();
   DoCheckConsistency();
   Execute();
}
/**
*This step run code analyzers
*/
declare class aWEXIntegCodeAnalyzerDesc extends aWEXIntegrationStepDescriptor {
   theCodeAnalyzer: string ;
   InitCodeAnalyzerIfNecessary();
   NewIntegrationStepExecution():aWEXIntegCodeAnalyzerExec;
   DoSupportCreateFlagFor();
   GetEntityFromXMLNode();
}
/**
*This step check consistency run code analyzer
*/
declare class aWEXIntegCodeAnalyzerExec extends aWEXIntegrationStepExecution {
   theCodeAnalyzer: string ;
   CodeAnalyzerReport: string ;
   EntitiesToBeChecked: string ;
   GetCodeAnalyzer():aCodeAnalyzer;
   FillContainer():string;
   ScanCodeAnalyzerReport();
   DoCodeAnalyzer();
   Execute();
}
declare class WEXIntegrationCompilationCreationAgent extends WEXIntegrationStepCreationAgent {
   bGenerate: string ;
   bCompile: string ;
   bLink: string ;
   bMultiLang: string ;
   Mode: string ;
   ModeStaticText: string ;
   StaticText: string ;
   StaticText001: string ;
   myGenCppEntities: string ;
   _Result: string ;
   ActionAppendSelectedEntities001: string ;
   _CPPGenerator: string ;
   _CPPGenerator001: string ;
   GenCppEntities001: string ;
   Init();
   ActionAppendSelectedEntities();
   NotifyInit();
}
/**
*This step run compilation
*/
declare class aWEXIntegCompilationDesc extends aWEXIntegrationStepDescriptor {
   myGenCppEntities: string ;
   bGenerate: string ;
   bCompile: string ;
   bLink: string ;
   bMultiLang: string ;
   Mode: string ;
   NewIntegrationStepExecution():aWEXIntegCompilationExec;
   Init();
   MoreInfo();
}
/**
*This step run compilation of selected CPP projects in the Step descriptor
*/
declare class aWEXIntegCompilationExec extends aWEXIntegrationStepExecution {
   theCPPGenerator: string ;
   Init();
   GetCPPContainer():aCPPGenerator;
   FlushReport();
   Execute();
   Terminate();
}
declare class aWEXIntegGroupOfIntegrationSteps extends aWEXIntegrationStepDescriptor {
   SubSteps: string ;
}
declare class aWEXIntegrationMainAgent extends aUIAgent {
   aWEXIntegrationDashBoard: string ;
}
declare class aWEXIntegrationDashBoardAgent extends aSplitViewAgent {
}
declare class WEXIntegrationListOfStepsAgent extends aUIAgent {
   ListOfStepExecutions: string ;
}
declare class aWEXIntegrationReportAgent extends aUIAgent {
   myFullReport: string ;
}
/**
*This is representing the Execution of a Integration Plan
*/
declare class aWEXIntegrationPlanExecution extends aEntity {
   myExecutionPlan: string ;
   ListOfStepExecutions: string ;
   newChangedEntities: string ;
   oldChangedEntities: string ;
   DeletedEntities: string ;
   AddedEntities: string ;
   CurrentIndentationSize: string ;
   myFullReport: string ;
   StandardOutPut: string ;
   WithDashBoard: string ;
   HasToClose: string ;
   myFolder: string ;
   Init();
   Indent();
   UnIndent();
   BuildCurIndentStr(indentStr:string);
   Trace(TraceLine:string);
   TraceStartNoEOL(TraceLine:string);
   TraceNoEOL(TraceLine:string);
   TraceEOL(TraceLine:string);
   TraceText(theText:string);
   BeginTrace(Name:string);
   EndTrace(Name:string);
   MyDateAsString():string;
   WriteSummaryLinefor(myStep:aWEXIntegrationStepExecution, Dest:string);
   GetWorkspaceFolder():string;
   GenerateLogFileReports();
   Execute();
   Run();
   BuildReturnCodefromExecutionSteps(theReturnCode:number);
}
/**
*This is the Entry point for DOS Batch (.bat) programs.
*/
declare class aWEXIntegrationLauncher extends aEntity {
   IntegrationPlanFromName(PlanName:string):aWEXIntegrationPlanDesc;
   ExecutePlanEx(PlanName:string, HastoClose:boolean, withDashBoard:boolean):number;
   ExecutePlan(PlanName:string, HastoClose:boolean):number;
   ExecutePlanFromCommandLine():number;
   ExecutePlanFromXMLFile():number;
   ExecuteOneStepFromXMLFile():number;
}
declare class WEXIntegrationPlanCreationScenAgent extends aUIAgent {
   Name: string ;
   NameStaticText: string ;
   NotifyInit();
}
declare class WEXIntegrationPlanModificationAgent extends aUIAgent {
   Name: string ;
   NameStaticText: string ;
   ListOfSteps: string ;
   ListOfSteps_ItemChecked(Item:number, Checked:boolean):number;
   ListOfSteps_GetSubTree(pTheListOfChildren:string, theListType:aType, theParent:aLightObject):number;
   ListOfSteps_ComputeLine(theComputedLine:string, ObjectIndex:number, theListOfReftos:aListOfInstances):number;
}
declare class WEXIntegrationPlanToolBarAgent extends aToolBarUIAgent {
   SaveSaveAndCloseClose: string ;
}
declare class WEXIntegrationPlanModificationScenAgent extends aOpenWhereClosedUIAgent {
   WEXIntegrationPlanModification: string ;
}
/**
*This si the description of integration plan. An integration plan is composed of Steps.
*/
declare class aWEXIntegrationPlanDesc extends aEntity {
   ListOfSteps: string ;
   EnableStep(curRank:number, Enable:boolean);
   NewIntegrationExecution(fromCommandLine:boolean):aWEXIntegrationPlanExecution;
   CheckConditionsToExecute(errMsg:string):boolean;
   InitStepDescsFromCommandline();
   ExecutePlan(hastoclose:boolean, fromCommandLine:boolean, withDashBoard:boolean):number;
   UpdateListOfSteps();
   PrepareForModification();
   UIModify();
   UIDeclaredRun();
   UIDeclaredClone();
   ActionSaveAndClose();
   IsSystemCloseAccepted();
   FillPossibleStepSubClasses(stepClassDef:aClassDef, inList:aListOfInstances);
   PickAStepClass():aClassDef;
   IsValid();
   LoadPlanFromXML(XMLFilePath:string, onlyThisStepName:string);
   UIDeclaredSaveIntoXML();
}
declare class WEXIntegrationPlanManagementAgent extends aUIAgent {
   Catalog: string ;
}
declare class aWEXIntegrationPlanManagement extends aWexConfMgtTool {
   Catalog: string ;
   StringExtract();
   UIRefresh();
   Init();
}
/**
*

*/
declare class WEXIntegrationStepCreationAgent extends aUIAgent {
   Name: string ;
   NameStaticText: string ;
   StopIfErrors: string ;
   NotifyInit();
}
/**
*Parent Abstract Class for Integration Step descriptors.
*/
declare class aWEXIntegrationStepDescriptor extends aEntity {
   StopIfErrors: string ;
   Skip: string ;
   InitStepExecution(stepExec:aWEXIntegrationStepExecution);
   NewIntegrationStepExecution():aWEXIntegrationStepExecution;
   ConditionsToExecute(errMsg:string):boolean;
   StringExtract();
   InitDefaultName();
   Init();
   IsValid();
   MoreInfo():string;
   ExtractFromListOf(l:string, howLong:number):string;
   InitFromCommandLine();
   DoSupportCreateFlagFor(varname:string):boolean;
   GetEntityFromXMLNode(Node:aXMLNamedNode, isCreateSupported:boolean):aEntity;
   LoadObjectFromXML(StepNode:aXMLNamedNode, curEntity:aEntity);
   SkipVarForXML(thisVarLink:string):boolean;
   SaveObjectToXML(StepNode:aXMLNamedNode, curEntity:aEntity);
}
/**
*Parent abstract class for Step Execution classes.
*/
declare class aWEXIntegrationStepExecution extends aEntity {
   myIntegrationStepDesc: string ;
   StopIfErrors: string ;
   Skip: string ;
   MyStatus: string ;
   MyColors: string ;
   NbErrors: string ;
   NbWarnings: string ;
   BeginDate: string ;
   EndDate: string ;
   TimeTaken: string ;
   MyExecutionLog: string ;
   Init();
   TimeAsHH_MM_SS(t_s:number):string;
   DisplayBeginTime():string;
   DisplayEndTime():string;
   DisplayTimeTaken():string;
   Indent();
   UnIndent();
   BeginTraceStep(theString:string);
   EndStepTrace(theString:string);
   Trace(theString:string);
   TraceStartNoEOL(theString:string);
   TraceNoEOL(theString:string);
   TraceEOL(theString:string);
   TraceText(theText:string);
   ErrorTrace(theString:string, level:number);
   Execute();
   LaunchExecute();
}
declare class aWEXIntegStepDescRole extends aSingleRoleType {
   CreateNewInstance(FromThisObject:aWEXIntegrationPlanDesc):aFullObject;
}
/**
*Step class for synchronisation.
*/
declare class aWEXIntegSynchronisationDesc extends aWEXIntegrationStepDescriptor {
   NewIntegrationStepExecution():aWEXIntegSynchronisationExec;
   ConditionsToExecute();
}
/**
*Step class for synchronisation.
*/
declare class aWEXIntegSynchronisationExec extends aWEXIntegrationStepExecution {
   BeforeSynchAllClasses: string ;
   BeforeSynchAllModules: string ;
   BeforeSynchAllDBDefs: string ;
   BeforeSynchAllGraphs: string ;
   BeforeSynchAllOthers: string ;
   AfterSynchAllClasses: string ;
   AfterSynchAllModules: string ;
   AfterSynchAllDBDefs: string ;
   AfterSynchAllGraphs: string ;
   AfterSynchAllOthers: string ;
   GetListOfFullIdFromListIterator(theIterator:aListIterator, ResultList:aListOfInstances);
   GetAllEntitiesFullID(Before:boolean);
   GetDifferenceBetweenTheseLists(FirstList:aListOfInstances, SecondList:aListOfInstances);
   GetAllEntitiesSynchronized();
   Synchronize();
   Execute();
}
declare module WEXIntegration {
   var CurrentStep: string ;
   var Pause: string ;
   var InteractMode: string ;
   function ExecuteMethod(theClass:string, theMethod:string):number;
   function SetCurrentStepExecution(theExecution:aWEXIntegrationStepExecution);
   function GetPause():boolean;
   function GetIDECPPGenerator():aCPPGenerator;
   function FindIDEEntityFromClassAndName(entityClassDef:aClassDef, entityName:string):aEntity;
   function GetWamContainersCatalog():aWAMContainerCatalog;
   function LoggedUserOwnedThisEntity(thisEntity:aEntity):boolean;
   function CreateOrMakeProjectOfContainer(thisContainerName:string, T:aTransaction):aWAMContainer;
   function SilenciousParamInteract(theScenario:string, ExecMode:string, InModalMode:boolean, UseDefaultScenario:boolean, theFatherUIAgent:string, BuildingKind:string, X:number, Y:number, Width:number, Height:number, BuiltUIAgent:string, theSelf:aLightObject, Result:string, MustSetFocus:boolean):boolean;
   function SetNoInteractMode(interactMode:string):string;
   function GetLoggedUser():aUser;
   function CheckOutEntity(theEntity:aEntity);
   function CheckOutIfNeeded(theEntity:aEntity);
   function GetDBDesigner():aDataBaseDesigner;
   function GenerateScriptHeaderComments(fromGenerator:aEntity, linePrefix:string, scriptFileName:string, scriptName:string, scriptText:string);
   function ExistParam(Name:string):boolean;
   function CurrentDateTimeAsString():string;
   function CreateContainerForIntegration(forStepExec:aWEXIntegrationStepExecution, containerName:string):aWAMContainer;
}
declare class aWEXIntegCodeAnalyzerDescScenAgent extends WEXIntegrationStepCreationAgent {
   theCodeAnalyzer: string ;
   CodeAnalyzerModulesAndRules: string ;
   NotifyInit();
}
/**
*This step class change the default running context in IDE
*/
declare class aWEXIntegDefaultRunningContextExec extends aWEXIntegrationStepExecution {
   Execute();
}
declare class aWEXIntegDefaultRunningContextDesc001Agent extends WEXIntegrationStepCreationAgent {
   TheRunningContext: string ;
   TheRunningContextStaticText: string ;
}
declare class aWEXIntegDefaultRunningContextDesc extends aWEXIntegrationStepDescriptor {
   TheRunningContext: string ;
   NewIntegrationStepExecution():aWEXIntegDefaultRunningContextExec;
   Init();
   MoreInfo();
   IsValid();
   InitFromCommandLine();
   ConditionsToExecute();
}
declare class WEXIntegrationStepCreationForaWEXIntegWaitDescAgent extends WEXIntegrationStepCreationAgent {
   HowLong_ms: string ;
   HowLong_msStaticText: string ;
}
/**
*Step class used to specify a pause (delay in ms).
*/
declare class aWEXIntegWaitDesc extends aWEXIntegrationStepDescriptor {
   HowLong_ms: string ;
   Init();
   NewIntegrationStepExecution():aWEXIntegWaitExec;
   MoreInfo();
   InitFromCommandLine();
}
/**
*Step class used to specify a pause (delay in ms)
*/
declare class aWEXIntegWaitExec extends aWEXIntegrationStepExecution {
   Execute();
}
declare class aWEXIntegPRBUpdateExec extends aWEXIntegrationStepExecution {
   CheckAllClassesAreCheckedOut():boolean;
   Execute();
}
declare class aWEXIntegPRBUpdateDesc2001Agent extends WEXIntegrationStepCreationAgent {
   thePRBProject: string ;
   thePRBProjectStaticText: string ;
   ForceAllClassInPRB: string ;
}
declare class aWEXIntegPRBUpdateDesc extends aWEXIntegrationStepDescriptor {
   thePRBProject: string ;
   ForceAllClassInPRB: string ;
   NewIntegrationStepExecution():aWEXIntegPRBUpdateExec;
   InitFromCommandLine();
   ConditionsToExecute();
   DoSupportCreateFlagFor();
}
declare class aWEXIntegPRBProjectRole extends aSingleRoleType {
   GetAcceptedClassDef();
   InitPickerForSearch();
}
declare class aWexIntegErrorManager extends aErrorManager {
   RTRaiseError();
}
declare class aWEXIntegDBMappingUpdateDesc001Agent extends WEXIntegrationStepCreationAgent {
   theDBDef: string ;
   theDBDefStaticText: string ;
   OutputSqlFileName: string ;
   OutputSqlFileNameStaticText: string ;
}
declare class aWEXIntegDBMappingUpdateDesc extends aWEXIntegrationStepDescriptor {
   theDBDef: string ;
   OutputSqlFileName: string ;
   SetDefaultSqlFileName();
   Init();
   InitFromCommandLine();
   NewIntegrationStepExecution():aWEXIntegDBMappingUpdateExec;
   CheckDBDefKind():boolean;
   ConditionsToExecute();
}
declare class aWEXIntegDBMappingUpdateExec extends aWEXIntegrationStepExecution {
   Execute();
}
declare class aWEXDBSqlExtension extends aDBSqlExtension {
   FindOrCreateUniqueDatabaseDesigner();
   DoYourJob();
}
declare class aWEXIntegrationPlanDescSaveIntoXMLAgent extends aUIAgent {
   XMLFilePath: string ;
   Ok001: string ;
   Cancel001: string ;
   XMLFilePath001: string ;
   StaticText: string ;
   Ok();
   Cancel();
   NotifyInit();
}
declare class WEXIntegrationStepCreationForaWEXIntegExecuteMethodDescAgent extends WEXIntegrationStepCreationAgent {
   theClassName: string ;
   theClassNameStaticText: string ;
   theMethodName: string ;
   theMethodNameStaticText: string ;
}
/**
*FA 24/04/2014 WPR1404014889 Step to execute a GOLD Method
*/
declare class aWEXIntegExecuteMethodDesc extends aWEXIntegrationStepDescriptor {
   theClassName: string ;
   theMethodName: string ;
   NewIntegrationStepExecution():aWEXIntegExecuteMethodExec;
   IsValid();
   ConditionsToExecute();
}
/**
*FA 24/04/2014 WPR1404014889 Step to execute a GOLD Method
*/
declare class aWEXIntegExecuteMethodExec extends aWEXIntegrationStepExecution {
   Execute();
}
/**
*FA 25/04/2014 WPR1405015001 [STEP] Drop then create default tables in a Database
Drop then create default tables in a DataBase
*/
declare class aWEXIntegRecreateDBDesc extends aWEXIntegrationStepDescriptor {
   theDBDef: string ;
   NewIntegrationStepExecution():aWEXIntegRecreateDBExec;
   Init();
   MoreInfo();
   IsValid();
   InitFromCommandLine();
   ConditionsToExecute();
}
/**
*FA 25/04/2014 WPR1405015001 [STEP] Drop then create default tables in a Database
*/
declare class aWEXIntegRecreateDBExec extends aWEXIntegrationStepExecution {
   Execute();
}
declare class aWEXIntegCreateContainerFromBundlesDesc001Agent extends aUIAgent {
   ContainerName: string ;
   ContainerNameStaticText: string ;
   TheListOfBundles: string ;
   TheListOfBundlesGroupBox: string ;
}
declare class aWEXIntegCreateContainerFromBundlesDesc extends aWEXIntegrationStepDescriptor {
   ContainerName: string ;
   TheListOfBundles: string ;
   NewIntegrationStepExecution():aWEXIntegCreateContainerFromBundlesExec;
   DoSupportCreateFlagFor();
   InitBundleReferenceFromExistingBundles(BundleRef:aDeliveriesBundleReference, BundleName:string);
   GetEntityFromXMLNode(Node:aXMLNamedNode, isCreateSupported:boolean):aDeliveriesBundleReference;
}
declare class aWEXIntegCreateContainerFromBundlesExec extends aWEXIntegrationStepExecution {
   CreateContainerFromBundles():boolean;
   Execute();
}
declare class aWEXIntegCreateCppProjectFromContainersDesc extends aWEXIntegrationStepDescriptor {
   CPPProjectName: string ;
   TheListOfContainers: string ;
   TheListOfDBDefs: string ;
   NewIntegrationStepExecution():aWEXIntegCreateCppProjectFromContainersExec;
}
declare class aWEXIntegCreateCppProjectFromContainersExec extends aWEXIntegrationStepExecution {
   CreateCPPProjectFromContainers():boolean;
   Execute();
}
declare class WEXIntegrationStepCreationForaWEXIntegExecuteSQLScriptDescAgent extends WEXIntegrationStepCreationAgent {
   theDBDef: string ;
   theDBDefStaticText: string ;
   ScriptToExecute: string ;
   StaticText: string ;
   RunTimeScriptStaticText: string ;
}
/**
*FA 25/04/2014 WPR1405015002 [STEP] Step to execute a SQL Script from a SQL Script file
This step execute a SQL Script from a SQL Script file
or from a DataBase
*/
declare class aWEXIntegExecuteSQLScriptDesc extends aWEXIntegrationStepDescriptor {
   theDBDef: string ;
   ScriptToExecute: string ;
   NewIntegrationStepExecution():aWEXIntegExecuteSQLScriptExec;
   MoreInfo();
   IsValid();
   InitFromCommandLine();
   ConditionsToExecute();
}
/**
*FA 25/04/2014 WPR1405015002 [STEP] Step to execute a SQL Script from a SQL Script file
This step execute a SQL Script from a SQL Script file
or from a DataBase
*/
declare class aWEXIntegExecuteSQLScriptExec extends aWEXIntegrationStepExecution {
   Execute();
}
declare class WEXIntegrationStepCreationForaWEXIntegEntitiesInBundleReportDes extends WEXIntegrationStepCreationAgent {
   CheckReimplems: string ;
   CheckPRBClasses: string ;
   TraceAll: string ;
}
declare class aWEXIntegEntitiesInBundleReportDesc extends aWEXIntegrationStepDescriptor {
   CheckReimplems: string ;
   CheckPRBClasses: string ;
   TraceAll: string ;
   NewIntegrationStepExecution():aWEXIntegEntitiesInBundleReportExec;
}
declare class aWEXIntegEntitiesInBundleReportExec extends aWEXIntegrationStepExecution {
   FindEntityInDeliveriesBundle(thisDelBundle:aDeliveriesBundle, Entity:aEntity, CandidateRank:number):number;
   CheckIsInBundle(thisEntity:aEntity);
   IsReimplem(curClassOrModule:aFullObject):boolean;
   IsPRBClass(curClassOrModule:aFullObject):boolean;
   IsToBeChecked(thisEntity:aFullObject):boolean;
   Execute();
}
declare class WEXIntegrationStepCreationForaWEXIntegCreateContainerFromNameFi extends WEXIntegrationStepCreationAgent {
   ContainerName: string ;
   ContainerNameStaticText: string ;
   MMBrowser: string ;
   newSelectionMMBrowser: string ;
   StaticText: string ;
   MaxCountInFoundEntities: string ;
   MaxCountInFoundEntitiesStaticText: string ;
   FilterName: string ;
   PurgeContentFirst: string ;
   NotifyInit();
   FilterName_ValueStored(:aUIAgent);
   newSelectionMMBrowser_Init(:aUIAgent):number;
}
declare class aWEXIntegCreateContainerFromNameFilterDesc extends aWEXIntegrationStepDescriptor {
   ContainerName: string ;
   PurgeContentFirst: string ;
   FilterName: string ;
   MMBrowser: string ;
   Init();
   InitMMBrowserIfNeeded();
   NewIntegrationStepExecution():aWEXIntegCreateContainerFromNameFilterExec;
   DoSupportCreateFlagFor();
   IsValid();
}
declare class aWEXIntegCreateContainerFromNameFilterExec extends aWEXIntegrationStepExecution {
   CreateContainerFromMMBrowser();
   Execute();
}
declare class aWT_CStringByCStringHashMap extends aWT_PointerByCStringHashMap {
   KeyIndex: string ;
   NewHashTable():aStringByStringHashTable;
   AppendKeyCString(Key:string, Value:string);
   PrependKeyCString(Key:string, Value:string);
   GetCStringByKey(Key:string):string;
   GetFirstKeyByCString(Value:string):string;
   ChangeKey(OldKey:string, NewKey:string);
   GetNextKeyByCString(Value:string):string;
   ResetKeyIndex();
   OverrideWith(This:aWT_CStringByCStringHashMap);
}
declare class aWT_PointerByCStringHashMap extends aWT_ListOfCString {
   HashTable: string ;
   NewHashTable():aDataByStringHashTable;
   Init();
   ExistKey(Key:string):boolean;
   RemoveKey(Key:string);
   AppendKeyPointer(Key:string, Data:string);
   GetPointerByKey(Key:string):string;
   purge();
   GetKeyAt(Rank:number):string;
   Terminate();
   OverrideWith(This:aWT_PointerByCStringHashMap);
}
declare class aWT_ListOfCString extends aListOfInstances {
   Init();
   ExistCString(myCString:string):boolean;
   GetIndexOf(myCString:string):number;
   AppendCString(myCString:string);
   PrependCString(myCString:string);
   SetCStringAt(myCString:string, Rank:number);
   RemoveCString(myCString:string);
   GetCStringAt(Rank:number):string;
   PrependReplaceCString(myCString:string);
   AppendReplaceCString(myCString:string);
   AppendInexistingCString(myCString:string);
   ReplaceCString(ThisCString:string, ByThisCString:string):boolean;
   PrependInexistingCString(myCString:string);
   ContainsCString(myCString:string):boolean;
   StringExtract();
}
declare class aWT_TypeExtension extends aLightObject {
   EntityExtensionPrefixes: string ;
   _ExtensionByNameHashMap: string ;
   _ExtensionByObjHashMap: string ;
   GetVarAddress(TheVarAddress:string, theIdentifierDesc:aIdentifierDesc, VarType:aType):string;
   GetVarType(TheVarAddress:string, theIdentifierDesc:aIdentifierDesc, VarType:aType):aType;
   GetRealType(VarType:aType, VarAddress:string):aType;
   _InitEntityExtensionPrefixes();
   PurgeAndKill(theVar:string, VarType:aType);
   HasIdentifier(VarType:aType, Identifier:aIdentifierDesc):boolean;
   Compare(theVarAddr1:string, VarType1:aType, theVarAddr2:string, VarType2:aType):number;
   AsJsonValue(theVar:string, VarType:aType):aWT_JsonText;
   Init();
   Terminate();
   _LaunchUnitTestFor(RootClassdef:aClassDef);
   _LaunchAllUnitTest();
   _FixInsertedClone(CloneOfThis:string, theSequence:string, theSequenceType:aSequenceType, atRank:number);
   _GetEntityExtensionFrom(thisEntity:aEntity):aWT_TypeExtension;
   _GetExtendedEntityFromEntityName(EntityName:string):aWT_TypeExtension;
   _GetExtendedEntityFromMMEntity(thisEntity:aEntity):aWT_TypeExtension;
   help_GetExtendedEntityFromMMEntity();
   GetJsonValueOf(theVar:string, VarType:aType):aWT_JsonValue;
   _Clone(VarAddrCloned:string, VarAddrOriginal:string, varType:aType, CloneMode:string);
   CloneVar(ClonedVar:string, FromThisVar:string, varType:aType);
   CloneDeep(ClonedVar:string, FromThisVar:string, varType:aType);
   helpCloneVar();
   _FixKillVarInSequence(This:string, varType:aType);
   _WriteIndent(indent:number, output:string);
   WriteDebug(theVar:string, varType:aType, indent:number, output:string);
   AsText(Outtext:string, VarType:aType, VarAddress:string);
   ConvertFromText(InText:string, vartype:aType, VarAddress:string):boolean;
   ConvertFromJson(JsonObj:aWT_JsonObj, vartype:aType, varaddress:string):boolean;
   IsClassDef():boolean;
   IsRecord():boolean;
   IsReftoType():boolean;
   IsListOfType():boolean;
   IsListOfReftosType():boolean;
   GetMetaModelSubNodes(Node:aWT_MMNode):string;
   GetMetaModelSubNodesUnder(Node:aWT_MMNode, RecordDesc:aRecordDesc):string;
   IsCollection():boolean;
   IsArray():boolean;
   _InternalAsJsonSchema(VarType:aType, Vardesc:aVarDesc, Definitions:string, DefinitionsType:aSequenceType, AddToDef:boolean):aWT_JsonCollection;
   AsJsonSchema(VarType:aType, VarDesc:aVarDesc):aWT_JsonCollection;
   MallocVarAddressNode(NewNode:aWT_MMNode, VarType:aType, JsonValue:aWT_JsonValue):boolean;
   MallocSubNode(NewSubNode:aWT_MMNode, FromNode:aWT_MMNode, JsonValue:aWT_JsonValue):boolean;
   GetMetaModelSubNodesFromData(Node:aWT_MMNode, Data:aWT_DataStruct):string;
   GetMetaModelSubNodesFromDataUntil(Node:aWT_MMNode, Data:aWT_DataStruct, SerializeVarsUntil:aRecordDesc):string;
   LoadVar(FromThisObject:aFullObject, VarAddress:string, VarType:aType, NbMaxToLoad:number):number;
   GetCandidatesAsJson(VarType:aType):aWT_JsonArray;
}
declare class aWT_ArrayTypeExtension extends aWT_TypeExtension {
   IsListOfType();
   IsArray();
   _InternalAsJsonSchema(VarType:aArrayType, Vardesc:aVarDesc, Definitions:string, DefinitionsType:aSequenceType, AddToDef:boolean):aWT_JsonCollection;
   GetMetaModelSubNodes();
   ConvertFromText();
   AsJsonValue(theVar:string, VarType:aType):aWT_JsonArray;
}
declare class aWT_SequenceTypeExtension extends aWT_ArrayTypeExtension {
   DeleteAt(Rank:number, KillItem:boolean, theSequence:string, theSequenceType:aSequenceType);
   _CallCustomCompare(pItem1:string, pItem2:string, itemType:aType, CompareFunction:aMethodDesc, CompareFunctionInstance:aLightObject):number;
   ElementAddressAt(pOutput:string, theSequence:string, theSequenceType:aSequenceType, rank:number);
   Len(theSequence:string):number;
   AsJsonValue(theVar:string, VarType:aSequenceType):aWT_JsonArray;
   Purge(theSequence:string);
   PurgeAndKill(theVar:string, VarType:aSequenceType);
   helpPurgeAndKill();
   Slice(Output:string, Input:string, theSequenceType:aSequenceType, Start:number, Len:number);
   helpSlice();
   Reverse(Output:string, Input:string, theSequenceType:aSequenceType);
   helpReverse();
   Shift(Output:string, Input:string, theSequenceType:aSequenceType):boolean;
   helpShift();
   Pop(Output:string, Input:string, theSequenceType:aSequenceType):boolean;
   helpPop();
   InsertAt(This:string, atRank:number, InSequence:string, theSequenceType:aSequenceType);
   Append(This:string, InSequence:string, theSequenceType:aSequenceType);
   helpAppend();
   Prepend(This:string, InSequence:string, theSequenceType:aSequenceType);
   helpPrepend();
   Merge(Output:string, Input:string, theSequenceType:aSequenceType);
   helpMerge();
   Intersect(Output:string, Input1:string, Input2:string, theSequenceType:aSequenceType);
   helpIntersect();
   IntersectUsingCustomCompare(Output:string, Input1:string, Input2:string, theSequenceType:aSequenceType, CompareFunction:aMethodDesc, CompareFunctionInstance:aLightObject);
   Replace(This:string, ByThis:string, InSequence:string, theSequenceType:aSequenceType);
   helpReplace();
   ReplaceUsingCustomCompare(This:string, ByThis:string, InSequence:string, theSequenceType:aSequenceType, CompareFunction:aMethodDesc, CompareFunctionInstance:aLightObject);
   Search(This:string, InSequence:string, theSequenceType:aSequenceType):number;
   helpSearch();
   SearchUsingCustomCompare(This:string, InSequence:string, theSequenceType:aSequenceType, CompareFunction:aMethodDesc, CompareFunctionInstance:aLightObject):number;
   Exists(This:string, InSequence:string, theSequenceType:aSequenceType):boolean;
   ExistsUsingCustomCompare(This:string, InSequence:string, theSequenceType:aSequenceType, CompareFunction:aMethodDesc, CompareFunctionInstance:aLightObject):boolean;
   Pad(theSequence:string, theSequenceType:aSequenceType, PadLength:number, Value:string);
   helpPad();
   Unique(theSequence:string, theSequenceType:aSequenceType, mode:string);
   helpUnique();
   UniqueUsingCustomCompare(theSequence:string, theSequenceType:aSequenceType, mode:string, CompareFunction:aMethodDesc, CompareFunctionInstance:aLightObject);
   _testCompareFunction(var1:aVarDesc, var2:aVarDesc):number;
   helpUniqueUsingCompareFunction();
   Sort(theSequence:string, theSequenceType:aSequenceType);
   helpSort();
   SortUsingCustomCompare(theSequence:string, theSequenceType:aSequenceType, CompareFunction:aMethodDesc, CompareFunctionInstance:aLightObject);
   helpSortUsingCustomCompare();
   Minus(thisSequence:string, MinusThisSequence:string, theSequenceType:aSequenceType, mode:string);
   helpMinus();
   MinusUsingCustomCompare(thisSequence:string, MinusThisSequence:string, theSequenceType:aSequenceType, mode:string, CompareFunction:aMethodDesc, CompareFunctionInstance:aLightObject);
   _Clone(VarAddrCloned:string, VarAddrOriginal:string, varType:aSequenceType, CloneMode:string);
   WriteDebug(theVar:string, varType:aSequenceType, indent:number, output:string);
   MallocVarAddressNode(NewNode:aWT_MMNode, VarType:aSequenceType, JsonValue:aWT_JsonValue):boolean;
   MallocSubNode();
   GetMetaModelSubNodesFromData();
   GetMetaModelSubNodes();
   ConvertFromText();
}
declare class aWT_StrTypeExtension extends aWT_TypeExtension {
   _InternalAsJsonSchema();
}
declare class aWT_TextTypeExtension extends aWT_StrTypeExtension {
   HasDecoration(Decoration:string, Input:string):boolean;
   GetDecorationInfo(Prefix:string, Output:string, Input:string):boolean;
   helpExtractInfoFromText();
   AsJsonValue();
   md5(Input:string):string;
   helpMd5();
   ExpandTextBuffer(TheText:string, ExpandBy:number);
   AsTpCString(output:string, theInputText:string):number;
   Len(theText:string):number;
   SubStr(Output:string, Input:string, Start:number, Len:number);
   helpSubstr();
   SubCStr(Input:string, Start:number, Len:number):string;
   SubCString(Output:string, Delimiter:string, Input:string);
   helpSubCString();
   SubCStringCount(CountThis:string, InTheText:string):number;
   helpSubCStringCount();
   SearchCStringCI(SearchThis:string, InThisText:string, FromPos:number):number;
   SearchCString(SearchThis:string, InThisText:string, FromPos:number):number;
   helpSearchCString();
   SearchText(SearchThis:string, InThisText:string, FromPos:number):number;
   helpSearchText();
   SearchTextCI(SearchThis:string, InThisText:string, FromPos:number):number;
   Explode(Input:string, delimiter:string, limit:number):string;
   helpExplode();
   Implode(Output:string, delimiter:string, TextSequence:string);
   helpImplode();
   ltrimCars(theText:string, cars:string);
   ltrim(theText:string);
   helpLtrim();
   rtrimCars(theText:string, cars:string);
   rtrim(theText:string);
   helpRtrim();
   trim(theText:string);
   ReplaceCString(This:string, ByThis:string, InText:string, limit:number);
   helpReplaceCString();
   ReplaceText(This:string, ByThis:string, inText:string, limit:number);
   helpReplaceText();
   pad(theText:string, PadLength:number, PadChar:number);
   helpPad();
   LowerCase(Output:string, Input:string);
   helpLowerCase();
   UpperCase(Output:string, Input:string);
   helpUpperCase();
   UpperCaseFirstChar(theText:string);
   helpUpperCaseFirstChar();
   LowerCaseFirstChar(theText:string);
   helpLowerCaseFirstChar();
   UpperCaseWords(theText:string);
   helpUpperCaseWords();
   LowerCaseWords(theText:string);
   helpLowerCaseWords();
   chrbrk(Input:string, FoundChar:string, chars:string, FromPos:number):number;
   helpChrbrk();
   Reverse(Output:string, Input:string);
   helpReverse();
   Split(theText:string, splitLength:number):string;
   helpSplit();
   _FixInsertedClone();
   UnicodeToAnsi(inText:string);
   AnsiToUnicode(inText:string);
   _Clone(VarAddrCloned:string, VarAddrOriginal:string, varType:aTextType, CloneMode:string);
   WriteDebug();
   AsText();
   ConvertFromText(InText:string, vartype:aTextType, VarAddress:string):boolean;
   MallocVarAddressNode();
   PurgeAndKill(theVar:string, VarType:aTextType);
   EncodeAsJsonText(thisText:string);
   DecodeFromJsonText(thisJsonText:string);
   CompareCI(t1:string, t2:string):number;
}
declare class aWT_CStringTypeExtension extends aWT_StrTypeExtension {
   OnlyThoseChars(theCString:string, theChars:string):boolean;
   UnicodeToAnsi(ToConvert:string):string;
   AnsiToUnicode(ToConvert:string):string;
   AsJsonValue();
   md5(Input:string):string;
   helpMd5();
   SubStr(Input:string, Start:number, Len:number):string;
   helpSubStr();
   SubCString(Separator:string, EndString:string):string;
   helpSubCString();
   SubCStringCount(CountThis:string, InThis:string):number;
   helpSubCStringCount();
   SearchCStringCI(SearchThis:string, InThisCString:string, FromPos:number):number;
   SearchCString(SearchThis:string, InThisCString:string, FromPos:number):number;
   helpSearchCString();
   Pos(SearchThis:string, InThisCString:string, FromPos:number):number;
   Contains(SearchThis:string, InThisCString:string):boolean;
   Explode(Input:string, delimiter:string, limit:number):string;
   helpExplode();
   Implode(delimiter:string, CStringSequence:string):string;
   helpImplode();
   ltrimCars(theCString:string, cars:string):string;
   ltrim(theCString:string):string;
   helpLtrim();
   rtrimCars(theCString:string, cars:string):string;
   rtrim(theCString:string):string;
   helpRtrim();
   trim(Input:string):string;
   trimCars(Input:string, cars:string):string;
   ReplaceCString(This:string, ByThis:string, inCString:string, limit:number):string;
   helpReplaceCString();
   pad(Input:string, PadLength:number, PadChar:number):string;
   helpPad();
   LowerCase(Input:string):string;
   helpLowerCase();
   UpperCase(Input:string):string;
   helpUpperCase();
   UpperCaseFirstChar(Input:string):string;
   helpUpperCaseFirstChar();
   LowerCaseFirstChar(Input:string):string;
   helpLowerCaseFirstChar();
   UpperCaseWords(Input:string):string;
   helpUpperCaseWords();
   LowerCaseWords(Input:string):string;
   helpLowerCaseWords();
   Reverse(Input:string):string;
   helpReverse();
   Split(Input:string, splitLength:number):string;
   helpSplit();
   PatternMatch(inCString:string, Pattern:string, CaseSensitive:boolean):boolean;
   helpPatternMatch();
   PatternReplace(inCString:string, PatternSource:string, PatternTarget:string, CaseSensitive:boolean):string;
   helpPatternReplace();
   AsText(Outtext:string, VarType:aType, VarAddress:string);
   ConvertFromJson(JsonObj:aWT_JsonObj, vartype:aType, varaddress:string):boolean;
   MallocVarAddressNode();
   ConvertFromText(InText:string, vartype:aType, VarAddress:string):boolean;
   PurgeAndKill(theVar:string, VarType:aCStringType);
   _InternalAsJsonSchema(VarType:aCStringType, Vardesc:aVarDesc, Definitions:string, DefinitionsType:aSequenceType, AddToDef:boolean):aWT_JsonCollection;
   EncodeAsJsonCString(thisCString:string):string;
   DecodeFromJsonCString(thisJsonCString:string):string;
}
declare class aWT_HtmlTextTypeExtension extends aWT_TextTypeExtension {
   _HtmlEntitiesFullTable: string ;
   _UriFullTable: string ;
   _ReverseUriFullTable: string ;
   _InitHtmlEntitiesFullTable();
   _InitUriFullTable();
   _InitReverseUriFullTable();
   Terminate();
   HtmlEntities(inText:string);
   UriEncode(inText:string);
   UriDecode(inText:string);
   testUriDecode2();
   helpHtmlEntities();
   ParseUrl(UrlInfo:string, Url:string):boolean;
   helpParseUrl();
   ExplodePattern(Pattern:string):string;
   GenerateFromPattern(Pattern:string, Parameters:string, Result:string);
   helpGenerateFromPattern();
   helpExplodePattern();
   ExtendBaseUrlFromPattern(BaseUrl:string, Url:string, Pattern:string);
   helpExtendBaseUrlFromPattern();
   ConcatBaseUrlWithPattern(BaseUrl:string, Url:string, Pattern:string);
   helpConcatBaseUrlWithPattern();
   CanProcessUrl(Url:string, Pattern:string, Parameters:string):boolean;
   helpCanProcessUrl();
   PatternLen(Pattern:string):number;
   IsValidURL(URL:string):boolean;
}
declare class aWT_HtmlCStringTypeExtension extends aWT_CStringTypeExtension {
   HtmlEntities(ConvertThis:string):string;
   UriEncode(Input:string):string;
   UriDecode(Input:string):string;
}
declare class aWT_RecordDescExtension extends aWT_TypeExtension {
   IsCollection();
   HasIdentifier(VarType:aRecordDesc, Identifier:aIdentifierDesc):boolean;
   IsInternalVariable(TheVar:aIdentifierDesc):boolean;
   GetPublishedVarsOf(RecordDesc:aRecordDesc):string;
   GetPublishedVarsUnder(RecordDesc:aRecordDesc, UntilEntity:aEntity):string;
   GetVarsOf(RecordDesc:aRecordDesc):string;
   GetVarsUnder(RecordDesc:aRecordDesc, UntilEntity:aEntity):string;
   _InternalAsJsonSchema(VarType:aRecordDesc, Vardesc:aVarDesc, Definitions:string, DefinitionsType:aSequenceType, AddToDef:boolean):aWT_JsonCollection;
   AsJsonValue(theVar:string, VarType:aRecordDesc):aWT_JsonCollection;
   Compare(theVarAddr1:string, VarType1:aRecordDesc, theVarAddr2:string, VarType2:aRecordDesc):number;
   _Clone(VarAddrCloned:string, VarAddrOriginal:string, varType:aRecordDesc, CloneMode:string);
   WriteDebug(theVar:string, varType:aRecordDesc, indent:number, output:string);
   _FixInsertedClone();
   GetMetaModelSubNodesFromVars(Node:aWT_MMNode, Vars:string):string;
   GetMetaModelSubNodes();
   GetMetaModelSubNodesUnder();
   GetMetaModelSubNodesFromData();
   GetMetaModelSubNodesFromDataUntil();
   ConvertFromText();
   PurgeAndKill(theVar:string, VarType:aRecordDesc);
   GetCandidatesAsJson(VarType:aClassDef):aWT_JsonCollection;
   IsRecord();
}
declare class aWT_ClassDefExtension extends aWT_RecordDescExtension {
   GetVarAddress(TheVarAddress:string, theIdentifierDesc:aIdentifierDesc, VarType:aClassDef):string;
   GetVarType(TheVarAddress:string, theIdentifierDesc:aIdentifierDesc, VarType:aClassDef):aType;
   GetRealType(VarType:aClassDef, VarAddress:string):aClassDef;
   _GetEntityExtensionFrom();
   GetDecorationInfo(Decoration:string, Method:aMethodDesc):string;
   HasDecoration(Decoration:string, Method:aMethodDesc):boolean;
   HasVar(VarType:aClassDef, Identifier:aIdentifierDesc):boolean;
   HasMethod(ClassDef:aClassDef, Method:aMethodDesc):boolean;
   HasIdentifier(VarType:aClassDef, Identifier:aIdentifierDesc):boolean;
   GetMethodsOf(ClassDef:aClassDef):string;
   _Clone(VarAddrCloned:string, VarAddrOriginal:string, varType:aClassDef, CloneMode:string);
   AsJsonValue(theVar:string, VarType:aClassDef):aWT_JsonCollection;
   WriteDebug(theVar:string, varType:aClassDef, indent:number, output:string);
   _FixKillVarInSequence();
   GetMetaModelSubNodes();
   GetMetaModelSubNodesUnder();
   IsClassDef();
   _GetClassNameFromJson(JsonValue:aWT_JsonValue):string;
   MallocVarAddressNode(NewNode:aWT_MMNode, VarType:aRecordDesc, JsonValue:aWT_JsonValue):boolean;
   GetMetaModelSubNodesFromData();
   GetMetaModelSubNodesFromDataUntil();
   IsMetamodelEntity(thisObj:aLightObject):boolean;
   ConvertFromJson();
   _FixInsertedClone();
   PurgeAndKill(theVar:aLightObject, VarType:aType);
   ConvertFromText();
}
declare class aWT_ObjectByCStringHashMap extends aWT_PointerByCStringHashMap {
   Garbageables: string ;
   NewGarbageables():aListOfInstances;
   IsGarbageable(Instance:aLightObject):boolean;
   Init();
   GetObjectByKey(Key:string):aLightObject;
   PrependKeyObject(Key:string, Object:aLightObject, Garbageable:boolean);
   AppendKeyObject(Key:string, Object:aLightObject, Garbageable:boolean);
   RemoveKey();
   purge();
   Terminate();
   GetObjectAt();
   purgeAndKillInstances();
}
declare class aWT_HashMapByObject extends aWT_ListOfObjects {
   HashTable: string ;
   NewHashTable():aHashTable;
   Init();
   purge();
   GetKeyAt(Rank:number):string;
   Terminate();
   OverrideWith(This:aWT_HashMapByObject);
}
declare class aWT_ListOfObjects extends aWT_ListOfPointers {
   Garbageable: string ;
   NewGarbageable():aListOfInstances;
   Init();
   IsGarbageable(Instance:aLightObject):boolean;
   PrependObject(object:aLightObject);
   AppendGarbageableObject(Object:aLightObject);
   PrependGarbageableObject(Object:aLightObject);
   AppendInexistingGarbageableObject(Object:aLightObject);
   PrependInexistingGarbageableObject(Object:aLightObject);
   ChangeGarbageableStatusOf(Object:aLightObject, Garbageable:boolean);
   InsertGarbageableObjectAt(Object:aLightObject, Garbageable:boolean, Rank:number);
   AppendInstance(Object:aLightObject, Garbageable:boolean);
   purge();
   Terminate();
   deleteAt();
   RemoveObject();
   purgeAndKillInstances();
   DeleteObjectAt();
   IntersectWith(List:aWT_ListOfObjects);
   Minus(List:aWT_ListOfObjects);
   FillFromSequence(UnboundedSequenceOfInstances:string, Garbageable:boolean);
   SetGarbageableObjectAt(Object:aLightObject, Garbageable:boolean, rank:number);
   UnsetGarbageable(thisObject:aLightObject);
   SetGarbageable(thisObject:aLightObject);
   MoveObjectAtRank(MoveThisObject:aLightObject, AtThisRank:number);
   StringExtract();
   GetObjectAt();
}
declare class aWT_ListOfPointers extends aListOfInstances {
   Done();
   PositionOf(This:string):number;
   Prepend(Thing:string);
}
declare class aWT_IntByCStringHashMap extends aWT_PointerByCStringHashMap {
   PrependKeyInt(Key:string, Integer:number);
   AppendKeyInt(Key:string, Integer:number);
   GetIntByKey(Key:string):number;
   OverrideWith(This:aWT_IntByCStringHashMap);
}
declare class aWT_IntByObjectHashMap extends aWT_HashMapByObject {
   NewHashTable():aDataByObjectHashTable;
   GetIntByKey(Key:aLightObject):number;
   AppendKeyInt(Key:aLightObject, KeyGarbageable:boolean, Data:number);
   OverrideWith(This:aWT_IntByObjectHashMap);
}
declare class aWT_PointerByObjectHashMap extends aWT_HashMapByObject {
   NewHashTable():aDataByObjectHashTable;
   ExistKey(Key:aLightObject):boolean;
   GetPointerByKey(Key:aLightObject):string;
   RemoveObject();
   RemoveKey(Key:aLightObject);
   purge();
   AppendKeyPointer(Key:aLightObject, KeyGarbageable:boolean, Data:string);
   InsertKeyPointerAtRank(Key:aLightObject, KeyGarbageable:boolean, Data:string, Rank:number);
   OverrideWith(This:aWT_PointerByObjectHashMap);
}
declare class aWT_ObjectByObjectHashMap extends aWT_PointerByObjectHashMap {
   GetObjectByKey(Key:aLightObject):aLightObject;
   RemoveObject();
   AppendDataAndPrepareKey(Key:aLightObject, KeyGarbageable:boolean, Data:aLightObject, DataGarbageable:boolean):boolean;
   AppendKeyObject(Key:aLightObject, KeyGarbageable:boolean, Data:aLightObject, DataGarbageable:boolean);
   PrependKeyObject(Key:aLightObject, KeyGarbageable:boolean, Data:aLightObject, DataGarbageable:boolean);
   InsertKeyObjectAtRank(Key:aLightObject, KeyGarbageable:boolean, Data:aLightObject, DataGarbageable:boolean, Rank:number);
   purgeAndKillInstances();
   OverrideWith(This:aWT_ObjectByObjectHashMap);
}
declare class aWT_TextByCStringHashMap extends aWT_PointerByCStringHashMap {
   BlankTextByKey(Key:string);
   PrependKeyText(Key:string, theText:string);
   AppendKeyText(Key:string, theText:string);
   GetTextByKey(Key:string, OutText:string);
   RemoveKey();
   purge();
   Terminate();
}
declare module lib {
   var _SingletonHashMap: string ;
   var _TextType: string ;
   var _RecordDesc: string ;
   var _PointerType: string ;
   var _SequenceType: string ;
   var _CStringType: string ;
   var _Timestamp: string ;
   var _HtmlText: string ;
   var _TypeExt: string ;
   var _HtmlCString: string ;
   var _RefToType: string ;
   var _IntType: string ;
   var _ReversIntType: string ;
   var _EnumType: string ;
   var _NumType: string ;
   var _ClassDef: string ;
   var _ListofReftosType: string ;
   var _http: string ;
   var _MethodType: string ;
   var _Config: string ;
   function GetSingletonByClassname(Classname:string):aLightObject;
   function GetSingletonByClassdef(Classdef:aClassDef):aLightObject;
   function TextType():aWT_TextTypeExtension;
   function RecordDesc():aWT_RecordDescExtension;
   function PointerType():aWT_PointerTypeExtension;
   function SequenceType():aWT_SequenceTypeExtension;
   function CStringType():aWT_CStringTypeExtension;
   function Timestamp():aWT_TimestampTypeExtension;
   function UnitTest():aWT_UnitTest;
   function HtmlText():aWT_HtmlTextTypeExtension;
   function TypeExt():aWT_TypeExtension;
   function HtmlCString():aWT_HtmlCStringTypeExtension;
   function RefToType():aWT_RefToTypeExtension;
   function IntType():aWT_IntTypeExtension;
   function ReversIntType():aWT_ReversIntTypeExtension;
   function EnumType():aWT_EnumTypeExtension;
   function NumType():aWT_NumTypeExtension;
   function ClassDef():aWT_ClassDefExtension;
   function ListofReftosType():aWT_ListofReftosTypeExtension;
   function http():aWT_HttpModule;
   function MethodType():aWT_MethodTypeExtension;
   function Obj():aWT_ObjectModule;
   function _NoParamInteract(theScenario:string, ExecMode:string, InModalMode:boolean, UseDefaultScenario:boolean, theFatherUIAgent:string, BuildingKind:string, X:number, Y:number, Width:number, Height:number, BuiltUIAgent:string, theSelf:aLightObject, Result:string, MustSetFocus:boolean):boolean;
   function Config():aWT_Config;
   function SetNoInteract();
   function GetExtendedType(FromType:aType):aWT_TypeExtension;
   function ConsistencyCheckTransation(T:aTransaction, theRTFText:string):boolean;
   function CallWithMyStackEx_P(ProcAddr:string, myStack:string, StackSize:number, ReturnSize:number, MethodType:aMethodType):string;
   function GlobalClassesVersion():number;
}
declare class aWT_HttpRoot extends aLightObject {
}
declare class aWT_HttpInterface extends aWT_HttpRoot {
   MessageFromInterfaceErrorCode(InterfaceErrorCode:number):string;
   MessageFromStatusCode(StatusCode:string):string;
   GetHeaders(Headers:string, hRequest:string):string;
   GetBody(Body:string, hRequest:string):string;
   GetLastError():string;
   HttpAddRequestHeader(hRequest:string, HeaderString:string):string;
   HttpOpenRequest(Result:string, hConnect:string, RequestInfo:string, Context:number):string;
   HttpHeaderQueryInfo(hRequest:string, InfoLevel:number, Buffer:string, BufferType:aType, Index:number):string;
   HttpSendRequest(hRequest:string, Headers:string, Optional:string):string;
   CloseHandle(hInternet:string):string;
   CombineURL(BaseURL:string, RelativeURL:string, CombinedURL:string, Flags:number):string;
   HttpConnect(Result:string, hInternet:string, ServerInfo:string, Context:number):string;
   CrackUrl(Url:string, UrlLength:number, Flags:number, UrlComponents:string):string;
   ErrorDlg(hWnd:string, hRequest:string, Error:number, Flags:number, Data:string):string;
   GetCookie(Url:string, CookieName:string, CookieData:string, Size:number):string;
   HttpOpen(Result:string, Agent:string, AccessType:number, ProxyName:string, ProxyBypass:string, Flags:number):string;
   QueryDataAvailable(hRequest:string, NumberOfBytesAvailable:number, Flags:number, Context:number):string;
   HttpQueryOption(hInternet:string, Option:number, Buffer:string, BufferType:aType):string;
   ReadFile(hFile:string, Buffer:string, NumberOfBytesToRead:number, NumberOfBytesRead:number):string;
   SetCookie(Url:string, CookieName:string, CookieData:string):string;
   SetOption(hInternet:string, Option:number, Buffer:string, BufferType:aType):string;
   GetHttpStatusCode(ResultHttpStatusCode:number, hRequest:string):string;
   ReceiveResponse(hRequest:string):string;
   GetFlagsForHttpOpenRequest(ResultFlag:number):string;
}
declare class aWT_HttpServer extends aGSPServer {
   Request: string ;
   Response: string ;
   _RootRouter: string ;
   _RouterList: string ;
   _Router: string ;
   ServerRequestBuffer: string ;
   SetTimeout(timeout:number);
   Timeout():number;
   NewHttpServletRequest():aWT_HttpRequest;
   ReInit();
   Init();
   NewRequestParser():aWT_HttpRequestParser;
   NewResponseParser():aWT_HttpResponseParser;
   InitRouterRequest():boolean;
   FillServerResponse(Response:aWT_HttpResponse);
   FillRouterList(ClassDef:aClassDef);
   GetTextFromBuffer(Outtext:string, BufferInPos:string);
   GetExtendedInfoFromBuffer(BufferIn:string, BufferFormat:string, BufferVersion:number, RequestKind:number, MotorContextId:number, SessionKey:string, GoldOrGSPFile:string);
   InitRouterList():boolean;
   Router():aWT_HttpServerRouter;
   LoadServerBuffer(BufferIn:string, BufferInUsedSize:number);
   CheckEnvironment():boolean;
   ReturnServerResponse(BufferOut:string, BufferOutUsedSize:number, MotorContextBehaviour:string, MotorContextTimeout:number):number;
   ExecuteRequest();
   Terminate();
}
declare class aWT_HttpRequest extends aWT_HttpEntity {
   Url: string ;
   RelativeUrl: string ;
   BaseUrl: string ;
   HttpMethod: string ;
   ConnectionTimeout: string ;
   Flags: string ;
   ServerVariables: string ;
   _Deserializer: string ;
   Parameters: string ;
   Terminate();
   NewDefaultDeserializer():aWT_Serializer;
   NewDeserializer():aWT_Serializer;
   Deserializer():aWT_Serializer;
   DeserializeVar(theVar:string, VarType:aType, FromThisObject:aLightObject):boolean;
   Deserialize(Input:string, theVar:string, VarType:aType):boolean;
   DeserializeBody(theVar:string, VarType:aType):boolean;
   GetDefaultAcceptTypes():string;
   GetServerVariable(VariableName:string):string;
   GetServerVariableI(VariableName:string):string;
   ParserDef();
   Init();
   SetDefaultHttpHeadersWhenRequired();
   BeforeSerialize();
   GetHttpHeaderAsText();
   ReInit();
   GetParser():aWT_HttpRequestParser;
   DeserializeParameters(theVar:string, VarType:aType):boolean;
   AppendParameter(ParameterName:string, ParameterValue:string);
   AppendTextParameter(ParameterName:string, ParameterTextValue:string);
   HasParameter(Name:string):boolean;
   GetParameter(Name:string):string;
   GetParameterMethod(Name:string, Method:string):string;
   GetParameterAsText(Name:string, Value:string);
   GetParameterMethodAsText(Name:string, Method:string, Value:string);
   GetParameterAsCString(Name:string):string;
   GetParameterMethodAsCString(Name:string, Method:string):string;
   GetParameterValues(Name:string, Values:string);
   InitFromServer(ServerBuffer:string):boolean;
   CopyVarsTo(HttpRequest:aWT_HttpRequest);
}
declare class aWT_HttpEntity extends aWT_HttpRoot {
   Body: string ;
   HttpHeaders: string ;
   IsBinary: string ;
   HttpVersion: string ;
   _Parser: string ;
   Init();
   ReInit();
   ParserDef():aClassDef;
   GetParser():aWT_HttpEntityParser;
   HasHttpHeader(Name:string, CaseMode:string):boolean;
   GetHttpHeaderAsText(Name:string, Value:string, CaseMode:string);
   GetHttpHeader(Name:string, CaseMode:string):string;
   GetHttpHeaderAsPCString(Name:string, BufferSize:number, CaseMode:string):string;
   RemoveHttpHeader(Name:string, CaseMode:string);
   AppendHttpHeader(Name:string, Value:string);
   AppendTextHttpHeader(Name:string, Value:string);
   BeforeSerialize();
   WriteDebugFile();
   Terminate();
}
declare class aWT_HttpEntityParser extends aWT_Parser {
   Entity: string ;
   HttpHeader: string ;
   Unserialize();
   Serialize();
   ReInit();
}
declare class aWT_WinInet extends aWT_HttpInterface {
   MessageFromErrorCode(ErrorCode:number):string;
   GetLastError();
   HttpAddRequestHeader();
   HttpOpenRequest();
   HttpHeaderQueryInfo();
   GetHeaders();
   HttpSendRequest();
   CloseHandle();
   CombineURL();
   HttpConnect();
   CrackUrl();
   ErrorDlg();
   GetCookie();
   HttpOpen();
   QueryDataAvailable();
   HttpQueryOption();
   ReadFile();
   SetCookie();
   SetOption();
   GetBody();
   GetHttpStatusCode();
   ReceiveResponse();
   GetFlagsForHttpOpenRequest();
}
declare class aWT_HttpModule extends aLightObject {
   _HttpServer: string ;
   _HttpRouter: string ;
   _HttpSession: string ;
   BeforeExecute():boolean;
   SetServer(HttpServer:aWT_HttpServer);
   Server():aWT_HttpServer;
   SetRouter(HttpRouter:aWT_HttpServerRouter);
   Router():aWT_HttpServerRouter;
   Request():aWT_HttpRequest;
   Response():aWT_HttpResponse;
   Session():aWT_HttpSession;
   PurgeAllServlet();
   ReInitAllServlet();
   GetServletFromName(PathString:string):aLightObject;
   GetServlet(ServletClassdef:aClassDef):aLightObject;
}
declare class aWT_Parser extends aWT_HttpRoot {
   Unserialize():boolean;
   Serialize():boolean;
   ReInit();
}
declare class aWT_HttpRequestParser extends aWT_HttpEntityParser {
   HttpHeadersChars: string ;
   ServerVariablesChars: string ;
   BodyChars: string ;
   Path: string ;
   ServerVariables: string ;
   ServerVariablesMaxIndex: string ;
   BodyParsers: string ;
   SerializedUrl: string ;
   InitServerVariables();
   VariableName(Index:number):string;
   InitBodyParsers();
   Init();
   Terminate();
   InitServletRequestFromUrl(Url:string):boolean;
   InitServletRequest():boolean;
   UnserializeHttpHeaders():boolean;
   UnserializeServerVariableRequestLine(RequestLine:string);
   UnserializeServerVariables():boolean;
   FillBody():boolean;
   GetBodyParser():aWT_HttpRequestBodyParser;
   UnserializeHttpBody():boolean;
   Unserialize();
   Serialize();
   SerializeUrl():boolean;
   ReInit();
}
declare class aWT_HttpRequestBodyParser extends aWT_Parser {
   Request: string ;
   GetRequestAffinity():number;
}
declare class aWT_HttpSession extends aHttpSession {
   LastActivityTime: string ;
   FillStateToken(StateToken:string);
   GetLastActivityTime():number;
   UpdateSessionBeforeServletExecution(Request:aWT_HttpRequest);
   UpdateSessionAfterServletExecution(Request:aWT_HttpRequest);
   Purge();
   IsUserLogged():boolean;
   IsDisconnectedBecauseConnectedElsewhere():boolean;
   FillListOfApplicationLangCode(LangCodeList:aListOfInstances);
   GetLangRecordFromLangOption(LangOption:aLanguageOption):string;
   FillListOfAppLangRecord(LangRecordList:string);
   SupportMultiLang():boolean;
   GetApplicationLangCode():string;
   SetApplicationLangCode(Code:string);
   LogIn(loginName:string, password:string, applicationName:string):boolean;
   LogOff();
   Init();
}
declare class aWT_HttpResponseParser extends aWT_HttpEntityParser {
   TextHeaders: string ;
   ReInit();
   Unserialize();
   Serialize();
}
declare class aWT_HttpResponse extends aWT_HttpEntity {
   StatusCode: string ;
   StatusMessage: string ;
   _Serializer: string ;
   ServerBuffer: string ;
   AutoRedirect: string ;
   NoCache: string ;
   Terminate();
   NewDefaultSerializer():aWT_Serializer;
   NewSerializer():aWT_Serializer;
   Serializer():aWT_Serializer;
   SerializeVar(Output:string, theVar:string, VarType:aType):boolean;
   SerializeObjVar(Output:string, theVar:string, VarType:aType, FromThisObject:aLightObject):boolean;
   SerializeVarToBody(theVar:string, VarType:aType):boolean;
   IsSerializable():boolean;
   Serialize();
   RedirectText(NewURL:string);
   IsRedirected():boolean;
   Redirect(NewURL:string);
   RedirectTextWithStatus(NewURL:string, KindOfRedirect:string);
   RedirectWithStatus(NewURL:string, KindOfRedirect:string);
   SeeOtherText(NewUrl:string);
   SeeOther(NewURL:string);
   SetStatusCodeFromInt4(StatusCodeAsInt:number);
   GetStatusCodeAsInt4():number;
   GetDefaultCharset():string;
   GetDefaultContentType():string;
   GetDefaultCacheControl():string;
   HasNoError():boolean;
   Init();
   GetHttpHeaderAsText();
   ParserDef();
   GetParser():aWT_HttpResponseParser;
   SetDefaultHttpHeadersWhenRequired();
   WriteCharset();
   EncodeWithCharset();
   BeforeSerialize();
   ReInit();
   InitHttpHeadersFromRequest(Request:aWT_HttpRequest);
   CopyVarsTo(HttpResponse:aWT_HttpResponse);
   SerializeAsDataStruct();
}
declare class aWT_HttpServerRouter extends aWT_HttpRoot {
   Server: string ;
   Request: string ;
   Response: string ;
   Settings: string ;
   ContextList: string ;
   GetRequestAffinity(Request:aWT_HttpRequest):number;
   Launch(ServerRequest:aWT_HttpRequest, ServerResponse:aWT_HttpResponse):boolean;
   InternalLaunch(ServerRequest:aWT_HttpRequest, ServerResponse:aWT_HttpResponse):boolean;
   ReInit();
   NewRequest():aWT_HttpRequest;
   NewResponse():aWT_HttpResponse;
   GetCurContext():string;
   SetCurContext();
   InitLaunch(ServerRequest:aWT_HttpRequest, ServerResponse:aWT_HttpResponse);
   IsRootServerRouter():boolean;
   NoMoreContext():boolean;
   UnstackContext():boolean;
   SerializeResponse();
   AfterLaunch(ServerRequest:aWT_HttpRequest, ServerResponse:aWT_HttpResponse):boolean;
   Terminate();
}
declare class aWT_HttpServlet extends aGSPServlet {
   Request: string ;
   Response: string ;
   Router: string ;
   Server: string ;
   Config: string ;
   Purge();
   NewRequest():aWT_HttpRequest;
   NewResponse():aWT_HttpResponse;
   Session():aWT_HttpSession;
   ReInit();
   BeforeExecution();
   AfterExecution();
   Terminate();
}
declare class aWT_HtmlServlet extends aWT_HttpServlet {
   AccessControlAllow: string ;
   NewRequest():aWT_HtmlRequest;
   NewResponse():aWT_HtmlResponse;
   IsPublished():boolean;
   IsUnAuthorized():boolean;
   IsForbidden():boolean;
   IsNotModified():boolean;
   BeforeExecution();
}
declare class aWT_HtmlRequest extends aWT_HttpRequest {
   Parameters: string ;
   DeserializeParameters(theVar:string, VarType:aType):boolean;
   AppendParameter(ParameterName:string, ParameterValue:string);
   AppendTextParameter(ParameterName:string, ParameterTextValue:string);
   Terminate();
   ReInit();
   HasParameter(Name:string):boolean;
   GetParameter(Name:string):string;
   GetParameterMethod(Name:string, Method:string):string;
   GetParameterAsText(Name:string, Value:string);
   GetParameterMethodAsText(Name:string, Method:string, Value:string);
   GetParameterAsCString(Name:string):string;
   GetParameterMethodAsCString(Name:string, Method:string):string;
   GetParameterValues(Name:string, Values:string);
   ParserDef();
}
declare class aWT_HttpRequestWithParametersParser extends aWT_HttpRequestParser {
   InitBodyParsers();
   UnserializeServerVariableRequestLine();
   SerializeUrl();
}
declare class aWT_HtmlResponse extends aWT_HttpResponse {
   ParserDef();
   GetDefaultContentType();
}
declare class aWT_HtmlResponseParser extends aWT_HttpResponseParser {
}
declare class aWT_HtmlServerRouter extends aWT_HttpServerRouter {
   NewRequest():aWT_HtmlRequest;
   NewResponse():aWT_HtmlResponse;
}
declare class aWT_HttpResponseBodyParser extends aWT_Parser {
   Response: string ;
   GetResponseAffinity():number;
}
declare class aWT_HttpConnection extends aWT_HttpRoot {
   hInet: string ;
   hConnect: string ;
   hRequest: string ;
   Request: string ;
   Response: string ;
   UserAgent: string ;
   UrlInfo: string ;
   Init();
   Terminate();
   SerializeUrl():boolean;
   InternetOpen():boolean;
   InternetConnect():boolean;
   HttpOpenRequest():boolean;
   ProcessRequest():boolean;
   SendRequest():boolean;
   InitResponse(Response:aWT_HttpResponse):boolean;
   ProcessResponse():boolean;
   Query(Request:aWT_HttpRequest, Response:aWT_HttpResponse):boolean;
   helpQuery_404();
   helpQuery_EXTERNAL();
   helpQuery_EXTERNAL_HTTPS();
   helpQuery_POST_LocalServer();
   helpQuery_GET_LocalServer();
   helpQuery_PUT_LocalServer();
}
declare class aWT_HtmlResponseBodyParser extends aWT_HttpResponseBodyParser {
}
/**
*This class is not used because server doesnt send form to client
*/
declare class aWT_ResBodyMultiPartParser extends aWT_HttpResponseBodyParser {
   GetResponseAffinity();
}
declare class aWT_RestServiceServerRouter extends aWT_HtmlServerRouter {
}
declare class aWT_SimpleServerRouter extends aWT_HttpServerRouter {
   GetRequestAffinity();
}
declare class aWT_UrlDecorationServerRouter extends aWT_HttpServerRouter {
   MethodLaunchInfoList: string ;
   ExecutableMethods: string ;
   ExecutableIndex: string ;
   Trace: string ;
   DefaultSerializerDef: string ;
   GetRefUrlCandidate(TriggerToTest:aClassDef):string;
   GetMethodUrlPattern(Method:aMethodDesc, UrlPattern:string);
   GetRequestAffinity();
   SettingsClassName():string;
   InitSettings();
   FillMethodLaunchInfoListFrom(ClassDef:aClassDef);
   FillMethodLaunchInfoList();
   MatchParameters(Method:aMethodDesc, Parameters:string, Affinity:number):boolean;
   GetDecorationInfo(Request:aWT_HttpRequest):string;
   Init();
   FillParametersBuffer(ParametersBuffer:string, MethodInfo:string, MethodType:aMethodType):boolean;
   LaunchMethod(MethodInfo:string, Result:string):boolean;
   ExecuteNext();
   NewRequest():aWT_RestRequest;
   NewResponse():aWT_RestResponse;
   ReInit();
   InitResponseFromContext(Response:aWT_HttpResponse);
   InitLaunch();
   Launch();
   SerializeResponse();
   AfterLaunch();
}
declare class aWT_WinHTTP extends aWT_HttpInterface {
   MessageFromErrorCode(ErrorCode:number):string;
   GetLastError();
   HttpAddRequestHeader();
   HttpOpenRequest();
   CrackUrl();
   HttpHeaderQueryInfo();
   GetHeaders();
   HttpSendRequest();
   CloseHandle();
   CombineURL();
   HttpConnect();
   ErrorDlg();
   GetCookie();
   HttpOpen();
   HttpQueryOption();
   ReadFile();
   SetCookie();
   QueryDataAvailable();
   SetOption();
   GetHttpStatusCode();
   GetBody();
   ReceiveResponse();
   GetFlagsForHttpOpenRequest();
}
declare class aWT_ResBodyParamEncodedParser extends aWT_HttpResponseBodyParser {
   GetResponseAffinity();
}
declare class aWT_HtmlRequestBodyParser extends aWT_HttpRequestBodyParser {
}
declare class aWT_ReqBodyMultiPartParser extends aWT_HttpRequestBodyParser {
   GetRequestAffinity();
   Unserialize();
   helpUnserialize();
   Serialize();
}
declare class aWT_ReqBodyParamEncodedParser extends aWT_HttpRequestBodyParser {
   GetRequestAffinity();
   Unserialize();
   Serialize();
}
declare class aWT_Url extends aWT_HttpRoot {
   Method: string ;
   Parameters: string ;
   Purge();
   AppendInt4(Name:string, Value:number);
   AppendText(Name:string, Value:string);
   AppendCString(Name:string, Value:string);
   AppendObj(Name:string, Value:aFullObject);
   AsText(Url:string);
}
declare module WT_WinHttp {
   function GetLastError():number;
   function WinHttpAddResquestHeaders(hRequest:string, pwszHeaders:string, dwHeadersLength:number, dwModifiers:number):boolean;
   function WinHttpCheckPlatform():boolean;
   function WinHttpCloseHandle(hInternet:string):boolean;
   function WinHttpConnect(hSession:string, pwszServerName:string, nServerPort:number, dwReserved:number):string;
   function WinHttpCrackUrl(pwszUrl:string, dwUrlLength:number, dwFlags:number, lpszScheme:string, SchemeLength:string, nScheme:string, lpszHostName:string, HostNameLength:string, nPort:string, lpszUserName:string, dwUserNameLength:string, lpszPassword:string, dwPasswordLength:string, lpszUrlPath:string, dwUrlPathLength:string, lpszExtraInfo:string, dwExtraInfoLength:string):boolean;
   function WinHttpCreateUrl(lpszScheme:string, dwSchemeLength:number, nScheme:number, lpszHostName:string, dwHostNameLength:number, nPort:number, lpszUserName:string, dwUserNameLength:number, lpszPassword:string, dwPasswordLength:number, lpszUrlPath:string, dwUrlPathLength:number, lpszExtraInfo:string, dwExtraInfoLength:number, dwFlags:number, pwszUrl:string, lpdwUrlLength:string):boolean;
   function WinHttpDetectAutoProxyConfigUrl(dwAutoDetectFlags:number, ppwszAutoConfigUrl:string):boolean;
   function WinHttpGetDefaultProxyConfiguration(pProxyInfo:string):boolean;
   function WinHttpGetIEProxyConfigForCurrentUser(pProxyConfig:string):boolean;
   function WinHttpGetProxyForUrl(hSession:string, lpcwszUrl:string, pAutoProxyOptions:string, pProxyInfo:string):boolean;
   function WinHttpOpen(pwszUserAgent:string, dwAccessType:number, pwszProxyName:string, pwszProxyByPass:string, dwFlags:number):string;
   function WinHttpOpenRequest(hConnect:string, pwszVerb:string, pwszObjectName:string, pwszVersion:string, pwszReferrer:string, ppwszAcceptTypes:string, dwFlags:number):string;
   function WinHttpQueryAuthSchemes(hRequest:string, lpdwSupportedSchemes:string, lpdwFirstScheme:string, pdwAuthTarget:string):boolean;
   function WinHttpQueryDataAvailable(hRequest:string, lpdwNumberOfBytesAvailable:string):boolean;
   function WinHttpQueryHeaders(hRequest:string, dwInfoLevel:number, pwszName:string, lpBuffer:string, lpdwBufferLength:string, lpdwIndex:string):boolean;
   function WinHttpQueryOption(hInternet:string, dwOption:number, lpBuffer:string, lpdwBufferLength:string):boolean;
   function WinHttpReadData(hRequest:string, lpBuffer:string, dwNumberOfBytesToRead:number, lpdwNumberOfBytesRead:string):boolean;
   function WinHttpReceiveResponse(hRequest:string, lpReserved:string):boolean;
   function WinHttpSendRequest(hRequest:string, pwszHeaders:string, dwHeadersLength:number, lpOptional:string, dwOptionalLength:number, dwTotalLength:number, dwContext:string):boolean;
   function WinHttpSetCredentials(hRequest:string, AuthTargets:number, AuthScheme:number, pwszUserName:string, pwszPassword:string, pAuthParams:string):boolean;
   function WinHttpSetDefaultProxyConfiguration(pProxyInfo:string):boolean;
   function WinHttpSetOption(hInternet:string, dwOption:number, lpBuffer:string, dwBufferLength:number):boolean;
   function WinHttpSetTimeouts(hInternet:string, dwResolveTimeout:number, dwConnectTimeout:number, dwSendTimeout:number, dwReceiveTimeout:number):boolean;
   function WinHttpTimeToSystemTime(pwszTime:string, pst:string):boolean;
   function WinHttpWriteData(hRequest:string, lpBuffer:string, dwNumberOfBytesToWrite:number, lpdwNumberOfBytesWritten:string):boolean;
   function Comment();
}
declare module WT_WinInet {
   function HttpAddRequestHeaders(hRequest:string, lpszHeaders:string, dwHeadersLength:string, dwModifiers:string):boolean;
   function HttpOpenRequest(hConnect:string, lpszVerb:string, lpszObjectName:string, lpszVersion:string, lpszReferer:string, lplpszAcceptTypes:string, dwFlags:string, dwContext:string):string;
   function HttpQueryInfo(hRequest:string, dwInfoLevel:string, lpvBuffer:string, lpdwBufferLength:string, lpdwIndex:string):boolean;
   function HttpSendRequest(hRequest:string, lpszHeaders:string, dwHeadersLength:string, lpOptional:string, dwOptionalLength:string):boolean;
   function GetLastError():string;
   function InternetCloseHandle(hInternet:string):boolean;
   function InternetCombineUrl(lpszBaseUrl:string, lpszRelativeUrl:string, lpszBuffer:string, lpdwBufferLength:string, dwFlags:string):boolean;
   function InternetConnect(hInternet:string, lpszServerName:string, nServerPort:string, lpszUsername:string, lpszPassword:string, dwService:string, dwFlags:string, dwContext:string):string;
   function InternetCrackUrl(lpszUrl:string, dwUrlLength:string, dwFlags:string, lpszScheme:string, dwSchemeLength:string, nScheme:string, lpszHostName:string, dwHostNameLength:string, nPort:string, lpszUserName:string, dwUserNameLength:string, lpszPassword:string, dwPasswordLength:string, lpszUrlPath:string, dwUrlPathLength:string, lpszExtraInfo:string, dwExtraInfoLength:string):boolean;
   function InternetErrorDlg(hWnd:string, hRequest:string, dwError:string, dwFlags:string, lppvData:string):number;
   function InternetGetCookie(lpszUrl:string, lpszCookieName:string, lpszCookieData:string, lpdwSize:string):boolean;
   function InternetOpen(lpszAgent:string, dwAccessType:string, lpszProxyName:string, lpszProxyBypass:string, dwFlags:string):string;
   function InternetQueryDataAvailable(hFile:string, lpdwNumberOfBytesAvailable:string, dwFlags:string, dwContext:string):boolean;
   function InternetQueryOption(hInternet:string, dwOption:string, lpBuffer:string, lpdwBufferLength:string):boolean;
   function InternetReadFile(hFile:string, lpBuffer:string, dwNumberOfBytesToRead:string, lpdwNumberOfBytesRead:string):boolean;
   function InternetSetCookie(lpszUrl:string, lpszCookieName:string, lpszCookieData:string):boolean;
   function InternetSetOption(hInternet:string, dwOption:string, lpBuffer:string, dwBufferLength:string):boolean;
}
declare module WT_HTTPLib {
   var HttpInterfaceType: string ;
   function HTTPInterface():aWT_HttpInterface;
}
declare class aWT_UnitTest extends aLightObject {
   Mode: string ;
   LastTestSucceeded: string ;
   alert();
   TextBlankExpected(Output:string);
   TextExpected(Output:string, StrToCompare:string);
   TxtExpected(Output:string, TextToCompare:string);
   BooleanExpected(b1:boolean, b2:boolean);
   CStringExpected(c1:string, c2:string);
   PointerExpected(p:string, value:string);
   Int4Expected(i1:number, i2:number);
   Int8Expected(i1:number, i2:number);
   SequenceLengthExpected(theSequence:string, theSequenceType:aSequenceType, lengthExpected:number);
   PointerDifferentExpected(p1:string, p2:string);
}
declare class aWT_Help extends aWT_HtmlServlet {
   test();
   test2();
}
declare class aWT_TestServerRouter extends aWT_HttpServerRouter {
   GetRequestAffinity();
   Launch();
}
declare class aWT_JsonObj extends aWT_DataStruct {
   _Parser: string ;
   ValueList: string ;
   GetName():aWT_JsonText;
   SetParent(Parent:aWT_JsonObj);
   GetParent():aWT_JsonObj;
   GetRoot():aWT_JsonObj;
   GetNewJsonObj(ClassDef:aClassDef):aWT_JsonObj;
   GetNewJsonValue(ClassDef:aClassDef):aWT_JsonValue;
   FillListOfValues(RootValueDef:aClassDef);
   CanBeParsed(input:string, pos:number):boolean;
   GetParsePriority():number;
   GetBestJsonValue(input:string, pos:number):aWT_JsonValue;
   GetBestJsonValueFromVar(theVar:string, VarType:aType):aWT_JsonValue;
   GetNewJsonStatement():aWT_JsonStatement;
   GetNewJsonText():aWT_JsonText;
   ParseAt(input:string, pos:number):boolean;
   GoToNextRelevantChar(input:string, pos:number, c:number);
   GetNextRelevantChar(input:string, pos:number, c:number);
   asText();
   asJsonFragment(theText:string);
   asJson(DefaultName:string, theText:string);
   asCString():string;
   asBoolean():boolean;
   asInt4():number;
   asNum10():string;
   SearchValueByNameAtRootLevel(Name:string):aWT_JsonValue;
   SearchValueByName(Name:string):aWT_JsonValue;
   SearchValuesByName(Name:string, Values:string);
   SearchTextValueByName(Name:string, Result:string);
   SearchCStringValueByName(Name:string):string;
   SearchInt4ValueByName(Name:string):number;
   SearchNum10ValueByName(Name:string):string;
   SearchBooleanValueByName(Name:string):boolean;
   DelegateParentValueRoleTo():aWT_JsonValue;
   GetParentValue():aWT_JsonValue;
   DelegateParentStatementUnder(Root:aWT_JsonObj):aWT_JsonStatement;
   GetParentStatementUnder(Root:aWT_JsonObj):aWT_JsonStatement;
}
declare class aWT_JsonValue extends aWT_JsonObj {
   asJson();
   ConvertFromVar(theVar:string, VarType:aType):boolean;
   GetParsePriority();
   JPath(Path:string):string;
   DelegateParentValueRoleTo();
   DelegateParentStatementUnder();
   StoreToVar(VarType:aType, VarAddress:string);
   SearchValueByNameAtRootLevel();
   FindSubDataFromNode(Node:aWT_MMNode):aWT_JsonValue;
}
declare class aWT_JsonStatement extends aWT_JsonObj {
   _Name: string ;
   _Value: string ;
   GetName();
   Init();
   GetNameAsCString():string;
   SetCStringName(Name:string);
   HasSameName(Statement:aWT_JsonStatement):boolean;
   HasName(Name:string):boolean;
   HasCStringName(Name:string):boolean;
   SetValue(Value:aWT_JsonValue);
   SetNameFromText(Name:string);
   GetValue():aWT_JsonValue;
   GetValueAsCString():string;
   GetParsePriority();
   DeleteValue();
   Terminate();
   DelegateParentValueRoleTo();
   StringExtract();
   asText();
   asJsonFragment();
   ParseAt();
   MatchCriteria(PathSeq:string, Index:number):boolean;
   DelegateParentStatementUnder();
}
declare class aWT_JsonText extends aWT_JsonValue {
   Data: string ;
   SetText(theText:string);
   SetTextWithCString(theCString:string);
   GetParsePriority();
   Encode(thisText:string);
   Decode(thisText:string);
   RunTest();
   EqualsText(theText:string):boolean;
   EqualsTextCase(theText:string, CaseSensitive:boolean):boolean;
   Equals(JsonText:aWT_JsonText):boolean;
   EqualsCase(JsonText:aWT_JsonText, CaseSensitive:boolean):boolean;
   EqualsCString(thisCString:string):boolean;
   ParseAt();
   CanBeParsed();
   StringExtract();
   asText();
   asJsonFragment();
   AsJsonStatementName(theText:string);
   asCString();
   asBoolean();
   asInt4();
   asNum10();
}
declare class aWT_JsonParser extends aLightObject {
   pos: string ;
   ErrorMessage: string ;
   DefaultValue: string ;
   NewDefaultValue():aWT_JsonValue;
   Init();
   ReInit();
   Parse(input:string):aWT_JsonValue;
   Terminate();
   RunTest();
}
declare class aWT_JsonValueWithDescendants extends aWT_JsonValue {
   Descendants: string ;
   Terminate();
   asJson();
}
declare class aWT_JsonBoolean extends aWT_JsonValue {
   Data: string ;
   GetParsePriority();
   ParseAt();
   CanBeParsed();
   StringExtract();
   asText();
   asBoolean();
   asCString();
}
declare class aWT_JsonNull extends aWT_JsonValue {
   GetParsePriority();
   ParseAt();
   CanBeParsed();
   StringExtract();
   asText();
   asCString();
}
/**
*Data mustn't be NUM10 because from NUM10 we can't convert properly to any kind of number!
*/
declare class aWT_JsonNumber extends aWT_JsonValue {
   Data: string ;
   GetParsePriority();
   ParseAt();
   CanBeParsed();
   StringExtract();
   asText();
   asNum10();
   asInt4();
   asCString();
}
declare class aWT_JsonCollection extends aWT_JsonValueWithDescendants {
   GetStatementByName(Name:string):aWT_JsonStatement;
   ExistStatementWithSameName(JsonStatement:aWT_JsonStatement):boolean;
   ExistName(Name:string):boolean;
   RemoveCString(Name:string);
   RemoveStatementWithSameName(JsonStatement:aWT_JsonStatement);
   AppendStatement(Statement:aWT_JsonStatement);
   AppendInexistingStatement(Statement:aWT_JsonStatement);
   PrependStatement(Statement:aWT_JsonStatement);
   PrependInexistingStatement(Statement:aWT_JsonStatement);
   AppendNumber(name:string, value:string);
   AppendNull(name:string);
   AppendInt4(name:string, value:number);
   PrependInt4(name:string, value:number);
   AppendCString(name:string, value:string);
   PrependCString(name:string, value:string);
   AppendBoolean(name:string, value:boolean);
   AppendArray(name:string, value:aWT_JsonArray);
   AppendValue(Name:string, Value:aWT_JsonValue);
   AppendInexistingValue(Name:string, Value:aWT_JsonValue);
   PrependValue(Name:string, Value:aWT_JsonValue);
   PrependInexistingValue(Name:string, Value:aWT_JsonValue);
   AppendText(name:string, value:string);
   PrependText(name:string, value:string);
   PrependInexistingText(name:string, value:string);
   AppendNonObjectVariable(VariableName:string, object:aLightObject);
   AppendVariable(VariableName:string, Value:string, VarType:aType);
   GetParsePriority();
   Parse(Input:string):boolean;
   StringExtract();
   asText();
   asJsonFragment();
   CanBeParsed();
   ParseAt();
   SearchValueByNameAtRootLevel();
   SearchValueByName();
   SearchValuesByName();
   AppendSubData(Name:string, Data:aWT_JsonValue);
   AppendAttribute();
   AppendInt4Attribute();
   AppendTextAttribute();
   GetAttribute();
   GetTextAttribute();
   SearchSubDataByName();
   SearchSubDataByNode();
   RemoveSubData();
   AppendNewArray(Name:string):aWT_JsonArray;
   ExtendWith(Data:aWT_JsonCollection);
   FindSubDataFromNode(Node:aWT_MMNode):aWT_JsonValue;
}
declare class aWT_JsonArray extends aWT_JsonValueWithDescendants {
   AppendValue(Value:aWT_JsonValue);
   AppendCString(theCString:string);
   AppendText(theText:string);
   AppendSubDataCString();
   AppendNumber(Data:string);
   AppendInt4(Data:number);
   GetParsePriority();
   HasCString(theCString:string):boolean;
   SearchValueByName();
   SearchValueByNameAtRootLevel();
   SearchValuesByName();
   ParseAt();
   CanBeParsed();
   StringExtract();
   asText();
   asJsonFragment();
   AppendSubData(Name:string, Data:aWT_JsonValue);
   FindSubDataFromNode(Node:aWT_MMNode):aWT_JsonValue;
}
declare class aWT_JsonPathNode extends aWT_JsonObj {
   Conditions: string ;
   Data: string ;
   NextNode: string ;
   GetNewJsonPathNode():aWT_JsonPathNode;
   GoToNextRelevantChar();
   GetNextRelevantChar();
   ParseAt();
   Parse(Input:string);
   RunTest();
}
declare class aWT_IntTypeExtension extends aWT_TypeExtension {
   _InternalAsJsonSchema();
   AsJsonValue(theVar:string, VarType:aType):aWT_JsonNumber;
   Abs(i:number):number;
   AsText();
   ConvertFromJson();
   MallocVarAddressNode();
   ConvertFromText();
   PurgeAndKill(theVar:string, VarType:aIntType);
}
declare class aWT_EnumTypeExtension extends aWT_TypeExtension {
   AsJsonValue();
   AsText(Outtext:string, VarType:aEnumType, VarAddress:string);
   GetCountFromVarAddress(VarAddress:string, VarType:aEnumType):number;
   GetVarAddressAtRankFromVarAddress(VarAddress:string, VarType:aEnumType, Rank:number, ResultVarAddress:string, ResultVarType:aType, ResultIdentifierDesc:aIdentifierDesc):boolean;
   ConvertFromJson(JsonObj:aWT_JsonObj, vartype:aEnumType, varaddress:string):boolean;
   MallocVarAddressNode(NewNode:aWT_MMNode, VarType:aEnumType, JsonValue:aWT_JsonValue):boolean;
   GetCandidatesAsJson(VarType:aEnumType):aWT_JsonArray;
   ConvertFromText(InText:string, vartype:aEnumType, VarAddress:string):boolean;
   PurgeAndKill(theVar:string, VarType:aEnumType);
   _InternalAsJsonSchema(VarType:aEnumType, Vardesc:aVarDesc, Definitions:string, DefinitionsType:aSequenceType, AddToDef:boolean):aWT_JsonCollection;
}
declare class aWT_ListofReftosTypeExtension extends aWT_TypeExtension {
   IsArray();
   _AddAcceptedClassDefOf(ThisClassDef:aClassDef, AnyOf:aWT_JsonArray);
   _InternalAsJsonSchema(VarType:aListofReftosType, Vardesc:aVarDesc, Definitions:string, DefinitionsType:aSequenceType, AddToDef:boolean):aWT_JsonCollection;
   GetObjectAddressAt(TheListOf:aListOfRefTos, Rank:number):string;
   GetRankOf(ThisObject:aFullObject, ListAddress:string):number;
   DeleteAt(ListOfType:aListofReftosType, FromThisObject:aFullObject, Rank:number, ListAddress:string):boolean;
   DeleteAll(ListOfType:aListofReftosType, FromThisObject:aFullObject, ListAddress:string):boolean;
   InsertOrUpdateExisting(ListOfType:aListofReftosType, FromThisObject:aFullObject, ListAddress:string, NewObject:aFullObject, Rank:number):boolean;
   MallocSubNode();
   GetMetaModelSubNodes();
   GetMetaModelSubNodesFromData();
   MallocVarAddressNode();
   ConvertFromText();
   FillCandidatesFromClassDef(Candidates:aWT_JsonArray, AcceptClassDef:aClassDef);
   FillCandidatesFromSingleRole(Candidates:aWT_JsonArray, TheRole:aSingleRoleType);
   FillCandidatesFromMultiRole(Candidates:aWT_JsonArray, TheRole:aMultiRoleType);
   FillCandidatesFromRole(Candidates:aWT_JsonArray, TheRole:aRoleType);
   GetCandidatesAsJson(VarType:aReftoType):aWT_JsonArray;
   IsListOfReftosType();
   PurgeAndKill(theVar:string, VarType:aListofReftosType);
   AsJsonValue(theVar:string, VarType:aListofReftosType):aWT_JsonCollection;
   LoadVar();
}
declare class aWT_RefToTypeExtension extends aWT_TypeExtension {
   _AddAcceptedClassDefOf(ThisClassDef:aClassDef, AnyOf:aWT_JsonArray);
   _InternalAsJsonSchema(VarType:aReftoType, Vardesc:aVarDesc, Definitions:string, DefinitionsType:aSequenceType, AddToDef:boolean):aWT_JsonCollection;
   GetMetaModelSubNodes();
   LoadVar(FromThisObject:aFullObject, VarAddress:string, VarType:aReftoType, NbMaxToLoad:number):number;
   CanCreateLink(ReftoType:aReftoType, FromThisObject:aFullObject, toThisObject:aFullObject, BackRefAddress:string):boolean;
   SetRefto(ReftoType:aReftoType, FromThisObject:aFullObject, RefAddress:string, ObjToAdd:aFullObject):boolean;
   Clear(ReftoType:aReftoType, FromThisObject:aFullObject, VarAddress:string):boolean;
   MallocSubNode();
   GetMetaModelSubNodesFromData();
   MallocVarAddressNode();
   ConvertFromText();
   FillCandidatesFromClassDef(Candidates:aWT_JsonArray, AcceptClassDef:aClassDef);
   FillCandidatesFromSingleRole(Candidates:aWT_JsonArray, TheRole:aSingleRoleType);
   FillCandidatesFromMultiRole(Candidates:aWT_JsonArray, TheRole:aMultiRoleType);
   FillCandidatesFromRole(Candidates:aWT_JsonArray, TheRole:aRoleType);
   GetCandidatesAsJson(VarType:aReftoType):aWT_JsonArray;
   IsReftoType();
   AsJsonValue(theVar:string, VarType:aType):aWT_JsonValue;
}
declare class aWT_BooleanTypeExtension extends aWT_TypeExtension {
   _InternalAsJsonSchema();
   AsJsonValue(theVar:string, VarType:aType):aWT_JsonBoolean;
   MallocVarAddressNode();
   AsText();
   ConvertFromText();
   PurgeAndKill(theVar:string, VarType:aBooleanType);
}
declare class aWT_NumTypeExtension extends aWT_TypeExtension {
   _InternalAsJsonSchema();
   AsJsonValue(theVar:string, VarType:aType):aWT_JsonNumber;
   AsText();
   ConvertFromJson();
   MallocVarAddressNode();
   ConvertFromText();
   PurgeAndKill(theVar:string, VarType:aNumType);
}
declare class aWT_GspParser extends aGSPParser {
   MethodSignature: string ;
   MethodInvoked: string ;
   WriteOutputPrefix: string ;
   WriteLnOutputPrefix: string ;
   MaxLinePerMethod: string ;
   Init();
   ProduceOverridenMethods();
   OpenHTMLMethod();
   ComputeDebugGOLDFromUnParsedClass();
   ParseExecuteRequest();
   SplitMainMethod();
   ManageHTML();
   GSPWriteln();
   ManageGOLDExpressions();
   ComputeClassCode();
}
declare class aWT_GSPFileServerRouter extends aWT_HttpServerRouter {
   ClassCode: string ;
   GetRequestAffinity();
   Display404(Path:string);
   DisplayParseError(InstanceBuilder:aWT_InstanceBuilder);
   GetGSPFilePath():string;
   Launch();
}
declare class aWT_GSPServlet extends aWT_HttpServlet {
   Execute();
}
declare class aWT_InstanceBuilder extends aLightObject {
   ClassCode: string ;
   _Parser: string ;
   ParseErrors: string ;
   Init();
   SetBreakPointOn(ClassDef:aClassDef, MethodName:string);
   _GetNewClass(ParentClassDef:aClassDef, Classname:string):aClassDef;
   _GetNewClass2(ParentClassDef:aClassDef, classname:string):aClassDef;
   GetClass(Code:string, Parameters:string):aClassDef;
   GetInstance(Code:string, Parameters:string):aLightObject;
}
/**
*DESERIALIZATION
{...} =(JsonParser.Parse)=> JsonValue =(aExtentionType.ConvertFromJSON)=> aLightObject

SERIALIZATION
aLightObject =(aExtentionType.AsJson)=> {...}
*/
declare class aWT_RestJsonSerializer extends aWT_JsonSerializer {
   InitQualifiers();
}
declare class aWT_Qualifier extends aLightObject {
   NextQualifier: string ;
   FirstQualifier: string ;
   ExploreReftoMaxLevel: string ;
   ExploreListOfMaxLevel: string ;
   SetErrorOnNode(Node:aWT_MMNode, ErrorMessage:string);
   GetExploreReftoMaxLevel():number;
   SetExploreReftoMaxLevel(AtLevel:number);
   GetExploreListOfMaxLevel():number;
   SetExploreListOfMaxLevel(AtLevel:number);
   IsFirst():boolean;
   GetFirst():aWT_Qualifier;
   GetNext():aWT_Qualifier;
   SetFirst(Qualifier:aWT_Qualifier);
   PrependQualifier(Qualifier:aWT_Qualifier);
   ExecuteForSerialize(Node:aWT_MMNode, Data:aWT_DataStruct):aWT_DataStruct;
   ExecuteForDeserialize(Data:aWT_DataStruct, Node:aWT_MMNode):boolean;
   AppendQualifier(Qualifier:aWT_Qualifier);
   Terminate();
   UpdateNodeValidDeep(Node:aWT_MMNode, TypeExt:aWT_TypeExtension);
   GetClone():aWT_Qualifier;
   SetNext(Qualifier:aWT_Qualifier);
   InsertAfter(InsertThisQualifierDef:aClassDef, After:aClassDef);
}
declare class aWT_OldDelegateQualifier extends aWT_Qualifier {
   IdentifierDesc: string ;
   FromThisClass: string ;
   MethodInst: string ;
   MethodDesc: string ;
   FillParametersBufferForSerialize(MethodType:aMethodType, ParametersBuffer:string, Node:aWT_MMNode);
   FillParametersBufferForDeserialize(MethodType:aMethodType, ParametersBuffer:string, Data:aWT_DataStruct);
   LaunchMethodForSerialize(Node:aWT_MMNode):aWT_DataStruct;
   LaunchMethodForDeserialize(Data:aWT_DataStruct):aWT_MMNode;
   ExecuteForDeserialize();
   ExecuteForSerialize();
   DelegateExample(RefList:aWT_ListOfRef, Node:aWT_MMNode);
   DelegateExample2(Node:aWT_MMNode);
   DelegateExample3();
   help();
}
declare class aWT_SkipVarQualifier extends aWT_Qualifier {
   SkipVarDesc: string ;
   ExecuteForSerialize();
   ExecuteForDeserialize();
}
declare class aWT_JSONQualifier extends aWT_Qualifier {
   ExecuteForSerialize();
   ExecuteForDeserialize();
}
declare class aWT_ListOfRef extends aLightObject {
   Refs: string ;
   GetReferenceIdFromText(TheText:string):string;
   Terminate();
}
declare class aWT_Serializer extends aLightObject {
   Qualifier: string ;
   IsAvailable: string ;
   InitQualifiers();
   Init();
   CopyVarsTo(Serializer:aWT_Serializer);
   ReplaceQualifier(NewQualifier:aWT_Qualifier);
   AppendQualifierAfter(QualifierDef:aClassDef, AfterThis:aClassDef);
   GetQualifier(QualifierDef:aClassDef):aLightObject;
   SerializeUntil(RecordDesc:aRecordDesc);
   RenameVar(VarDesc:aIdentifierDesc, RecordDesc:aRecordDesc, NewName:string);
   SpreadRef(VarDesc:aVarDesc, ClassDef:aClassDef);
   DontSpreadRef(VarDesc:aVarDesc, ClassDef:aClassDef);
   AppendFuncToSerialize(MethodDesc:aMethodDesc, ClassDef:aClassDef);
   AppendView(Trigger:aClassDef, View:aScenario);
   VirtualDelegate(TriggerName:string, TriggerOwner:aRecordDesc, MethodToExecute:aMethodDesc, OnThisInstance:aLightObject);
   Delegate(Trigger:aIdentifierDesc, TriggerOwner:aRecordDesc, MethodToExecute:aMethodDesc, OnThisInstance:aLightObject);
   WhiteListClass(VarDesc:aVarDesc, RecordDesc:aRecordDesc);
   UnWhiteListClass(VarDesc:aVarDesc, RecordDesc:aRecordDesc);
   BlackListClass(VarDesc:aVarDesc, RecordDesc:aRecordDesc);
   UnBlackListClass(VarDesc:aVarDesc, RecordDesc:aRecordDesc);
   FindNextQualifier(QualifierClassName:string, FromThisQualifier:aWT_Qualifier):aWT_Qualifier;
   AppendQualifier(Qualifier:aWT_Qualifier);
   PrependQualifier(Qualifier:aWT_Qualifier);
   AppendViewQualifier(Trigger:aClassDef, View:aScenario);
   AppendDelegateQualifier(IdentifierDesc:aIdentifierDesc, MethodInst:string, MethodDesc:aMethodDesc);
   AppendDelegateQualifierFromClass(IdentifierDesc:aIdentifierDesc, IdentifierFromThisClass:aClassDef, MethodInst:string, MethodDesc:aMethodDesc);
   Purge();
   Terminate();
   DeserializeVar(InText:string, IntoVarAddress:string, VarType:aType, FromThisObject:aLightObject):boolean;
   DeserializeFromVarName(InText:string, InToVarAddress:string, VarType:aType, VarName:string):boolean;
   Deserialize(InText:string, InToVarAddress:string, VarType:aType):boolean;
   SerializeVar(OutText:string, VarAddress:string, VarType:aType, FromThisObject:aLightObject):boolean;
   SerializeFromVarName(OutText:string, VarAddress:string, VarType:aType, VarName:string):boolean;
   Serialize(OutText:string, VarAddress:string, VarType:aType):boolean;
   SerializeAsDataStruct(OutDataStruct:aWT_DataStruct, VarAddress:string, VarType:aType):boolean;
}
declare class aWT_XMLSerializer extends aWT_Serializer {
}
declare class aVSWT_SerializeData extends aFullObject {
   owned: string ;
   myObjSeq: string ;
   mySeq: string ;
   myText: string ;
   myArray: string ;
   myRecord: string ;
   myEnum: string ;
   myListOf: string ;
   myBool: string ;
   myNum: string ;
   myChildObj: string ;
   myListOfOwned: string ;
   GetOwned():aVSWT_Serialize2Data;
   GetmyText():string;
   GetmyRecord():string;
   GetmyEnum():string;
   GetmyBool():boolean;
   GetTwiceNum():string;
   GetmyChildObj():aVSWT_ChildSerialize2Data;
   GetInt4():number;
   GetInt2():number;
   GetCString():string;
   GetNum4():string;
   InitValues();
   helpTest1(myBool:boolean, myNum:string, NSId:number, myEnum:string, myText:string):boolean;
}
declare class aVSWT_Serialize2Data extends aFullObject {
   MyOwner: string ;
   Name: string ;
}
/**
*In order to set your method callable, you need to set in method's comment 2 annotations:
First, @url to indicate for which url your method can be called
and @method to indicate which http method need to be used to call your method (GET, PUT, ...).
In @url you can add method's parameters like this <myParam>.
Example:
@url *\/api/rest/{myVar1}/{myVar2}
@method GET
*/
declare class aWT_RestResource extends aWT_HttpServlet {
   NewRequest():aWT_RestRequest;
   NewResponse():aWT_RestResponse;
   DeserializeVarFromRequest(theVar:string, VarType:aType, FromThisObject:aLightObject):boolean;
   DeserializeFromRequest(theObj:string, ObjType:aType):boolean;
   SerializeToResponse(theVar:string, VarType:aType):boolean;
   SerializeVarToResponse(theVar:string, VarType:aType, FromThisObject:aLightObject):boolean;
   ExecuteMethodFromRequest(OutPut:string, myInst:aLightObject, MethodDesc:aMethodDesc):boolean;
   helpExecuteMethodFromRequest();
   GetNextEntityNode(FromNode:aWT_MMNode, VarName:string):aWT_MMNode;
   AfterExecution();
}
declare class aVSWT_GenericDecorationAPI extends aWT_GenericAPI {
   AffinityTest1(buid1:aFullObject, buid2:aFullObject);
   AffinityTest2(buid1:aVSWT_SerializeData, buid2:aFullObject);
   AffinityTest3(buid1:aFullObject, buid2:aVSWT_SerializeData);
   AffinityTest4(buid1:aVSWT_SerializeData, buid2:aVSWT_SerializeData);
   RedirectTest1(buid1:aVSWT_SerializeData):aVSWT_SerializeData;
   RedirectTest2(buid1:aVSWT_SerializeData):aVSWT_SerializeData;
   ReturnJsonValue():aWT_JsonValue;
   URLParameter();
   PayLoad1(Entity:aFullObject):aFullObject;
   PProcessor1(PPEntity1:aVSWT_SerializeData);
   PProcessor2(PPEntity2:aVSWT_ChildSerializeData);
   ReferenceTest1(Entity:aVSWT_SerializeData):aVSWT_SerializeData;
   URLMappingTest1(Object:aVSWT_Serialize2Data, Code:number, Code2:string, Code3:aFullObject, Code4:string);
   ViewQualifier1(Object:aVSWT_SerializeData):aVSWT_SerializeData;
   SetRefURLOption();
   ExecuteWInterfaceVS(VSClassName:string);
}
declare class aWT_RestRequest extends aWT_HttpRequest {
   HasRange: string ;
   StartRange: string ;
   EndRange: string ;
   DataLastModifDate: string ;
   DataType: string ;
   DecorationInfo: string ;
   Terminate();
   SetDefaultHttpHeadersWhenRequired();
   HasParameterFromMethodInfo(Name:string, MethodInfo:string):boolean;
   GetParameterFromMethodInfo(Name:string, MethodInfo:string):string;
   ReInitDecorationInfo();
   ReInit();
   NewDefaultDeserializer():aWT_RestJsonSerializer;
   CopyVarsTo(HttpRequest:aWT_RestRequest);
}
declare class aWT_RestResponse extends aWT_HttpResponse {
   RangeHeader: string ;
   DataLastModifDate: string ;
   DataType: string ;
   BodyAsJson: string ;
   BodyAsVar: string ;
   Terminate();
   GetDefaultCacheControl();
   NewDefaultSerializer():aWT_RestJsonSerializer;
   ReInitIntermediateBody();
   ReInit();
   BeforeSerialize();
   GetDefaultContentType();
   IsSerializable();
   SerializeAsDataStruct();
   Serialize();
}
declare class aWT_RenamingTypeExtension extends aWT_TypeExtension {
   _InternalAsJsonSchema(VarType:aRenamingType, Vardesc:aVarDesc, Definitions:string, DefinitionsType:aSequenceType, AddToDef:boolean):aWT_JsonCollection;
   GetMetaModelSubNodesFromData();
   MallocSubNode();
   MallocVarAddressNode(NewNode:aWT_MMNode, VarType:aRenamingType, JsonValue:aWT_JsonValue):boolean;
   GetMetaModelSubNodes();
   ConvertFromJson(JsonObj:aWT_JsonObj, vartype:aRenamingType, varaddress:string):boolean;
   ConvertFromText(InText:string, vartype:aRenamingType, VarAddress:string):boolean;
   AsText(Outtext:string, VarType:aRenamingType, VarAddress:string);
   PurgeAndKill(theVar:string, VarType:aRenamingType);
   AsJsonValue(theVar:string, VarType:aRenamingType):aWT_JsonValue;
}
declare class aWT_ObjectModule extends aLightObject {
   PrepareEntityNewVersion(theEntity:aFullObject, T:aTransaction, NewVersion:aFullObject):boolean;
   PrepareEntityProject(theEntity:aFullObject, T:aTransaction):boolean;
   IsBusinessObjectInDatabase(BusinessObject:aLightObject):boolean;
   UIdAsFullId(UId:string):string;
   helpUIdAsFullId();
   FullIdAsUId(FullId:string, VersionParam:string, RedundantInfo:string):string;
   RefFullIdAsUId(RefFullId:string, RedundantInfo:string):string;
   BusinessObjectAsUId(BusinessObject:aFullObject, VersionParam:string):string;
   UIdAsBusinessObject(UId:string):aLightObject;
}
declare class aVSWT_ChildSerialize2Data extends aVSWT_Serialize2Data {
   FirstName: string ;
   Age: string ;
}
declare class aWT_MMNode extends aLightObject {
   VarDesc: string ;
   VarType: string ;
   VarAddress: string ;
   Rank: string ;
   DeepLevel: string ;
   DeepValid: string ;
   ExternalValue: string ;
   VarAddressToFree: string ;
   Parent: string ;
   _reflist: string ;
   _QualifiersCrossed: string ;
   IsQualifierCrossed(QualifierName:string):boolean;
   CrossQualifier(QualifierName:string);
   GetNodeName():string;
   GetRoot():aWT_MMNode;
   HasRef(Obj:aLightObject):boolean;
   AppendRef(Obj:aLightObject);
   IsValidDeep():boolean;
   SetValidDeep(IsValid:boolean);
   StringExtract();
   IsRefto():boolean;
   IsClassDef():boolean;
   IsListOf():boolean;
   NbEltInList():number;
   IsOwner():boolean;
   Init();
   Clean();
   MallocVarAddress();
   Terminate();
   GetBuidFromVarAddress():string;
   IsVarDesc(VarDesc:aIdentifierDesc, ClassDef:aRecordDesc):boolean;
}
declare class aWT_ViewQualifier extends aWT_Qualifier {
   TriggerList: string ;
   View: string ;
   CurInstance: string ;
   ViewChecked: string ;
   FindVarFromAdditionalView(TheView:aScenario, VarToFind:aIdentifierDesc):boolean;
   GetClone():aWT_ViewQualifier;
   CheckVarWithMyVar(MyVar:aFullObject, VarToFind:aIdentifierDesc):boolean;
   AppendTrigger(Trigger:aClassDef, View:aScenario);
   FindVarFromView(TheView:aScenario, VarToFind:aIdentifierDesc):boolean;
   IsAlreadyChecked(Node:aWT_MMNode):boolean;
   ExecuteForSerialize();
   CustomGetMetaModelSubNodes(Node:aWT_MMNode):string;
}
declare class aWT_JSONMMQualifier extends aWT_Qualifier {
   MySerializer: string ;
   ForbiddenVars: string ;
   AddForbiddenVar();
   NewSerializer();
   Init();
   Terminate();
   WriteFirstInClassNode(Node:aWT_MMNode, ClassDef:aClassDef);
   WriteVarInNode(Node:aWT_MMNode, TheVar:aVarDesc);
   ExecuteForSerialize();
}
declare class aWT_JSONCandidatesQualifier extends aWT_Qualifier {
   ExecuteForSerialize(Node:aWT_MMNode, Data:aWT_JsonValue):aWT_JsonValue;
}
declare class aWT_AdvancedRestResource extends aWT_RestResource {
   curEntityNode: string ;
   PathExploded: string ;
   Init();
   Terminate();
   UpdateResponseFromRangeHeader();
   MoveNextMetaModelEntityNode(VarName:string);
   MoveNextEntityNode(VarName:string);
   SetCurEntityNodeFrom(Path:string);
   DefaultGET(Path:string);
   DefaultHEAD(Path:string);
   DefaultPATCH(Path:string);
   DefaultPUT(Path:string);
}
declare class aWT_GenericInstanceAPI extends aWT_GenericAPI {
   CustomizeSerializer(Serializer:aWT_Serializer, HttpMethod:string);
   GetObject(Object:aFullObject):aFullObject;
   PartialUpdateObject(Object:aFullObject);
   ResetFlatVar(FromThisObject:aFullObject);
   FullUpdateObject(Object:aFullObject);
   CreateNewObject();
}
declare class aWT_GenericTypeAPI extends aWT_GenericAPI {
   NewResponse():aWT_JsonSchemaResponse;
   CustomizeSerializer(Serializer:aWT_Serializer);
   GetTypeDescription(ClassName:string, TypeName:string);
}
declare class aWT_GenericCandidateAPI extends aWT_GenericAPI {
   CustomizeSerializer(Serializer:aWT_Serializer);
   GetCandidates(ClassName:string, TypeName:string);
}
declare class aWT_GenericVariableAPI extends aWT_GenericAPI {
   CustomizeSerializer(Serializer:aWT_Serializer);
   CustomizeSerializerForListOf(Serializer:aWT_Serializer, Object:aFullObject, ListOfName:string);
   FindVar(Object:aFullObject, VarName:string):aWT_MMNode;
   GetVariable(Object:aFullObject, VarName:string);
   FullListUpdate(Object:aFullObject, ListOfName:string);
   PurgeList(Object:aFullObject, ListOfName:string);
   AddNewItemInList(Object:aFullObject, ListOfName:string);
   AddExistingItemInList(Object:aFullObject, ListOfName:string, SubObject:aFullObject);
   DeleteExistingItemInList(Object:aFullObject, ListOfName:string, SubObject:aFullObject);
}
declare class aWT_GenericModelAPI extends aWT_GenericAPI {
   NewResponse():aWT_JsonSchemaResponse;
   CustomizeSerializer(Serializer:aWT_Serializer);
   GetClassDescription(ClassName:string);
   GetVarDescription(ClassName:string, VarName:string);
}
declare class aWT_GenericAPI extends aWT_RestResource {
}
declare class aWT_CryptAPIInterface extends aLightObject {
   EncryptAdd: string ;
   EncryptEP: string ;
   Decryptadd: string ;
   DecryptEP: string ;
   SignAdd: string ;
   SignEP: string ;
   SignFileAdd: string ;
   SignFileEP: string ;
   VerifySignAdd: string ;
   VerifySignEP: string ;
   VerifyFileSignAdd: string ;
   VerifyFileSignEP: string ;
   SignAndEncryptAdd: string ;
   SignAndEncryptEP: string ;
   DecryptAndVerifySignAdd: string ;
   DecryptAndVerifySignEP: string ;
   HashAdd: string ;
   HashEP: string ;
   HashFileAdd: string ;
   HashFileEP: string ;
   InitwLibCryptEntryPoints();
   Init();
   Encrypt(pInputBuffer:string, inputBufferLength:number, storeName:string, subjectName:string, pOutputBuffer:string, outputBufferLength:number):number;
   Decrypt(pInputBuffer:string, inputBufferLength:number, storeName:string, subjectName:string, pOutputBuffer:string, outputBufferLength:number):number;
   Sign(pInputBuffer:string, inputBufferLength:number, storeName:string, subjectName:string, pSignature:string, signatureLength:number):number;
   SignFile(fileName:string, storeName:string, subjectName:string, pSignature:string, signatureLength:number):number;
   VerifySign(pInputBuffer:string, inputBufferLength:number, pSignature:string, signatureLength:number, storeName:string, subjectName:string):number;
   VerifyFileSign(fileName:string, pSignature:string, signatureLength:number, storeName:string, subjectName:string):number;
   SignAndEncrypt(pInputBuffer:string, inputBufferLength:number, storeName:string, subjectName:string, pOutputBuffer:string, outputBufferLength:number):number;
   DecryptAndVerifySign(pInputBuffer:string, inputBufferLength:number, storeName:string, subjectName:string, pOutputBuffer:string, outputBufferLength:number):number;
   Hash(pInputBuffer:string, inputBufferLength:number, AlgID:number, pOutputBuffer:string, outputBufferLength:number):number;
   HashFile(fileName:string, AlgID:number, pOutputBuffer:string, outputBufferLength:number):number;
}
declare module WT_CryptAPILib {
   function API():aWT_CryptAPIInterface;
}
declare class aWT_ListOfInstancesClassExtension extends aWT_ArrayTypeExtension {
   _InternalAsJsonSchema();
   IsFlatItems(ListOfType:aListOfInstancesType, ListAddress:string):boolean;
   GetObjectAddressAt(TheListOf:aListOfInstances, Rank:number):string;
   GetRankOf(ThisObject:aFullObject, ListAddress:string):number;
   DeleteAt(ListOfType:aListOfInstancesType, FromThisObject:aFullObject, Rank:number, ListAddress:string):boolean;
   DeleteAll(ListOfType:aListOfInstancesType, FromThisObject:aFullObject, ListAddress:string):boolean;
   InsertOrUpdateExisting(ListOfType:aListOfInstancesType, FromThisObject:aFullObject, ListAddress:string, NewObject:aFullObject, Rank:number):boolean;
   GetMetaModelSubNodes();
   MallocSubNode();
   GetMetaModelSubNodesFromData();
   PurgeAndKill(theVar:string, VarType:aListOfInstancesType);
   AsJsonValue(theVar:string, VarType:aType):aWT_JsonArray;
   IsListOfType();
   Compare();
}
declare class aWT_Config extends aLightObject {
   Data: string ;
   FileLastWriteTime: string ;
   _ErrorMessage: string ;
   ConfigFile():string;
   Purge();
   FileExists():boolean;
   GetConfigLastChangeTime():string;
   ConfigHasChanged():boolean;
   InitData();
   ReInit();
   Init();
   ReInitWhenConfigChanges();
   GetValues(Path:string):string;
   CanBeUsed():boolean;
   GetCString(Path:string):string;
   Get(Path:string):string;
   GetInt4(Path:string):number;
   GetBoolean(Path:string):boolean;
   IsNull(Path:string):boolean;
   Exist(Path:string):boolean;
   ErrorMessage():boolean;
}
declare class aWT_UrlMappingServerRouter extends aWT_UrlDecorationServerRouter {
   GetRequestAffinity();
   FillMethodLaunchInfoList();
}
declare class aWT_DefaultUrlMappingSettings extends aWT_UrlDecorationSettings {
   DisableRefURL: string ;
   FillParametersBuffer(ParametersBuffer:string, MethodInfo:string, MethodType:aMethodType, Node:aWT_MMNode):boolean;
   ReplaceParameters(Methodtype:aMethodType, ParametersBuffer:string, URL:string);
   LaunchMethod(Ref:string, URL:string, Node:aWT_MMNode):boolean;
   GetNodeURL();
   SetDefaultConfig();
   ReInit();
}
declare class aWT_UrlDecorationSettings extends aWT_UrlSettings {
   RefURLs: string ;
   MethodForInstanceURL: string ;
   GetURLPattern(HttpMethod:string, MethodDesc:aMethodDesc):string;
   GetHttpMethod(UrlPattern:string, MethodDesc:aMethodDesc):string;
   GetMethodDesc(UrlPattern:string, HttpMethod:string):aMethodDesc;
   GetInstanceURLFromBuid(URL:string, Buid:string);
   GetUrlFromBuid(URL:string, Buid:string);
   GetInstanceURL();
   GetModelURL();
   GetCandidateURL();
   GetTypeURL();
   GetNodeURL();
   PreProcess(UrlPattern:string, HttpMethod:string, MethodDesc:aMethodDesc);
   MapIncomingUrl(UrlPattern:string, HttpMethods:string, MethodDesc:aMethodDesc);
   SetInstanceURL(UrlPattern:string, MethodDesc:aMethodDesc);
   ReInit();
   MapOutgoingUrl(URLPattern:string, MethodToConvertParam:aMethodDesc);
   MapUrl(UrlPattern:string, FindObjFromParamsMethodDesc:aMethodDesc, HttpMethods:string, FindParamsFromObjMethodDesc:aMethodDesc);
}
/**
*Need aWT_DefaultUrlMappingSettings to work
*/
declare class aVSWT_GenericAPI extends aVSWT_ValidationSuites {
   Request: string ;
   Response: string ;
   BaseURL: string ;
   MainVSEntityBuid: string ;
   HttpConnection: string ;
   InitFrom(ThisObject:aVSWT_GenericAPI);
   ReInitForQuery();
   SetRefURLOption(Enable:boolean):boolean;
   MakeNewVSEntity();
   ExecuteVS();
   ExecuteAllVS();
}
declare class aVSWT_GenericInstanceAPI extends aVSWT_GenericAPI {
   GetObject();
   PartialUpdateObject();
   FullUpdateObject();
   CreateNewObject();
   ExecuteVS();
}
declare class aVSWT_GenericTypeAPI extends aVSWT_GenericAPI {
   GetTypeDescription();
   ExecuteVS();
}
declare class aVSWT_GenericCandidateAPI extends aVSWT_GenericAPI {
   GetCandidates();
   ExecuteVS();
}
declare class aVSWT_GenericVariableAPI extends aVSWT_GenericAPI {
   GetVariableCandidate();
   GetVariableType();
   GetVariableModel();
   GetVariable();
   FullListUpdate();
   PurgeList();
   AddNewItemInList();
   AddExistingItemInList();
   DeleteExistingItemInList();
   ExecuteVS();
}
declare class aVSWT_GenericModelAPI extends aVSWT_GenericAPI {
   GetClassDescription();
   GetVarDescription();
   ExecuteVS();
}
declare class aVSWT_ChildSerializeData extends aVSWT_SerializeData {
}
declare class aVSWT_GenericAuthAPI extends aVSWFX_GenericAPI {
   ExecuteVS();
}
declare class aWT_JSONSchemaQualifier extends aWT_Qualifier {
   JsonSchemaURL: string ;
   DefSeq: string ;
   GetClone():aWT_JSONSchemaQualifier;
   DefExist(Node:aWT_MMNode, Rank:number):boolean;
   GetLinks(Node:aWT_MMNode):aWT_JsonArray;
   Init();
   GetRecordJsonSchema(VarType:aRecordDesc, Vardesc:aVarDesc, Definitions:string, DefinitionsType:aSequenceType, AddToDef:boolean, PropData:aWT_JsonCollection):aWT_JsonCollection;
   ExecuteForSerialize();
}
declare class aWT_TimestampTypeExtension extends aWT_TypeExtension {
   ConvertFromWFTime(Timestamp:number, t:number);
   helpInitFromTime();
   ConvertFromWFDate(Timestamp:number, d:number);
   helpInitFromDate();
   AsWFTime(Timestamp:number):number;
   helpAsTime();
   AsWFDate(Timestamp:number):number;
   helpAsDate();
   _SearchIndexForEnum(inString:string, atIndex:number, Enum:aEnumType, Success:boolean):number;
   _SearchForVariableLenghtInt(inString:string, atIndex:number, maxVal:number, Success:boolean):number;
   help_SearchForVariableLenghtInt();
   _ConvertTimeZoneFromCString(TimeZone:string, inString:string, atIndex:number, TimeZonePattern:string):boolean;
   _RecordAsTimeZone(TimestampRecord:string, TimeZonePattern:string, IsTranslated:string):string;
   _ConvertMonthFromCString(Month:string, inString:string, atIndex:number, MonthPattern:string, IsTranslated:string, Success:boolean):boolean;
   _RecordAsMonth(TimestampRecord:string, MonthPattern:string, IsTranslated:string):string;
   _ConvertYearFromCString(Year:string, inString:string, atIndex:number, YearPattern:string):boolean;
   _RecordAsYear(TimestampRecord:string, YearPattern:string):string;
   _ConvertDayFromCString(Day:string, inString:string, atIndex:number, DayPattern:string, IsTranslated:string):boolean;
   _RecordAsDay(TimestampRecord:string, DayPattern:string, IsTranslated:string):string;
   _ConvertHourFromCString(Hour:string, inString:string, atIndex:number, HourPattern:string):boolean;
   _RecordAsHour(TimestampRecord:string, HourPattern:string):string;
   _ConvertMinutFromCString(Minut:string, inString:string, atIndex:number, MinutTemplate:string):boolean;
   _RecordAsMinut(TimestampRecord:string, MinutPattern:string):string;
   _ConvertSecondFromCString(Second:string, inString:string, atIndex:number, SecondTemplate:string):boolean;
   _RecordAsSecond(TimestampRecord:string, SecondPattern:string):string;
   _ConvertMeridiemFromCString(Meridiem:string, inString:string, atIndex:number, MeridiemTemplate:string):boolean;
   _RecordAsMeridiem(TimestampRecord:string, MeridiemPattern:string):string;
   _FillRecordFromPattern(tsRecord:string, inString:string, indexString:number, Pattern:string, IsTranslated:string):boolean;
   ConvertRecordFromCString(tsRecord:string, inString:string, Template:string, IsTranslated:string):boolean;
   GetNumberOfDaysInMonth(Year:number, Month:number):number;
   GetNumberOfDaysInMonthFromRecord(TimestampRecord:string):number;
   helpGetNumberOfDaysInMonth();
   IsRecordValid(TimestampRecord:string):boolean;
   helpIsRecordValid();
   NormalizeRecord(TimestampRecord:string);
   helpNormalizeRecord();
   ConvertFromRecord(Timestamp:number, TimestampRecord:string);
   ConvertFromCString(Timestamp:number, inString:string, Template:string, IsTranslated:string):boolean;
   helpConvertFromCString();
   AsDateRecord(Timestamp:number):string;
   AsTimeRecord(Timestamp:number):string;
   AsRecord(Timestamp:number):string;
   GetNumberOfDaysInMonthFromTs(Timestamp:number):number;
   GetCStringFromPattern(TimestampRecord:string, Template:string, IsTranslated:string, TimeZone:string):string;
   ConvertFromNumbers(Timestamp:number, Year:string, Month:string, Day:string, Hour:string, Minut:string, Second:string, TimeZone:string);
   helpConvertFromNumbers();
   AsCString(Timestamp:number, Template:string, IsTranslated:string, TimeZone:string):string;
   helpAsCString();
   AsJsonValue();
   AsText();
   ConvertFromJson();
   ConvertFromText();
   _InternalAsJsonSchema();
   IncSecond(Timestamp:number, NumberOfSeconds:number);
   IncMinut(Timestamp:number, NumberOfMinuts:number);
   IncHour(Timestamp:number, NumberOfHours:number);
   IncDay(Timestamp:number, NumberOfDays:number);
   IncWeek(Timestamp:number, NumberOfWeeks:number);
   IncMonth(Timestamp:number, NumberOfMonths:number);
   helpIncMonth();
   IncYear(timestamp:number, NumberOfYears:number);
}
declare class aWT_ReversIntTypeExtension extends aWT_IntTypeExtension {
   Abs(i:number):number;
}
declare class aWT_PointerTypeExtension extends aWT_TypeExtension {
   AsJsonValue();
   GetInt4FromBuffer(BufferInPos:string):number;
   GetCStringFromBuffer(BufferInPos:string):string;
   GetCharsFromBuffer(BufferInPos:string):string;
   PutCharsInBuffer(Buffer:string, BufferSize:number, BufferPos:string, Value:string);
   PutTextInBuffer(Buffer:string, BufferSize:number, BufferPos:string, Value:string);
   PutInt4InBuffer(Buffer:string, BufferSize:number, BufferPos:string, Value:number);
   PutBinaryTextInBuffer(Buffer:string, BufferSize:number, BufferPos:string, Value:string);
   _InternalAsJsonSchema();
}
declare class aWT_FancySetTypeExtension extends aWT_CStringTypeExtension {
   AsJsonValue(theVar:string, VarType:aSetType):aWT_JsonArray;
   ConvertFromJson(JsonObj:aWT_JsonArray, vartype:aSetType, varaddress:string):boolean;
}
declare class aTimestampType extends aIntType {
   Init();
   BehavesAs();
}
declare class aWT_UrlSettings extends aLightObject {
   Router: string ;
   URLCreatingMode: string ;
   NbVarMaxToLoad: string ;
   Init();
   GetInstanceURL(URL:string, Instance:aFullObject);
   GetModelURL(URL:string, Instance:aLightObject);
   GetTypeURL(URL:string, VarType:aType);
   GetCandidateURL(URL:string, VarType:aType);
   GetNodeURL(URL:string, Node:aWT_MMNode);
   GetSearchURL(VarType:aType, SearchURL:string);
   GetHttpMaxRange(TheStartRange:number, TheEndRange:number, MaxRank:number):boolean;
   IsAcceptedRange(RangeToTest:number, MaxRank:number):boolean;
}
declare class aWT_DefaultProcessor extends aWT_HttpServlet {
   FilterSystemVars();
   AllowCORS();
   Manage304ResourceNotModified(MethodInfo:string);
   ExecutePayload();
}
declare class aVSWT_GenericAPI001Agent extends aUIAgent {
   BaseURL: string ;
   BaseURLStaticText: string ;
   ExecuteVS001: string ;
   Log: string ;
   LogStaticText: string ;
   AlertMode: string ;
   AlertModeStaticText: string ;
   ExecuteAllVS: string ;
}
declare class aWT_DataStruct extends aLightObject {
   _Parent: string ;
   _Root: string ;
   GetParent():aWT_DataStruct;
   GetRoot():aWT_DataStruct;
   SetParent(Parent:aWT_DataStruct);
   GetLevel():number;
   GetIndent():string;
   ExtendWith(Data:aWT_DataStruct);
   asText(theText:string);
   AppendSubData(Name:string, Data:aWT_DataStruct);
   AppendAttribute(Name:string, Value:string);
   AppendInt4Attribute(Name:string, Value:number);
   AppendTextAttribute(Name:string, Value:string);
   GetAttribute(Name:string):string;
   GetTextAttribute(Name:string, Value:string);
   SearchSubDataByName(Name:string):aWT_DataStruct;
   SearchSubDataByNode(Node:aWT_MMNode):aWT_DataStruct;
   RemoveSubData(SubData:aWT_DataStruct);
   AppendSubDataCString(Data:string);
   AppendNewArray(Name:string):aWT_DataStruct;
   FindSubDataFromNode(Node:aWT_MMNode):aWT_DataStruct;
}
declare class aWT_DelegateQualifier extends aWT_Qualifier {
   DelegateMethods: string ;
   DelegateVars: string ;
   DelegateVirtual: string ;
   DataAlreadySerialized: string ;
   FuncCallerList: string ;
   RenameList: string ;
   GetClone():aWT_DelegateQualifier;
   RenameVar(VarDesc:aIdentifierDesc, RecordDesc:aRecordDesc, NewName:string);
   AppendFuncToSerialize(MethodDesc:aMethodDesc, ClassDef:aClassDef);
   AppendVirtual(TriggerName:string, TriggerOwner:aRecordDesc, MethodToExecute:aMethodDesc, OnThisInstance:aLightObject);
   Append(Trigger:aEntity, MethodToExecute:aMethodDesc, OnThisInstance:aLightObject);
   AppendOwner(Trigger:aEntity, TriggerOwner:aRecordDesc, MethodToExecute:aMethodDesc, OnThisInstance:aLightObject);
   Purge();
   FillParametersBuffer(ParametersBuffer:string, Method:string, Param:string):boolean;
   LaunchMethod(Method:string, Param:string, Result:string):boolean;
   AppendSubData(Data:aWT_DataStruct, ParentClassDef:aRecordDesc, SubNodeName:string, SubData:aWT_DataStruct);
   GetBearerAddress(VarAddress:string, VarType:aType):string;
   ExecuteForSerialize();
}
declare class aWT_JsonSerializer extends aWT_Serializer {
   InitQualifiers();
   AppendJSONQualifier(ExploreReftoMaxLevel:number, ExploreListOfMaxLevel:number);
   AppendJSONCandidatesQualifier();
   AppendJSONSchemaQualifier(ExploreReftoMaxLevel:number, ExploreListOfMaxLevel:number);
   DeserializeFromJsonValue(JsonValue:aWT_JsonValue, InToVarAddress:string, VarType:aType):boolean;
   DeserializeVar();
   DeserializeFromVarName();
   Deserialize();
   helpDeserialize();
   SerializeVar();
   SerializeFromVarName();
   Serialize();
   SerializeAsJsonValue(OutJsonValue:aWT_JsonValue, VarAddress:string, VarType:aType):boolean;
   SerializeAsDataStruct(OutDataStruct:aWT_JsonValue, VarAddress:string, VarType:aType):boolean;
   DelegateExample(RefList:aWT_ListOfRef, Node:aWT_MMNode):boolean;
   helpSerialize2();
   helpSerialize();
}
declare class aWT_RecordQualifier extends aWT_Qualifier {
   SpreadOwner: string ;
   SpreadPA: string ;
   BlackList: string ;
   BlackListExceptions: string ;
   WhiteList: string ;
   WhiteListExceptions: string ;
   OwnersNotSerialized: string ;
   PAsSerialized: string ;
   RenameList: string ;
   VarLimitList: string ;
   _ClassVarBuffer: string ;
   GetClone():aWT_RecordQualifier;
   IsBlackListed(ClassDef:aRecordDesc, VarDesc:aIdentifierDesc):boolean;
   IsWhiteListed(ClassDef:aRecordDesc, VarDesc:aIdentifierDesc):boolean;
   FilterNodes(Nodes:string);
   RenameVar(VarDesc:aIdentifierDesc, RecordDesc:aRecordDesc, NewName:string);
   AppendPASerialized(VarDesc:aVarDesc, ClassDef:aClassDef);
   AppendVarLimit(RecordDesc:aRecordDesc);
   AppendOwnerNotSerialized(VarDesc:aVarDesc, ClassDef:aClassDef);
   AppendBlackVarOnClass(VarDesc:aVarDesc, RecordDesc:aRecordDesc);
   AppendBlackVarException(VarDesc:aVarDesc, RecordDesc:aRecordDesc);
   AppendWhiteVarOnClass(VarDesc:aVarDesc, RecordDesc:aRecordDesc);
   AppendWhiteVarException(VarDesc:aVarDesc, RecordDesc:aRecordDesc);
   Init();
   ResolveVarLimitRecord(Node:aWT_MMNode):aRecordDesc;
   FilterVars(RecordDesc:aRecordDesc, Vars:string);
   GetMetaModelSubNodes(Node:aWT_MMNode, TypeX:aWT_RecordDescExtension):string;
   GetMetaModelSubNodesFromData(Node:aWT_MMNode, TypeX:aWT_TypeExtension, Data:aWT_DataStruct):string;
   AppendSubData(Data:aWT_DataStruct, SubNode:aWT_MMNode, SubData:aWT_DataStruct);
   WalkThroughNodes(Node:aWT_MMNode, TypeX:aWT_RecordDescExtension, Data:aWT_DataStruct);
   AppendParentAttr(Node:aWT_MMNode, Data:aWT_DataStruct);
   AppendVersionAttr(Node:aWT_MMNode, data:aWT_DataStruct);
   GetNodePath(Node:aWT_MMNode, Path:string);
   GenerateDataStruct(Node:aWT_MMNode, Data:aWT_DataStruct):aWT_DataStruct;
   GetDataStructByCall(Url:string, Node:aWT_MMNode):aWT_DataStruct;
   CanSpreadOwner(Node:aWT_MMNode):boolean;
   CanSpreadPA(Node:aWT_MMNode):boolean;
   ExecuteForSerialize();
   ExecuteForDeserialize();
   Terminate();
}
declare class aWT_ReferenceQualifier extends aWT_Qualifier {
   SpreadOwner: string ;
   SpreadPA: string ;
   OwnersNotSerialized: string ;
   PAsSerialized: string ;
   GetClone():aWT_ReferenceQualifier;
   AppendPASerialized(VarDesc:aVarDesc, ClassDef:aClassDef);
   AppendOwnerNotSerialized(VarDesc:aVarDesc, ClassDef:aClassDef);
   Init();
   CanSpreadOwner(Node:aWT_MMNode):boolean;
   CanSpreadPA(Node:aWT_MMNode):boolean;
   IsAcceptedRange(Node:aWT_MMNode):boolean;
   ExecuteForSerialize();
   ExecuteForDeserialize();
}
declare class aWT_UrlQualifier extends aWT_Qualifier {
   ExecuteForSerialize();
}
declare class aVSWT_SerializeData001Agent extends aUIAgent {
   myText: string ;
   myTextStaticText: string ;
   myEnum: string ;
   myEnumStaticText: string ;
   myBool: string ;
   owned: string ;
   ownedStaticText: string ;
   myListOfOwned: string ;
   myListOfOwnedGroupBox: string ;
}
declare class aVSWT_ValidationSuites extends aLightObject {
   Log: string ;
   NbErrors: string ;
   AlertMode: string ;
   InitFrom(ThisObject:aVSWT_ValidationSuites);
   LogStartTest(Title:string);
   LogEndTest(Title:string);
   LogOK();
   LogFailed();
   ExecuteVS();
   ExecuteAllVS();
}
declare class aVSWT_DecorationAPI extends aVSWT_GenericAPI {
   VSFullObject1: string ;
   VSFullObject2: string ;
   MainVSEntityBuid2: string ;
   ChildEntity: string ;
   AffinityTest();
   RedirectTest();
   ReturnJsonValue();
   URLParameter();
   PreProcessor();
   RefQualifier();
   URLMappingTest();
   ViewQualifier();
   ExecuteVS();
   MakeNewVSEntity();
}
declare class aWT_JsonSchemaResponse extends aWT_RestResponse {
   NewDefaultSerializer():aWT_JsonSchemaSerializer;
   NewSerializer():aWT_JsonSchemaSerializer;
}
declare class aVSWT_GenericJsonSchemaAPI extends aWT_GenericAPI {
   NewResponse():aWT_JsonSchemaResponse;
   JsonSchemaTest(Usecase:number):aLightObject;
}
declare class aVSWT_JsonSchemaAPI extends aVSWFX_GenericAPI {
   JsonSchemaTest();
   JsonSchemaDelegateFunc();
   ExecuteVS();
}
/**
*Need aWFX_DefaultUrlMappingSettings to work
*/
declare class aVSWFX_GenericAPI extends aVSWT_GenericAPI {
}
declare class aWT_JsonSchemaSerializer extends aWT_JsonSerializer {
   InitQualifiers();
   SerializeVar();
}
declare class aWT_MethodInvocator extends aLightObject {
   Parameters: string ;
   AppendParam(Name:string, VarAddress:string);
   GetParamByName(Name:string):string;
   FillParametersBuffer(ParametersBuffer:string, MethodType:aMethodType):boolean;
   Execute(MethodDesc:aMethodDesc, Instance:aLightObject):string;
   hello(world:string):string;
   helpExecute();
}
declare class aWT_MethodTypeExtension extends aLightObject {
   GetMethodType(MethodDesc:aMethodDesc):aMethodType;
}
declare class aWT_AdvResource extends aWT_RestResource {
   Declare():string;
}
declare class aWxInOutPresentor extends aInOutPresentor {
   InitHistory();
}
/**
*Bookmark of any aEntity. This is used in RefDev History presentor.
*/
declare class aWxIDEBookmark extends aEntity {
   MyCategory: string ;
   MyLabel: string ;
}
/**
*Bookmark Category : collection of bookmark on entities (aEntity) for a given scope.
Ex of bookmark category implementedt  : Bookmark on ref DB events
*/
declare class aWxIDEBookmarkCategory extends aEntity {
   PossibleLabel: string ;
   FindOrCreateLabel(TheSelf:aWxIDEBookmarkCategory, thisStatusName:string):aWxIDEBookmarkLabel;
   InitPossibleLabels();
   Init();
}
/**
*Custom base eWam Class to add new features.
- change annotation on code

This is using sub class of aVersionAnalyzer
*/
declare class aWxLightEvent extends aLightEvent {
   TheHistoryPresentor: string ;
   KindOfModification: string ;
   MyBookmarkLabel: string ;
   GenerateInfofromEventInVA(inVA:aVersionAnalyzer);
   FindLeftPreviousVersionForVAInHistoryPresentor():number;
   FindPreviousVersionInRefTGV():number;
   GetKindOfModification():string;
   PrepareVA();
   GetEntityversion():number;
   GetDayAndDateAndTime():string;
   GetChangeSetId():string;
   AnalyseWithGlobalDiff(forImplem:aModuleImplem);
   AlertCreation();
   AlertDeletion();
   AlertNoModif();
   DoGlobalWinDiffAnalysis();
   BuildHistoryVAOnEntityBetween2Events(VA:aWxVersionAnalyzer, farLeftEvent:aLightEvent, farRightEvent:aLightEvent);
   DoVersionAnalysisWithAnotherPreviousEvent(thePreviousLeftEvent:aLightEvent);
   DoGlobalWindDiffWithAnotherPreviousEvent(thePreviousLeftEvent:aLightEvent);
   BuildBookmarkID(idForBookmark:string);
   RefreshMyBookmarkLabel();
   ChangeBookMarkLabel(thisNewLabel:string);
   ToggleBookMark();
   UIBookMarkLabel():string;
   DoVersionAnalysis();
   CreateEventNodeForReport_MajorDefinitionChanges(inNode:aXMLNamedNode):aXMLNamedNode;
   EntityFullNameOf(thisEntity:aEntity):string;
   GenerateListfOfInstancesStructuralDifferencesInXmlNode(thisEvent:aWxLightEvent, inNode:aXMLNamedNode, DeletedList:aListOfInstances, FromChangedList:aListOfInstances, ToChangedList:aListOfInstances, AddedList:aListOfInstances, onlyDefChange:boolean);
   GenerateListofVarStructuralVarDifferencesInXmlNode(thisEvent:aWxLightEvent, inNode:aXMLNamedNode, varType:aType, OldValueAddress:string, NewValueAddress:string, onlyDefChange:boolean);
   GenerateXMLDiffForReport_StructuralModif(thisEvent:aWxLightEvent, leftDef:aModuleDef, rightDef:aModuleDef, inNode:aXMLNamedNode);
   GenerateReport_MajorDefinitionChanges(inNode:aXMLNamedNode);
   GetEntityNameAndClassName();
   Analyse();
}
declare class aWxIDEBookmakLabelAgent extends aUIAgent {
   Name: string ;
   NameStaticText: string ;
}
/**
*Predefined label to bookmark entities.
*/
declare class aWxIDEBookmarkLabel extends aEntity {
}
declare class aWxRefDevHistoryBookmarkLabelCriteriaRole extends aSingleRoleType {
   pickInMemOnly();
}
declare class aWxRefDevHistoryExtension extends aRefDevHistoryExtension {
   DoYourJob();
}
declare class aWxRefDevHistoryPresentorMainOldFashionAgent extends aRefDevHistoryPresentor001Agent {
   ReferenceCriteria: string ;
   ReferenceCriteriaStaticText: string ;
   NotifyInit();
   ReferenceCriteria_LoseFocus(:aUIAgent):number;
}
declare class WxRefDevHistoryPresentorMainAgent extends aUIAgent {
   aWxRefDevHistoryPresentor001: string ;
}
declare class aWxRefDevHistoryPresentor_SelectionAgent extends aUIAgent {
   Selection001: string ;
   HistoryCount: string ;
   ActionLoadHistory: string ;
   GroupBox: string ;
   NbrLogsLoaded: string ;
   NbrLogsLoadedStaticText: string ;
   StaticText: string ;
   ReferenceCriteria: string ;
   ReferenceCriteriaStaticText: string ;
   GroupBox001: string ;
   SelectedUser: string ;
   StaticText001: string ;
   StaticText002: string ;
   ActionApplyFilter: string ;
   tmpList: string ;
   count001: string ;
   StaticText003: string ;
   NbrLogsLoaded001: string ;
   EntityList: string ;
   EntityListStaticText: string ;
   EntityList001: string ;
   count002: string ;
   BookmarkCriteria: string ;
   StaticText004: string ;
   UnselectAllCriteriaEntity001: string ;
   CriteriaOnlyClassOrModules: string ;
   CriteriaNoUIagent: string ;
   CriteriaChangeID: string ;
   CriteriaChangeIDStaticText: string ;
   CriteriaEntityToSearchInDistingEntityList: string ;
   SearchInDinstinctList001: string ;
   RefreshFirstColumnWithNumberOfSeletedEntities();
   EntityList_ItemChecked(:aUIAgent, Item:number, Checked:boolean):number;
   EntityList_ValueLoaded(:aUIAgent);
   UnselectAllCriteriaEntity();
   SearchInDinstinctList();
}
declare class aWxRefDevHistoryPresentor_HistoryResultAgent extends aUIAgent {
   tmpList: string ;
   count001: string ;
   StaticText: string ;
   SelectedClass_ShowVersionAnalyzerWithPreviousVersion001: string ;
   SelectedLog_ShowLogDetail001: string ;
   SelectedClass_ShowGlobalWindiffWithPreviousVersion001: string ;
   Compare2SelectedVersionsUsingVA001: string ;
   Selected2Classes_CompareUsingWD001: string ;
   SelectedClass_ToogleBookmark001: string ;
   GenerateStructuralModificationsReport: string ;
   SelectedLog_ShowLogDetail();
   SelectedClass_ShowVersionAnalyzerWithPreviousVersionatRank(selectedRank:number);
   SelectedClass_CompareWithPreviousVersionUsingVA();
   SelectedClass_CompareWithPreviousVersionUsingWD();
   BuildHistoryVAOnEntityBetween2Events(VA:aWxVersionAnalyzer, farLeftEvent:aLightEvent, farRightEvent:aLightEvent);
   GetSelected2Events(leftEvent:aLightEvent, rightEvent:aLightEvent);
   Selected2Classes_CompareUsingVA();
   Selected2Classes_CompareUsingWD();
   tmpList_Executed(:aUIAgent, SelectedRank:number, Option:number):number;
   SelectedClass_ToogleBookmark();
   SelectedClass_ToogleBookmark001_ButtonUp(:aUIAgent, No:number, X:number, Y:number):number;
}
declare class aWxRefDevHistoryPresentor001Agent extends aSplitViewAgent {
}
/**
*This class override eWam Base class to add new features:
 - more criteria when searchin events in Ref repository  : Reference ID (wERP WPR), ...
 - ability to bookmark events
 - instanciates sub class of aLightEvent and  aVersionAnalyzer
      - to generate additionnal information in source code of classes (WPR  + Signature of devepers)
      - to show differences on scenario
 - generate addtional report : Structural modification report
 - use WinMerge as diff tool instead of WinDiff
*/
declare class aWxRefDevHistoryPresentor extends aRefDevHistoryPresentor {
   CriteriaReference: string ;
   CriteriaBookmark: string ;
   CriteriaEntityList: string ;
   CriteriaOnlyClassOrModules: string ;
   CriteriaNoUIagent: string ;
   CriteriaChangeID: string ;
   CriteriaEntityToSearchInDistingEntityList: string ;
   AppendEntityInCriteria(thisEntity:aEntity);
   RemoveEntityInCriteria(thisEntity:aEntity);
   NumberOfEntitiesInCriteria():number;
   meetsSelection();
   LoadMoreLogsFromAddress();
   RefreshBookMarkInfoOnEvents();
   ActionApplyFilter();
   ActionLoadHistory();
   Init();
   ReLoadHistory();
   Terminate();
   GenerateStructuralModificationsReport();
   ActionSelectBookmarkUsingPopup():aWxIDEBookmarkLabel;
}
declare class WxScenarioDiffPresentor_LeftAgent extends aUIAgent {
   LeftScen: string ;
   aScenario001: string ;
}
declare class WxScenarioDiffPresentor_RightAgent extends aUIAgent {
   RightScen: string ;
   aScenario001: string ;
}
declare class aWxScenarioDiffPresentor001Agent extends aSplitViewAgent {
}
declare class aWxScenarioDiffPresentorMainAgent extends aUIAgent {
   aWxScenarioDiffPresentor001: string ;
   ShowWDOnUIAgents: string ;
   ShowDiffInDesigners001: string ;
   ShowXMLDiffOfScensInWM: string ;
   ShowDiffInDesigners();
   NotifyPaint();
}
declare class aWxScenarioDiffPresentor extends aEntity {
   LeftScen: string ;
   RightScen: string ;
   TheVA: string ;
   GetLeftAndRightDescriptionForAnalyzer(leftDesc:string, rightdesc:string);
   StringExtract();
   ShowWDOnUIAgents();
   DrawRectangleOnQVPFrameAgent(PS:string, curQVPFrameAgent:aQVPAsFrameAgent);
   DrowBordersOnAllQVP(theScen:aScenario, designUIAgent:aXXXAsDesignWindowAgent, thisPS:string);
   NewListIfNeeded(L:aListOfInstances);
   FindDifferencesInListOfBetween(LeftList:string, RightList:string, DeletedList:aListOfInstances, FromChangedList:aListOfInstances, ToChangedList:aListOfInstances, AddedList:aListOfInstances, Modified:boolean);
   ShowAddedQVP(rightPS:string, rightDesignUIAgent:aXXXAsDesignWindowAgent, rightQVP:aQVarPresentor);
   ShowDeletedQVP(leftPS:string, leftDesignUIAgent:aXXXAsDesignWindowAgent, leftQVP:aQVarPresentor);
   ShowChangedQVP(leftPS:string, rightPS:string, leftDesignUIAgent:aXXXAsDesignWindowAgent, rightDesignUIAgent:aXXXAsDesignWindowAgent, leftQVP:aQVarPresentor, rightQVP:aQVarPresentor);
   ShowDiffOnScenAndQVPs(thisUIAgent:aWxScenarioDiffPresentor001Agent, PS:string);
   ShowXMLDiffOfScensInWM();
}
declare class aWxVersionAnalyzer extends aVersionAnalyzer {
   RightSourceWithMoreInfo: string ;
   LeftSourceWithMoreInfo: string ;
   HistoryVersionAnalyzers: string ;
   DisposeHistoryVAOnTerminate: string ;
   Terminate();
   _VisualDiff();
   GetInfoForEntity(curVA:aVersionAnalyzer, curEntity:aEntity, isAChange:boolean):string;
   DebugIdentifiersInSource(implem:aCUImplem);
   SkipTechnicalVarInXML(thisVarlink:string):boolean;
   GenerateObjectAsXMLNode(thisEntity:aEntity, thisXMLNode:aXMLNamedNode);
   GenerateObjectAsInXMLFile(thisEntity:aFullObject, XMLFile:aXMLFile);
   GenerateObjectAsXMLText(thisEntity:aFullObject, thisXMLtext:string);
   GenerateDiffOutOfSourceEntitiesListof(leftListof:string, rigthListof:string);
   RegenerateSourcesWithModificationInformations();
   ExecuteProcess(fullCmdLine:string):string;
   aFileAnalyzer_LaunchWindiff(theSelf:aFileAnalyzer);
   aFileAnalyzer_DoWinDiffOnTexts(theSelf:aFileAnalyzer);
   _WinDiff();
   aFileAnalyzer_LaunchWinMerge(theSelf:aFileAnalyzer, LeftDesc:string, RightDesc:string);
   aFileAnalyzer_DoWinMergeDiffOnTexts(theSelf:aFileAnalyzer, LeftDesc:string, RightDesc:string);
   aFileAnalyzer_DoWinMergeDiffOnSources(theSelf:aFileAnalyzer, LeftDesc:string, RightDesc:string, leftText:string, rightText:string);
   _WinMergeDiff();
   GetVarValueStringByName(thisObject:aLightObject, varName:string):string;
   GetConfiguredDiffTool():string;
   GlobalWD();
   doWDonMeths();
}
declare class aWxVesionAnalyserChangedScenariosRole extends aSingleRoleType {
   ConsultThisObject();
}
/**
*Module to handle some static methods for Bookmark management.
*/
declare module WxIDEBookmarks {
   var _aWxIDEEntityBookmarkCategory_NameCategory: string ;
   var _aWxIDEEntityBookmark_NameCategory: string ;
   function aWxIDEEntityBookmarkCategory_GetNameSpaceCategory():number;
   function aWxIDEEntityBookmark_GetNameSpaceCategory():number;
   function BuildBookMarkName(thisCategoryName:string, thisEntityIdentifier:string, bookmarkName:string);
   function FindOrCreateBookmarkCategory(thisCategoryName:string):aWxIDEBookmarkCategory;
   function FillPossibleLabelsForEvent(thisCategoryName:string, inlist:aListOfInstances);
   function FillPossibleLabelsForCriteria(thisCategoryName:string, inlist:aListOfInstances);
   function FindOrCreateLabel(thisCategoryName:string, labelName:string):aWxIDEBookmarkLabel;
   function CreateOrUpdateBookMarkForEntity(thisEntityIdentifier:string, thisLabelName:string, thisCategoryName:string):aWxIDEBookmarkLabel;
   function GetBookmarkLabelForEntity(thisEntityidentifier:string, thisCategoryName:string):aWxIDEBookmarkLabel;
}
declare class aWxVersionAnalyzerExtension extends aVersionAnalyserExtension {
   NewVA():aVersionAnalyzer;
   Analyse();
   NewRefdevHistoryPresentor():aLocalDevHistoryPresentor;
   RunLocalDevHistory();
}
declare class aWxUserCheckedOutEntitiesExtension extends aUserCheckedOutEntitiesExtension {
   ThePresentor: string ;
   ChangeInDeliverCategroryScen(forBaseExecution:boolean);
   DoYourJob();
}
declare class WxInDeliverPresentor_MDIChildAgent extends aOpenWhereClosedUIAgent {
   InDeliverPresentorMain: string ;
}
declare class WxInDeliverPresentorTBAgent extends aToolBarUIAgent {
}
declare class WxInDeliverPresentor_MDIChildDockedAgent extends aUIAgent {
   InDeliverPresentorMain: string ;
}
/**
*Customizaton of kernel class to add various UE Features.
*/
declare class aWxInDeliverPresentor extends aInDeliverPresentor {
   ApplyFilerOnCategories();
   Display();
   CategoryFromName();
   CategoryOf();
   NotAliveButNeverDelivered();
}
declare class WxInDeliverCategoryMainAgent extends aUIAgent {
   InDeliverCategoryListScenForaWexInDeliverCategory: string ;
   WxInDeliverCategoryFilters: string ;
   SelectUnselectall: string ;
}
declare class WxInDeliverCategoryOnlyButtonsAgent extends aUIAgent {
   checkInSelected: string ;
   DeliverSelection: string ;
   showDifferenceWithSynchVersion: string ;
   showDifferenceWithPrevVersion: string ;
   checkInAll: string ;
   DeliverAll: string ;
   UIRunClassControlerOnSelection: string ;
   UIRunClassControlerOnAll: string ;
   SelectedGB: string ;
   AllGB: string ;
   NotifyInit();
}
declare class WxIndeliver_InfoForLogEntryAgent extends aUIAgent {
   Comment: string ;
   CommentST: string ;
}
declare class InDeliverCategoryListScenForaWexInDeliverCategoryAgent extends InDeliverCategoryListScenAgent {
   WxInDeliverCategoryOnlyButtons_Vert: string ;
   SelectUnselectall: string ;
   SelectUnselectall001: string ;
   Entities_Executed();
   ChangeListCtrlStyle();
   Finalize();
   SelectUnSelectAllEntities(selectAll:boolean);
   SelectUnselectall001_ValueStored();
}
declare class aWxInDeliverCategory extends aInDeliverCategory {
   DisplayOnlyChanges: string ;
   FillListOfSelectedEntities();
   Init();
   GetRegisteredControler():aClassOrModuleIDEControler;
   GetRegisteredExControler():aWxClassOrModuleIDEControler;
   xModificationState(Entity:aEntity):string;
   __ModificationState(Entity:aEntity):string;
   CheckBeforeDeliverOrCheckIn(thisListOfEntities:aListOfInstances);
   UIRunClassControlerOnSelection();
   UIRunClassControlerOnAll();
   BuildDependencyList(fromList:aListOfInstances, fullList:aListOfInstances);
   CanRunControlerOnCategory():boolean;
   CheckFilterOnEntity(thisEntity:aEntity):boolean;
   RefreshEntitiesListFromFilter();
   SelectFromNames();
   UIDisplayCodeAnalyserOptions();
   FindExtensionInIDEContextVar(listofExtensionVar:string, ofThisClass:aClassDef):aWideExtension;
   GetIDEExtension(ofThisClass:aClassDef):aWideExtension;
   UIRunConsistencyCheckerOnSelected();
   CanRunVersionAnalyzerOnCategory():boolean;
   CanRunConsistencyCheckerOnCategory():boolean;
   CanRunReparserOnCategory():boolean;
   UIRunReparserOnSelected();
   NewVA():aVersionAnalyzer;
   showDifferenceWithPrevVersion();
   showDifferenceWithSynchVersion();
}
declare class aWxClassOrModuleIDEControler extends aClassOrModuleIDEControler {
   OnDeliver_CodeAnalyzer: string ;
   Get_OnDeliver_CodeAnalyzerFromEnvOptions():aCodeAnalyzer;
   InitCodeAnalyzerFromListOfEntities(theCA:aCodeAnalyzer, theList:aListOfInstances);
   RunCodeAnalyzerOnList(theCA:aCodeAnalyzer, theList:aListOfInstances);
   UIModifyIDEOptions(IDEOptionClassdef:aClassDef);
   RunControler_OnDeliver_ForListOfEntities(theList:aListOfInstances);
   CanRunControlerOnThisEntityCategory(thisCategory:string):boolean;
}
declare class OptionForaWexMultiUserToolsOptionAgent extends aUIAgent {
   CodeAnalyzers: string ;
   UseBaseDeliverCheckInPresentor: string ;
   StaticText: string ;
}
declare class aWxMultiUserOptions extends aOption {
   UseBaseDeliverCheckInPresentor: string ;
   CodeAnalyzers: string ;
   GetOnSaveCodeAnalyzer():aCodeAnalyzer;
   GetOnDeliverCodeAnalyzer():aCodeAnalyzer;
   InitcodeAnalyzers();
   SetDaultOptionName();
   Init();
   InitAfterLoad();
}
declare class WxInDeliverCategoryFiltersAgent extends aUIAgent {
   SelectFromNames: string ;
   SelectFromNames001: string ;
   DisplayOnlyChanges: string ;
   NameCriterium: string ;
   NotifyInit();
}
declare class WxInDeliverCategoryOnlyButtons_VertAgent extends aUIAgent {
   checkInSelected: string ;
   DeliverSelection: string ;
   showDifferenceWithSynchVersion: string ;
   showDifferenceWithPrevVersion: string ;
   UIRunClassControlerOnSelection: string ;
   UIDisplayCodeAnalyserOptions: string ;
   UIRunConsistencyCheckerOnSelected: string ;
   UIRunReparserAll: string ;
   NotifyInit();
}
declare class aWEXExportManagerExtension extends aWideExtension {
   ExportManager: string ;
   FolderParentName();
   MenuText();
   StringExtract();
   DoYourJob();
}
declare class aWEXSelectiveExportEntitiesRole extends aSingleRoleType {
   IsThisEntityApplicative(thisEntity:aEntity):boolean;
   IsDroppedObjectUsable();
   NewInstanceFromDroppedObject();
}
declare class FolderExportForaWEXSelectiveExportManagerAgent extends aUIAgent {
   ExportOnlySelectedEntities: string ;
   ContainerToExport: string ;
   StoreExternalReferencesAsName: string ;
   NotifyInit();
}
declare class FolderImportForaWEXSelectiveExportManagerAgent extends aUIAgent {
   NotifyInit();
}
declare class WEXTargetSpecificationOverrideAgent extends aUIAgent {
   HelpText: string ;
   HelpText001: string ;
   ImportTargetMappings001: string ;
   Init();
   ImportTargetMappings001_GetSubTree(pTheListOfChildren:string, theListType:aType, theParent:aLightObject):number;
}
declare class WEXSelectiveExportManagerConfirmExportAgent extends aUIAgent {
   Message: string ;
   WEXSelectiveExportManagerConfirm_Folder: string ;
}
declare class WEXSelectiveExportManagerConfirm_FolderAgent extends aFolderViewAgent {
}
declare class WEXSelectiveExportManagerConfirm_ReportAgent extends aUIAgent {
   DetailedNonExported: string ;
   Statictext: string ;
}
declare class WEXSelectiveExportManagerConfirm_ListNotExportedMasterAgent extends aUIAgent {
   DependantsButNotExportedClassesOrModules: string ;
}
declare class aWEXSelectiveExportManager extends aExportManager {
   ExportOnlySelectedEntities: string ;
   HasOutOfCatalogEntities: string ;
   UserAbort: string ;
   Message: string ;
   _IsExporting: string ;
   ImportOldPrefix: string ;
   ImportNewPrefix: string ;
   NotExportedRefEntitiesH_Table: string ;
   SelectedClassForTargetModification: string ;
   CurrentSelectedTarget: string ;
   ImportTargetMappings: string ;
   AllImportedModules: string ;
   ContainerToExport: string ;
   DependantsButNotExportedMasterEntities: string ;
   DetailedNonExported: string ;
   StoreExternalReferencesAsName: string ;
   BuildNewVersionIfNecessary(theEntity:aEntity);
   InitFilenameFromContainer(thisContainer:aWAMContainer);
   Init();
   GetEntityName(thisEntity:aEntity, theName:string);
   ProduceFullNameIdOfEntity(thisEntity:aEntity, theFullNameId:string);
   IsEntityInPerimeter(thisObject:aEntity):boolean;
   MustTreatThisEntity();
   PrepareForWorking();
   ConfirmExportWhenEntitiesNotInCatalog():boolean;
   FindOrCreateExternalRefObject(forRefObject:aEntity, externalRef:aListOfInstances, externalRef_H:aRecordHashTable):aEntity;
   BuildExternalRef(thisObject:aFullObject, externalRef:aListOfInstances, externalRef_H:aRecordHashTable);
   AddExternalReferencesInExportCatalog();
   BuildExportTransaction();
   AllIsConsistentForExport();
   FillContainer();
   AcceptTransaction();
   TogleWideIDEComments(disableIDEComments:boolean);
   DisableErrorreport();
   EnableErrorreport();
   Import();
   CheckOnlyScenOrOnlyModules():boolean;
   Export();
   NewTargetMappingFor(thisEntity:aEntity):aWEXImportTargetMapping;
   FindScenarioByName(thisName:string):aScenario;
   InitTargets();
   ParamInteract();
   IsRenameableEntity(curExpEntity:aEntity):boolean;
   PrefixAllWithTriGram();
   StringExtract();
   WEXTargetSpecificationOverride_IsValid(VarAddressInError:string, Message:string, MessageDisplayed:boolean, MessageCanBeDisplayed:boolean):boolean;
   IsValid();
   MustUpdateConfigWithStationaryEntities();
   ErrorBadLink(FromThisObject:aEntity, curType:aReferenceType, toThisObject:aEntity, msg:string);
   UpdateReftoIfNecessary();
   UpdateListofIfNecessary();
   AllIsConsistentForImport();
   GetCorrespondingEntityOf();
   AppendEntityNotFoundByNameError(theFullIdName:string, entityClass:string, entityName:string);
   FindEntityInOwner(thisOwner:aEntity, thisEntityClassName:string, thisEntityName:string):aEntity;
   FindCorrespondingEntityFromFullIdentifierName(theFullIdName:string, curOwner:aEntity, curPos:number):aEntity;
   AppendErrorReferenceNotFoundByName(fromThisObject:aEntity, toThisObject:aEntity, curVarLink:string);
   UpdateNamedLinksToLocalEntities();
   BuildImportTransaction();
   GetMasterOwnerFor(thisEntity:aEntity):aModuleDef;
   PropagateBuildNewVersionIfNecessary(theEntity:aEntity);
   BuildCorrespondingList();
   PickAfileNameForExport();
   PickAfileNameForImport();
   ExpandIds();
   _GetDBDefClassId():number;
   IsXMLDBDef(DBDefClassId:number):boolean;
   OpenExportTGV();
}
declare class aWEXContainerToExportRole extends aSingleRoleType {
   SearchAndPick();
   NewInstanceFromDroppedObject();
}
declare class aWEXImportTargetMapping001Agent extends aUIAgent {
   ExportEntity: string ;
   ExportEntityStaticText: string ;
   TargetExistingEntity: string ;
   TargetExistingEntityStaticText: string ;
   MappingKindStaticText: string ;
   MappingKind001: string ;
}
declare class aWEXImportTargetMapping extends aFullObject {
   Manager: string ;
   ExportEntity: string ;
   TargetExistingEntity: string ;
   MappingKind: string ;
   GetExportEntityName():string;
   GetExportEntityFullId():string;
   GetTargetEntityName():string;
   GetTargetEntityFullId():string;
   CheckMapping(Message:string):boolean;
   IsValid();
   StringExtract();
   BuildOwnedTargetMapping();
   IDAllocationAction():string;
}
declare class aWEXModuleDefImportTargetMapping extends aWEXImportTargetMapping {
   SubEntities: string ;
   IsClassDefForaScenario(thisModuledef:aModuleDef):boolean;
}
declare class aWEXModuleDefImportTargetMappingRoleType extends aSingleRoleType {
   ModifyThisObject();
}
declare class aWEXNoTraceErrorManager extends aErrorManager {
   RTRaiseError();
}
declare class aWEXScenarioImportTargetMapping extends aWEXImportTargetMapping {
   CheckMapping();
}
declare class aWEXSelectiveImpExpXMLDBMgr extends aXMLDBMgr {
   FindClassId();
   GetPointerFromHandle_(Handle:number):string;
   FreeHandle_(Handle:number);
   storeMainFor();
}
/**
*Do not change the name of the class (called from WCONTEXT1.CPP)
Note Seb 02/2014 : WPR1402014394  : name of the class is volountary changed
*/
declare class aWEXSelectiveImpExpXMLDBDef2 extends aXMLDBDef {
   NewDBMgr():aXMLDBMgr;
   OpenDB();
}
